const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":293,\"nextId\":293,\"documentIds\":{\"0\":\"1\",\"1\":\"1#静态资源库\",\"2\":\"1#镜像站\",\"3\":\"1#maven-仓库\",\"4\":\"1#文档地址\",\"5\":\"2\",\"6\":\"3\",\"7\":\"3#软件\",\"8\":\"3#idea插件收集\",\"9\":\"3#vscode-插件收集\",\"10\":\"4\",\"11\":\"5\",\"12\":\"6\",\"13\":\"7\",\"14\":\"8\",\"15\":\"8#maven镜像源配置\",\"16\":\"8@0\",\"17\":\"9\",\"18\":\"9#lombok错误\",\"19\":\"9#继承时出现警告解决\",\"20\":\"9#swagger-knife4j\",\"21\":\"9#请求接口文档地址失败解决\",\"22\":\"9#knife4j使用html导出接口出现打不开问题解决\",\"23\":\"9@0\",\"24\":\"9@1\",\"25\":\"10\",\"26\":\"10#find-in-set\",\"27\":\"10#递归查询\",\"28\":\"10#ddl\",\"29\":\"10@0\",\"30\":\"10@1\",\"31\":\"11\",\"32\":\"11#不常用sql方法\",\"33\":\"11#查询所有表中是否存在某个字段\",\"34\":\"11#自增序列\",\"35\":\"11#递归查询\",\"36\":\"11#父级递归查询子级\",\"37\":\"11#子级递归查询父级\",\"38\":\"11#根据父级获取子父级的组织拼接\",\"39\":\"11#根据子集获取从父级到当前子集的组织拼接\",\"40\":\"11#json操作\",\"41\":\"11#json和-jsonb操作符\",\"42\":\"11#额外jsonb操作符\",\"43\":\"11@0\",\"44\":\"11@1\",\"45\":\"12\",\"46\":\"12#错误解决\",\"47\":\"12#如果错误中有报缺少openssl1-1-1可以查看官网-中给的解决方法\",\"48\":\"12#如果centos8使用tar包进行安装可能会遇到下面的错误-error-while-loading-shared-libraries-libtinfo-so-5-cannot-open-shared-object-file-no-such-file-or-directory-解决此错误有两个方法我个人是用第二个方法解决的\",\"49\":\"12@0\",\"50\":\"13\",\"51\":\"13#下载所需要的安装包\",\"52\":\"13#安装流程\",\"53\":\"13#定时运行备份脚本\",\"54\":\"13@0\",\"55\":\"14\",\"56\":\"14#下载安装包\",\"57\":\"14#配置mysql\",\"58\":\"14#启动mysql服务\",\"59\":\"14#初始化mysql实例\",\"60\":\"14#安装mysql服务\",\"61\":\"14#修改root密码\",\"62\":\"14@0\",\"63\":\"15\",\"64\":\"15#安装nvm\",\"65\":\"15#配置下载源\",\"66\":\"15#配置全局npm\",\"67\":\"15#nvm使用\",\"68\":\"15#nvm常用命令\",\"69\":\"15@0\",\"70\":\"16\",\"71\":\"16#使用redis先试思路可行性\",\"72\":\"16#使用java来实现排行榜\",\"73\":\"16#接收数据实体类\",\"74\":\"16#排行榜工具类\",\"75\":\"16@0\",\"76\":\"16@1\",\"77\":\"17\",\"78\":\"17#概述\",\"79\":\"17#linux安装\",\"80\":\"17#测试性能\",\"81\":\"17#基础知识\",\"82\":\"17#五大数据类型\",\"83\":\"17#redis-key\",\"84\":\"17#string-字符串\",\"85\":\"17#同时设置或获取多个属性值\",\"86\":\"17#字符串范围获取或替换\",\"87\":\"17#自增或自减\",\"88\":\"17#list-列表\",\"89\":\"17#获取列表中的元素\",\"90\":\"17#移除或弹出一个元素\",\"91\":\"17#阻塞命令\",\"92\":\"17#保留区间内的元素\",\"93\":\"17#set-集合\",\"94\":\"17#交集\",\"95\":\"17#并集\",\"96\":\"17#hash\",\"97\":\"17#字段添加指定增量\",\"98\":\"17#zset-有序集合\",\"99\":\"17#对分数进行指定增量\",\"100\":\"17#geo-地理位置\",\"101\":\"17#hyperloglog-基数统计\",\"102\":\"17#stream\",\"103\":\"17#消息队列相关命令\",\"104\":\"17#消费者组相关命令\",\"105\":\"17#事务\",\"106\":\"17@0\",\"107\":\"17@1\",\"108\":\"18\",\"109\":\"18#redisconfigbean配置\",\"110\":\"18#redisutil工具类\",\"111\":\"18@0\",\"112\":\"18@1\",\"113\":\"19\",\"114\":\"19#提取公共字段\",\"115\":\"19#自动注入类\",\"116\":\"19@0\",\"117\":\"19@1\",\"118\":\"20\",\"119\":\"20#swaggerconfig\",\"120\":\"20#webconfig配置swagger\",\"121\":\"20@0\",\"122\":\"20@1\",\"123\":\"21\",\"124\":\"21@0\",\"125\":\"21@1\",\"126\":\"22\",\"127\":\"22#创建注解\",\"128\":\"22#创建拦截器\",\"129\":\"22#接口注入数据\",\"130\":\"22#将拦截器进行注册\",\"131\":\"22@0\",\"132\":\"22@1\",\"133\":\"23\",\"134\":\"23#code枚举类\",\"135\":\"23#统一返回数据类\",\"136\":\"23@0\",\"137\":\"23@1\",\"138\":\"24\",\"139\":\"24#创建脱敏枚举\",\"140\":\"24#创建脱敏注解处理类\",\"141\":\"24#创建脱敏注解\",\"142\":\"24@0\",\"143\":\"24@1\",\"144\":\"25\",\"145\":\"25#定时任务\",\"146\":\"25#案例\",\"147\":\"25#cron表达式解释\",\"148\":\"25#corn-经典表达式\",\"149\":\"25@0\",\"150\":\"25@1\",\"151\":\"26\",\"152\":\"26@0\",\"153\":\"26@1\",\"154\":\"27\",\"155\":\"27#mybaits-对象分析\",\"156\":\"27#resources\",\"157\":\"27#sqlsessionfactorybuilder\",\"158\":\"27#sqlsessionfactory\",\"159\":\"27#mybatis-单独使用\",\"160\":\"27#导入依赖\",\"161\":\"27#创建配置文件\",\"162\":\"27#数据库配置\",\"163\":\"27#sqlsession获取mapper\",\"164\":\"27#创建对应的mapper和mapper-xml\",\"165\":\"27#调用mapper\",\"166\":\"27#配置文件标签\",\"167\":\"27#mapperxml标签\",\"168\":\"27#转义字符\",\"169\":\"27@0\",\"170\":\"27@1\",\"171\":\"28\",\"172\":\"28#spring-优势\",\"173\":\"28#spring-核心容器由以下部分组成\",\"174\":\"28#控制反转-ioc\",\"175\":\"28#beanfactory\",\"176\":\"28#applicationcontext\",\"177\":\"28#classpathxmlapplicationcontext\",\"178\":\"28#filesystemxmlapplicationcontext\",\"179\":\"28#bean注入\",\"180\":\"28#di注入\",\"181\":\"28#注解注入\",\"182\":\"28#bean控制注解\",\"183\":\"28#aop\",\"184\":\"28#aspectj-对-aop-的实现\",\"185\":\"28#aop示例\",\"186\":\"28#引入依赖\",\"187\":\"28#创建业务接口与实现类\",\"188\":\"28#定义aop切面类\",\"189\":\"28#spring配置文件中注册aop代理类\",\"190\":\"28#spring-事务\",\"191\":\"28#事务传播行为常量\",\"192\":\"28#事务的粗细粒度\",\"193\":\"28#注解形式控制事务\",\"194\":\"28#导入依赖\",\"195\":\"28#添加事务注解\",\"196\":\"28#配置文件中开启事务\",\"197\":\"28@0\",\"198\":\"28@1\",\"199\":\"29\",\"200\":\"29#spring-整合-mybatis-ssm\",\"201\":\"29#依赖导入\",\"202\":\"29#数据库连接配置文件\",\"203\":\"29#配置spring\",\"204\":\"29#创建spring配置文件application-xml\",\"205\":\"29#创建mvc的配置文件\",\"206\":\"29#创建-web-xml\",\"207\":\"29#创建一个-controller-测试下是否成功\",\"208\":\"29@0\",\"209\":\"29@1\",\"210\":\"30\",\"211\":\"30#组件\",\"212\":\"30#dispatcherservlet\",\"213\":\"30#handlermapping\",\"214\":\"30#handler\",\"215\":\"30#handladapter\",\"216\":\"30#viewresolver\",\"217\":\"30#工作原理\",\"218\":\"30#注解\",\"219\":\"30#controller\",\"220\":\"30#responsebody\",\"221\":\"30#restcontroller\",\"222\":\"30#requestmapping\",\"223\":\"30#自定义拦截器\",\"224\":\"30#handlerinterceptor接口\",\"225\":\"30#prehandle\",\"226\":\"30#posthandle\",\"227\":\"30#aftercompletion\",\"228\":\"30#在配置文件中配置\",\"229\":\"30@0\",\"230\":\"30@1\",\"231\":\"31\",\"232\":\"31#创建相关注解\",\"233\":\"31#fieldrequired\",\"234\":\"31#headverification\",\"235\":\"31#notfieldrequired\",\"236\":\"31#notheadrequired\",\"237\":\"31#工具类\",\"238\":\"31#示例listener\",\"239\":\"31@0\",\"240\":\"31@1\",\"241\":\"32\",\"242\":\"32#简单使用\",\"243\":\"32#json字符串与javaobject相互转换\",\"244\":\"32#jsonarray与java的list相互转换\",\"245\":\"32@0\",\"246\":\"32@1\",\"247\":\"33\",\"248\":\"33#引入依赖\",\"249\":\"33#httpclient-发起请求\",\"250\":\"33@0\",\"251\":\"33@1\",\"252\":\"34\",\"253\":\"34#工具类\",\"254\":\"34#案例\",\"255\":\"34@0\",\"256\":\"34@1\",\"257\":\"35\",\"258\":\"35@0\",\"259\":\"35@1\",\"260\":\"36\",\"261\":\"36#介绍\",\"262\":\"36#案例\",\"263\":\"36#创建工厂接口\",\"264\":\"36#创建相应形状类\",\"265\":\"36#使用工厂创建对应形状\",\"266\":\"36#测试是否可行\",\"267\":\"36@0\",\"268\":\"36@1\",\"269\":\"37\",\"270\":\"37#实现代码\",\"271\":\"37#创建产品实体类\",\"272\":\"37#创建责任链抽象类\",\"273\":\"37#创建长度处理器\",\"274\":\"37#创建宽度处理器\",\"275\":\"37#创建高度处理器\",\"276\":\"37#调用测试\",\"277\":\"37#工厂创建责任链\",\"278\":\"37@0\",\"279\":\"37@1\",\"280\":\"38\",\"281\":\"39\",\"282\":\"40\",\"283\":\"41\",\"284\":\"42\",\"285\":\"43\",\"286\":\"44\",\"287\":\"45\",\"288\":\"46\",\"289\":\"47\",\"290\":\"48\",\"291\":\"49\",\"292\":\"50\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,6],\"2\":[1,11],\"3\":[2,15],\"4\":[1,58],\"5\":[1,19],\"6\":[1],\"7\":[1,68],\"8\":[1,13],\"9\":[2,9],\"10\":[1,18],\"11\":[1,39],\"12\":[1,15],\"13\":[1,18],\"14\":[1],\"15\":[1,29],\"16\":[null,null,1],\"17\":[1],\"18\":[1],\"19\":[1,10],\"20\":[2],\"21\":[1,53],\"22\":[1,32],\"23\":[null,null,1],\"24\":[null,null,1],\"25\":[1],\"26\":[3,24],\"27\":[1,42],\"28\":[1,16],\"29\":[null,null,2],\"30\":[null,null,1],\"31\":[1],\"32\":[1],\"33\":[1,14],\"34\":[1,32],\"35\":[1],\"36\":[1,20],\"37\":[1,20],\"38\":[1,36],\"39\":[1,31],\"40\":[1,2],\"41\":[2,2],\"42\":[1,1],\"43\":[null,null,2],\"44\":[null,null,1],\"45\":[1,26],\"46\":[1],\"47\":[1,45],\"48\":[2,15],\"49\":[null,null,1],\"50\":[1],\"51\":[1,16],\"52\":[1,87],\"53\":[1,97],\"54\":[null,null,1],\"55\":[1],\"56\":[1,7],\"57\":[1,44],\"58\":[1],\"59\":[1,5],\"60\":[1,12],\"61\":[1,22],\"62\":[null,null,1],\"63\":[1],\"64\":[1,13],\"65\":[1,12],\"66\":[1,37],\"67\":[1,15],\"68\":[1,46],\"69\":[null,null,1],\"70\":[1],\"71\":[1,44],\"72\":[1,1],\"73\":[1,47],\"74\":[1,167],\"75\":[null,null,2],\"76\":[null,null,1],\"77\":[1],\"78\":[1,52],\"79\":[1,58],\"80\":[1,26],\"81\":[1,31],\"82\":[1],\"83\":[2,35],\"84\":[3,25],\"85\":[1,19],\"86\":[1,13],\"87\":[1,14],\"88\":[3,58],\"89\":[1,13],\"90\":[1,23],\"91\":[1,23],\"92\":[1,10],\"93\":[3,40],\"94\":[1,9],\"95\":[1,9],\"96\":[1,47],\"97\":[1,9],\"98\":[3,76],\"99\":[1,6],\"100\":[3,39],\"101\":[3,28],\"102\":[1,20],\"103\":[1,50],\"104\":[1,57],\"105\":[1,31],\"106\":[null,null,1],\"107\":[null,null,1],\"108\":[1],\"109\":[1,42],\"110\":[1,303],\"111\":[null,null,2],\"112\":[null,null,1],\"113\":[1],\"114\":[1,70],\"115\":[1,55],\"116\":[null,null,2],\"117\":[null,null,1],\"118\":[1,24],\"119\":[1,73],\"120\":[1,72],\"121\":[null,null,2],\"122\":[null,null,1],\"123\":[1,67],\"124\":[null,null,2],\"125\":[null,null,1],\"126\":[2],\"127\":[1,15],\"128\":[1,92],\"129\":[1,77],\"130\":[1,61],\"131\":[null,null,2],\"132\":[null,null,1],\"133\":[1],\"134\":[1,17],\"135\":[1,58],\"136\":[null,null,2],\"137\":[null,null,1],\"138\":[1],\"139\":[1,30],\"140\":[1,90],\"141\":[1,56],\"142\":[null,null,2],\"143\":[null,null,1],\"144\":[1],\"145\":[1,14],\"146\":[1,24],\"147\":[1,75],\"148\":[2,46],\"149\":[null,null,2],\"150\":[null,null,1],\"151\":[2,17],\"152\":[null,null,2],\"153\":[null,null,1],\"154\":[1,65],\"155\":[2],\"156\":[1,7],\"157\":[1,24],\"158\":[1,38],\"159\":[2,4],\"160\":[1,51],\"161\":[1,79],\"162\":[1,20],\"163\":[1,78],\"164\":[2,63],\"165\":[1,63],\"166\":[1,49],\"167\":[1,111],\"168\":[1,16],\"169\":[null,null,2],\"170\":[null,null,1],\"171\":[1,6],\"172\":[2,40],\"173\":[2,64],\"174\":[3],\"175\":[1,27],\"176\":[1,16],\"177\":[1,18],\"178\":[1,22],\"179\":[1],\"180\":[1,51],\"181\":[1,20],\"182\":[1,21],\"183\":[1,60],\"184\":[4,63],\"185\":[1],\"186\":[1,19],\"187\":[1,16],\"188\":[1,148],\"189\":[1,69],\"190\":[2,33],\"191\":[1,53],\"192\":[1,13],\"193\":[1],\"194\":[1,28],\"195\":[1,58],\"196\":[1,65],\"197\":[null,null,2],\"198\":[null,null,1],\"199\":[1],\"200\":[5],\"201\":[1,153],\"202\":[1,20],\"203\":[1,9],\"204\":[2,109],\"205\":[1,65],\"206\":[3,73],\"207\":[3,35],\"208\":[null,null,2],\"209\":[null,null,1],\"210\":[2],\"211\":[1],\"212\":[1,16],\"213\":[1,13],\"214\":[1,15],\"215\":[1,9],\"216\":[1,20],\"217\":[1,25],\"218\":[1],\"219\":[2,11],\"220\":[2,3],\"221\":[2,13],\"222\":[1,32],\"223\":[1,4],\"224\":[1],\"225\":[1,7],\"226\":[1,9],\"227\":[1,12],\"228\":[1,30],\"229\":[null,null,2],\"230\":[null,null,1],\"231\":[2],\"232\":[1],\"233\":[1,24],\"234\":[1,19],\"235\":[1,25],\"236\":[1,22],\"237\":[1,147],\"238\":[1,67],\"239\":[null,null,2],\"240\":[null,null,2],\"241\":[1,23],\"242\":[1],\"243\":[1,37],\"244\":[1,43],\"245\":[null,null,2],\"246\":[null,null,2],\"247\":[1],\"248\":[1,18],\"249\":[2,53],\"250\":[null,null,2],\"251\":[null,null,2],\"252\":[2,40],\"253\":[1,50],\"254\":[1,159],\"255\":[null,null,2],\"256\":[null,null,2],\"257\":[1,168],\"258\":[null,null,2],\"259\":[null,null,2],\"260\":[1],\"261\":[1,4],\"262\":[1,2],\"263\":[1,25],\"264\":[1,28],\"265\":[1,43],\"266\":[1,19],\"267\":[null,null,2],\"268\":[null,null,2],\"269\":[1,13],\"270\":[1],\"271\":[1,30],\"272\":[1,37],\"273\":[1,31],\"274\":[1,29],\"275\":[1,26],\"276\":[1,31],\"277\":[1,43],\"278\":[null,null,2],\"279\":[null,null,2],\"280\":[1,3],\"281\":[1],\"282\":[1],\"283\":[1],\"284\":[1],\"285\":[1],\"286\":[1],\"287\":[1],\"288\":[1],\"289\":[1],\"290\":[1],\"291\":[1],\"292\":[1]},\"averageFieldLength\":[1.206874396506165,35.796859066469516,0.6302741702850576],\"storedFields\":{\"0\":{\"h\":\"开发相关\"},\"1\":{\"h\":\"静态资源库\",\"t\":[\"字节跳动静态资源公共库: https://cdn.bytedance.com/\"]},\"2\":{\"h\":\"镜像站\",\"t\":[\"清华大学镜像站: https://mirrors.tuna.tsinghua.edu.cn/\",\"华为云镜像站: https://mirrors.huaweicloud.com/home\"]},\"3\":{\"h\":\"maven 仓库\",\"t\":[\"阿里云Maven仓库: https://developer.aliyun.com/mvn/search\",\"maven中央仓库: https://mvnrepository.com/\",\"华为仓库: https://mirrors.huaweicloud.com/repository/maven/\"]},\"4\":{\"h\":\"文档地址\",\"t\":[\"knife4j 文档: https://doc.xiaominfo.com/docs/quick-start\",\"easyExcel文档: https://easyexcel.opensource.alibaba.com/docs/current/\",\"HttpClient文档: https://hc.apache.org/httpcomponents-client-4.5.x/quickstart.html\",\"dubbo文档: https://cn.dubbo.apache.org/zh-cn/overview/home/\",\"w3c中的fastjson文档: https://www.w3cschool.cn/fastjson/\",\"github中的fastjson2文档: https://github.com/alibaba/fastjson2\",\"netty文档: https://dongzl.github.io/netty-handbook/#/\",\"github-netty: https://github.com/dongzl/netty-handbook/tree/master/docs\",\"Markdown官网地址: https://markdown.com.cn/basic-syntax/links.html\",\"apachecharts(vue折线图等): https://echarts.apache.org/examples/zh/index.html#chart-type-line\"]},\"5\":{\"h\":\"Lunix资源下载站\",\"t\":[\"deb/rpm/...资源下载: https://pkgs.org/\",\"ubuntu资源下载站: http://archive.ubuntu.com/ubuntu/pool/\",\"上海交通大学Linux用户资源: https://mirrors.sjtug.sjtu.edu.cn/\"]},\"6\":{\"h\":\"软件收集\"},\"7\":{\"h\":\"软件\",\"t\":[\"JD_GUI jdk反编译软件: http://java-decompiler.github.io/\",\"Geek [win卸载软件]: https://geekuninstaller.com/download\",\"everything [win文件搜索软件]: https://www.voidtools.com/zh-cn/downloads/\",\"7-zip [压缩软件-多平台]: https://7-zip.org/\",\"Honeyview·蜂蜜浏览器-图片查看器[win]: https://www.bandisoft.com/honeyview/\",\"Snipaste [win截屏软件]\",\"官网: https://zh.snipaste.com/download.html\",\"蓝奏云: https://wwwc.lanzouo.com/iG1Wp04xfhni\",\"dism++ [win系统优化软件]\",\"github: https://github.com/Chuyu-Team/Dism-Multi-language/releases\",\"蓝奏云: https://wwwc.lanzouo.com/i2LYu1l5c8oh>\",\"BC uninstaller [win卸载软件]: https://www.bcuninstaller.com/\",\"PDFgear [PDF- 多平台]: https://www.pdfgear.com/zh/\",\"lky_OfficeTools [winOffice部署软件]\",\"github: https://github.com/OdysseusYuan/LKY_OfficeTools/releases\",\"MyComputerManager [win快捷方式移除软件]\",\"github: https://github.com/1357310795/MyComputerManager/releases\",\"notepad-- 多平台文本编辑器\",\"gitee: https://gitee.com/cxasm/notepad--/releases\"]},\"8\":{\"h\":\"idea插件收集\",\"t\":[\"mybatisX: mapper-xml相互跳转\",\"swaggerTools: 快速生成swagger注释\",\"TONGYI Lingma is an AI coding assistant: 通灵义码\"]},\"9\":{\"h\":\"vscode 插件收集\",\"t\":[\"Draw.io Integration 流程图绘图\",\"使用方式: 创建后缀为dio/drawIo/drawIo.png 都可以\"]},\"10\":{\"h\":\"图床\",\"t\":[\"SM.MS 图床: https://sm.ms/home/picture\",\"jpg.dog图床: https://jpg.dog/\",\"postimages图床: https://postimages.org\",\"路过图床: https://imgse.com/\"]},\"11\":{\"h\":\"杂项\",\"t\":[\"工具网: https://ctool.dev/\",\"油猴脚本网址: https://greasyfork.org/zh-CN\",\"下次一定网: https://www.iiice.cn/#/\",\"Age动漫网 :https://www.agedm.org/\",\"数学科学计算器: https://www.desmos.com/scientific?lang=zh-CN\",\"在线代码高亮(word粘贴使用): https://highlightcode.com/\",\"Banner图在线生成工具: https://www.bootschool.net/ascii\",\"Unicode 符号表 : https://symbl.cc/cn/unicode/table/#letterlike-symbols\",\"奇Q工具网(在线cron生成器): https://qqe2.com/cron\"]},\"12\":{\"h\":\"软件病毒检测\",\"t\":[\"微步云沙箱: https://s.threatbook.com/\",\"VirusTotal: https://www.virustotal.com/gui/home/upload\",\"大圣云沙箱: https://sandbox.freebuf.com/service\"]},\"13\":{\"h\":\"资源分享\",\"t\":[\"浏览器插件站[crx搜搜]: https://www.crxsoso.com/\",\"记忆力博客网盘: http://qq351605872.ysepan.com/\",\"云盘资源搜索: https://miaosou.fun/\",\"我的小站-阿里云盘资源共享站: https://pan666.net/\"]},\"14\":{\"h\":\"Maven\"},\"15\":{\"h\":\"maven镜像源配置\",\"t\":[\"maven 配置华为云镜像官方文档地址: https://www.huaweicloud.com/special/maven-jingxiang.html\",\"<mirror> <id>huaweicloud</id> <mirrorOf>*</mirrorOf> <url>https://repo.huaweicloud.com/repository/maven/</url> </mirror>\",\"maven 配置阿里云镜像官网指南: https://developer.aliyun.com/mvn/guide\",\"<mirror> <id>aliyunmaven</id> <mirrorOf>*</mirrorOf> <name>阿里云公共仓库</name> <url>https://maven.aliyun.com/repository/public</url> </mirror>\"]},\"16\":{\"c\":[\"后端开发\"]},\"17\":{\"h\":\"错误收集\"},\"18\":{\"h\":\"Lombok错误\"},\"19\":{\"h\":\"继承时出现警告解决\",\"t\":[\"springboot项目根下创建lombok.config文件(与启动类平级). 添加以下内容即可不再提示该警告.\",\"# lombok 配置类 config.stopbubbling=true lombok.equalsandhashcode.callsuper=call\"]},\"20\":{\"h\":\"swagger/knife4j\"},\"21\":{\"h\":\"请求接口文档地址失败解决\",\"t\":[\"原因: 我们使用拦截器后需要注册,注册后会将所有的请求都进行拦截,如果我们不将所有请求拦截就不会出现这些个情况,但是我们是不能放开所有请求的,所以我们需要在全局配置中进行配置.\",\"@Configuration @RequiredArgsConstructor public class WebConfig implements WebMvcConfigurer { private final AuthorityInterceptor authorityInterceptor; // 全局拦截器 // 需要放开的接口请求,因为我这边使用的是knife4j的4.3版本所以放开的有一些多. private static final List<String> exclude_path = Arrays.asList(\\\"/login/*\\\", \\\"/error\\\", \\\"/swagger-resources\\\", \\\"/swagger-resources/configuration/ui\\\", \\\"/doc.html\\\"); public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(authorityInterceptor) .addPathPatterns(\\\"/**\\\") .excludePathPatterns(exclude_path); } public void addResourceHandlers(ResourceHandlerRegistry registry) { // swagger配置 registry.addResourceHandler(\\\"/**\\\") .addResourceLocations(\\\"classpath:/static/\\\"); registry.addResourceHandler(\\\"swagger-ui.html\\\", \\\"doc.html\\\") .addResourceLocations(\\\"classpath:/META-INF/resources/\\\"); registry.addResourceHandler(\\\"/webjars/**\\\") .addResourceLocations(\\\"classpath:/META-INF/resources/webjars/\\\"); } }\"]},\"22\":{\"h\":\"knife4j使用html导出接口出现打不开问题解决\",\"t\":[\"导出html文件后页面怎么刷新都无法正常显示页面,f12打开devtools中网络请求时发现vue.js/antd.min.js两个文件找不到. 这里我们可以打开导出的html文件找多两个js引用,将其替换为字节公共库中的资源就可以打开. 这里示例展示我这边找到的文件替换的js 字节公共库地址: https://cdn.bytedance.com/\",\" <script src=\\\"https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue/2.6.9/vue.js\\\"></script> <script src=\\\"https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/ant-design-vue/1.5.0/antd.min.js\\\"></script>\"]},\"23\":{\"c\":[\"后端开发\"]},\"24\":{\"c\":[\"java\"]},\"25\":{\"h\":\"MySql\"},\"26\":{\"h\":\"find_in_set\",\"t\":[\"find_in_set 使用方式与 in 相似只不过参数变为了使用 ,分割的字符串,且写法也有一些区别.\",\"/* 示例 当在select时会如果搜索值在strlist中存在那么会返回查询的值,如下例就是会返回1 */ select find_in_set(1,'1,2,3,4'); /* 示例 当在where作为条件时则是会返回满足条件的数据 当查询的数据为2时则是查询name中包含2的数据就会返回 */ select * from ((select '1,2,3,4' as name) union (select '1,2,3' as name) union (select '1,2' as name) union (select '1' as name)) users where find_in_set(2,name)\"]},\"27\":{\"h\":\"递归查询\",\"t\":[\"父级递归查询子级\",\"WITH RECURSIVE cte as ( select id,name,parent_id from '要查询的表' where id = '父级id' union ALL select temp.id,temp.name,temp.parent_id from '要查询的表' temp,cte c where temp.parent_id = c.id ) select * from cte\",\"子id递归查询父级\",\"WITH RECURSIVE cte as ( select id,name,parent_id from org where id = '子集id' union ALL select temp.id,temp.name,temp.parent_id from org temp,cte c where temp.id = c.parent_id ) select * from cte\",\"输入父级获取子父级的组织拼接\",\"/* 输出示例: 测试顶级部门 测试顶级部门->测试部门1 测试顶级部门->测试部门1 -> 测试部门2 测试顶级部门->测试部门1 -> 测试部门2 -> 测试部门3 */ WITH RECURSIVE cte as ( select id,name,parent_id,name as path from '要查询的表' where id = '父级id' union ALL select temp.id,temp.name,temp.parent_id, concat(c.path ,'->',temp.name )as path from '要查询的表' temp,cte c where temp.parent_id = c.id ) select * from cte\",\"输入子集获取从父级到当前子集的组织拼接\",\"/* 输出示例: 测试顶级部门 测试顶级部门->测试部门1 测试顶级部门->测试部门1 -> 测试部门2 测试顶级部门->测试部门1 -> 测试部门2 -> 测试部门3 */ WITH RECURSIVE cte as ( select id,name,parent_id,name as path from '要查询的表' where id = '子集ID' union ALL select temp.id,temp.name,temp.parent_id, concat(temp.name ,'->', c.path )as path from '要查询的表' temp,cte c where temp. id = c.parent_id ) select * from cte\",\"ps: 前四个写法需要注意 MySql 版本为 8.0 以上,可以使用 select version(); 来查看版本号\"]},\"28\":{\"h\":\"ddl\",\"t\":[\"-- 创建数据库,数据库不存在时创建 create database if not exists `database_name` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\"]},\"29\":{\"c\":[\"后端开发\",\"数据库\"]},\"30\":{\"c\":[\"sql\"]},\"31\":{\"h\":\"PostgreSql\"},\"32\":{\"h\":\"不常用sql方法\"},\"33\":{\"h\":\"查询所有表中是否存在某个字段\",\"t\":[\"select * from information_schema.columns WHERE table_schema = 'public' and column_name = '要查询的字段名';\"]},\"34\":{\"h\":\"自增序列\",\"t\":[\"-- 生成自增序列 定义自增序列时一般使用 表名称_id_seq 来表示 CREATE SEQUENCE \\\"public\\\".\\\"xxx_id_seq\\\" INCREMENT 1 MINVALUE 1 NO MAXVALUE START 1 CACHE 1; -- 将自增序列以下面这种形式弄好后,放至ID 默认值即可 nextval('xxx_id_seq'::regclass) -- 查询序列最大值 select nextval('xxx_id_seq'::regclass) --将当前序列值设置为当前表最大ID值 SELECT setval( 'xxx_id_seq', (SELECT MAX(id) FROM `表名称` ) +1 );\"]},\"35\":{\"h\":\"递归查询\"},\"36\":{\"h\":\"父级递归查询子级\",\"t\":[\"WITH RECURSIVE cte as ( select id,name,parent_id from '要查询的表' where id = '父级ID' union all select temp.id,temp.name,temp.parent_id from '要查询的表' temp INNER JOIN cte c on temp.parent_id = c.id ) select * from cte\"]},\"37\":{\"h\":\"子级递归查询父级\",\"t\":[\"WITH RECURSIVE cte as ( select id,name,parent_id from '要查询的表' where id = '子集ID' union all select temp.id,temp.name,temp.parent_id from '要查询的表' temp INNER JOIN cte c on temp.id = c.parent_id ) select * from cte\"]},\"38\":{\"h\":\"根据父级获取子父级的组织拼接\",\"t\":[\"/* 输出示例: 测试顶级部门 测试顶级部门->测试部门1 测试顶级部门->测试部门1 -> 测试部门2 测试顶级部门->测试部门1 -> 测试部门2 -> 测试部门3 */ WITH RECURSIVE cte as ( select id,name,parent_id,cast(name as TEXT) as path from '要查询的表' where id = '父级ID' and is_delete = 0 union all select temp.id,temp.name,temp.parent_id,cast( c.path|| '->'|| temp.name as TEXT)path from '要查询的表' temp INNER JOIN cte c on temp.parent_id = c. id where temp.is_delete = 0 ) select * from cte\"]},\"39\":{\"h\":\"根据子集获取从父级到当前子集的组织拼接\",\"t\":[\"/* 输出示例: 测试顶级部门 测试顶级部门->测试部门1 测试顶级部门->测试部门1 -> 测试部门2 测试顶级部门->测试部门1 -> 测试部门2 -> 测试部门3 */ WITH RECURSIVE cte as ( select id,name,parent_id,cast(name as TEXT) as path from '要查询的表' where id = '子集ID' union all select temp.id,temp.name,temp.parent_id,cast( temp.name || '->'|| c.path as TEXT)path from '要查询的表' temp INNER JOIN cte c on temp.id = c. parent_id ) select * from cte\"]},\"40\":{\"h\":\"Json操作\",\"t\":[\"可以参考官网Json 字符串的解释\"]},\"41\":{\"h\":\"json和 jsonb操作符\",\"t\":[\"json&jsonb\"]},\"42\":{\"h\":\"额外jsonb操作符\",\"t\":[\"jsonb\"]},\"43\":{\"c\":[\"后端开发\",\"数据库\"]},\"44\":{\"c\":[\"sql\"]},\"45\":{\"h\":\"Centos7安装emqx\",\"t\":[\"我们可以去 emqx 中下载对应的版本,当然你也可以去看 emqx 官方文档.\",\"下载对应的安装包可以去 emqx官网下载\",\"wget https://www.emqx.com/zh/downloads/broker/5.0.9/emqx-5.0.9-el7-amd64.rpm sudo yum install emqx-5.0.9-el7-amd64.rpm emqx start # 或者执行: sudo systemctl start emqx\"]},\"46\":{\"h\":\"错误解决\"},\"47\":{\"h\":\"中给的解决方法\",\"t\":[\"wget https://www.openssl.org/source/openssl-1.1.1c.tar.gz tar zxf openssl-1.1.1c.tar.gz cd openssl-1.1.1c ./config make test # 执行测试；如果输出 PASS 则继续 # 如果这一步报 Parse errors: No plan found in TAP output 那么执行 yum install perl-Test-Simple 后消失 make install # 为了确保库的引用可以之心下面两行,当然可以选择不执行 ln -s /usr/local/lib64/libssl.so.1.1 /usr/lib64/libssl.so.1.1 ln -s /usr/local/lib64/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1\"]},\"48\":{\"h\":\"如果Centos8使用tar包进行安装可能会遇到下面的错误 解决此错误有两个方法我个人是用第二个方法解决的\",\"t\":[\"运行 yum install libtinfo.so.5\",\"在 tar 解压的包中找到 dynlibs 将这个目录下的 libtinfo.so.5 复制到 /usr/lib64 下即可解决\"]},\"49\":{\"c\":[\"linux\"]},\"50\":{\"h\":\"Centos7安装Mysql8\"},\"51\":{\"h\":\"下载所需要的安装包\",\"t\":[\"本次下载包所用的是清华大学镜像站中提供的mysql包. 下载包时需要下载四个类型的Rpm文件\",\"mysql-community-libs-8.0.33-1.el7.x86_64.rpm\",\"mysql-community-common-8.0.33-1.el7.x86_64.rpm\",\"mysql-community-server-8.0.33-1.el7.x86_64.rpm\",\"mysql-community-client-8.0.33-1.el7.x86_64.rpm\"]},\"52\":{\"h\":\"安装流程\",\"t\":[\"查看与卸载原有的包\",\"# 查看是否存在安装包 rpm -qa|grep mariadb # 存在的话卸载当前已安装的包 rpm -e --nodeps mariadb-libs\",\"安装RPM包\",\"sudo rpm -ivh mysql*.rpm --nodeps --force\",\"启动Mysql和查看是否启动成功\",\"systemctl start mysqld systemctl status mysqld\",\"获取临时密码\",\"grep 'temporary password' /var/log/mysqld.log # 执行后 # [root@VM-24-10-centos temp]# grep 'temporary password' /var/log/mysqld.log # 2023-06-30T01:28:56.524220Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: tXdMBrtik2<d\",\"修改Root密码\",\"-- 目前Mysql8 不支持简单密码了,需要使用简单密码时需要另做修改 ALTER USER 'root'@'localhost' IDENTIFIED BY 'mysql密码';\",\"授权远程链接\",\"SHOW databases; USE mysql; UPDATE user SET host = \\\"%\\\" WHERE user='root'; SELECT host, user, authentication_string, plugin FROM user; FLUSH privileges;\",\"Mysql8 设置简单密码\",\"SHOW VARIABLES LIKE 'validate_password%'; set global validate_password.policy=0; set global validate_password.length=1; ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';\"]},\"53\":{\"h\":\"定时运行备份脚本\",\"t\":[\"写shell脚本时不要再win下写好再放进去.不然会出现奇怪的问题\",\"#!/bin.sh # mysql备份使用的shell脚本 #includ <studio.h> #includ <time.h> #includ <stdlib.h> #includ <sys/time.h> log=\\\"/usr/local/mysql-back/mysql-echo.log\\\" echo $(date +\\\"%Y-%m-%d %H:%M:%S\\\")\\\"脚本执行开始\\\">> $log; data_time=$(date '+%Y%m%d') path=\\\"/usr/local/mysql-back/${data_time}\\\" if [ ! -d $path ]; then echo \\\"文件不存在! 创建文件夹\\\" >> $log sudo mkdir $path fi mysqldump -uroot -p`Mysql密码` 导出的数据库名称 > /usr/local/mysql-back/${data_time}/导出的数据库名称.sql echo \\\"执行结束\\\" >> $log echo \\\"开始移除7天之前的备份数据\\\" >> $log # 移除几天前就将 7 改为几天 daysAgo=$(date -d \\\"7 day ago \\\"$date '+%Y%m%d'); function del_directory(){ if [ $(($1)) -lt $(($daysAgo)) ]; then echo \\\"移除 ${1} 目录\\\" >> $log `rm -rf $1` fi } function read_dir() { #注意此处这是两个反引号，表示运行系统命令 for file in `ls $1` do if [ -d $file ];then del_directory $file fi done } #读取第一个参数 read_dir $1 echo \\\"结束删除之前备份数据\\\" >> $log echo $(date +\\\"%Y-%m-%d %H:%M:%S\\\")\\\"脚本执行结束\\\">> $log;\",\"# 输入下面命令可以进到编辑页面 crontab -e # 将下面这个定时任务写进去 00 1 * * * '/usr/local/mysql-back/mysql-back.sh' > /usr/local/mysql-back/back-err.log & # 下面命令可以查看当前有的定时任务 crontab -l\",\"# 还原命令 mysql -uroot -p`Mysql密码` < db_202306301501.sql # 指定库还原 mysql -uroot -p`Mysql密码` databaseName < db_202306301501.sql\"]},\"54\":{\"c\":[\"linux\"]},\"55\":{\"h\":\"Win安装Mysql8\"},\"56\":{\"h\":\"下载安装包\",\"t\":[\"官网下载地址为: https://dev.mysql.com/downloads/mysql/\",\"mysql下载\"]},\"57\":{\"h\":\"配置Mysql\",\"t\":[\"MySQL根目录下创建my.ini文件\",\"[mysql] ; 配置MySQL默认编码 default-character-set=utf8mb4 [mysqld] port=3306 ; 设置mysql的安装目录 basedir=D:/devTools/mysql/mysql-8.3.0/ ; mysql 库数据存储地址 datadir=D:/devTools/mysql/data ; 默认数据库引擎 default-storage-engine=InnoDB ; 错误日志收集地址 log-error=\\\"D:\\\\devTools\\\\mysql\\\\logs.err\\\" innodb_fast_shutdown = 0 init_connect='SET collation_connection = utf8mb4_unicode_ci' init_connect='SET collation_database = utf8mb4_unicode_ci' ; 超时设置 wait_timeout=2147483 interactive_timeout=2147483\"]},\"58\":{\"h\":\"启动Mysql服务\"},\"59\":{\"h\":\"初始化Mysql实例\",\"t\":[\"mysqld --initialize --user=mysql --console\",\"初始化日志输出\"]},\"60\":{\"h\":\"安装Mysql服务\",\"t\":[\"# 如果之前已经存在过mysql服务需要先删除掉 sc declete mysql # 安装mysql服务 mysqld install # 启动mysql服务 net start mysql\",\"安装成功示例: \"]},\"61\":{\"h\":\"修改Root密码\",\"t\":[\"-- 目前Mysql8 不支持简单密码了,需要使用简单密码时需要另做修改 ALTER USER 'root'@'localhost' IDENTIFIED BY 'mysql密码'; -- 下面是设置简单密码 SHOW VARIABLES LIKE 'validate_password%'; set global validate_password.policy=0; set global validate_password.length=1; ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';\"]},\"62\":{\"c\":[\"win\"]},\"63\":{\"h\":\"nvm\"},\"64\":{\"h\":\"安装NVM\",\"t\":[\"如果已经安装了node请先卸载.\",\"从github中找到nvm所在仓库进行下载.\",\"nvm下载地址:https://github.com/coreybutler/nvm-windows/releases\",\"nvm下载时请选择下图所框选的包 \",\"下载的虽然是压缩包但是解压后是exe安装包. \"]},\"65\":{\"h\":\"配置下载源\",\"t\":[\"在nvm安装根目录[也就是安装时配置的目录]下找到配置文件 \",\"配置nvm下载源\",\"node_mirror https://npmmirror.com/mirrors/node/ npm_mirror: https://npmmirror.com/mirrors/npm/\",\"配置下载源\"]},\"66\":{\"h\":\"配置全局NPM\",\"t\":[\"npm config set prefix \\\"D:\\\\devTools\\\\nvm\\\\npm-repository\\\" 配置npm下载包时的全局包路径\",\"npm config set registry https://registry.npmmirror.com 安装全局npm，不同的node都使用这个npm。想更新全局的npm的话首先删除全局路径(就是上一行命令的地址，可以使用npm config ls查看)下的npm，再执行一次这个命令即可。\",\"在用户变量中添加 NPM_HOME = E:\\\\nvm\\\\npm，path中添加%NPM_HOME%。这里需要注意的是，%NPM_HOME%要添加在%NVM_SYMLINK%之前，避免npm访问到的是nodejs中自带的npm包管理工具。\",\"ps: npmmirror 镜像站 https://www.npmmirror.com/\"]},\"67\":{\"h\":\"nvm使用\",\"t\":[\"查看nvm版本号: nvm version 查看网络可以安装的版本: nvm list available\",\"nvm安装版本查看\",\"指定一个版本进行安装: nvm install 18.20.2 查看已安装的node版本: nvm list\",\"选择一个版本进行使用: nvm use 18.20.2\"]},\"68\":{\"h\":\"nvm常用命令\",\"t\":[\"命令\",\"说明\",\"nvm list\",\"查看已经安装的版本\",\"nvm list installed\",\"查看已经安装的版本\",\"nvm list available\",\"查看网络可以安装的版本\",\"nvm arch\",\"查看当前系统的位数和当前nodejs的位数\",\"nvm install [arch]\",\"安装制定版本的node 并且可以指定平台 version 版本号 arch 平台\",\"nvm on\",\"打开nodejs版本控制\",\"nvm off\",\"关闭nodejs版本控制\",\"nvm proxy [url]\",\"查看和设置代理\",\"nvm node_mirror [url]\",\"设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/\",\"nvm npm_mirror [url]\",\"设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是：https://github.com/npm/npm/archive/.\",\"nvm uninstall\",\"卸载指定的版本\",\"nvm use [version] [arch]\",\"切换指定的node版本和位数\",\"nvm root [path]\",\"设置和查看root路径\",\"nvm version\",\"查看当前的版本\"]},\"69\":{\"c\":[\"win\"]},\"70\":{\"h\":\"redis设计实时排行榜\"},\"71\":{\"h\":\"使用redis先试思路可行性\",\"t\":[\"思路:\",\"由于redis的sort排序仅支持一个字段进行升序或降序,那么可以考虑将一个字段变更为升序排序且由于我们这边是以考试为思路来设计所以可以考虑使用考试的最高分减去当前人的考试分数获取一个新的升序分数.\",\"同分数时我们需要按照考试是时长进行升序,由此我们可以思考将两个分数组装为一个double类型的分数来进行排序,由此我们可以进行尝试是否可行\",\"准备测试数据\",\"# 我们使用hash来将各个数据进行存储 hmset exam_1_user:2001 examId 1 userId 2001 score 80 examTime 81 sortScore 20.81 hmset exam_1_user:2002 examId 1 userId 2002 score 82 examTime 83 sortScore 18.83 hmset exam_1_user:2003 examId 1 userId 2003 score 81 examTime 90 sortScore 19.90 hmset exam_1_user:2004 examId 1 userId 2004 score 90 examTime 80 sortScore 10.80 hmset exam_1_user:2005 examId 1 userId 2005 score 90 examTime 70 sortScore 10.70 hmset exam_1_user:2006 examId 1 userId 2006 score 90 examTime 90 sortScore 10.90 # 将其唯一值设置为外部列表进行存储且使用这个来进行存储 rpush exam_1_user_sort 2001 2002 2003 2004 2005 2006\",\"我们使用sort将其进行排序后输出key\",\"sort exam_1_user_sort by exam_1_user:*->sortScore asc get # # 输出结果为: 2005 2004 2006 2002 2003 2001 # 和我们预期结果一致.\"]},\"72\":{\"h\":\"使用java来实现排行榜\",\"t\":[\"redis工具类不会写的可以去看redisUtil工具类\"]},\"73\":{\"h\":\"接收数据实体类\",\"t\":[\"package cn.moonlight.common.dto; import cn.moonlight.common.util.ExamRankUtil; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.experimental.Accessors; import java.util.HashMap; import java.util.Map; @Data @Accessors(chain = true) @NoArgsConstructor @AllArgsConstructor public class RedisRankDto { private Integer examId; private Integer userId; private Double score; private Integer examTime; private Double maxScore; public String getSortScore() { return String.valueOf((maxScore - score) + ((double) examTime / 100000)); } public Map<String, String> toMap() { return new HashMap<String, String>() {{ put(\\\"examId\\\", String.valueOf(examId)); put(\\\"userId\\\", String.valueOf(userId)); put(\\\"score\\\", String.valueOf(score)); put(\\\"examTime\\\", String.valueOf(examTime)); put(ExamRankUtil.SORT_SCORE, getSortScore()); }}; } }\"]},\"74\":{\"h\":\"排行榜工具类\",\"t\":[\"package cn.moonlight.common.util; import cn.moonlight.common.dto.RedisRankDto; import org.springframework.data.redis.connection.SortParameters; import org.springframework.data.redis.core.query.SortQuery; import org.springframework.data.redis.core.query.SortQueryBuilder; import java.util.ArrayList; import java.util.List; import java.util.Map; /** * 考试排行榜工具类 */ public class ExamRankUtil { /** * 过期时长 默认为一年,测试时请不要使用该参数 */ public static final long EXPIRE = 31536000; /** * 排行榜最大人数 -- 默认限制为50 */ public static final int MAX_RANK_NUMBER = 50; /** * 排行榜所存key,该字符串需要进行拼接 * <p> * 1. 需要使用 String.format(RANK_KEY, examId); 拼接为本场考试使用的key * <p> * 2. 需要再后面拼接本场考试是谁的数据也就是 String.format(RANK_KEY, examId) + userId; 来区分是谁的数据 */ private static final String RANK_KEY = \\\"exam_%d_user:\\\"; /** * 排序所用的key 同样需要使用 String.format(RANK_SOFT_KEY, examId); 来拼接为本场的数据 */ private static final String RANK_SORT_KEY = \\\"exam_%d_user_sort\\\"; public static final String SORT_SCORE = \\\"sortScore\\\"; private static final String RANK_SOFT_BY = RANK_KEY + \\\"*->\\\" + SORT_SCORE; /** * 根据考试ID获取对应的排行版数据 * * @param examId 考试ID * @return List<Map < String, String>> */ public static List<Map<String, String>> findRankByExamId(Integer examId) { String rankKey = String.format(RANK_KEY, examId); SortQuery<String> sortQuery = SortQueryBuilder.sort(String.format(RANK_SORT_KEY, examId)) .by(String.format(RANK_SOFT_BY, examId)) .order(SortParameters.Order.ASC) .build(); List<String> sort = RedisUtil.sort(sortQuery); List<Map<String, String>> list = new ArrayList<>(MAX_RANK_NUMBER); for (int i = 0; i < sort.size(); i++) { Map<String, String> map = RedisUtil.hashEntries(rankKey + sort.get(i)); map.put(\\\"rank\\\", String.valueOf(i + 1)); list.add(map); } return list; } /** * 给排行榜添加一个人员内部自动判断是否可以存在于排行榜中 * * @param dto 排行榜数据 */ public static void addRank(RedisRankDto dto) { // 设置变量 String SCORE = \\\"score\\\"; String EXAM_TIME = \\\"examTime\\\"; // 组装key String rankKey = String.format(RANK_KEY, dto.getExamId()); // 使用模糊查询获取当前场考试所有用户的key List<String> matchingKeys = RedisUtil.findMatchingKeys(rankKey + \\\"*\\\"); // 如果当前为空那么直接将本次数据添加进去即可 if (matchingKeys.isEmpty()) { rankPutData(dto); return; } // 组装key String examUserRedisKey = String.format(RANK_KEY, dto.getExamId()) + dto.getUserId(); // 如果exam_user在redis的hash表数据存在 if (RedisUtil.hasKey(examUserRedisKey)) { // 获取hash表中所有数据 Map<String, String> redisExamUser = RedisUtil.hashEntries(examUserRedisKey); // 只有当前分数大于redis中存储的分数或分数一直且时长更短时才更新数据 if (dto.getScore() > Double.parseDouble(redisExamUser.get(SCORE)) || (Double.valueOf(redisExamUser.get(SCORE)).equals(dto.getScore()) && Double.parseDouble(redisExamUser.get(EXAM_TIME)) > dto.getExamTime())) { RedisUtil.hmSet(examUserRedisKey, SCORE, String.valueOf(dto.getScore())); RedisUtil.hmSet(examUserRedisKey, EXAM_TIME, String.valueOf(dto.getExamTime())); RedisUtil.hmSet(examUserRedisKey, SORT_SCORE, String.valueOf(dto.getSortScore())); } return; } // 如果当前redis不存在相同key且未超过排行榜最大人数时直接放入redis即可 if (matchingKeys.size() < MAX_RANK_NUMBER) { rankPutData(dto); return; } // 排序key String rankSortKey = String.format(RANK_SORT_KEY, dto.getExamId()); // 排序条件组装 SortQuery<String> sortQuery = SortQueryBuilder.sort(rankSortKey) .by(String.format(RANK_SOFT_BY, dto.getExamId())) .order(SortParameters.Order.DESC) .build(); // 获取排序后所有的key List<String> sort = RedisUtil.sort(sortQuery); for (String userId : sort) { String examUserRedisTempKey = rankKey + userId; Map<String, String> redisExamUser = RedisUtil.hashEntries(examUserRedisTempKey); double redisScore = Double.parseDouble(redisExamUser.get(SCORE)); int examTime = Integer.parseInt(redisExamUser.get(EXAM_TIME)); // 如果当前分数大于redis中存储的分数或分数一致且时长更短时移除当前redis中的数据且将当前数据存入redis中 if (dto.getScore() > redisScore || (dto.getScore() == redisScore && examTime > dto.getExamTime())) { RedisUtil.del(examUserRedisTempKey); RedisUtil.lRemove(rankSortKey, userId); rankPutData(dto); break; } } } /** * 给Redis中push一条排行榜数据 * * @param dto redis中需要push的数据 */ public static void rankPutData(RedisRankDto dto) { // 组装key String key = String.format(RANK_KEY, dto.getExamId()) + dto.getUserId(); // 设置一张hash表数据 RedisUtil.hmSet(key, dto.toMap()); // 给定一个过期时间 RedisUtil.expire(key, EXPIRE); // 给排序的列表添加当前的为一值 RedisUtil.rightPush(String.format(RANK_SORT_KEY, dto.getExamId()), String.valueOf(dto.getUserId()), EXPIRE); } }\"]},\"75\":{\"c\":[\"后端开发\",\"redis\"]},\"76\":{\"c\":[\"java\"]},\"77\":{\"h\":\"redis\"},\"78\":{\"h\":\"概述\",\"t\":[\"redis 是什么?\",\"Redis（Remote Dictionary Server ），即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。\",\"免费开源! 是当下最热门的NoSQL技术之一! 也被人称之为结构化数据库!\",\"redis 能做什么?\",\"内存存储,持久化,内存中是断电即失,所以说持久化很重要(rdb,aof)\",\"效率高,可用用于高速缓存\",\"发布订阅系统\",\"地图信息分析\",\"计时器,计数器(浏览量!)\",\"...\",\"特性\",\"多样的数据类型\",\"持久化\",\"集群\",\"事务\",\"....\",\"学习中需要用到的东西\",\"狂神的公众号: 狂神说 (本文学习狂神说来的)\",\"官网: https://redis.io/downloads/\",\"英文官网命令查询: https://redis.io/docs/latest/commands/\",\"注意: Windows再Github上下载(停止更新很久了)\",\"Redis推荐都是再linux服务器上搭建的, 我们是基于Linux学习\"]},\"79\":{\"h\":\"Linux安装\",\"t\":[\"下载安装包! 最新稳定版本: 最新的稳定版本始终可在固定 https://download.redis.io/redis-stable.tar.gz URL 及其 SHA-256 总和中找到\",\"找下载示例\",\"将安装包上传到linux服务器上并解压[ 上传目录为 /opt]\",\"安装gcc,执行 yum install gcc-c++命令即可\",\"在reids根目录执行\",\"make make install\",\"redis的默认安装路径 /usr/local/bin\",\"将redis配置文件复制到 /usr/local/bin 目录下\",\"mkdir my-config cp /opt/redis/redis.conf my-config\",\"redis默认不是后台启动的,需修改配置文件.\",\"# redis.conf # 找到dameonize 将参数修改为yes dameonize yes\",\"启动redis服务\",\"# 通过指定的配置文件启动服务 redis-server /usr/local/bin/my-config/redis.conf\",\"使用redis客户端进行链接测试\",\"# 使用redis客户端进行链接 reids-cli -p 6379\",\"查看redis进程是否开启命令 ps -ef|grep redis\",\"关闭redis服务命令 shutdown\"]},\"80\":{\"h\":\"测试性能\",\"t\":[\"redis-benchmark 是一个压力测试工具.\",\"官方自带的性能测试工具!\",\"使用: redis-benchmark 命令参数!\",\"命令参数[图片来自菜鸟教程]:\",\"redis命令参数\",\"简单测试下\",\"# 测试: 100个并发链接 100000请求 redis-benchmark -h localhost -p 6379 -c 100 -n 100000\",\"Snipaste 2024 06 26 17 58 26\"]},\"81\":{\"h\":\"基础知识\",\"t\":[\"redis默认存在16个数据库\",\"切换数据库命令: select index index为几号数据库.\",\"查看库数据大小命令: dbsize\",\"查看所有的key命令: keys *\",\"清空当前数据库命令: flushdb\",\"清空全部数据库内容命令: flushall\",\"redis 是单线程的.\",\"Redis为什么单线程还很快?\",\"误区1: 高性能服务器一定是多线程的?\",\"误区2: 多线程(CPU上下文会切换)一定比单线程效率高!\",\"核心:\",\"redis是将所有的数据全部放在内存中的,所以说使用单线程去操作效率就是最高的.\",\"多线程的上下文切换本身就是耗时操作,但对于内存系统来说没有上下文切换效率就是最高的.\",\"多次读写都是在一个CPU上的,在内存情况下,这个就是最佳的方案.\"]},\"82\":{\"h\":\"五大数据类型\"},\"83\":{\"h\":\"Redis-key\",\"t\":[\"# 更换数据库 select index # 查看数据库现在有多少key dbsize # 查看库内所有的key keys * # 将当前数据库清空 flushdb # 清空所有数据库 flushall # expire 过期命令 key 要被过期的名称 seconds 多少秒后过期 expire key seconds # ttl 查看过期时间命令 查看key还有多长时间过期 # 注意: -2 表示已经过期 ttl key # del 删除命令 将key从redis中删除 del key # move 移动命令 将key从当前数据库移动至指定数据库中 move key db # type 查看key所存储的类型 type key # exists 查看key是否存在的命令 exists key\"]},\"84\":{\"h\":\"String(字符串)\",\"t\":[\"# set 设置一个key, key 存储的键名 value 存储的值 set key value # 将value关联到key,并将key的过期时间设置为seconds(以秒为单位) setex key seconds value # 当key不存在时设置key的值,当key存在时不会设置. setnx key value # 给key设置一个新的value值并将旧值返回回去 getset key value # append 追加命令 在key的后面追加上value的值 append key value # get 获取命令,获取key的value值返回 get key # strlen 查看key的长度 strlen key\"]},\"85\":{\"h\":\"同时设置或获取多个属性值\",\"t\":[\"# 同时设置一个或多个key-value,且所有给定的key都不存在 # 如果key存在时新值会覆盖旧值 mset key value[key1 value1 ...] # 同时设置一个或多个key-value,当所有key都不存在时成功 # 这是一个原子性的操作,要么一起成功,要么一起失败 msetnx key vlaue[key1 value1] # 获取所有给定的key的值,value值返回的索引位置与key的顺序一致 mget key1[key2..]\"]},\"86\":{\"h\":\"字符串范围获取或替换\",\"t\":[\"# 获取key关联的value,且获取value从start位置到end位置的字符进行返回 getrange key start end # 将key的value进行覆写,从偏移量(offset)开始 setrange key offset value\"]},\"87\":{\"h\":\"自增或自减\",\"t\":[\"# 将key中存储的数字值增1 incr key # 对key的值加上指定的增值量(increment) incrby key increment # 对key的值加上指定的浮点增值量(increment) incrbyfloat key increment # 对key中存储的数字值减一 decr key # 对key所存储的值减去指定的减量值(decrement) decrby key decrement\"]},\"88\":{\"h\":\"List(列表)\",\"t\":[\"可以当成栈,队列,阻塞队列使用.\",\"本质上是一个链表, before node after, left right 都可以插入值\",\"当key不存在,创建新的链表,key存在新增内容\",\"如果移除了所有值,空链表,也代表不存在\",\"两个插入或改动值,效率最高! 中间元素,相对来说效率会低一点.\",\"消息队列: lpush rpop 栈: lpush lpop\",\"# 获取key的长度. llen key # lpush 向list添加一个或多个值添加到列表头部 # 当添加多个值的时候,value2会在value1前面,因为这个命令是向列表头部添加一个值 # 也就是多个值时,先进入的反而在最后,最后进入的反而在最前面 lpush key value1[value2...] # lpushx 向已存在的列表的头部添加一个值,列表不存在时不执行且返回0 lpushx key value # rpush 向列表尾部添加一个或多个值 rpush key value1[value2...] # rpushx 为已存在的列表的尾部添加值,列表不存在时不执行且返回0 rpushx key value # 通过索引设置列表指定位置的值,当key不存在时会报错,当索引不存在时也不执行 # 例如key中长度为3但是向索引为10的位置设置值时就是失败的. lset key index value # 在列表的元素前或后插入元素 # 向pivot[元素名]前或后插入value LINSERT key BEFORE|AFTER pivot value\"]},\"89\":{\"h\":\"获取列表中的元素\",\"t\":[\" # 取出指定范围内的元素,当 start=0 stop=-1时会取出全部 lrange key start stop # 通过索引获取列表中的元素 lindex key index\"]},\"90\":{\"h\":\"移除或弹出一个元素\",\"t\":[\"# lpop 移除并获取列表的第一位元素 lpop key # rpop 移除并获取列表的最后一位元素 rpop key # 移除key中指定个数的value, count 代表要移除的个数 # 移除时是从头部开始找要移除的元素 lrem key count value # 移除key中指定个数的value,conunt 代表要移除的个数 # 移除时是从尾部开始找要移除的元素 rrem key cont value # 移除source列表的最后一位元素,并将该元素添加到destination列表的头部,最后将source移除的元素返回 # destination不存在时会创建 rpoplpush source destination\"]},\"91\":{\"h\":\"阻塞命令\",\"t\":[\"# 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 # 当列表中存在元素时会直接从头部移除一位,若列表中没有任何元素时也就是这个key都不存在的情况下,会阻塞指定的秒数[timeout] blpop key1[key2] timeout # 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 # 当列表中存在元素时会直接从尾部移除一位元素,若列表中没有任何元素时也就是这个key都不存在的情况下,会阻塞指定的秒数[timeout] brpop key1[key2] timeout # 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； # 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 # 将source尾部移除一个值,追加到destination的头部,当source不存在元素时,阻塞指定的秒数[timeout]或发现一个元素可以弹出 brpoplpush source destination timeout\"]},\"92\":{\"h\":\"保留区间内的元素\",\"t\":[\"# 对一个列表进行修建,仅保留指定区间内的元素,不存在区间内的元素都被删除 # 这个区间是个闭区间,也就是指定的索引位也包含在内 ltrim key start stop\"]},\"93\":{\"h\":\"Set(集合)\",\"t\":[\"set中的值是不能重复的.\",\"# 向集合中添加一个或多个成员,成员不能重复 sadd key member1 [member2] # 判断 member 元素是否是集合 key 的成员 SISMEMBER key member # 返回集合中的所有成员 SMEMBERS key # 将 member 元素从 source 集合移动到 destination 集合 SMOVE source destination member # 移除并返回集合中的一个随机元素 SPOP key # 返回集合中一个或多个随机数 SRANDMEMBER key [count] # 移除集合中一个或多个成员 SREM key member1 [member2] # 迭代集合中的元素 SSCAN key cursor [MATCH pattern] [COUNT count] # 返回第一个集合与其他集合之间的差异。 SDIFF key1 [key2] # 获取集合的成员数 SCARD key\"]},\"94\":{\"h\":\"交集\",\"t\":[\"# 返回给定所有集合的交集 SINTER key1 [key2] # 返回给定所有集合的差集并存储在 destination 中 SDIFFSTORE destination key1 [key2]\"]},\"95\":{\"h\":\"并集\",\"t\":[\"#返回所有给定集合的并集 SUNION key1 [key2] # 所有给定集合的并集存储在 destination 集合中 SUNIONSTORE destination key1 [key2]\"]},\"96\":{\"h\":\"Hash\",\"t\":[\"Map集合,key-map这时候值是map集合\",\"# 将哈希表key中的字段field的值设置为value.redis4.0后该命令支持设置多个field hset key field value # 将哈希表key中的字段field的值不存在时,设置值为value HSETNX key field value # 同时将多个field-value设置到hash表的key中,该命令后续已经移除 hmset key field1 value1 [field2 value2] # 获取存储在哈希表中指定字段的值。 HGET key field # 获取所有给定字段的值 hmget key field1 [field2] # 获取在哈希表中指定 key 的所有字段和值 hgetAll key # 查看哈希表 key 中，指定的字段是否存在。 HEXISTS key field # 删除一个或多个哈希表字段 HDEL key field1 [field2] #获取哈希表中的所有字段 HKEYS key # 获取哈希表中所有的值 hvals key # 获取哈希表中字段的数量 HLEN key # 迭代hash表中的键值对 HSCAN key cursor [MATCH pattern] [COUNT count]\"]},\"97\":{\"h\":\"字段添加指定增量\",\"t\":[\" # 为哈希表 key 中的指定字段的整数值加上增量 increment 。 HINCRBY key field increment # 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。 HINCRBYFLOAT key field increment\"]},\"98\":{\"h\":\"Zset(有序集合)\",\"t\":[\"# 获取有序集合的成员数 ZCARD key # 向有序集合添加一个或多个成员，或者更新已存在成员的分数 # 新成员会从头部进行插入,而不是从尾部插入. ZADD key score1 member1 [score2 member2] # 返回有序集合中指定成员的索引 ZRANK key member # 返回有序集中，成员的分数值 ZSCORE key member # 通过索引区间返回有序集合指定区间内的成员 ZRANGE key start stop [WITHSCORES] # 返回有序集中指定区间内的成员，通过索引，分数从高到低 ZREVRANGE key start stop [WITHSCORES] # 返回有序集中指定分数区间内的成员，分数从高到低排序 # -inf 代表负无穷 +inf 代表正无穷 ZREVRANGEBYSCORE key max min [WITHSCORES] # 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序 ZREVRANK key member # 通过字典区间返回有序集合的成员 ZRANGEBYLEX key min max [LIMIT offset count] # 通过分数返回有序集合指定区间内的成员 ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] #移除有序集合中的一个或多个成员 ZREM key member [member ...] # 移除有序集合中给定的字典区间的所有成员 ZREMRANGEBYLEX key min max # 移除有序集合中给定的排名区间的所有成员 ZREMRANGEBYRANK key start stop # 移除有序集合中给定的分数区间的所有成员 ZREMRANGEBYSCORE key min max # 计算在有序集合中指定区间分数的成员数 ZCOUNT key min max # 在有序集合中计算指定字典区间内成员数量 ZLEXCOUNT key min max # 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中 ZINTERSTORE destination numkeys key [key ...] # 计算给定的一个或多个有序集的并集，并存储在新的 key 中 ZUNIONSTORE destination numkeys key [key ...] # 迭代有序集合中的元素（包括元素成员和元素分值） ZSCAN key cursor [MATCH pattern] [COUNT count]\"]},\"99\":{\"h\":\"对分数进行指定增量\",\"t\":[\"# 有序集合中对指定成员的分数加上增量 increment ZINCRBY key increment member\"]},\"100\":{\"h\":\"Geo(地理位置)\",\"t\":[\"Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，该功能在 Redis 3.2 版本新增。\",\"# 添加地理位置的坐标。 GEOADD key longitude latitude member [longitude latitude member ...] # 获取地理位置的坐标。 GEOPOS key member [member ...] # 计算两个位置之间的距离。 GEODIST key member1 member2 [m|km|ft|mi] # 根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。 GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key] # 根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。 GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key] # 返回一个或多个位置对象的 geohash 值 GEOHASH key member [member ...]\"]},\"101\":{\"h\":\"hyperLogLog(基数统计)\",\"t\":[\"Redis 在 2.8.9 版本添加了 HyperLogLog 结构。\",\"Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。\",\"# 添加指定元素到 HyperLogLog 中。 PFADD key element [element ...] # 返回给定 HyperLogLog 的基数估算值。 PFCOUNT key [key ...] # 将多个 HyperLogLog 合并为一个 HyperLogLog PFMERGE destkey sourcekey [sourcekey ...]\"]},\"102\":{\"h\":\"stream\",\"t\":[\"Redis Stream 是 Redis 5.0 版本新增加的数据结构。\",\"Redis Stream 主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能， 但它有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。\"]},\"103\":{\"h\":\"消息队列相关命令\",\"t\":[\"# XADD - 添加消息到末尾 key 队列名称 id 消息id field value记录 XADD key ID field value [field value ...] # XTRIM - 对流进行修剪，限制长度 key队列名称 maxlen 长度 count 数量 XTRIM key MAXLEN [~] count # XDEL - 删除消息 XDEL key ID [ID ...] # XLEN - 获取流包含的元素数量，即消息长度 XLEN key # XRANGE - 获取消息列表，会自动过滤已经删除的消息 # start ：开始值， - 表示最小值 end ：结束值， + 表示最大值 count ：数量 XRANGE key start end [COUNT count] # XREVRANGE - 反向获取消息列表，ID 从大到小 # start ：开始值， - 表示最小值 end ：结束值， + 表示最大值 count ：数量 XREVRANGE key end start [COUNT count] # XREAD - 以阻塞或非阻塞方式获取消息列表 # count ：数量 milliseconds ：可选，阻塞毫秒数，没有设置就是非阻塞模式 # key ：队列名 id ：消息 ID XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id [id ...]\"]},\"104\":{\"h\":\"消费者组相关命令\",\"t\":[\"# XGROUP CREATE - 创建消费者组 # key ：队列名称，如果不存在就创建 # groupname ：组名。 # $ ： 表示从尾部开始消费，只接受新消息，当前 Stream 消息会全部忽略。 # 0-0: 表示从头消费 XGROUP [CREATE key groupname id-or-$] [SETID key groupname id-or-$] [DESTROY key groupname] [DELCONSUMER key groupname consumername] # XREADGROUP GROUP - 读取消费者组中的消息 # group ：消费组名 # consumer ：消费者名。 # count ： 读取数量。 # milliseconds ： 阻塞毫秒数。 # key ： 队列名。 # ID ： 消息 ID。 XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...] XACK - 将消息标记为\\\"已处理\\\" XGROUP SETID - 为消费者组设置新的最后递送消息ID XGROUP DELCONSUMER - 删除消费者 XGROUP DESTROY - 删除消费者组 XPENDING - 显示待处理消息的相关信息 XCLAIM - 转移消息的归属权 XINFO - 查看流和消费者组的相关信息； XINFO GROUPS - 打印消费者组的信息； XINFO STREAM - 打印流信息\"]},\"105\":{\"h\":\"事务\",\"t\":[\"Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：\",\"批量操作在发送 EXEC 命令前被放入队列缓存。\",\"收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。\",\"在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。\",\"# 标记一个事务块的开始。 multi # 执行所有事务块内的命令 EXEC # 取消事务，放弃执行事务块内的所有命令。 DISCARD # 取消 WATCH 命令对所有 key 的监视。 UNWATCH # 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。 WATCH key [key ...]\"]},\"106\":{\"c\":[\"redis\"]},\"107\":{\"c\":[\"redis\"]},\"108\":{\"h\":\"redis工具类\"},\"109\":{\"h\":\"RedisConfigBean配置\",\"t\":[\"import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.data.redis.connection.RedisConnectionFactory; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.data.redis.serializer.RedisSerializer; import org.springframework.data.redis.serializer.StringRedisSerializer; @Configuration public class RedisConfig { @Bean public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) { RedisTemplate<String, String> template = new RedisTemplate<>(); RedisSerializer<String> redisSerializer = new StringRedisSerializer(); template.setConnectionFactory(factory); //key序列化方式 template.setKeySerializer(redisSerializer); //value序列化 template.setValueSerializer(redisSerializer); //key haspMap序列化 template.setHashKeySerializer(redisSerializer); //value hashmap序列化 template.setHashValueSerializer(redisSerializer); return template; } }\"]},\"110\":{\"h\":\"RedisUtil工具类\",\"t\":[\"import org.springframework.data.redis.connection.RedisConnectionFactory; import org.springframework.data.redis.core.*; import org.springframework.data.redis.core.query.SortQuery; import org.springframework.stereotype.Component; import java.nio.charset.StandardCharsets; import java.util.ArrayList; import java.util.List; import java.util.Map; import java.util.Set; import java.util.concurrent.TimeUnit; @Component public class RedisUtil { public static RedisTemplate<String, String> redisTemplate; public static HashOperations<String, String, String> hashOperations; public static ValueOperations<String, String> valueOperations; public static ListOperations<String, String> listOperations; public static SetOperations<String, String> setOperations; public RedisUtil(RedisTemplate<String, String> redisTemplate) { RedisUtil.redisTemplate = redisTemplate; RedisUtil.hashOperations = redisTemplate.opsForHash(); RedisUtil.valueOperations = redisTemplate.opsForValue(); RedisUtil.listOperations = redisTemplate.opsForList(); RedisUtil.setOperations = redisTemplate.opsForSet(); } /** * 根据正则匹配key获取所有对应的key * * @param pattern 正则匹配路径 例如examUserId:* 获取 examUserId:101,examUserId:102,examUserId:103... * @return List<String> */ public static List<String> findMatchingKeys(String pattern) { List<String> matchedKeys = new ArrayList<>(); ScanOptions scanOptions = ScanOptions.scanOptions().match(pattern).count(100).build(); RedisConnectionFactory connectionFactory = redisTemplate.getConnectionFactory(); if (null == connectionFactory) { throw new RuntimeException(\\\"使用 ScanOptions 获取 keys 时 connectionFactory 获取为空\\\"); } try (Cursor<byte[]> cursor = connectionFactory.getConnection().scan(scanOptions)) { while (cursor.hasNext()) { byte[] rawKey = cursor.next(); String key = new String(rawKey, StandardCharsets.UTF_8); matchedKeys.add(key); } } return matchedKeys; } /** * 排序 * * @param sortQuery 排序条件 * @return List<String> */ public static List<String> sort(SortQuery<String> sortQuery) { return redisTemplate.sort(sortQuery); } /** * 给一个指定的 key 值附加过期时间 */ public static void expire(String key, long time) { redisTemplate.expire(key, time, TimeUnit.SECONDS); } /** * 根据key 获取过期时间 * * @param key 键 不能为null * @return 时间(秒) 返回 0 代表为永久有效 */ public static long getTime(String key) { Long expire = redisTemplate.getExpire(key, TimeUnit.SECONDS); return null == expire ? -1 : expire; } /** * 根据key 判断该key是否已过期 */ public static boolean hasKey(String key) { return Boolean.TRUE.equals(redisTemplate.hasKey(key)); } /** * 移除指定key 的过期时间 */ public static boolean persist(String key) { return Boolean.TRUE.equals(redisTemplate.boundValueOps(key).persist()); } /** * 从redis中删除指定的一个key * * @param key redisKey */ public static void del(String key) { redisTemplate.delete(key); } //region String类型 //- - - - - - - - - - - - - - - - - - - - - String类型 - - - - - - - - - - - - - - - - - - - - /** * 根据key获取值 * * @param key 键 * @return 值 */ public static Object get(String key) { return key == null ? null : valueOperations.get(key); } /** * 将值放入缓存 * * @param key 键 * @param value 值 */ public static void set(String key, String value) { valueOperations.set(key, value); } /** * 将值放入缓存并设置时间 * * @param key 键 * @param value 值 * @param time 时间(秒) -1为无期限 */ public static void set(String key, String value, long time) { valueOperations.set(key, value, time, TimeUnit.SECONDS); } /** * 批量添加 key (重复的键会覆盖) */ public static void batchSet(Map<String, String> keyAndValue) { valueOperations.multiSet(keyAndValue); } /** * 批量添加 key-value 只有在键不存在时,才添加 * map 中只要有一个key存在,则全部不添加 */ public static void batchSetIfAbsent(Map<String, String> keyAndValue) { valueOperations.multiSetIfAbsent(keyAndValue); } /** * 对一个 key-value 的值进行加减操作, * 如果该 key 不存在 将创建一个key 并赋值该 number * 如果 key 存在,但 value 不是长整型 ,将报错 */ public static Long increment(String key, long number) { return valueOperations.increment(key, number); } /** * 对一个 key-value 的值进行加减操作, * 如果该 key 不存在 将创建一个key 并赋值该 number * 如果 key 存在,但 value 不是 纯数字 ,将报错 */ public static Double increment(String key, double number) { return valueOperations.increment(key, number); } //endregion //region set类型 //- - - - - - - - - - - - - - - - - - - - - set类型 - - - - - - - - - - - - - - - - - - - - /** * 将数据放入set缓存 */ public static void sSet(String key, String value) { setOperations.add(key, value); } /** * 获取变量中的值 */ public static Set<String> members(String key) { return setOperations.members(key); } /** * 随机获取变量中指定个数的元素 */ public static void randomMembers(String key, long count) { setOperations.randomMembers(key, count); } /** * 随机获取变量中的元素 */ public static String randomMember(String key) { return setOperations.randomMember(key); } /** * 弹出变量中的元素 */ public static Object pop(String key) { return setOperations.pop(\\\"key\\\"); } /** * 获取变量中值的长度 */ public static long size(String key) { Long size = setOperations.size(key); return null == size ? -1 : size; } /** * 根据value从一个set中查询,是否存在 * * @param key 键 * @param value 值 * @return true 存在 false不存在 */ public static boolean sHasKey(String key, Object value) { return Boolean.TRUE.equals(setOperations.isMember(key, value)); } /** * 检查给定的元素是否在变量中。 */ public static boolean isMember(String key, Object obj) { return Boolean.TRUE.equals(setOperations.isMember(key, obj)); } /** * 转移变量的元素值到目的变量。 */ public static boolean move(String key, String value, String destKey) { return Boolean.TRUE.equals(setOperations.move(key, value, destKey)); } /** * 批量移除set缓存中元素 * * @param key set集合Key * @param values set集合中需要移除的元素值 */ public static void remove(String key, Object... values) { redisTemplate.opsForSet().remove(key, values); } /** * 通过给定的key求2个set变量的差值 * * @param key set集合Key * @param destKey set集合Key * @return Set<String> 两个set集合的差值 */ public static Set<String> difference(String key, String destKey) { return setOperations.difference(key, destKey); } /** * 弹出元素并删除 * * @param key 要弹出的key */ public static String popValue(String key) { return setOperations.pop(key); } //endregion //region hash类型 //- - - - - - - - - - - - - - - - - - - - - hash类型 - - - - - - - - - - - - - - - - - - - - /** * hash 添加一个hash类型的数据进行存储 * <p> * 给一个key设置所有相应的属性 */ public static void hmSet(String key, Map<String, String> map) { hashOperations.putAll(key, map); } /** * hash表设置一个值 * * @param key hash表Key * @param hashKey hash表字段Key * @param value hash表字段Key所对应的值 */ public static void hmSet(String key, String hashKey, String value) { hashOperations.put(key, hashKey, value); } /** * hash 获取某个key下所有的value */ public static List<String> hashValues(String key) { return hashOperations.values(key); } /** * 获取当前key下所有的键值对 * * @param key 要取的key值 * @return 返回所有键值对 */ public static Map<String, String> hashEntries(String key) { return hashOperations.entries(key); } /** * 获取某个 hash key 下指定hashKey的值 * * @param key key * @param hashKeys hashKeys * @return hashKey的value值 */ public static List<String> hashMultiGet(String key, List<String> hashKeys) { return hashOperations.multiGet(key, hashKeys); } /** * 验证指定 key 下 有没有指定的 hash key * * @param key hash表Key * @param hashKey hash表字段key * @return 存在为true, 不存在为false */ public static boolean hashKey(String key, String hashKey) { return redisTemplate.opsForHash().hasKey(key, hashKey); } /** * 获取指定key的值string * * @param key hash表Key * @param hashKey hash表字段key * @return String */ public static String hGet(String key, String hashKey) { return hashOperations.get(key, hashKey); } /** * 删除指定 hash 的 HashKey * * @param key hash表Key * @param hashKeys hash表字段Key(多个) * @return 删除成功的 数量 */ public static Long delete(String key, String... hashKeys) { return hashOperations.delete(key, (Object) hashKeys); } /** * 给指定 hash 的 hash key 做增减操作 * * @param key hash表Key * @param hashKey hash表字段Key,一般称为hashKey * @param number 增减值 * @return Double */ public static Double increment(String key, String hashKey, Double number) { return hashOperations.increment(key, hashKey, number); } /** * 获取 key 下的 所有 hash key 字段 * * @param key hash表Key * @return Set<String> */ public static Set<String> hashKeys(String key) { return hashOperations.keys(key); } /** * 获取指定 hash 下面的 键值对 数量 * * @param key hash表Key */ public static Long hashSize(String key) { return hashOperations.size(key); } //endregion //region list类型 //- - - - - - - - - - - - - - - - - - - - - list类型 - - - - - - - - - - - - - - - - - - - - /** * 在变量左边添加元素值 * * @param key listKey * @param value 元素值 */ public static void leftPush(String key, String value) { listOperations.leftPush(key, value); } /** * 获取集合指定位置的值。 * * @param key listKey * @param index 索引位置 * @return String */ public static String index(String key, long index) { return listOperations.index(key, index); } /** * 获取指定区间的值。 * * @param key listKey * @param start 起始区间 * @param end 结束区间 * @return List<String> */ public static List<String> range(String key, long start, long end) { return redisTemplate.opsForList().range(key, start, end); } /** * 把最后一个参数值放到指定集合的第一个出现中间参数的前面，如果中间参数值存在的话。 * * @param key listKey * @param pivot 某个值,将value放置于第一个该值前 * @param value 元素值 */ public static void leftPush(String key, String pivot, String value) { redisTemplate.opsForList().leftPush(key, pivot, value); } /** * 向左边批量添加参数元素。 * * @param key listKey * @param values 多个元素数组 */ public static void leftPushAll(String key, String... values) { redisTemplate.opsForList().leftPushAll(key, values); } /** * 向集合最右边添加元素。 * * @param key listKey * @param value 元素值 */ public static void rightPush(String key, String value) { listOperations.rightPush(key, value); } /** * 向集合最右边添加元素。 * * @param key listKey * @param value 元素值 * @param expireTime 过期时间 */ public static void rightPush(String key, String value, long expireTime) { listOperations.rightPush(key, value); expire(key, expireTime); } /** * 向左边批量添加参数元素。 * * @param key listKey * @param values 多个元素数组 */ public static void rightPushAll(String key, String... values) { listOperations.rightPushAll(key, values); } /** * 向已存在的集合中添加元素。 * * @param key listKey * @param value 元素值 */ public static void rightPushIfPresent(String key, String value) { listOperations.rightPushIfPresent(key, value); } /** * 向已存在的集合中添加元素。 */ public static long listLength(String key) { Long size = listOperations.size(key); return null == size ? -1 : size; } /** * 移除集合中的左边第一个元素。 * * @param key listKey */ public static void leftPop(String key) { listOperations.leftPop(key); } /** * 移除集合中左边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。 * * @param key redisKey * @param timeout 等待时间 * @param unit 时间类型 */ public static void leftPop(String key, long timeout, TimeUnit unit) { listOperations.leftPop(key, timeout, unit); } /** * 移除集合中右边的元素。 * * @param key 删除listKey中最右侧的元素 */ public static void rightPop(String key) { listOperations.rightPop(key); } /** * 移除集合中右边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。 * * @param key redisKey * @param timeout 等待时间 * @param unit 时间类型 */ public static void rightPop(String key, long timeout, TimeUnit unit) { listOperations.rightPop(key, timeout, unit); } //endregion }\"]},\"111\":{\"c\":[\"后端开发\",\"redis\"]},\"112\":{\"c\":[\"java\"]},\"113\":{\"h\":\"Mybatis字段自动注入\"},\"114\":{\"h\":\"提取公共字段\",\"t\":[\"import com.baomidou.mybatisplus.annotation.FieldFill; import com.baomidou.mybatisplus.annotation.TableField; import com.fasterxml.jackson.annotation.JsonFormat; import io.swagger.annotations.ApiModelProperty; import lombok.Data; import lombok.experimental.Accessors; import java.io.Serializable; import java.time.LocalDateTime; @Data public class BaseEntity implements Serializable { private static final long serialVersionUID = 1L; /** * 创建人 */ @TableField(value = \\\"creator\\\", fill = FieldFill.INSERT) private Integer creator; /** * 更新人 */ @TableField(value = \\\"updater\\\", fill = FieldFill.UPDATE) private Integer updater; /** * 创建时间 * <p> * FieldFill.INSERT 仅在插入时进行处理 */ @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\") @TableField(value = \\\"create_time\\\", fill = FieldFill.INSERT) private LocalDateTime createTime; /** * 更新时间 * <p> * FieldFill.UPDATE 仅在更新时进行处理 * </p> * FieldFill.INSERT_UPDATE 更新和插入时都进行处理 * </p> * 未指定 FieldFill 时是不会进行自动注入的 */ @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\") @TableField(value = \\\"update_time\\\", fill = FieldFill.UPDATE) private LocalDateTime updateTime; /** * 是否删除 0: 使用中 1: 已删除 */ private Integer del; }\"]},\"115\":{\"h\":\"自动注入类\",\"t\":[\"import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler; import lombok.extern.slf4j.Slf4j; import org.apache.ibatis.reflection.MetaObject; import org.springframework.stereotype.Component; import java.time.LocalDateTime; @Slf4j @Component public class MybatisMetaObjectHandler implements MetaObjectHandler { static final ThreadLocal<Integer> THREAD_LOCAL = new ThreadLocal<>(); @Override public void insertFill(MetaObject metaObject) { this.setFieldValByName(\\\"createTime\\\", LocalDateTime.now(), metaObject); if (null != THREAD_LOCAL.get()) { this.setFieldValByName(\\\"creator\\\", THREAD_LOCAL.get(), metaObject); } else { this.setFieldValByName(\\\"creator\\\", 0, metaObject); } } @Override public void updateFill(MetaObject metaObject) { this.setFieldValByName(\\\"updateTime\\\", LocalDateTime.now(), metaObject); if (null != THREAD_LOCAL.get()) { this.setFieldValByName(\\\"updater\\\", THREAD_LOCAL.get(), metaObject); } else { this.setFieldValByName(\\\"updater\\\", 0, metaObject); } } }\",\"ps: 自动注入类中的用户ID需要在拦截器中进行设置,因为拦截器优先级较高.\"]},\"116\":{\"c\":[\"后端开发\",\"spring系列\"]},\"117\":{\"c\":[\"java\"]},\"118\":{\"h\":\"springBoot配置swagger\",\"t\":[\"本文使用的是knife4j(页面好看!!)\",\"导入依赖\",\" <!--region swagger-knife4j--> <dependency> <groupId>com.github.xiaoymin</groupId> <artifactId>knife4j-openapi2-spring-boot-starter</artifactId> <version>${knife4j.version}</version> </dependency> <!--endregion-->\"]},\"119\":{\"h\":\"swaggerConfig\",\"t\":[\"import com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j; import io.swagger.annotations.ApiOperation; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.service.ApiInfo; import springfox.documentation.service.Contact; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc; @EnableKnife4j @Configuration @EnableSwagger2WebMvc public class SwaggerConfig { /** * 创建API */ @Bean() public Docket createRestApi() { return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .host(\\\"https://127.0.0.1:8001\\\") .groupName(\\\"0.1 版本\\\") .select() .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) .paths(PathSelectors.any()) .build(); } /** * 添加摘要信息 */ private ApiInfo apiInfo() { Contact contact = new Contact(\\\"黑色的小火苗\\\", \\\"https://test.com/test\\\", \\\"test@163.com\\\"); // 用ApiInfoBuilder进行定制 return new ApiInfoBuilder() // 设置标题 .title(\\\"月光后台接口服务\\\") // 描述 .description(\\\"描述：月光后台接口服务\\\") // 作者信息 .version(\\\"0.1\\\") .contact(contact) .build(); } }\"]},\"120\":{\"h\":\"webConfig配置swagger\",\"t\":[\"import cn.moonlight.framework.interceptor.HeaderResolveInterceptor; import cn.moonlight.framework.interceptor.AuthorityInterceptor; import cn.moonlight.framework.resolver.UserAnnotationArgumentResolver; import lombok.RequiredArgsConstructor; import org.springframework.context.annotation.Configuration; import org.springframework.web.method.support.HandlerMethodArgumentResolver; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; import java.util.Arrays; import java.util.List; @Configuration @RequiredArgsConstructor public class WebConfig implements WebMvcConfigurer { private final AuthorityInterceptor authorityInterceptor; private final HeaderResolveInterceptor headerResolveInterceptor; private static final List<String> exclude_path = Arrays.asList(\\\"/login/*\\\", \\\"/error\\\", \\\"/swagger-resources\\\", \\\"/swagger-resources/configuration/ui\\\", \\\"/doc.html\\\", \\\"/webjars/css/**\\\", \\\"/webjars/js/**\\\", \\\"/favicon.ico\\\"); /** * 接口放开以下接口的访问 */ public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(authorityInterceptor) .addPathPatterns(\\\"/**\\\") .excludePathPatterns(exclude_path); registry.addInterceptor(headerResolveInterceptor) .addPathPatterns(\\\"/**\\\") .excludePathPatterns(exclude_path); } /** * 放开以下静态资源的访问 */ public void addResourceHandlers(ResourceHandlerRegistry registry) { // swagger配置 registry.addResourceHandler(\\\"/**\\\") .addResourceLocations(\\\"classpath:/static/\\\"); registry.addResourceHandler(\\\"/swagger-ui.html\\\", \\\"doc.html\\\") .addResourceLocations(\\\"classpath:/META-INF/resources/\\\"); registry.addResourceHandler(\\\"/webjars/**\\\") .addResourceLocations(\\\"classpath:/META-INF/resources/webjars/\\\"); } }\"]},\"121\":{\"c\":[\"后端开发\",\"spring系列\"]},\"122\":{\"c\":[\"java\"]},\"123\":{\"h\":\"全局异常拦截器\",\"t\":[\"我们也可以拦截自定义的异常类,下面是一个异常类的demo\",\"public class RsaException extends RuntimeException { public RsaException(String message) { super(message); } }\",\"全局拦截异常案例\",\"import cn.moonlight.exception.ExcelException; import cn.moonlight.exception.RsaException; import cn.moonlight.response.ResponseBo; import cn.moonlight.response.ResultCode; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.MethodArgumentNotValidException; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.ResponseBody; import org.springframework.web.bind.annotation.RestControllerAdvice; import java.io.ByteArrayOutputStream; import java.io.PrintStream; import java.util.Objects; @Slf4j @RestControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(RsaException.class) public ResponseBo<?> rasException(RsaException e) { log.error(\\\"异常信息：{}，{}\\\", e.getMessage(), e.getClass()); return ResponseBo.error(ResultCode.EXCEL_ERROR, e.getMessage()); } @ExceptionHandler(MethodArgumentNotValidException.class) public ResponseBo<?> bindException(MethodArgumentNotValidException e) { log.error(\\\"异常信息：{}，{}\\\", e.getMessage(), e.getClass()); return ResponseBo.error(Objects.requireNonNull(e.getBindingResult().getFieldError()).getDefaultMessage()); } @ExceptionHandler(Exception.class) @ResponseBody public ResponseBo<?> handleException(Exception exception) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); exception.printStackTrace(new PrintStream(byteArrayOutputStream)); log.info(byteArrayOutputStream.toString()); log.error(\\\"异常信息：\\\" + exception.getMessage()); return ResponseBo.error(ResultCode.ERROR_CODE, exception.getMessage()); } }\"]},\"124\":{\"c\":[\"后端开发\",\"spring系列\"]},\"125\":{\"c\":[\"java\"]},\"126\":{\"h\":\"SpringBoot 拦截器注入数据\"},\"127\":{\"h\":\"创建注解\",\"t\":[\"import java.lang.annotation.*; @Target(ElementType.PARAMETER) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface CurrentUser {}\"]},\"128\":{\"h\":\"创建拦截器\",\"t\":[\"/** * redis 中存在的key */ public class KeyConstant { public final static String REQUEST_HEADER_TOKEN_KEY = \\\"token\\\"; public final static String USER_SESSION_KEY = \\\"CARBON_TOKEN_\\\"; public final static long TOKEN_TIMEOUT = 86400; public final static String CURRENT_USER_KEY = \\\"CURRENT_USER\\\"; public final static String NOW_CARBON_PRICE = \\\"NOW_CARBON_PRICE_\\\"; } import com.alibaba.fastjson2.JSONObject; import lombok.extern.slf4j.Slf4j; import org.springframework.context.annotation.Configuration; import org.springframework.stereotype.Component; import org.springframework.web.servlet.HandlerInterceptor; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @Slf4j @Component public class HeaderResolveInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) { try { //获取当前用户redis session, UserSession 就是我们在redis中存储的数据.具体怎么从redis获取可以根据自己情况进行获取 Integer userId = TokenUtil.getUserId(request.getHeader(KeyConstant.REQUEST_HEADER_TOKEN_KEY)); MybatisMetaObjectHandler.THREAD_LOCAL.set(userId); UserSession userSession = JSONObject.parseObject((String) RedisUtil.get(KeyConstant.USER_SESSION_KEY + userId), UserSession.class); log.info(\\\"[ preHandle ] 获取的 userSession 为: {}\\\", userSession); if (userSession != null) { //绑定到request request.setAttribute(KeyConstant.CURRENT_USER_KEY, userSession); } } catch (Exception e) { log.error(\\\"解析请求头失败:{}\\\", e.toString()); } return true; } }\"]},\"129\":{\"h\":\"接口注入数据\",\"t\":[\"import lombok.extern.slf4j.Slf4j; import org.springframework.core.MethodParameter; import org.springframework.stereotype.Component; import org.springframework.web.bind.support.WebDataBinderFactory; import org.springframework.web.context.request.NativeWebRequest; import org.springframework.web.context.request.RequestAttributes; import org.springframework.web.method.support.HandlerMethodArgumentResolver; import org.springframework.web.method.support.ModelAndViewContainer; @Slf4j @Component public class UserAnnotationArgumentResolver implements HandlerMethodArgumentResolver { /** * 判断当前请求方法中是否存在 @CurrUser/@CurrOrg 注解,存在则返回 true 不存在则返回 false * * @param methodParameter 参数集合 * @return 存在则返回 true 不存在则返回 false */ @Override public boolean supportsParameter(MethodParameter methodParameter) { return methodParameter.hasParameterAnnotation(CurrentUser.class) && methodParameter.getParameterType().equals(UserSession.class); } /** * @param methodParameter 入参集合 * @param modelAndViewContainer model 和 view * @param nativeWebRequest web相关 * @param webDataBinderFactory 入参解析 * @return 参数值 */ @Override public Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) { CurrentUser currUser = methodParameter.getParameterAnnotation(CurrentUser.class); UserSession session = (UserSession) nativeWebRequest.getAttribute(KeyConstant.CURRENT_USER_KEY, RequestAttributes.SCOPE_REQUEST); log.info(\\\" [ resolveArgument ] 获取的 userSession 为: {}\\\", session); if (null != currUser && null != session) { return session; } return null; } }\"]},\"130\":{\"h\":\"将拦截器进行注册\",\"t\":[\"import lombok.RequiredArgsConstructor; import org.springframework.context.annotation.Configuration; import org.springframework.web.method.support.HandlerMethodArgumentResolver; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; import java.util.Arrays; import java.util.List; @Configuration @RequiredArgsConstructor public class WebConfig implements WebMvcConfigurer { private final AuthorityInterceptor authorityInterceptor; private final HeaderResolveInterceptor headerResolveInterceptor; private static final List<String> exclude_path = Arrays.asList(\\\"/login/*\\\", \\\"/error\\\", \\\"/swagger-resources\\\", \\\"/swagger-resources/configuration/ui\\\", \\\"/doc.html\\\"); public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(headerResolveInterceptor) .addPathPatterns(\\\"/**\\\") .excludePathPatterns(exclude_path); } @Override public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) { // 这里切记使用的是new而不是spring管理的实体,否则会注入失败. resolvers.add(new UserAnnotationArgumentResolver()); } }\"]},\"131\":{\"c\":[\"后端开发\",\"spring系列\"]},\"132\":{\"c\":[\"java\"]},\"133\":{\"h\":\"springBoot统一数据返回类\"},\"134\":{\"h\":\"code枚举类\",\"t\":[\"public enum ResultCode { OK(200, \\\"OK\\\"), ERROR_CODE(-1, \\\"请求失败\\\"), public final int code; public final String msg; ResultCode(int code, String msg) { this.code = code; this.msg = msg; } }\"]},\"135\":{\"h\":\"统一返回数据类\",\"t\":[\"import lombok.Getter; import java.io.Serializable; /** * 统一的 HTTP 响应格式。<br/> * code 为 \\\"ok\\\" 表示业务调用成功，否则是失败的错误码，如果有多个则以逗号分隔。<br/> * data 是业务数据，如果失败了则是 null。 * <p/> */ @Getter public class ResponseBo<T> implements Serializable { /** * 响应码 */ private final int code; /** * 错误信息 */ private final String message; /** * 相应数据 */ private final T data; private ResponseBo(int code, String message, T data) { this.code = code; this.data = data; this.message = message; } public static ResponseBo<?> error() { return error(ResultCode.ERROR_CODE, null); } public static <T> ResponseBo<T> error(String msg) { return error(ResultCode.ERROR_CODE, msg); } public static <T> ResponseBo<T> error(ResultCode code, String msg) { return all(code, msg, null); } public static <T> ResponseBo<T> error(ResultCode code) { return all(code, code.msg, null); } public static ResponseBo<?> ok() { return all(ResultCode.OK, null, null); } public static <T> ResponseBo<T> ok(T data) { return all(ResultCode.OK, null, data); } /** * 全参数自定义 * * @param enumCode 错误的枚举 * @param data 返回的数据实体 * @param message 错误信息 * @param <T> 泛型 * @return ResponseBo<T> */ public static <T> ResponseBo<T> all(ResultCode enumCode, String message, T data) { return new ResponseBo<>(enumCode.code, message, data); } }\"]},\"136\":{\"c\":[\"后端开发\",\"spring系列\"]},\"137\":{\"c\":[\"java\"]},\"138\":{\"h\":\"springBoot实现自定义脱敏注解\"},\"139\":{\"h\":\"创建脱敏枚举\",\"t\":[\"/** * 隐私数据类型枚举 */ public enum PrivacyTypeEnum { /** * 身份证号 */ ID_CARD(\\\"(\\\\\\\\d{4})\\\\\\\\d{10}(\\\\\\\\w{4})\\\", \\\"$1*****$2\\\"), /** * 手机号 */ PHONE(\\\"(\\\\\\\\d{3})\\\\\\\\d{4}(\\\\\\\\d{4})\\\", \\\"$1****$2\\\"), /** * 邮箱 */ EMAIL(\\\"(\\\\\\\\w?)(\\\\\\\\w+)(\\\\\\\\w)(@\\\\\\\\w+\\\\\\\\.[a-z]+(\\\\\\\\.[a-z]+)?)\\\", \\\"$1****$3$4\\\"); public final String regex; public final String replacement; PrivacyTypeEnum(String regex, String replacement) { this.regex = regex; this.replacement = replacement; } }\"]},\"140\":{\"h\":\"创建脱敏注解处理类\",\"t\":[\"import cn.moonlight.common.enums.PrivacyTypeEnum; import cn.moonlight.common.interfaces.PrivacyEncrypt; import cn.moonlight.common.util.StringUtil; import com.alibaba.excel.util.StringUtils; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.BeanProperty; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.JsonSerializer; import com.fasterxml.jackson.databind.SerializerProvider; import com.fasterxml.jackson.databind.ser.ContextualSerializer; import lombok.AllArgsConstructor; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import java.io.IOException; import java.util.Objects; @Slf4j @NoArgsConstructor @AllArgsConstructor public class PrivacySerializer extends JsonSerializer<String> implements ContextualSerializer { private PrivacyEncrypt encrypt; @Override public com.fasterxml.jackson.databind.JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException { // 如果bean为null那么直接设置为null if (property == null) { return prov.findNullValueSerializer(null); } // 如果不是String类型或者当前属性没有脱敏注解那么直接设置为原始处理的BeanProperty PrivacyEncrypt privacyEncrypt = property.getAnnotation(PrivacyEncrypt.class); if (!Objects.equals(property.getType().getRawClass(), String.class) || privacyEncrypt == null) { return prov.findNullValueSerializer(property); } // 走到这里说明是String类型且存在脱敏注解那么将脱敏注解设置为当前String的处理就好 return new PrivacySerializer(privacyEncrypt); } @Override public void serialize(String value, JsonGenerator gen, SerializerProvider serializers) throws IOException { // 如果值为空那么直接退出不再处理 if (StringUtils.isBlank(value)) return; // 如果处理类型不为空那么根据处理类型进行处理 if (encrypt.type() != null) { PrivacyTypeEnum privacyTypeEnum = encrypt.type(); gen.writeString(value.replaceAll(privacyTypeEnum.regex, privacyTypeEnum.replacement)); return; } // 如果处理类型为空那么根据正则表达式和替换字符串进行处理 if (StringUtils.isNotBlank(encrypt.regex()) && StringUtils.isNotBlank(encrypt.replacement())) { gen.writeString(value.replaceAll(encrypt.regex(), encrypt.replacement())); return; } // 如果处理类型为空且正则表达式和替换字符串都为空那么根据前缀不脱敏长度和后缀不脱敏长度进行处理 if (encrypt.prefixNoMaskLen() >= 0 && encrypt.suffixNoMaskLen() > 0) { gen.writeString(StringUtil.privacyEncrypt(value, encrypt.prefixNoMaskLen(), encrypt.suffixNoMaskLen(), encrypt.symbol())); } } }\"]},\"141\":{\"h\":\"创建脱敏注解\",\"t\":[\"import cn.moonlight.common.enums.PrivacyTypeEnum; import cn.moonlight.common.serializer.PrivacySerializer; import com.fasterxml.jackson.annotation.JacksonAnnotationsInside; import com.fasterxml.jackson.databind.annotation.JsonSerialize; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; /** * 自定义数据脱敏注解 */ @Target(ElementType.FIELD) // 作用在字段上 @Retention(RetentionPolicy.RUNTIME) // class文件中保留，运行时也保留，能通过反射读取到 @JacksonAnnotationsInside // 表示自定义自己的注解PrivacyEncrypt @JsonSerialize(using = PrivacySerializer.class) // 该注解使用序列化的方式 public @interface PrivacyEncrypt { /** * 脱敏数据类型（没给默认值，所以使用时必须指定type） */ PrivacyTypeEnum type(); /** * 正则表达式 */ String regex() default \\\"\\\"; /** * 表达式替换 */ String replacement() default \\\"\\\"; /** * 前置不需要打码的长度 */ int prefixNoMaskLen() default 0; /** * 后置不需要打码的长度 */ int suffixNoMaskLen() default 0; /** * 用什么打码 */ char symbol() default '*'; }\"]},\"142\":{\"c\":[\"后端开发\",\"spring系列\"]},\"143\":{\"c\":[\"java\"]},\"144\":{\"h\":\"SpringBoot定时任务\"},\"145\":{\"h\":\"定时任务\",\"t\":[\"需要在springBoot启动类上添加 @EnableScheduling 注解表示开启定时任务\",\"在一个方法上添加 @Scheduled 注解表示当前任务是定时指定该方法, @Scheduled 需要传入 cron 表达式\",\"cron 表达式可以在 https://qqe2.com/cron 调试cron表达式是否是想要的执行\"]},\"146\":{\"h\":\"案例\",\"t\":[\"import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.springframework.scheduling.annotation.Scheduled; import org.springframework.stereotype.Component; @Slf4j @Component public class PullDataTask { @Scheduled(cron = \\\"0 5 0 * * ?\\\") // 每天零点5分调用 public void pullData() {} }\"]},\"147\":{\"h\":\"cron表达式解释\",\"t\":[\"cron 表达式格式: {秒数} {分钟} {小时} {日期} {月份} {星期}\",\"{秒数}{分钟} ==> 允许值范围: 0~59 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常\",\"\\\"*\\\" 代表每隔1秒钟触发；\",\"\\\",\\\" 代表在指定的秒数触发，比如\\\"0,15,45\\\"代表0秒、15秒和45秒时触发任务\",\"\\\"-\\\"代表在指定的范围内触发，比如\\\"25-45\\\"代表从25秒开始触发到45秒结束触发，每隔1秒触发1次\",\"\\\"/\\\"代表触发步进(step)，\\\"/\\\"前面的值代表初始值(\\\"\\\"等同\\\"0\\\")，后面的值代表偏移量，比如\\\"0/20\\\"或者\\\"/20\\\"代表从0秒钟开始，每隔20秒钟触发1次，即0秒触发1次，20秒触发1次，40秒触发1次；\\\"5/20\\\"代表5秒触发1次，25秒触发1次，45秒触发1次；\\\"10-45/20\\\"代表在[10,45]内步进20秒命中的时间点触发，即10秒触发1次，30秒触发1次\",\"{小时} ==> 允许值范围: 0~23 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常,占位符和秒数一样\",\"{日期} ==> 允许值范围: 1~31 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常\",\"{星期} ==> 允许值范围: 1~7 (SUN-SAT),1代表星期天(一星期的第一天)，以此类推，7代表星期六(一星期的最后一天)，不允许为空值，若值不合法，调度器将抛出SchedulerException异常\",\"{年份} ==> 允许值范围: 1970~2099 ,允许为空，若值不合法，调度器将抛出SchedulerException异常\",\"注意：除了{日期}和{星期}可以使用\\\"?\\\"来实现互斥，表达无意义的信息之外，其他占位符都要具有具体的时间含义，且依赖关系为：年->月->日期(星期)->小时->分钟->秒数\"]},\"148\":{\"h\":\"corn 经典表达式\",\"t\":[\"\\\"30 **** ?\\\" 每半分钟触发任务\",\"\\\"30 10 ***?\\\" 每小时的10分30秒触发任务\",\"\\\"30 10 1**?\\\" 每天1点10分30秒触发任务\",\"\\\"30 10 1 20* ?\\\" 每月20号1点10分30秒触发任务\",\"\\\"30 10 1 20 10 ? *\\\" 每年10月20号1点10分30秒触发任务\",\"\\\"30 10 1 20 10 ? 2011\\\" 2011年10月20号1点10分30秒触发任务\",\"\\\"30 10 1 ? 10* 2011\\\" 2011年10月每天1点10分30秒触发任务\",\"\\\"30 10 1 ? 10 SUN 2011\\\" 2011年10月每周日1点10分30秒触发任务\",\"\\\"15,30,45****?\\\" 每15秒，30秒，45秒时触发任务\",\"\\\"15-45****?\\\" 15到45秒内，每秒都触发任务\",\"\\\"15/5****?\\\" 每分钟的每15秒开始触发，每隔5秒触发一次\",\"\\\"15-30/5****?\\\" 每分钟的15秒到30秒之间开始触发，每隔5秒触发一次\",\"\\\"0 0/3** *?\\\" 每小时的第0分0秒开始，每三分钟触发一次\",\"\\\"0 15 10 ?* MON-FRI\\\" 星期一到星期五的10点15分0秒触发任务\",\"\\\"0 15 10 L *?\\\" 每个月最后一天的10点15分0秒触发任务\",\"\\\"0 15 10 LW* ?\\\" 每个月最后一个工作日的10点15分0秒触发任务\",\"\\\"0 15 10 ? *5L\\\" 每个月最后一个星期四的10点15分0秒触发任务\",\"\\\"0 15 10 ?* 5#3\\\" 每个月第三周的星期四的10点15分0秒触发任务\",\"ps: corn在线表达式网站: https://qqe2.com/cron\"]},\"149\":{\"c\":[\"后端开发\",\"spring系列\"]},\"150\":{\"c\":[\"java\"]},\"151\":{\"h\":\"spring boot整合redis\",\"t\":[\"springData也是和SpringBoot齐名的项目.\",\"说明: SpringBoot2.x之后,原来使用的Jedis被替换为了lettuce.\",\"jedis: 采用的直连,多个线程操作的话是不安全的,如果想要避免不安全,使用jedis pool连接池! 更像BIO模式. lettuce: 采用netty, 实例可用再更多个线程中进行共享, 不存在线程不安全的情况.\"]},\"152\":{\"c\":[\"后端开发\",\"redis\"]},\"153\":{\"c\":[\"java\"]},\"154\":{\"h\":\"Mybatis\",\"t\":[\"简介: MyBatis 本是 apache 的一个开源项目 iBatis,2010 年这个项目由 apache software foundation 迁移到了 google code,并且改名为MyBatis 。\",\"2013 年 11 月迁移到 Github。iBATIS 一词来源于“internet”和“abatis”的组合,是一个基于 Java 的持久层框架。\",\"iBATIS 提供的持久层框架包括 SQL Maps 和 Data Access Objects(DAO)。\",\"Mybatis 基于java的持久层框架,它的内部封装了JDBC,让开发人员只需要关注SQL语句本身,不需要花费精力在驱动的加载、连接的创建、Statement的创建等复杂的过程。\",\"Mybatis通过XML或注解的方式将要执行的各种的statement配置起来,并通过java对象和statement中的sql的动态参数进行映射生成最终执行的SQL语句,最后由mybatis框架执行SQL,并将结果直接映射为java对象。\",\"采用了ORM思想解决了实体类和数据库表映射的问题,对JDBC进行了封装,屏蔽了JDBCAPI底层的访问细节,避免我们与jdbc的api打交道,就能完成对数据的持久化操作。\",\"ORM 中分别表示为:\",\"O --> Object Java对象 POJO\",\"R --> Relation 关系,就是数据库中的一张表\",\"M --> mapping 映射\"]},\"155\":{\"h\":\"Mybaits 对象分析\"},\"156\":{\"h\":\"Resources\",\"t\":[\"Resources 类,顾名思义就是资源,用于读取资源文件。其有很多方法通过加载并解析资源文件,返回不同类型的IO流对象。\"]},\"157\":{\"h\":\"SqlSessionFactoryBuilder\",\"t\":[\"SqlSessionFactory的创建,需要使用SqlSessionFactoryBuilder对象的build()方法,事实上使用SqlSessionFactoryBuilder的原因是将SqlSessionFactory这个复杂对象的创建交由Builder来执行,也就是使用了建造者设计模式。\",\"建造者模式\",\"又称生成器模式,是一种对象的创建模式。\",\"可以将一个产品的内部表象与产品的生成过程分割开来, 从而可以使一个建造过程生成具有不同的内部表象的产品(将一个复杂对象的构建与它的表示分离, 使得同样的构建过程可以创建不同的表示).\",\"这样用户只需指定需要建造的类型就可以得到具体产品,而不需要了解具体的建造过程和细节.\",\"在建造者模式中,角色分指导者(Director)与建造者(Builder) 用户联系指导者, 指导者指挥建造者, 最后得到产品. 建造者模式可以强制实行一种分步骤进行的建造过程.\"]},\"158\":{\"h\":\"SqlSessionFactory\",\"t\":[\"SqlSessionFactory 接口对象是一个重量级对象(系统开销大的对象),是线程安全的,所以一个应用只需要一个该对象即可。\",\"创建SqlSession需要使用SqlSessionFactory接口的的 openSession()方法。\",\"默认的 openSession()方法没有参数,它会创建有如下特性的 SqlSession\",\"会开启一个事务(也就是不自动提交)。\",\"将从由当前环境配置的 DataSource 实例中获取 Connection 对象。事务隔离级别将会使用驱动或数据源的默认设置。\",\"预处理语句不会被复用,也不会批量处理更新。\",\"当参数为 TRUE 是 会自动提交, FALSE 时需要手动提交, 默认为 false.\",\"SqlSession接口对象用于执行持久化操作,SqlSession 中一次会话已创建SqlSession对象开始到SqlSession对象关闭为结束.\",\"PS: SqlSession 接口对象是线程不安全的,所以每次数据库会话结束前需要马上调用其 close()方法将其关闭。\"]},\"159\":{\"h\":\"Mybatis 单独使用\",\"t\":[\"本次使用的数据库需要自己创建,在创建时字符集选为utf8mb4排序规则选为utf8mb4_general_ci\"]},\"160\":{\"h\":\"导入依赖\",\"t\":[\"<dependencies> <!-- spring start --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.2.15.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>5.2.15.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-beans</artifactId> <version>5.2.15.RELEASE</version> </dependency> <!-- spring end --> <!-- Mybatis start --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.6</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <!-- Mybatis end --> <dependency> <!-- 测试依赖,可不导入 --> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13.1</version> </dependency> <dependency> <!-- lombok 依赖(减少get/set生成) --> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.24</version> </dependency> </dependencies>\"]},\"161\":{\"h\":\"创建配置文件\",\"t\":[\"ps: Resource文件夹中创建,文件名可自定义,我这里就定义为 mybatis.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <properties resource=\\\"db.properties\\\" /> <!--配置 mybatis 环境--> <environments default=\\\"development\\\"> <!--id:数据源的名称--> <environment id=\\\"development\\\"> <!--事务类型:使用 JDBC 事务,使用 Connection 的提交和回滚--> <transactionManager type=\\\"JDBC\\\"/> <!--数据源 dataSource:创建数据库 Connection 对象type: POOLED 使用数据库的连接池--> <dataSource type=\\\"POOLED\\\"> <!--连接数据库的四大参数注意数据库版本使用的是MySQL8,如果是mysql5的话,driver和url都不一样,参考学过的JDBC--> <property name=\\\"driver\\\" value=\\\"${database.driver}\\\"/> <property name=\\\"url\\\" value=\\\"${database.url}\\\"/> <property name=\\\"username\\\" value=\\\"${database.username}\\\"/> <property name=\\\"password\\\" value=\\\"${database.password}\\\"/> </dataSource> </environment> </environments> <mappers> <!-- 加上这个后就会扫描该路径下所用到的 *Mapper 和 *Mapper.xml 文件 --> <package name=\\\"扫描的包路径\\\"/> </mappers> </configuration>\"]},\"162\":{\"h\":\"数据库配置\",\"t\":[\"ps: 这些配置也可以在mybaits.xml文件中配置\",\"database.driver=com.mysql.cj.jdbc.Driver database.url=jdbc:mysql://ip:port/databaseName?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT database.username=root database.password=root\"]},\"163\":{\"h\":\"SqlSession获取Mapper\",\"t\":[\"import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import java.io.IOException; import java.io.Reader; /** * &#064;Author Sunset * <p> * 单独使用 Mybatis 时重点是如何获取 SqlSession. * <p> * 1. 通过 SqlSessionFactoryBuilder( 建造者模式对象创建) 来获取到 SqlSessionFactory 工厂. * <p> * 2. 从 SqlSessionFactory 工厂调取 openSession() 获取 SqlSession. */ public class MybatisUtil { /** * 将本次使用的 SqlSession 所处的线程封闭到 TreadLocal */ private static final ThreadLocal<SqlSession> THREAD_LOCAL = new ThreadLocal<>(); private static final SqlSessionFactory FACTORY; static { Reader reader = null; try { // 读取配置文件,参数是配置文件名车 reader = Resources.getResourceAsReader(\\\"mybatis.xml\\\"); } catch (IOException e) { e.printStackTrace(); } // 创建工厂 FACTORY = new SqlSessionFactoryBuilder().build(reader); } /** * 获取链接 * @return 返回 SqlSession */ public static SqlSession getSqlSession(){ // 从threadLocal中获取 SqlSession sqlSession = THREAD_LOCAL.get(); if (sqlSession == null){ // openSession 更改为true 会自动提交 sqlSession = FACTORY.openSession(); // 将sqlSession和线程进行绑定 THREAD_LOCAL.set(sqlSession); } return sqlSession; } /** * 关闭链接 */ public static void closeSqlSession(){ // 从threadLocal中获取 SqlSession sqlSession = THREAD_LOCAL.get(); if (sqlSession != null){ sqlSession.close(); THREAD_LOCAL.remove(); } } }\"]},\"164\":{\"h\":\"创建对应的Mapper和Mapper.xml\",\"t\":[\"UserMapper.java\",\"import org.apache.ibatis.annotations.Param; import org.sunset.cn.entity.User; import java.util.List; public interface UserMapper { List<User> queryAll(@Param(\\\"id\\\") Integer id); }\",\"UserMapper.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace 必须时 mapper 文件的完全限定名 --> <mapper namespace=\\\"org.sunset.cn.mapper.UserMapper\\\"> <select id=\\\"queryAll\\\" resultType=\\\"org.sunset.cn.entity.User\\\"> select id,name,age,email from user <where> <if test=\\\"id != null and id != 0\\\"> id = #{id}</if> </where> </select> </mapper>\"]},\"165\":{\"h\":\"调用Mapper\",\"t\":[\"UserService.java\",\"import org.sunset.cn.entity.User; import java.util.List; public interface UserService { /** * 传入 id 时根据 id查询,不传入时查询全部数据 * @param id 用户id * @return 用户数据 */ List<User> getUser(Integer id); }\",\"UserServiceImpl.java\",\"import org.sunset.cn.entity.User; import org.sunset.cn.mapper.UserMapper; import org.sunset.cn.util.MybatisUtil; import java.util.List; public class UserServiceImpl implements UserService { public UserMapper usersMapper = MybatisUtil.getSqlSession().getMapper(UserMapper.class); @Override public List<User> getUser(Integer id) { return usersMapper.queryAll(id); } // 直接使用 main 方法测试了,就不再去写测试方法调用了 public static void main(String[] args) { UserServiceImpl userService = new UserServiceImpl(); List<User> user = userService.getUser(null); user.forEach(System.out::println); } }\",\"ps: 在创建 Mapper 和Mapper.xml 文件时需要注意以下几点\",\"XML映射文件必须与实体类在同一个包下\",\"XML映射文件名称必须与实体类同名.\",\"XML映射文件需要注册到mybatis的全局配置文件中. (我这里使用的是包扫描所以不需要自己一个个进行注册)\"]},\"166\":{\"h\":\"配置文件标签\",\"t\":[\"配置文件中是有顺序的如果顺序错误也会报错,我们在 idea 中可以 ctrl+鼠标左键 点击 configuration 标签就可以看到.\",\"properties 标签有以下属性 \",\"resource: 该属性存在时是指定读取的 properties 文件.\",\"url: 这个属性不常用.\",\"environments \",\"default: 默认读取那个 environment\",\"environment 是 environments 的子标签 \",\"id: environment的id表示\",\"transactionManager 是 environment 的子标签 \",\"type: 选用的事务,我经常用的是 'JDBC'\",\"dataSource 是 environment 的子标签 \",\"type: 使用的连接池\",\"property \",\"name: 属性名\",\"value: 属性值\",\"mappers\",\"package 是 mappers 的子标签 \",\"name: 指定包下的所有Mapper接口\",\"mapper 是 mappers 的子标签 \",\"reource: 使用相对于类路径的资源,从 classpath 路径查找文件\",\"class: 使用的mapper接口的完全限定名,要求: 接口和映射文件同包同名\",\"url: 不常用\"]},\"167\":{\"h\":\"MapperXml标签\",\"t\":[\"select\",\"id 属性是这个 select 标签所对应的方法名,当前xml中唯一不可重复.\",\"此标签必须要有 resultType 或 resultMap 两个选一个使用.\",\"resultType 属性是指定要返回的java实体类.\",\"resultMap 属性是在实体类与数据库表字段不符时使用的.\",\"parameterType 属性是传入的参数类型\",\"update\",\"id 属性是这个 update 标签所对应的方法名,当前xml中唯一不可重复.\",\"parameterType 属性是传入的参数类型\",\"resultType/resultMap 在此标签中不常用.\",\"resultMap\",\"该标签用于处理数据库字段与实体类字段不一致的情况\",\"id 属性是这个 resultMap 标签的名称,当前xml中唯一不可重复.\",\"type 属性是 resultMaper的返回类型.\",\"id 子标签,主键列使用\",\"result 子标签 其他列使用\",\"id 子标签和 result 子标签的属性是一样的所以这里就写到一起了 \",\"column 表示数据库表中的列名,不区分大小写\",\"property 表示实体类中的对应的属性名,区分大小写\",\"javaType 实体类中的对应的属性的类型,可以省略,mybatis会自己推断\",\"jdbcType \\\"数据库中的类型column的类型\\\" 一般省略\",\"foreach标签 mapper 中的方法\",\" void addList(List<Users> list);\",\"xml 中定义对应的标签\",\" <!--批量添加--> <insert id=\\\"addList\\\" parameterType=\\\"arraylist\\\"> INSERT INTO users (loginname,password) VALUES <!-- collection:要遍历的集合,参数是集合类型,直接写list 如果使用 @Parm 指定的话就是 @Parm 中的字符串 item: 遍历的集合中的每一个数据 separator:将遍历的结果用 , 分割 --> <foreach collection=\\\"list\\\" item=\\\"t\\\" separator=\\\",\\\"> (#{t.loginName},#{t.passWord}) </foreach> </insert>\",\"sql 标签\",\"id 属性其他表中嵌套是用于指定当前 sql 标签使用, 当前 xml 唯一不可重复\",\"里面可以写通用的 sql 片段,其它标签引用时使用 include 标签即可.\",\"include 标签\",\"refid 要引用的标签 id\",\"以后遇到其他标签在进行补充吧,暂时常用的就这些.\",\"ps: parameterType属性需要注意: 如果传入的是 List/Set/.. 那么 parameterType 里传入的是 List 那组尖括号里所包的类型,例如传入的参数是 List<Integer> 那么 parameterType= integer.\"]},\"168\":{\"h\":\"转义字符\",\"t\":[\"字符\",\"转义符号\",\"备注\",\"<\",\"<\",\"小于\",\"<=\",\"<=\",\"小于等于\",\">\",\">\",\"大于\",\">=\",\">=\",\"大于等于\",\"<>\",\"<>\",\"不等于\",\"&\",\"&\",\"与\",\"’\",\"'\",\"单引号\",\"”\",\"\\\"\",\"双引号\"]},\"169\":{\"c\":[\"后端开发\",\"spring系列\"]},\"170\":{\"c\":[\"java\"]},\"171\":{\"h\":\"spring\",\"t\":[\"本文记录了 spring/bean注入/aop/事务.\"]},\"172\":{\"h\":\"spring 优势\",\"t\":[\"方便解耦,简化开发 Spring 就是一个大工厂,可以将所有对象的创建和依赖关系的维护交给 Spring 管理。\",\"方便集成各种优秀框架 Spring 不排斥各种优秀的开源框架,其内部提供了对各种优秀框架(如 Struts2、Hibernate、MyBatis 等)的直接支持。\",\"降低 Java EE API 的使用难度 Spring 对 Java EE 开发中非常难用的一些 API(JDBC、JavaMail、远程调用等)都提供了封装,使这些 API 应用的难度大大降低。\",\"方便程序的测试 Spring 支持 JUnit4,可以通过注解方便地测试 Spring 程序。\",\"AOP 编程的支持 Spring 提供面向切面编程,可以方便地实现对程序进行权限拦截和运行监控等功能。\",\"声明式事务的支持 只需要通过配置就可以完成对事务的管理,而无须手动编程\"]},\"173\":{\"h\":\"spring 核心容器由以下部分组成\",\"t\":[\"Spring-core: 提供框架的基本组成部分,包括 IoC 和依赖注入功能\",\"Spring-beans: 提供 BeanFactory,工厂模式的微妙实现,它移除了编码式单例的需要,并且可以把配置和依赖从实际编码逻辑中解耦。\",\"Spring-context: 建立在由 core和 beans 模块的基础上建立起来的,它以一种类似于 JNDI 注册的方式访问对象。Context 模块继承自 Bean 模块,并且添加了国际化(比如,使用资源束)、事件传播、资源加载和透明地创建上下文(比如,通过 Servelet 容器)等功能。Context 模块也支持 JavaEE 的功能,比如 EJB、JMX 和远程调用等。ApplicationContext 接口是 Context 模块的焦点。\",\"Spring-context-support: 提供了对第三方集成到 Spring 上下文的支持,比如缓存(EhCache,Guava, JCache)、邮件(JavaMail)、调度(CommonJ, Quartz)、模板引擎(FreeMarker,JasperReports, Velocity)等\",\"Spring-expression(SpEL,Spring 表达式语言,Spring Expression Language)\"]},\"174\":{\"h\":\"控制反转(IOC)\"},\"175\":{\"h\":\"BeanFactory\",\"t\":[\"BeanFactory 是基础类型的 IoC 容器,是一个管理 Bean 的工厂,它主要负责初始化各种 Bean,并调用它们的生命周期方法。\",\"BeanFactory 接口实现类最常见的是org.Springframework.beans.factory.xml.XmlBeanFactory,它是根据 XML 配置文件中的定义装配Bean 的.\",\"BeanFactory使用示例:\",\"FileSystemResource fileSystemResource = new FileSystemResource(Spring配置文件的名称); BeanFactory beanFactory = new XmlBeanFactory(fileSystemResource);\"]},\"176\":{\"h\":\"ApplicationContext\",\"t\":[\"ApplicationContext 是 BeanFactory 的子接口,也被称为应用上下文。\",\"它不仅提供了 BeanFactory 的所有功能,还添加了对 i18n(国际化)、资源访问、事件传播等方面的良好支持。\",\"ApplicationContext 接口有两个常用的实现类:\",\"ClassPathXmlApplicationContext——常用\",\"FileSystemXmlApplicationContext\"]},\"177\":{\"h\":\"ClassPathXmlApplicationContext\",\"t\":[\"该类从类路径 ClassPath 中寻找指定的 XML 配置文件,找到并装载完成 ApplicationContext 的实例化工作\",\"ClassPathXmlApplicationContext使用示例:\",\"FileSystemResource systemResource = new FileSystemResource(Spring配置文件的名称); Factory beanFactory = new XmlBeanFactory(systemResource);\"]},\"178\":{\"h\":\"FileSystemXmlApplicationContext\",\"t\":[\"它与 ClassPathXmlApplicationContext 的区别是:\",\"在读取 Spring 的配置文件时,FileSystemXmlApplicationContext 不再从类路径中读取配置文件,而是通过参数指定配置文件的位置,它可以获取类路径之外的资源,如“D:\\\\application.xml”。\",\"FileSystemXmlApplicationContext使用示例:\",\"ApplicationContext context = new FileSystemXmlApplicationContext(String configLocation);\"]},\"179\":{\"h\":\"bean注入\"},\"180\":{\"h\":\"DI注入\",\"t\":[\"容器将bean实例调用无参构造器创建对象并对其属性进行初始化的过程称为DI注入.\",\"DI注入有三大类:\",\"set注入: 是通过 setter 方法传入被调用者的实例。\",\"构造器: 构造注入是在构造调用者实例的同时,完成被调用者的实例化,使用构造器设置依赖关系。\",\"自动注入: \",\"对于引用类型属性的注入,也可不在配置文件中显示的注入. 可以通过为标签 设置 autowire 属性值,为引用类型属性进行隐式自动注入(默认是不自动注入引用类型属性)\",\"byName自动注入: 当配置文件中被调用者 bean 的 id 值与代码中调用者 bean 类的属性名相同时,可使用byName 方式,让容器自动将被调用者 bean 注入给调用者 bean.容器是通过调用者的 bean类的属性名与配置文件的被调用者 bean 的 id 进行比较而实现自动注入的。\",\"byType自动注入: 配置文件中被调用者 bean 的 class 属性指定的类,要与代码中调用者 bean 类的某引用类型属性类型同源。即要么相同,要么有 is-a 关系(子类,或是实现类)。但这样的同源的被调用 bean 只能有一个。多于一个,容器就不知该匹配哪一个了.\"]},\"181\":{\"h\":\"注解注入\",\"t\":[\"@Value: 需要在属性上使用注解@Value,该注解的value属性用于指定要注入的值。\",\"byType自动注入: 需要在引用属性上使用注解@Autowired,该注解默认使用按类型自动装配 Bean 的方式。\",\"byName自动注入: 需要在引用属性上联合使用注解@Autowired与@Qualifier。@Qualifier 的value属性用于指定要匹配的Bean的id值。\",\"@Resource: @Resource 注解既可以按名称匹配Bean也可以按类型匹配Bean,默认是按名称注入。(JDK6以上可用,JDK17以上与JDK8版本的导包路径不同.)\"]},\"182\":{\"h\":\"Bean控制注解\",\"t\":[\"@Controller: 用于controller实现类的注解,该注解创建的对象可以作为处理器接收用户的请求。\",\"@Service: 用户service实现类的注解\",\"@Component: 声明当前是一个bean 并交给 spring 管理\",\"@Repository: 用于dao实现类的的注解,在数据持久化对象中使用\",\"ps: @Repository,@Service,@Controller 是对@Component 注解的细化,标注不同层的对象。 即持久层对象,业务层对象,控制层对象。\"]},\"183\":{\"h\":\"AOP\",\"t\":[\"术语解释\",\"Target(目标对象): 要被增强的对象,一般是业务逻辑类的对象。\",\"Proxy(代理): 一个类被 AOP 织入增强后,就产生一个结果代理类。\",\"Aspect(切面): 表示增强的功能,就是一些代码完成的某个功能,非业务功能。 是切入点和通知的结合。\",\"Joinpoint(连接点): 所谓连接点是指那些被拦截到的点。 在Spring中,这些点指的是方法(一般是类中的业务方法),因为Spring只支持方法类型的连接点。\",\"Pointcut(切入点): \",\"切入点指声明的一个或多个连接点的集合。通过切入点指定一组方法。\",\"被标记为 final 的方法是不能作为连接点与切入点的。\",\"因为最终的是不能被修改的,不能被增强的。\",\"Advice(通知/增强): \",\"所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。通知定义了增强代码切入到目标代码的时间点,是目标方法执行之前执行,还是之后执行等。通知类型不同,切入时间不同。\",\"通知的类型:前置通知,后置通知,异常通知,最终通知,环绕通知。\",\"切入点定义切入的位置,通知定义切入的时间。\",\"Weaving(织入): 是指把增强应用到目标对象来创建新的代理对象的过程。 spring 采用动态代理织入,而 AspectJ 采用编译期织入和类装载期织入。\"]},\"184\":{\"h\":\"AspectJ 对 AOP 的实现\",\"t\":[\"AspectJ的通知类型\",\"前置通知\",\"后置通知\",\"环绕通知\",\"异常通知\",\"最终通知\",\"AspectJ 定义了专门的表达式用于指定切入点, 表达式的原型: execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern ?)\",\"modifiers-pattern 访问权限类型\",\"ret-type-pattern 返回值类型\",\"declaring-type-pattern 包名类名\",\"name-pattern(param-pattern) 方法名(参数类型和参数个数)\",\"throws-pattern 抛出异常类型\",\"？表示可选的部分\",\"语法: execution(访问权限 方法返回值 方法声明(参数) 异常类型) 访问权限和异常类型可以省略或用符号代替.\",\"符号解释:\",\"*: 0-多个任意字符\",\"..: 用在方法参数中,表示任意个参数；用在包名后,表示当前及其子包路径\",\"+: 用在类名后,表示当前及其子类；用在接口后,表示当前接口及其实现类\",\"切入点示例:\",\"execution(* com.sunset.service.*.*(..)) : 指定切入点为:定义在 service 包里的任意类的任意方法。\",\"execution(* com.sunset.service..*.*(..)): 指定切入点为: 定义在 service 包或者子包里的任意类的任意方法 .. 出现在类名中时,后面必须跟 *,表示包、子包下的所有类。\",\"execution(* com.sunset.service.IUserService+.*(..)): 指定切入点为: IUserService 若为接口,则为接口中的任意方法及其所有实现类中的任意方法 若为类,则为该类及其子类中的任意方法。\"]},\"185\":{\"h\":\"AOP示例\"},\"186\":{\"h\":\"引入依赖\",\"t\":[\" <!--spring 核心依赖--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.2.13.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>5.2.13.RELEASE</version> </dependency>\"]},\"187\":{\"h\":\"创建业务接口与实现类\",\"t\":[\"/** * Service 接口 */ public interface PersonService { void add(); } /** * 实现类 */ @Service public class PersonServiceImpl implements PersonService { @Override public void add() { System.out.println(\\\"add ---\\\"); } }\"]},\"188\":{\"h\":\"定义AOP切面类\",\"t\":[\"import org.aspectj.lang.JoinPoint; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.*; import org.springframework.stereotype.Component; /* * 在定义好切面 Aspect 后,需要通知 Spring 容器,让容器生成“目标类+ 切面”的代理对象。 * 这个代理是由容器自动生成的,只需要在 Spring 配置文件中注册一个基于 aspectj 的自动代理生成器,其就会自动扫描到@Aspect 注解,并按通知类型与切入点,将其织入,并生成代理。 */ @Component @Aspect public class MyAspect { /* @Before: 前置通知, 目标方法运行前运行 @After: 后置通知, 目标方法运行后运行 @AfterReturning: 返回通知, 目标方法返回值之后运行 @AfterThrowing: 异常通知, 目标方法抛出异常时运行 @Around: 环绕通知, 目标方法运行前后运行 */ /** * 当较多的通知增强方法使用相同的 execution 切入点表达式时,编写、维护均较为麻烦。 * AspectJ 提供了@Pointcut 注解,用于定义 execution 切入点表达式。 * 其用法是,将@Pointcut 注解在一个方法之上,以后所有的 execution 的 value 属性值均 * 可使用该方法名作为切入点。代表的就是@Pointcut 定义的切入点。 * 这个使用@Pointcut 注解方法一般使用 private 的标识方法,即没有实际作用的方法。 */ @Pointcut(\\\"execution(* com.blackFire.service..*.*(..))\\\") private void pointCut() { } @Pointcut(\\\"execution(* com.blackFire.service..*.add*(..))\\\") private void pointCut2() { } /** * 声明前置通知 * */ @Before(\\\"pointCut()\\\") public void before(JoinPoint jp) { System.out.println(\\\"前置通知:在目标方法执行之前被调用的通知\\\"); String name = jp.getSignature().getName(); System.out.println(\\\"拦截的方法名称:\\\" + name); Object[] args = jp.getArgs(); System.out.println(\\\"方法的参数格式:\\\" + args.length); System.out.println(\\\"方法参数列表:\\\"); for (Object arg : args) { System.out.println(\\\"\\\\t\\\" + arg); } } /** * AfterReturning 注解声明后置通知 * value: 表示切入点表达式 * returning 属性表示 返回的结果,如果需要的话可以在后置通知的方法中修改结果 */ @AfterReturning(value = \\\"pointCut2()\\\",returning = \\\"result\\\") public Object afterReturn(Object result){ if(result!=null){ boolean res=(boolean)result; if(res){ result=false; } } System.out.println(\\\"后置通知:在目标方法执行之后被调用的通知,result=\\\"+result); return result; } /** * Around 注解声明环绕通知 * ProceedingJoinPoint 中的proceed方法表示目标方法被执行 */ @Around(value = \\\"pointCut()\\\") public Object around(ProceedingJoinPoint pjp) throws Throwable { System.out.println(\\\"环绕方法---目标方法的执行之前\\\"); Object proceed = pjp.proceed(); System.out.println(\\\"环绕方法---目标方法的执行之后\\\"); return proceed; } /** * AfterThrowing 注解声明异常通知方法 * value: 表示切入点表达式 * returning 属性表示 返回的结果,如果需要的话可以在后置通知的方法中修改结果 */ @AfterThrowing(value = \\\"pointCut()\\\",throwing = \\\"ex\\\") public void exception(JoinPoint jp,Throwable ex){ //一般会把异常发生的时间、位置、原有都记录下来 System.out.println(\\\"异常通知:在目标方法执行出现异常的时候才会别调用的通知,否则不执行\\\"); System.out.println(jp.getSignature()+\\\"方法出现异常,异常信息是:\\\"+ex.getMessage()); } /** * After 注解声明为最终通知 */ @After( \\\"pointCut()\\\") public void myFinally(){ System.out.println(\\\"最终通知:无论是否出现异常都是最后被调用的通知\\\"); } }\"]},\"189\":{\"h\":\"spring配置文件中注册Aop代理类\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd \\\"> <!-- 配置包扫描, 在 base-package 中配置多个包扫描时使用 `;` 进行分割,也可以使用空格进行分割 --> <context:component-scan base-package=\\\"com.blackFire.domain;com.blackFire.service;com.blackFire.aop\\\"/> <!-- 开启 aspectj 使用--> <aop:aspectj-autoproxy proxy-target-class=\\\"true\\\"/> <!-- aop:aspectj-autoproxy的底层是由 AnnotationAwareAspectJAutoProxyCreator 实现的, 是基于 AspectJ 的注解适配自动代理生成器。 其工作原理是,aop:aspectj-autoproxy通过扫描找到@Aspect 定义的切面类,再由切面类根据切入点找到目标类的目标方法,再由通知类型找到切入的时间点。 --> </beans>\"]},\"190\":{\"h\":\"Spring 事务\",\"t\":[\"事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量\",\"事务隔离级别\",\"事务传播行为\",\"事务默认超时时限\",\"事务隔离级别常量,这些常量均是以 ISOLATION_开头\",\"DEFAULT: 采用 DB 默认的事务隔离级别。 MySql 的默认为REPEATABLE_READ； Oracle默认为READ_COMMITTED。\",\"READ_UNCOMMITTED: 读未提交,未解决任何并发问题。\",\"READ_COMMITTED: 读已提交,解决脏读,存在不可重复读与幻读。\",\"REPEATABLE_READ: 可重复读。解决脏读、不可重复读,存在幻读\",\"SERIALIZABLE: 串行化。不存在并发问题。\"]},\"191\":{\"h\":\"事务传播行为常量\",\"t\":[\"事务传播行为常量, 所谓事务传播行为是指,处于不同事务中的方法在相互调用时,执行期间事务的维护情况。 如,A 事务中的方法 doSome()调用 B 事务中的方法 doOther(),在调用执行期间事务的维护情况,就称为事务传播行为。事务传播行为是加在方法上的。\",\"Propagation.REQUIRED:当前没有事务的时候,就会创建一个新的事务,如果当前有事务就直接加入该事务,比较常用的设置\",\"Propagation.SUPPORTS: 如果当前有事务就直接加入该事务,当前没有事务的时候就以非事务方式执行\",\"Propagation.MANDATORY: 支持当前事务,如果当前有事务就直接加入该事务,当前没有事务的时候就抛出异常\",\"Propagation.REQUIRES_NEW: 创建新事务,无论当前是否有事务都会创建新的\",\"PROPAGATION_NESTED\",\"PROPAGATION_NEVER\",\"PROPAGATION_NOT_SUPPORTED\",\"默认事务超时时限: 常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限,sql 语句的执行时长。 声明式事务控制, Spring提供的对事务的管理,就叫做声明式事务管理。 如果用户需要使用spring的声明式事务管理,在配置文件中配置即可:不想使用的时候直接移除配置。 这种方式实现了对事务控制的最大程度的解耦。 声明式事务管理,核心实现就是基于AOP。 Spring中提供了对事务的管理,事务必须在service层统一控制。\"]},\"192\":{\"h\":\"事务的粗细粒度\",\"t\":[\"细粒度:对方法中的某几行的代码进行开启提交回滚；\",\"粗粒度:对整个方法进行开启提交回滚；\",\"Spring中的aop只能对方法进行拦截,所有我们也就针对方法进行事务的控制。\",\"如果只有单条的查询语句,可以省略事务\",\"如果一次执行的是多条查询语句, 例如统计结果、报表查询,必须开启事务。\"]},\"193\":{\"h\":\"注解形式控制事务\"},\"194\":{\"h\":\"导入依赖\",\"t\":[\"<dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>com.mchange</groupId> <artifactId>c3p0</artifactId> <version>0.9.5.2</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency>\"]},\"195\":{\"h\":\"添加事务注解\",\"t\":[\"import com.sunset.service.PersonService; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Propagation; import org.springframework.transaction.annotation.Transactional; @Service public class PersonServiceImpl implements PersonService { /** * @Transactional 属性 说明: * readOnly:是否只读 * * rollbackFor={Exception.class}: 遇到什么异常会回滚 * * propagation事务的传播: * Propagation.REQUIRED:当前没有事务的时候,就会创建一个新的事务；如果当前有事务,就直 接加入该事务,比较常用的设置 * Propagation.SUPPORTS:支持当前事务,如果当前有事务,就直接加入该事务；当前没有事务的 时候,就以非事务方式执行 * Propagation.MANDATORY:支持当前事务,如果当前有事务,就直接加入该事务；当前没有事务的 时候,就抛出异常 * Propagation.REQUIRES_NEW:创建新事务,无论当前是否有事务都会创建新的 * * isolation=Isolation.DEFAULT:事务的隔离级别:默认是数据库的隔离级别 * */ @Transactional(propagation = Propagation.REQUIRED,rollbackFor = {Exception.class}) @Override public void add() { System.out.println(\\\"add ---\\\"); } }\"]},\"196\":{\"h\":\"配置文件中开启事务\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd \\\"> <!-- 链接数据库的数据源--> <bean id=\\\"dataSource\\\" class=\\\"com.mchange.v2.c3p0.ComboPooledDataSource\\\"> <property name=\\\"driverClass\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"jdbcUrl\\\" value=\\\"\\\"/> <property name=\\\"user\\\" value=\\\"\\\" /> <property name=\\\"password\\\" value=\\\"\\\" /> </bean> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\" /> </bean> <tx:annotation-driven transaction-manager=\\\"transactionManager\\\" /> </beans>\"]},\"197\":{\"c\":[\"后端开发\",\"spring系列\"]},\"198\":{\"c\":[\"java\"]},\"199\":{\"h\":\"SpringSSM整合\"},\"200\":{\"h\":\"Spring 整合 mybatis(SSM)\"},\"201\":{\"h\":\"依赖导入\",\"t\":[\" <!-- 注意这个 packaging 标签必须存在,不然 tomcat 插件一启动就结束了 --> <packaging>war</packaging> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <maven.compiler.target>1.8</maven.compiler.target> <maven.compiler.source>1.8</maven.compiler.source> <spring.version>5.2.15.RELEASE</spring.version> <servlet-api.version>3.0.1</servlet-api.version> <mysql.version>8.0.28</mysql.version> <druid.version>1.2.3</druid.version> <pagehelper.version>5.1.10</pagehelper.version> <log4j.version>1.2.17</log4j.version> <mybatis.version>3.5.6</mybatis.version> <mybatis.spring.version>1.3.3</mybatis.spring.version> <jackson.version>2.9.6</jackson.version> <lombok.version>1.16.14</lombok.version> <junit.version>4.12</junit.version> <lombok.version>1.18.24</lombok.version> </properties> <dependencies> <!-- spring start --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> <version>${spring.version}</version> </dependency> <dependency> <!-- tomcat7 插件依赖 和视图解析器也需要此依赖 --> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>${servlet-api.version}</version> <scope>provided</scope> </dependency> <dependency> <!-- 开启事务使用 --> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>${spring.version}</version> </dependency> <!-- spring end --> <!-- Mybatis start --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <dependency> <!-- alibaba 的 druid --> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>${druid.version}</version> </dependency> <dependency> <!-- github 上的分页插件 --> <groupId>com.github.pagehelper</groupId> <artifactId>pagehelper</artifactId> <version>${pagehelper.version}</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>${mybatis.version}</version> </dependency> <!-- mybatis-spring 与spring组合为 spring ssm 时需要引入,因为 --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>${mybatis.spring.version}</version> </dependency> <!-- Mybatis end --> <dependency> <!-- Jackson Json处理工具包 --> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>${jackson.version}</version> </dependency> <dependency> <!-- lombok 依赖(减少get/set生成) --> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>${lombok.version}</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.2</version> <configuration> <path>/</path> <port>80</port> <uriEncoding>UTF-8</uriEncoding> </configuration> </plugin> </plugins> </build>\"]},\"202\":{\"h\":\"数据库连接配置文件\",\"t\":[\"文件名: db.properties\",\"database.driver=com.mysql.cj.jdbc.Driver database.url=jdbc:mysql://ip:3306/tableName?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT database.username=mysqlUserName database.password=mysqlUserPwd\"]},\"203\":{\"h\":\"配置spring\",\"t\":[\"mybatis.xml(如果不需要可以不创建) 除了 setting 用到 mybatis.xml 文件其他都交给 spring 来管理\"]},\"204\":{\"h\":\"创建spring配置文件application.xml\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd \\\"> <!-- 将这些包中添加注解之后对象的创建权限交给Spring容器--> <context:component-scan base-package=\\\"org.sunset.cn.entity;org.sunset.cn.service;\\\" /> <!-- 读取db 配置文件 --> <context:property-placeholder location=\\\"classpath*:db.properties\\\"/> <!-- 配置数据库链接数据源--> <bean id=\\\"dataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"driverClassName\\\" value=\\\"${database.driver}\\\"/> <property name=\\\"url\\\" value=\\\"${database.url}\\\"/> <property name=\\\"username\\\" value=\\\"${database.username}\\\"/> <property name=\\\"password\\\" value=\\\"${database.password}\\\"/> </bean> <!-- 配置 sqlSessionFactory Bean --> <bean id=\\\"sqlSessionFactory\\\" class=\\\"org.mybatis.spring.SqlSessionFactoryBean\\\"> <!-- 如果有mybatis的单独配置文件,需要在此插入 --> <property name=\\\"configLocation\\\" value=\\\"classpath:mybatis.xml\\\"/> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\"/> <property name=\\\"plugins\\\"> <array> <!-- 分页 --> <bean class=\\\"com.github.pagehelper.PageInterceptor\\\"> <property name=\\\"properties\\\"> <value> reasonable = true </value> </property> </bean> </array> </property> </bean> <!-- 配置 mapper 扫描 --> <bean id=\\\"mapperScannerConfigurer\\\" class=\\\"org.mybatis.spring.mapper.MapperScannerConfigurer\\\"> <property name=\\\"sqlSessionFactoryBeanName\\\" value=\\\"sqlSessionFactory\\\"/> <property name=\\\"basePackage\\\" value=\\\"org.sunset.cn.mapper\\\" /> </bean> <!-- 通过注解方式实现事务 --> <tx:annotation-driven transaction-manager=\\\"transactionManager\\\"/> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\" /> </bean> </beans>\"]},\"205\":{\"h\":\"创建mvc的配置文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:mvc=\\\"http://www.springframework.org/schema/mvc\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd \\\"> <!--springmvc的配置文件:控制器的bean对象都在这里扫描--> <context:component-scan base-package=\\\"org.sunset.cn.controller\\\"/> <mvc:annotation-driven/> <!--视图解析器--> <bean id=\\\"internalResourceViewResolver\\\" class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"> <property name=\\\"prefix\\\" value=\\\"/html/\\\"/> <property name=\\\"suffix\\\" value=\\\".html\\\"/> </bean> <!--静态资源处理--> <mvc:resources mapping=\\\"/html/**\\\" location=\\\"/html/\\\"/> </beans>\"]},\"206\":{\"h\":\"创建 web.xml\",\"t\":[\"idea中需要创建 webapp/WEB-INF/web.xml 来使用. 也就是需要配置 web.\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <!-- 监听器 监听 spring 配置文件 --> <context-param> <param-name>contextConfigLocation</param-name> <param-value>classpath*:application.xml</param-value> </context-param> <listener> <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> </listener> <servlet> <servlet-name>DispatcherServlet</servlet-name> <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> <init-param> <param-name>contextConfigLocation</param-name> <param-value>classpath*:springMvcApplication-local.xml</param-value> </init-param> </servlet> <servlet-mapping> <servlet-name>DispatcherServlet</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> </web-app>\"]},\"207\":{\"h\":\"创建一个 controller 测试下是否成功\",\"t\":[\"import lombok.RequiredArgsConstructor; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.*; @Controller @ResponseBody @RequestMapping(\\\"user\\\") public class UserController { @GetMapping(value = \\\"\\\") public String queryAllOrById()) { return \\\"success\\\"; } }\",\"ps: 启动时使用 tomcat 插件启动,也可以去 idea 的启动配置里选择 mavan ,再在页面中配置运行命令为 tomcat7:run.\"]},\"208\":{\"c\":[\"后端开发\",\"spring系列\"]},\"209\":{\"c\":[\"java\"]},\"210\":{\"h\":\"Spring MVC\"},\"211\":{\"h\":\"组件\"},\"212\":{\"h\":\"DispatcherServlet\",\"t\":[\"前端控制器,也称为中央控制器或者核心控制器。\",\"用户请求的入口控制器,它就相当于 mvc 模式中的c,DispatcherServlet 是整个流程控制的中心,相当于是 SpringMVC 的大脑,由它调用其它组件处理用户的请求,DispatcherServlet 的存在降低了组件之间的耦合性。\",\"SpringMVC框架提供的该核心控制器需要我们在web.xml文件中配置。\"]},\"213\":{\"h\":\"HandlerMapping\",\"t\":[\"处理器映射器 HandlerMapping也是控制器,派发请求的控制器。\",\"我们不需要自己控制该类,但是他是springmvc运转历程中的重要的一个控制器。\",\"HandlerMapping负责根据用户请求找到 Handler 即处理器(也就是我们所说的 Controller),SpringMVC 提供了不同的映射器实现不同的映射方式,\"]},\"214\":{\"h\":\"Handler\",\"t\":[\"处理器 Handler 是继 DispatcherServlet 前端控制器的后端控制器,在DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理。\",\"由于 Handler 涉及到具体的用户业务请求,所以一般情况需要程序员根据业务需求开发 Handler。(这里所说的 Handler 就是指我们的 Controller)\"]},\"215\":{\"h\":\"HandlAdapter\",\"t\":[\"处理器适配器 通过 HandlerAdapter 对处理器进行执行,这是适配器模式的应用,通过扩展处理器适配器,支持更多类型的处理器,调用处理器传递参数等工作。\"]},\"216\":{\"h\":\"ViewResolver\",\"t\":[\"视图解析器 ViewResolver 负责将处理结果生成 View 视图,ViewResolver 首先根据逻辑视图名解析成物理视图名称,即具体的页面地址,再生成 View 视图对象,最后对 View 进行渲染将处理结果通过页面展示给用户。\",\"SpringMVC 框架提供了很多的 View 视图类型,包括:jstlView、freemarkerView、pdfView 等。\"]},\"217\":{\"h\":\"工作原理\",\"t\":[\"用户在浏览器中访问相应网页时,浏览器会向服务器发送一个请求,此时服务器中接收此请求的时前端控制器DispatcherServlet\",\"前端控制器DispatcherServlet接收到此请求后,像Spring中的映射器发起请求HandlerMapping中查询对应的处理类\",\"映射器找到相应的处理类时,将结果返回给前端控制器DispatCherServlet,此时前端控制会去找处理适配器HandlerAdaptor\",\"处理适配器接收到来自前端控制器DispathCherServlet后,对相应的处理器发起处理\",\"相应的处理器类接收到指令后,找到对应方法进行执行\",\"最终将执行结果返回给处理适配器HandlerAdaptor. [ 返回的结果可以是 modelAndView也可以是其他 ]\",\"处理适配器接收到返回的结果后,将结果直接返回给前端控制器DispathCherServlet\",\"前端控制器接收到来自处理适配器的结果后,将结果交给视图解析器ViewResolver进行解析\",\"视图解析器ViewResolver解析完成后将视图地址以及携带的数据返回给前端控制器\",\"前端控制接收到视图地址和数据后,请求相应的视图,拿到对应的视图\",\"最终将视图和数据反馈给用户请求的浏览器.\"]},\"218\":{\"h\":\"注解\"},\"219\":{\"h\":\"@Controller\",\"t\":[\"和在 spring 中是一样的,都是交给容器来创建对象,只不过在 springmvc中默认返回的是页面.\",\"如果在这个注解的类中想要返回对象,需要在方法上添加 @ResponseBody 注解.\"]},\"220\":{\"h\":\"@ResponseBody\",\"t\":[\"可以添加到方法上,表示当前方法的返回值是对象,而不是转发页面\"]},\"221\":{\"h\":\"@RestController\",\"t\":[\"这个注解可以理解为 @Controller 和 @ResponseBody 的组合.使用这个注解后,在当前类中,默认返回的是对象而不是请求或转发的页面.如果使用这个注解后想要转发页面,需要使用 ModelAndView 进行封装才可以转发.\"]},\"222\":{\"h\":\"RequestMapping\",\"t\":[\"该注解可以定义在类上,也可以定义方法上,但是含义不同。\",\"在类上时类似与一级请求,如果这个类处理的请求方法是 \\\"/user/add\\\",\\\"/user/update\\\"这种就可以把 user 提取到类上作为一级请求使用.\",\"在方法上时,如果有一级请求的情况下,类似与二级请求也就是 上面示例中 user 后面不同的请求路径.在方法上时不指定 method 时是所有类型的请求都会进行处理.\",\"method 属性是由 RequestMethod 进行限定的,也就是 method 只能使用 RequestMethod 枚举类中的方法.\",\"@GetMapping/@PostMapping/@PutMapping 都是 @RequestMapping 的延申标签,分别对应各个请求.\"]},\"223\":{\"h\":\"自定义拦截器\",\"t\":[\"自定义拦截器需要实现 HandlerInterceptor 接口.\"]},\"224\":{\"h\":\"HandlerInterceptor接口\"},\"225\":{\"h\":\"preHandle\",\"t\":[\"该方法在处理器方法执行之前执行。\",\"返回值为boolean,若为true,则紧接着会执行处理器方法,且会将afterCompletion() 方法放入到一个专门的方法栈中等待执行。\"]},\"226\":{\"h\":\"postHandle\",\"t\":[\"该方法在处理器方法执行之后执行。\",\"处理器方法若最终未被执行,则该方法不会执行。\",\"由于该方法是在处理器方法执行完后执行,且该方法参数中包含 ModelAndView,所以该方法可以修改处理器方法的处理结果数据,且可以修改跳转方向。\"]},\"227\":{\"h\":\"afterCompletion\",\"t\":[\"当 preHandle()方法返回true时,会将该方法放到专门的方法栈中,等到对请求进行响应的所工作完成之后才执行该方法。 即该方法是在前端控制器渲染(数据填充)了响应页面之后执行的,此时对ModelAndView再操作也对响应无济于事。\",\"最后执行的方法,清除资源,例如在Controller方法中加入数据\"]},\"228\":{\"h\":\"在配置文件中配置\",\"t\":[\"<mvc:interceptors> <!-- 这里可以同时配置多个拦截器,配置的顺序就是拦截器的拦截顺序 --> <mvc:interceptor> <!-- 拦截器要拦截的请求路径 拦截所有用/** --> <mvc:mapping path=\\\"/**\\\"/> <!-- 指定干活的拦截器 --> <bean class=\\\"com.blackFire.interceptor.MyInterceptor2\\\" id=\\\"myInterceptor\\\"></bean> </mvc:interceptor> <mvc:interceptor> <!-- 拦截器要拦截的请求路径 拦截所有用/** --> <mvc:mapping path=\\\"/**\\\"/> <!-- 指定干活的拦截器 --> <bean class=\\\"com.blackFire.interceptor.MyInterceptor2\\\" id=\\\"myInterceptor2\\\"></bean> </mvc:interceptor> </mvc:interceptors> <!-- 如果有多个拦截器的时候: preHandle: 按照配置前后顺序执行 postHandle: 按照配置前后逆序执行 afterCompletion: 按照配置前后逆序执行 -->\"]},\"229\":{\"c\":[\"后端开发\",\"spring系列\"]},\"230\":{\"c\":[\"java\"]},\"231\":{\"h\":\"EasyExcel 工具类\"},\"232\":{\"h\":\"创建相关注解\"},\"233\":{\"h\":\"FieldRequired\",\"t\":[\"import java.lang.annotation.*; /** * 当前注解可以使用在类或成员变量上,请不要同时在类和成员变量上同时使用,同时使用会进行两次判断. * <P> * 在头部使用时表示当前所有成员变量都需要进行必填校验 * <P> * 在成员变量上使用时表示当前成员变量需要进行必填校验 * @author 黑色的小火苗 * */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE,ElementType.FIELD}) public @interface FieldRequired { }\"]},\"234\":{\"h\":\"HeadVerification\",\"t\":[\"import java.lang.annotation.*; /** * @author 黑色的小火苗 * easyexcel 头校验 */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE}) public @interface HeadVerification { }\"]},\"235\":{\"h\":\"NotFieldRequired\",\"t\":[\"import java.lang.annotation.*; /** * 该字段只可以使用在字段上,和@FieldRequired注解搭配使用 * <p> * 当@FieldRequired注解存在时,该注解可以使用在字段上,表示该字段不必须 * <p> * ps: @FieldRequired注解放在class上是才起作用 */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.FIELD}) public @interface NotFieldRequired { }\"]},\"236\":{\"h\":\"NotHeadRequired\",\"t\":[\"import java.lang.annotation.*; /** * 该字段只可以使用在字段上,和@HeadVerification注解搭配使用 * <p> * 当@HeadVerification注解在类上存在时,该注解在字段上使用会将其认为不需要进行校验的行头参数 */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.FIELD}) public @interface NotHeadRequired { }\"]},\"237\":{\"h\":\"工具类\",\"t\":[\"import cn.moonlight.common.excel.interfaces.FieldRequired; import cn.moonlight.common.excel.interfaces.HeadVerification; import cn.moonlight.common.excel.interfaces.NotFieldRequired; import cn.moonlight.common.excel.interfaces.NotHeadRequired; import com.alibaba.excel.annotation.ExcelProperty; import com.alibaba.excel.context.AnalysisContext; import com.alibaba.excel.metadata.data.ReadCellData; import com.alibaba.fastjson2.JSON; import com.alibaba.fastjson2.JSONObject; import java.lang.reflect.Field; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; public class EasyExcelUtil { /** * 校验请求头,如果多行请求头 * * @param headCellMap 当前行头数据 * @param context 行 */ public static void verificationHead(Map<Integer, ReadCellData<?>> headCellMap, AnalysisContext context) { Map<Integer, String> headMap = getHeadMap(context.readWorkbookHolder().getClazz()); if (headMap == null) return; if (headCellMap.size() != headMap.size()) throw new RuntimeException(\\\"请检查导入模板是否正确!\\\"); headCellMap.forEach((k, v) -> { if (!v.getStringValue().equals(headMap.get(k))) throw new RuntimeException(\\\"请检查导入模板是否正确!\\\"); }); } /** * 校验请求头,如果多行请求头 * * @param headNumber 需要校验的行头是第几行? 从0开始 * @param headCellMap 当前行头数据 * @param context 行 */ public static void verificationHead(Map<Integer, ReadCellData<?>> headCellMap, AnalysisContext context, Integer headNumber) { if (context.readRowHolder().getRowIndex() < headNumber) return; Map<Integer, String> headMap = getHeadMap(context.readWorkbookHolder().getClazz()); if (headMap == null) return; if (headCellMap.size() != headMap.size()) throw new RuntimeException(\\\"请检查导入模板是否正确!\\\"); headCellMap.forEach((k, v) -> { if (!v.getStringValue().equals(headMap.get(k))) throw new RuntimeException(\\\"请检查导入模板是否正确!\\\"); }); } /** * 通过传入要校验的必填字段来判断都是那些字段需要进行校验 * * @param fieldNames 必填字段 * @param t 本次需校验的数据 * @param <T> 泛型 */ public static <T> boolean verificationData(List<String> fieldNames, T t) { if (fieldNames.isEmpty()) return true; boolean success = true; JSONObject json = JSON.parseObject(JSON.toJSONString(t)); for (String fileName : fieldNames) { String fileValue = json.getString(fileName); success = fileValue == null || fileValue.isEmpty(); } return success; } /** * @param fieldNames 必填参数 * @param t 当前行数据据 * @param <T> 泛型 * @return Map<Boolean, List < String>> 错误行数据 */ public static <T> Map<Boolean, List<String>> verificationData(Map<String, String> fieldNames, T t) { Map<Boolean, List<String>> map = new HashMap<>(); if (fieldNames.isEmpty()) return map; JSONObject json = JSON.parseObject(JSON.toJSONString(t)); List<String> fields = new ArrayList<>(); for (Map.Entry<String, String> field : fieldNames.entrySet()) { String fileValue = json.getString(field.getKey()); if (fileValue == null || fileValue.isEmpty()) { fields.add(field.getValue()); } } if (!fields.isEmpty()) map.put(false, fields); return map; } /** * 使用反射获取实体类的excel表头,与导入的表头进行对应校验来验证模板是否一致 * * @param clazz 需要校验的class */ public static Map<Integer, String> getHeadMap(Class<?> clazz) { // 如果当前要读取的类没有表头校验注解，则返回空 if (!clazz.isAnnotationPresent(HeadVerification.class)) return null; Map<Integer, String> map = new HashMap<>(); Field[] fields = clazz.getDeclaredFields(); for (int i = 0; i < fields.length; i++) { Field field = fields[i]; field.setAccessible(true); if (field.isAnnotationPresent(ExcelProperty.class) && !field.isAnnotationPresent(NotHeadRequired.class)) { String[] value = field.getAnnotation(ExcelProperty.class).value(); map.put(i, value[value.length - 1]); } } return map; } /** * @param clazz 通过class获获取需要必填校验的字段 * @return 必填字段List */ public static List<String> getFieldNames(Class<?> clazz) { List<String> list = new ArrayList<>(); Field[] fields = clazz.getDeclaredFields(); if (clazz.isAnnotationPresent(FieldRequired.class)) { for (Field field : fields) { field.setAccessible(true); if (field.isAnnotationPresent(ExcelProperty.class) && !field.isAnnotationPresent(NotFieldRequired.class)) { list.add(field.getName()); } } return list; } // 如果走到这里就是没有在导入类上添加 @ExcelFieldVerification,那么就判断字段上是否存在 @ExcelFieldVerification 注解 for (Field field : fields) { field.setAccessible(true); if (field.isAnnotationPresent(FieldRequired.class)) { list.add(field.getName()); } } return list; } /** * @param clazz 通过class获获取需要必填校验的字段 * @return 必填字段List */ public static Map<String, String> getFieldNameMap(Class<?> clazz) { Map<String, String> map = new HashMap<>(); Field[] fields = clazz.getDeclaredFields(); if (clazz.isAnnotationPresent(FieldRequired.class)) { for (Field field : fields) { field.setAccessible(true); if (field.isAnnotationPresent(ExcelProperty.class) && !field.isAnnotationPresent(NotFieldRequired.class)) { map.put(field.getName(), field.getAnnotation(ExcelProperty.class).annotationType().getName()); } } return map; } // 如果走到这里就是没有在导入类上添加 @ExcelFieldVerification,那么就判断字段上是否存在 @ExcelFieldVerification 注解 for (Field field : fields) { field.setAccessible(true); if (field.isAnnotationPresent(FieldRequired.class)) { map.put(field.getName(), field.getAnnotation(ExcelProperty.class).annotationType().getName()); } } return map; } }\"]},\"238\":{\"h\":\"示例Listener\",\"t\":[\"import cn.moonlight.common.excel.util.EasyExcelUtil; import com.alibaba.excel.context.AnalysisContext; import com.alibaba.excel.metadata.data.ReadCellData; import com.alibaba.excel.read.listener.ReadListener; import lombok.Getter; import java.util.ArrayList; import java.util.List; import java.util.Map; /** * 简易的示例监听器,本监听器智能校验参数是否必填,其他无法处理,如需其他处理请可以复制当前监听器后重写即可. * * @author 黑色的小火苗 */ @Getter public class EasyListener<T> implements ReadListener<T> { private final List<T> errorList; private final List<T> successList; public EasyListener() { errorList = new ArrayList<>(); successList = new ArrayList<>(); } @Override public void invoke(T t, AnalysisContext context) { List<String> fieldNames = EasyExcelUtil.getFieldNames(context.readWorkbookHolder().getClazz()); if (!fieldNames.isEmpty() && EasyExcelUtil.verificationData(fieldNames, t)) { errorList.add(t); return; } successList.add(t); } @Override public void invokeHead(Map<Integer, ReadCellData<?>> headCellMap, AnalysisContext context) { EasyExcelUtil.verificationHead(headCellMap, context); } @Override public void doAfterAllAnalysed(AnalysisContext analysisContext) {} }\"]},\"239\":{\"c\":[\"后端开发\",\"工具类\"]},\"240\":{\"c\":[\"工具类\",\"java\"]},\"241\":{\"h\":\"fastjson2\",\"t\":[\"文档地址:\",\"github文档: https://github.com/alibaba/fastjson2\",\"gitee文档: https://gitee.com/wenshao/fastjson2\",\"maven引入依赖:\",\"<dependency> <groupId>com.alibaba.fastjson2</groupId> <artifactId>fastjson2</artifactId> <version>2.0.39</version> </dependency>\"]},\"242\":{\"h\":\"简单使用\"},\"243\":{\"h\":\"JSON字符串与JavaObject相互转换\",\"t\":[\" @Test public void jsonTest() { @Data class User { public int id; public String name; } User user = new User(); user.id = 2; user.name = \\\"FastJson2\\\"; String userJsonStr = JSON.toJSONString(user); log.info(\\\"Java对象转换为Json字符串: {}\\\", userJsonStr); // 输出结果 Java对象转换为Json字符串: {\\\"id\\\":2,\\\"name\\\":\\\"FastJson2\\\"} String userJsonStr1 = JSONObject.toJSONString(user); log.info(\\\"Java对象转换为Json字符串: {}\\\", userJsonStr1); // 输出结果 Java对象转换为Json字符串: {\\\"id\\\":2,\\\"name\\\":\\\"FastJson2\\\"} User user1 = JSON.parseObject(userJsonStr, User.class); log.info(\\\"JSON转换为Java对象后: {}\\\", user1); // 输出结果: JSON转换为Java对象后: User(id=2, name=FastJson2) User user2 = JSONObject.parseObject(userJsonStr1, User.class); log.info(\\\"JSON转换为Java对象后: {}\\\", user2); // 输出结果: JSON转换为Java对象后: User(id=2, name=FastJson2) /* 小结: 当我们仅转换一个对象时我们使用 JSON.parseObject()或JSONObject.parseObject()方法 都可以做到java对象的转换 */ }\"]},\"244\":{\"h\":\"JSONArray与Java的List相互转换\",\"t\":[\" @Test public void jsonArrayTest() { List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7); String jsonString = JSON.toJSONString(list); log.info(\\\"jsonString: {}\\\", jsonString); // 输出结果 jsonString: [1,2,3,4,5,6,7] String jsonString2 = JSONObject.toJSONString(list); log.info(\\\"jsonString: {}\\\", jsonString2); // 输出结果 jsonString: [1,2,3,4,5,6,7] String jsonString1 = JSONArray.toJSONString(list); log.info(\\\"jsonString: {}\\\", jsonString1); // 输出结果 jsonString: [1,2,3,4,5,6,7] List list1 = JSON.parseObject(jsonString, List.class); log.info(\\\"转换后的List: {}\\\", list1); // 输出结果 转换后的List: [1, 2, 3, 4, 5, 6, 7] List list2 = JSONObject.parseObject(jsonString2, List.class); log.info(\\\"转换后的List: {}\\\", list2); // 输出结果 转换后的List: [1, 2, 3, 4, 5, 6, 7] List<Integer> integers = JSONArray.parseArray(jsonString1, Integer.class); log.info(\\\"转换后的List: {}\\\", integers); // 输出结果 转换后的List: [1, 2, 3, 4, 5, 6, 7] /* 小结: 当在使用fastjson2时，如果要转换的json字符串是数组，那么需要使用JSONArray.parseArray()方法. 因为我们需要转换为指定的对象而不是List<Object> */ }\"]},\"245\":{\"c\":[\"后端开发\",\"工具类\"]},\"246\":{\"c\":[\"工具类\",\"java\"]},\"247\":{\"h\":\"httpClient\"},\"248\":{\"h\":\"引入依赖\",\"t\":[\"<!-- 版本根据自己需要使用,我这里使用的是5.2.1 --> <dependency> <groupId>org.apache.httpcomponents.client5</groupId> <artifactId>httpclient5</artifactId> <version>5.2.1</version> </dependency>\"]},\"249\":{\"h\":\"HttpClient 发起请求\",\"t\":[\"@Slf4j public class HttpClientUtil { /** * 因为没有设置请求头等数据,所以简单请求可以封装一下 */ public static String get(String url) { CloseableHttpClient client = HttpClients.createDefault(); ClassicHttpRequest build = ClassicRequestBuilder.get(url).build(); try { return client.execute(build, response -> { if (response.getCode() == 200) { return EntityUtils.toString(response.getEntity()); } return \\\"\\\"; }); } catch (IOException e) { log.info(\\\"[ HTTP GET ] 请求失败!\\\"); return \\\"\\\"; } } /** * HttpPost简单请求 * * @param uri 请求地址 * @param data 请求参数 * @return String 类型的字符串 */ public static String post(String uri, List<BasicNameValuePair> data) { CloseableHttpClient client = HttpClients.createDefault(); ClassicHttpRequest httpPost = ClassicRequestBuilder.post(uri) .setEntity(new UrlEncodedFormEntity(data)) .build(); try { client.execute(httpPost, response -> { if (response.getCode() == 200) { return EntityUtils.toString(response.getEntity()); } return \\\"\\\"; }); } catch (IOException e) { log.info(\\\"[ HTTP POST ] 请求失败!\\\"); } return \\\"\\\"; } }\"]},\"250\":{\"c\":[\"后端开发\",\"工具类\"]},\"251\":{\"c\":[\"工具类\",\"java\"]},\"252\":{\"h\":\"poi-tl\",\"t\":[\"官网地址: http://deepoove.com/poi-tl/\",\"导入依赖\",\"<!-- poi-tl start --> <dependency> <groupId>com.deepoove</groupId> <artifactId>poi-tl</artifactId> <version>1.10.3</version> <exclusions> <exclusion> <groupId>org.apache.poi</groupId> <artifactId>poi-ooxml</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.apache.poi</groupId> <artifactId>ooxml-schemas</artifactId> <version>1.4</version> </dependency> <dependency> <groupId>io.github.draco1023</groupId> <artifactId>poi-tl-ext</artifactId> <version>0.3.3</version> <exclusions> <exclusion> <groupId>com.deepoove</groupId> <artifactId>poi-tl</artifactId> </exclusion> <exclusion> <groupId>org.apache.poi</groupId> <artifactId>ooxml-schemas</artifactId> </exclusion> </exclusions> </dependency> <!-- poi-tl end -->\"]},\"253\":{\"h\":\"工具类\",\"t\":[\"import com.deepoove.poi.XWPFTemplate; import com.deepoove.poi.config.Configure; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.InputStream; import java.util.Map; /** * @author sunset@黑色的小火苗 * @create: 2023-05-28 16:50 */ public class WordUtil { /** * 创建Word文档 * * @param stream 输入流 * @param config 模板绑定的配置 * @param data 模板所需数据 * @return byte[] * @throws IOException 可能会出现IO错误 */ public byte[] createWord(InputStream stream, Configure config, Map<String, Object> data) throws IOException { XWPFTemplate template = XWPFTemplate.compile(stream, config).render(data); ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); template.writeAndClose(outputStream); template.close(); return outputStream.toByteArray(); } }\"]},\"254\":{\"h\":\"案例\",\"t\":[\"创建输出时案例对象\",\"import com.deepoove.poi.data.PictureRenderData; import lombok.Data; import lombok.experimental.Accessors; import java.util.List; import java.util.Map; /** * Word 生成案例实体 * * @author sunset@黑色的小火苗 * @create: 2023/6/10 - 18:01 */ @Data @Accessors(chain = true) public class UserWordDemo { private String userName; /** * 例如库中图片地址 */ private String imgUrl; /** * 实际输出的图片 */ private PictureRenderData img; /** * 例如库中图片地址 */ private List<String> imgUrlList; /** * 当一个对象存在多个图片时处理 */ private List<Map<String,PictureRenderData>> imgList; }\",\"演示示例\",\"import com.deepoove.poi.config.Configure; import com.deepoove.poi.data.PictureRenderData; import com.deepoove.poi.data.Pictures; import com.deepoove.poi.plugin.table.LoopRowTableRenderPolicy; import com.sunset.common.util.WordUtil; import org.junit.Test; import org.springframework.core.io.ClassPathResource; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; /** * @author sunset@黑色的小火苗 * @create: 2023/6/10 - 18:05 */ public class WordDemoTest { /** * 测试生成 Word */ @Test public void testGenerateWord() throws IOException { // 1. 读取模板,获取模板输入流 InputStream inputStream = new ClassPathResource(\\\"templates/test.docx\\\").getInputStream(); // 绑定模板配置 LoopRowTableRenderPolicy rowPolicy = new LoopRowTableRenderPolicy(true); // 循环时在同一行进行循环 Configure config = Configure.builder() .bind(\\\"users\\\", rowPolicy) // 绑定列表 .bind(\\\"imgList\\\", rowPolicy) // 绑定列表 .useSpringEL(true) // 开启Spring表达式 .build(); // 模板标签与数据进行绑定 Map<String, Object> data = new HashMap<>(); // 循环给 demoList设置数据 这里就不写了 data.put(\\\"users\\\", getDemoList()); // 调用方法 byte[] wordBytes = WordUtil.createWord(inputStream, config, data); // 输出到文件 FileOutputStream fos = new FileOutputStream(new File(\\\"D:\\\\\\\\data\\\\\\\\temp\\\\\\\\test.docx\\\")); fos.write(wordBytes); fos.flush(); fos.close(); } /** * 生成需要的对象 <br/> * 读取本地图片使用 Pictures.ofStream(\\\"localImgPath\\\") [ localImgPath 本地图片所在地址 ]<br/> * 读取网络图片使用 Pictures.ofUrl(\\\"HttpUrl\\\") [ HttpUrl 网络URl路径 ]<br/> * <br/> * 当循环行中某一列中需要渲染多个图片/文字时 按当前示例这么做就可以 <br/> * * @return List<UserWordDemo> */ private List<UserWordDemo> getDemoList() throws IOException { List<UserWordDemo> demoList = new ArrayList<>(); for (int i = 0; i < 5; i++) { // 当循环行时在一列中生成多个图片/文字时按这种方式可以循环渲染 List<Map<String, PictureRenderData>> imgList = new ArrayList<>(); Map<String, PictureRenderData> map = new HashMap<>(); map.put(\\\"img1\\\", Pictures.ofStream(new ClassPathResource(\\\"static/2.jpg\\\").getInputStream()).size(100, 100).create()); imgList.add(map); Map<String, PictureRenderData> map1 = new HashMap<>(); map1.put(\\\"img1\\\", Pictures.ofStream(new ClassPathResource(\\\"static/2.jpg\\\").getInputStream()).size(100, 100).create()); imgList.add(map1); UserWordDemo userWordDemo = new UserWordDemo() .setUserName(\\\"测试用户名\\\" + i) .setImg(Pictures.ofStream(new ClassPathResource(\\\"static/1.jpg\\\").getInputStream()).size(100, 100).create()) .setImgList(imgList); demoList.add(userWordDemo); } return demoList; } }\",\"模板图片与生成的图片 模板图片 \",\"生成的图片 \"]},\"255\":{\"c\":[\"后端开发\",\"工具类\"]},\"256\":{\"c\":[\"工具类\",\"java\"]},\"257\":{\"h\":\"rsa加密\",\"t\":[\"import org.apache.hc.client5.http.utils.Base64; import javax.crypto.Cipher; import java.io.ByteArrayOutputStream; import java.nio.charset.StandardCharsets; import java.security.*; import java.security.spec.PKCS8EncodedKeySpec; import java.security.spec.X509EncodedKeySpec; /** * RsaException 是我自己写的一个异常用于抛出并全局捕获,使用时可以自己定义. */ public class RsaUtil { /** * RSA最大加密明文大小 */ private static final int MAX_ENCRYPT_BLOCK = 117; /** * RSA最大解密密文大小 */ private static final int MAX_DECRYPT_BLOCK = 128; private static final KeyFactory keyFactory; static { try { keyFactory = KeyFactory.getInstance(\\\"RSA\\\"); } catch (NoSuchAlgorithmException e) { throw new RuntimeException(e); } } /** * 获取密钥对 * * @return 密钥对 */ public static KeyPair getKeyPair() throws Exception { KeyPairGenerator generator = KeyPairGenerator.getInstance(\\\"RSA\\\"); generator.initialize(1024); return generator.generateKeyPair(); } /** * 获取私钥 * * @param privateKey 私钥字符串 */ public static PrivateKey getPrivateKey(String privateKey) throws Exception { byte[] decodedKey = Base64.decodeBase64(privateKey.getBytes()); PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decodedKey); return keyFactory.generatePrivate(keySpec); } /** * 获取公钥 * * @param publicKey 公钥字符串 */ public static PublicKey getPublicKey(String publicKey) throws Exception { byte[] decodedKey = Base64.decodeBase64(publicKey.getBytes()); X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey); return keyFactory.generatePublic(keySpec); } /** * RSA加密 * * @param data 待加密数据 * @param publicKey 公钥 */ public static String encrypt(String data, String publicKey) { try { Cipher cipher = Cipher.getInstance(\\\"RSA\\\"); cipher.init(Cipher.ENCRYPT_MODE, getPublicKey(publicKey)); int inputLen = data.getBytes().length; ByteArrayOutputStream out = new ByteArrayOutputStream(); int offset = 0; byte[] cache; int i = 0; // 对数据分段加密 while (inputLen - offset > 0) { if (inputLen - offset > MAX_ENCRYPT_BLOCK) { cache = cipher.doFinal(data.getBytes(), offset, MAX_ENCRYPT_BLOCK); } else { cache = cipher.doFinal(data.getBytes(), offset, inputLen - offset); } out.write(cache, 0, cache.length); i++; offset = i * MAX_ENCRYPT_BLOCK; } byte[] encryptedData = out.toByteArray(); out.close(); // 获取加密内容使用base64进行编码,并以UTF-8为标准转化成字符串 // 加密后的字符串 return Base64.encodeBase64String(encryptedData); } catch (Exception e) { throw new RsaException(\\\"RSA 加密失败!\\\"); } } /** * RSA解密 * * @param data 待解密数据 * @param privateKey 私钥 */ public static String decrypt(String data, String privateKey) { try { Cipher cipher = Cipher.getInstance(\\\"RSA\\\"); cipher.init(Cipher.DECRYPT_MODE, getPrivateKey(privateKey)); byte[] dataBytes = Base64.decodeBase64(data); int inputLen = dataBytes.length; ByteArrayOutputStream out = new ByteArrayOutputStream(); int offset = 0; byte[] cache; int i = 0; // 对数据分段解密 while (inputLen - offset > 0) { if (inputLen - offset > MAX_DECRYPT_BLOCK) { cache = cipher.doFinal(dataBytes, offset, MAX_DECRYPT_BLOCK); } else { cache = cipher.doFinal(dataBytes, offset, inputLen - offset); } out.write(cache, 0, cache.length); i++; offset = i * MAX_DECRYPT_BLOCK; } byte[] decryptedData = out.toByteArray(); out.close(); // 解密后的内容 return new String(decryptedData, StandardCharsets.UTF_8); } catch (Exception e) { throw new RsaException(\\\"RSA 解密失败!\\\"); } } /** * 签名 * * @param data 待签名数据 * @param privateKey 私钥 * @return 签名 */ public static String sign(String data, String privateKey) throws Exception { byte[] keyBytes = getPrivateKey(privateKey).getEncoded(); PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes); KeyFactory keyFactory = KeyFactory.getInstance(\\\"RSA\\\"); PrivateKey key = keyFactory.generatePrivate(keySpec); Signature signature = Signature.getInstance(\\\"MD5withRSA\\\"); signature.initSign(key); signature.update(data.getBytes()); return new String(Base64.encodeBase64(signature.sign())); } /** * 验签 * * @param srcData 原始字符串 * @param publicKey 公钥 * @param sign 签名 * @return 是否验签通过 */ public static boolean verify(String srcData, String publicKey, String sign) throws Exception { byte[] keyBytes = getPublicKey(publicKey).getEncoded(); X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes); PublicKey key = keyFactory.generatePublic(keySpec); Signature signature = Signature.getInstance(\\\"MD5withRSA\\\"); signature.initVerify(key); signature.update(srcData.getBytes()); return signature.verify(Base64.decodeBase64(sign.getBytes())); } public static void demoMain() { try { // 生成密钥对 KeyPair keyPair = getKeyPair(); String privateKey = new String(Base64.encodeBase64(keyPair.getPrivate().getEncoded())); String publicKey = new String(Base64.encodeBase64(keyPair.getPublic().getEncoded())); System.out.println(\\\"私钥:\\\" + privateKey); System.out.println(\\\"公钥:\\\" + publicKey); // RSA加密 String data = \\\"待加密的文字内容\\\"; String encryptData = encrypt(data, publicKey); System.out.println(\\\"加密后内容:\\\" + encryptData); // RSA解密 String decryptData = decrypt(encryptData, privateKey); System.out.println(\\\"解密后内容:\\\" + decryptData); // RSA签名 String sign = sign(data, privateKey); // RSA验签 boolean result = verify(data, publicKey, sign); System.out.print(\\\"验签结果:\\\" + result); } catch (Exception e) { System.out.print(\\\"加解密异常\\\"); } } }\",\"ps: 生成一对密钥后就可以直接使用了,不要使用两次不同公钥对私钥进行解密.\"]},\"258\":{\"c\":[\"后端开发\",\"工具类\"]},\"259\":{\"c\":[\"工具类\",\"java\"]},\"260\":{\"h\":\"工厂模式\"},\"261\":{\"h\":\"介绍\",\"t\":[\"定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。\"]},\"262\":{\"h\":\"案例\",\"t\":[\"我们可以根据情况来创建绘画形状为需求来说明并实现工厂模式.\"]},\"263\":{\"h\":\"创建工厂接口\",\"t\":[\"public interface Shape { /** * 判断是否应该自身执行 * * @param shape 枚举类 * @return boolean 应该本身执行是返回true 不应该执行返回false */ boolean supportsInternal(ShapeEnum shape); /** * 执行绘画操作 */ void draw(); }\",\"创建枚举\",\"public enum ShapeEnum { /** * 圆形 */ CIRCLE, /** * 矩形 */ RECTANGLE, /** * 正方形 */ SQUARE; }\"]},\"264\":{\"h\":\"创建相应形状类\",\"t\":[\"/** * 圆形形状类 */ public class Circle implements Shape { @Override public boolean supportsInternal(ShapeEnum shape) { return ShapeEnum.CIRCLE.equals(shape); } @Override public void draw() { System.out.println(\\\"Inside Circle::draw() method.\\\"); } }\",\"/** * 正方形形状类 */ public class Square implements Shape { @Override public boolean supportsInternal(ShapeEnum shape) { return ShapeEnum.SQUARE.equals(shape); } @Override public void draw() { System.out.println(\\\"Inside Square::draw() method.\\\"); } }\",\"/** * 矩形形状类 */ public class Rectangle implements Shape { @Override public boolean supportsInternal(ShapeEnum shape) { return ShapeEnum.RECTANGLE.equals(shape); } @Override public void draw() { System.out.println(\\\"Inside Rectangle::draw() method.\\\"); } }\"]},\"265\":{\"h\":\"使用工厂创建对应形状\",\"t\":[\"import java.util.Objects; import java.util.ServiceLoader; public class ShapeFactory { public static Shape getShape(ShapeEnum shapeEnum) { ServiceLoader<Shape> shapes = ServiceLoader.load(Shape.class); Shape result = null; for (Shape shape : shapes) { if (shape.supportsInternal(shapeEnum)) { result = shape; break; } } // 最终应该是有匹配结果的,如果没有匹配结果那么我应该直接报错回去 return Objects.requireNonNull(result); } }\",\"使用ServiceLoader扫描相关对象时我们需要在META-INF/services下创建以Shape的全路径为名的文件[以我的为例文件名就是 org.bamboo.shape.Shape],将要扫描的文件全路径写入到对应文件\",\"org.bamboo.shape.Circle org.bamboo.shape.Rectangle org.bamboo.shape.Square\",\"ps: ServiceLoader 为java本身的工具类所以不需要担心兼容问题但是jdk应该是需要1.8以上.并且读取顺序为从第一行顺序向下读取.\"]},\"266\":{\"h\":\"测试是否可行\",\"t\":[\"public class ShapeTest { public static void main(String[] args) { ShapeFactory.getShape(ShapeEnum.CIRCLE).draw(); // 输出结果为: Inside Circle::draw() method. // 说明这个方法是可行的. } }\"]},\"267\":{\"c\":[\"后端开发\",\"设计模式\"]},\"268\":{\"c\":[\"设计模式\",\"java\"]},\"269\":{\"h\":\"责任链模式\",\"t\":[\"现在模拟一个需求:\",\"需要检查一个产品的是否合格,需要从三个方面进行检查.\",\"长度 必须为15\",\"宽度 必须为15\",\"高度 必须为10\",\"如果我们直接进行判断的话后续如果产品又添加了其他检查类型,那么我们可能会一直if判断下去.\",\"此时我们就可以使用责任链模式,将每个检查流程进行分隔处理且互相不影响各自的执行.\"]},\"270\":{\"h\":\"实现代码\"},\"271\":{\"h\":\"创建产品实体类\",\"t\":[\"package org.bamboo.product.entity; import lombok.Data; import lombok.experimental.Accessors; import org.bamboo.product.handler.HeightQCHandler; import org.bamboo.product.handler.LengthQCHandler; import org.bamboo.product.handler.WidthQCHandler; @Data @Accessors(chain = true) public class Product { private Integer id; /** * 产品长度 */ private Integer length; /** * 产品宽度 */ private Integer width; /** * 产品高度 */ private Integer height; }\"]},\"272\":{\"h\":\"创建责任链抽象类\",\"t\":[\"package org.bamboo.product.handler; import org.bamboo.product.entity.Product; public abstract class QCHandler { protected QCHandler nextHandler; /** * 检查产品 * * @param product 产品 * @return Boolean */ public abstract Boolean check(Product product); /** * 设置下一级处理器 * * @param nextHandler 下一级处理器 */ public void setNextHandler(QCHandler nextHandler) { this.nextHandler = nextHandler; } /** * 判断是否存在下一级处理器 * * @param product 产品 * @return Boolean */ protected Boolean checkNextHandler(Product product) { //没有下一级处理器，直接返回false if (nextHandler == null) return false; // 存在下一级处理器，则校验下一级处理器 return nextHandler.check(product); } }\"]},\"273\":{\"h\":\"创建长度处理器\",\"t\":[\"package org.bamboo.product.handler; import org.bamboo.product.entity.Product; public class LengthQCHandler extends QCHandler { { setNextHandler(new WidthQCHandler()); } @Override public Boolean check(Product product) { if (product.getLength() != 15) { System.out.println(\\\"长度检查不合格!\\\"); return false; } return checkNextHandler(product); } }\"]},\"274\":{\"h\":\"创建宽度处理器\",\"t\":[\"import org.bamboo.product.entity.Product; public class WidthQCHandler extends QCHandler { { setNextHandler(new HeightQCHandler()); } @Override public Boolean check(Product product) { if (product.getWidth() != 15) { System.out.println(\\\"宽度检查不合格!\\\"); return false; } return checkNextHandler(product); } }\"]},\"275\":{\"h\":\"创建高度处理器\",\"t\":[\"import org.bamboo.product.entity.Product; public class HeightQCHandler extends QCHandler { @Override public Boolean check(Product product) { if (product.getHeight() != 15) { System.out.println(\\\"高度检查不合格!\\\"); return false; } return checkNextHandler(product); } }\"]},\"276\":{\"h\":\"调用测试\",\"t\":[\" public static void main(String[] args) { Product product = new Product().setLength(15).setWidth(3).setHeight(1); LengthQCHandler lengthQCHandler = new LengthQCHandler(); // 这里是使用默认写好的内置责任链来使用 System.out.println(lengthQCHandler.check(product)); // 这里是自己手动去设置责任链调用,已知顺序的情况可以直接默认一条. HeightQCHandler heightQCHandler = new HeightQCHandler(); WidthQCHandler widthQCHandler = new WidthQCHandler(); lengthQCHandler.setNextHandler(heightQCHandler); heightQCHandler.setNextHandler(widthQCHandler); System.out.println(lengthQCHandler.check(product)); }\"]},\"277\":{\"h\":\"工厂创建责任链\",\"t\":[\"import org.bamboo.product.handler.LengthQCHandler; import org.bamboo.product.handler.QCHandler; import java.util.List; public class QCFactory { /** * 获取默认执行责任练 * * @return QCHandler */ public static QCHandler getDefaultQCHandler() { return new LengthQCHandler(); } /** * 根据list顺序生成责任链并返回第一个 * * @param handlerList 责任链集合 * @return QCHandler */ public static QCHandler getQCHandler(List<QCHandler> handlerList) { if (handlerList.isEmpty()) { throw new RuntimeException(\\\"handlerList is empty\\\"); } QCHandler qcHandler = null; if (handlerList.size() > 1) { int item = handlerList.size() - 1; while (item > 0) { handlerList.get(item - 1).setNextHandler(handlerList.get(item)); item--; } } qcHandler = handlerList.get(0); return qcHandler; } }\"]},\"278\":{\"c\":[\"后端开发\",\"设计模式\"]},\"279\":{\"c\":[\"设计模式\",\"java\"]},\"280\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"281\":{\"h\":\"Collect\"},\"282\":{\"h\":\"Java\"},\"283\":{\"h\":\"Dev\"},\"284\":{\"h\":\"Sql\"},\"285\":{\"h\":\"Linux\"},\"286\":{\"h\":\"Install\"},\"287\":{\"h\":\"Win\"},\"288\":{\"h\":\"Redis\"},\"289\":{\"h\":\"Springboot\"},\"290\":{\"h\":\"Spring系列\"},\"291\":{\"h\":\"工具类\"},\"292\":{\"h\":\"设计模式\"}},\"dirtCount\":0,\"index\":[[\"责任链集合\",{\"1\":{\"277\":1}}],[\"责任链模式\",{\"0\":{\"269\":1}}],[\"检查产品\",{\"1\":{\"272\":1}}],[\"检查给定的元素是否在变量中\",{\"1\":{\"110\":1}}],[\"产品\",{\"1\":{\"272\":2}}],[\"产品高度\",{\"1\":{\"271\":1}}],[\"产品宽度\",{\"1\":{\"271\":1}}],[\"产品长度\",{\"1\":{\"271\":1}}],[\"高度检查不合格\",{\"1\":{\"275\":1}}],[\"高度\",{\"1\":{\"269\":1}}],[\"高性能服务器一定是多线程的\",{\"1\":{\"81\":1}}],[\"宽度检查不合格\",{\"1\":{\"274\":1}}],[\"宽度\",{\"1\":{\"269\":1}}],[\"现在模拟一个需求\",{\"1\":{\"269\":1}}],[\"设计模式\",{\"0\":{\"292\":1},\"2\":{\"267\":1,\"268\":1,\"278\":1,\"279\":1}}],[\"设置下一级处理器\",{\"1\":{\"272\":1}}],[\"设置\",{\"1\":{\"180\":1}}],[\"设置标题\",{\"1\":{\"119\":1}}],[\"设置值为value\",{\"1\":{\"96\":1}}],[\"设置一个key\",{\"1\":{\"84\":1}}],[\"设置一张hash表数据\",{\"1\":{\"74\":1}}],[\"设置变量\",{\"1\":{\"74\":1}}],[\"设置和查看root路径\",{\"1\":{\"68\":1}}],[\"设置或者查看setting\",{\"1\":{\"68\":2}}],[\"设置mysql的安装目录\",{\"1\":{\"57\":1}}],[\"设置简单密码\",{\"1\":{\"52\":1}}],[\"正方形形状类\",{\"1\":{\"264\":1}}],[\"正方形\",{\"1\":{\"263\":1}}],[\"正则表达式\",{\"1\":{\"141\":1}}],[\"正则匹配路径\",{\"1\":{\"110\":1}}],[\"矩形形状类\",{\"1\":{\"264\":1}}],[\"矩形\",{\"1\":{\"263\":1}}],[\"圆形形状类\",{\"1\":{\"264\":1}}],[\"圆形\",{\"1\":{\"263\":1}}],[\"应该本身执行是返回true\",{\"1\":{\"263\":1}}],[\"应用的难度大大降低\",{\"1\":{\"172\":1}}],[\"枚举类\",{\"1\":{\"263\":1}}],[\"枚举类中的方法\",{\"1\":{\"222\":1}}],[\"介绍\",{\"0\":{\"261\":1}}],[\"验签结果\",{\"1\":{\"257\":1}}],[\"验签\",{\"1\":{\"257\":1}}],[\"验证指定\",{\"1\":{\"110\":1}}],[\"签名\",{\"1\":{\"257\":3}}],[\"私钥\",{\"1\":{\"257\":3}}],[\"私钥字符串\",{\"1\":{\"257\":1}}],[\"待加密的文字内容\",{\"1\":{\"257\":1}}],[\"待加密数据\",{\"1\":{\"257\":1}}],[\"待签名数据\",{\"1\":{\"257\":1}}],[\"待解密数据\",{\"1\":{\"257\":1}}],[\"加解密异常\",{\"1\":{\"257\":1}}],[\"加密后内容\",{\"1\":{\"257\":1}}],[\"加密后的字符串\",{\"1\":{\"257\":1}}],[\"加密失败\",{\"1\":{\"257\":1}}],[\"加上这个后就会扫描该路径下所用到的\",{\"1\":{\"161\":1}}],[\"公钥\",{\"1\":{\"257\":3}}],[\"公钥字符串\",{\"1\":{\"257\":1}}],[\"密钥对\",{\"1\":{\"257\":1}}],[\"按当前示例这么做就可以\",{\"1\":{\"254\":1}}],[\"按照配置前后逆序执行\",{\"1\":{\"228\":2}}],[\"按照配置前后顺序执行\",{\"1\":{\"228\":1}}],[\"网络url路径\",{\"1\":{\"254\":1}}],[\"循环给\",{\"1\":{\"254\":1}}],[\"循环时在同一行进行循环\",{\"1\":{\"254\":1}}],[\"绑定列表\",{\"1\":{\"254\":2}}],[\"绑定模板配置\",{\"1\":{\"254\":1}}],[\"绑定到request\",{\"1\":{\"128\":1}}],[\"演示示例\",{\"1\":{\"254\":1}}],[\"生成一对密钥后就可以直接使用了\",{\"1\":{\"257\":1}}],[\"生成密钥对\",{\"1\":{\"257\":1}}],[\"生成的图片\",{\"1\":{\"254\":1}}],[\"生成需要的对象\",{\"1\":{\"254\":1}}],[\"生成案例实体\",{\"1\":{\"254\":1}}],[\"生成自增序列\",{\"1\":{\"34\":1}}],[\"发起请求\",{\"0\":{\"249\":1}}],[\"发布订阅\",{\"1\":{\"102\":1}}],[\"发布订阅系统\",{\"1\":{\"78\":1}}],[\"必填参数\",{\"1\":{\"237\":1}}],[\"必填字段list\",{\"1\":{\"237\":2}}],[\"必填字段\",{\"1\":{\"237\":1}}],[\"必须为10\",{\"1\":{\"269\":1}}],[\"必须为15\",{\"1\":{\"269\":2}}],[\"必须开启事务\",{\"1\":{\"192\":1}}],[\"必须时\",{\"1\":{\"164\":1}}],[\"行\",{\"1\":{\"237\":2}}],[\"校验请求头\",{\"1\":{\"237\":2}}],[\"头校验\",{\"1\":{\"234\":1}}],[\"请检查导入模板是否正确\",{\"1\":{\"237\":4}}],[\"请不要同时在类和成员变量上同时使用\",{\"1\":{\"233\":1}}],[\"请求参数\",{\"1\":{\"249\":1}}],[\"请求地址\",{\"1\":{\"249\":1}}],[\"请求相应的视图\",{\"1\":{\"217\":1}}],[\"请求失败\",{\"1\":{\"134\":1,\"249\":2}}],[\"请求接口文档地址失败解决\",{\"0\":{\"21\":1}}],[\"了响应页面之后执行的\",{\"1\":{\"227\":1}}],[\"拿到对应的视图\",{\"1\":{\"217\":1}}],[\"像spring中的映射器发起请求handlermapping中查询对应的处理类\",{\"1\":{\"217\":1}}],[\"此时我们就可以使用责任链模式\",{\"1\":{\"269\":1}}],[\"此时对modelandview再操作也对响应无济于事\",{\"1\":{\"227\":1}}],[\"此时前端控制会去找处理适配器handleradaptor\",{\"1\":{\"217\":1}}],[\"此时服务器中接收此请求的时前端控制器dispatcherservlet\",{\"1\":{\"217\":1}}],[\"此标签必须要有\",{\"1\":{\"167\":1}}],[\"框架提供了很多的\",{\"1\":{\"216\":1}}],[\"首先根据逻辑视图名解析成物理视图名称\",{\"1\":{\"216\":1}}],[\"视图类型\",{\"1\":{\"216\":1}}],[\"视图对象\",{\"1\":{\"216\":1}}],[\"视图\",{\"1\":{\"216\":1}}],[\"视图解析器viewresolver解析完成后将视图地址以及携带的数据返回给前端控制器\",{\"1\":{\"217\":1}}],[\"视图解析器\",{\"1\":{\"205\":1,\"216\":1}}],[\"负责将处理结果生成\",{\"1\":{\"216\":1}}],[\"涉及到具体的用户业务请求\",{\"1\":{\"214\":1}}],[\"派发请求的控制器\",{\"1\":{\"213\":1}}],[\"处理适配器接收到返回的结果后\",{\"1\":{\"217\":1}}],[\"处理适配器接收到来自前端控制器dispathcherservlet后\",{\"1\":{\"217\":1}}],[\"处理器方法若最终未被执行\",{\"1\":{\"226\":1}}],[\"处理器适配器\",{\"1\":{\"215\":1}}],[\"处理器\",{\"1\":{\"214\":1}}],[\"处理器映射器\",{\"1\":{\"213\":1}}],[\"处于不同事务中的方法在相互调用时\",{\"1\":{\"191\":1}}],[\"监听\",{\"1\":{\"206\":1}}],[\"监听器\",{\"1\":{\"206\":1}}],[\"监视一个\",{\"1\":{\"105\":1}}],[\"静态资源处理\",{\"1\":{\"205\":1}}],[\"静态资源库\",{\"0\":{\"1\":1}}],[\"扫描\",{\"1\":{\"204\":1}}],[\"扫描的包路径\",{\"1\":{\"161\":1}}],[\"插件启动\",{\"1\":{\"207\":1}}],[\"插件依赖\",{\"1\":{\"201\":1}}],[\"插件一启动就结束了\",{\"1\":{\"201\":1}}],[\"插件收集\",{\"0\":{\"9\":1}}],[\"整合\",{\"0\":{\"200\":1}}],[\"链接数据库的数据源\",{\"1\":{\"196\":1}}],[\"遇到什么异常会回滚\",{\"1\":{\"195\":1}}],[\"报表查询\",{\"1\":{\"192\":1}}],[\"粗粒度\",{\"1\":{\"192\":1}}],[\"细粒度\",{\"1\":{\"192\":1}}],[\"语句的执行时长\",{\"1\":{\"191\":1}}],[\"语法\",{\"1\":{\"184\":1}}],[\"常量\",{\"1\":{\"191\":1}}],[\"常用\",{\"1\":{\"176\":1}}],[\"无论当前是否有事务都会创建新的\",{\"1\":{\"191\":1,\"195\":1}}],[\"无论是否出现异常都是最后被调用的通知\",{\"1\":{\"188\":1}}],[\"比较常用的设置\",{\"1\":{\"191\":1,\"195\":1}}],[\"比如缓存\",{\"1\":{\"173\":1}}],[\"比如\",{\"1\":{\"147\":3,\"173\":3}}],[\"串行化\",{\"1\":{\"190\":1}}],[\"未解决任何并发问题\",{\"1\":{\"190\":1}}],[\"未指定\",{\"1\":{\"114\":1}}],[\"读已提交\",{\"1\":{\"190\":1}}],[\"读未提交\",{\"1\":{\"190\":1}}],[\"读取网络图片使用\",{\"1\":{\"254\":1}}],[\"读取本地图片使用\",{\"1\":{\"254\":1}}],[\"读取模板\",{\"1\":{\"254\":1}}],[\"读取db\",{\"1\":{\"204\":1}}],[\"读取配置文件\",{\"1\":{\"163\":1}}],[\"读取数量\",{\"1\":{\"104\":1}}],[\"读取消费者组中的消息\",{\"1\":{\"104\":1}}],[\"读取第一个参数\",{\"1\":{\"53\":1}}],[\"再生成\",{\"1\":{\"216\":1}}],[\"再在页面中配置运行命令为\",{\"1\":{\"207\":1}}],[\"再由通知类型找到切入的时间点\",{\"1\":{\"189\":1}}],[\"再由切面类根据切入点找到目标类的目标方法\",{\"1\":{\"189\":1}}],[\"再执行一次这个命令即可\",{\"1\":{\"66\":1}}],[\"进行限定的\",{\"1\":{\"222\":1}}],[\"进行封装才可以转发\",{\"1\":{\"221\":1}}],[\"进行渲染将处理结果通过页面展示给用户\",{\"1\":{\"216\":1}}],[\"进行分割\",{\"1\":{\"189\":1}}],[\"进行比较而实现自动注入的\",{\"1\":{\"180\":1}}],[\"位置\",{\"1\":{\"188\":1}}],[\"拦截所有用\",{\"1\":{\"228\":2}}],[\"拦截器要拦截的请求路径\",{\"1\":{\"228\":2}}],[\"拦截器注入数据\",{\"0\":{\"126\":1}}],[\"拦截的方法名称\",{\"1\":{\"188\":1}}],[\"维护均较为麻烦\",{\"1\":{\"188\":1}}],[\"编写\",{\"1\":{\"188\":1}}],[\"编程的支持\",{\"1\":{\"172\":1}}],[\"引入依赖\",{\"0\":{\"186\":1,\"248\":1}}],[\"出现在类名中时\",{\"1\":{\"184\":1}}],[\"符号解释\",{\"1\":{\"184\":1}}],[\"符号表\",{\"1\":{\"11\":1}}],[\"访问权限和异常类型可以省略或用符号代替\",{\"1\":{\"184\":1}}],[\"访问权限\",{\"1\":{\"184\":1}}],[\"访问权限类型\",{\"1\":{\"184\":1}}],[\"抛出异常类型\",{\"1\":{\"184\":1}}],[\"包或者子包里的任意类的任意方法\",{\"1\":{\"184\":1}}],[\"包里的任意类的任意方法\",{\"1\":{\"184\":1}}],[\"包名类名\",{\"1\":{\"184\":1}}],[\"包括\",{\"1\":{\"173\":1,\"216\":1}}],[\"包括元素成员和元素分值\",{\"1\":{\"98\":1}}],[\"织入\",{\"1\":{\"183\":1}}],[\"织入增强后\",{\"1\":{\"183\":1}}],[\"环绕方法\",{\"1\":{\"188\":2}}],[\"环绕通知\",{\"1\":{\"183\":1,\"184\":1,\"188\":1}}],[\"环境\",{\"1\":{\"161\":1}}],[\"异常类型\",{\"1\":{\"184\":1}}],[\"异常通知\",{\"1\":{\"183\":1,\"184\":1,\"188\":2}}],[\"异常信息是\",{\"1\":{\"188\":1}}],[\"异常信息\",{\"1\":{\"123\":3}}],[\"之后所要做的事情就是通知\",{\"1\":{\"183\":1}}],[\"之前\",{\"1\":{\"66\":1}}],[\"增强\",{\"1\":{\"183\":1}}],[\"增减值\",{\"1\":{\"110\":1}}],[\"被标记为\",{\"1\":{\"183\":1}}],[\"被其他命令所改动\",{\"1\":{\"105\":1}}],[\"非业务功能\",{\"1\":{\"183\":1}}],[\"切入时间不同\",{\"1\":{\"183\":1}}],[\"切入点表达式\",{\"1\":{\"188\":1}}],[\"切入点表达式时\",{\"1\":{\"188\":1}}],[\"切入点示例\",{\"1\":{\"184\":1}}],[\"切入点定义切入的位置\",{\"1\":{\"183\":1}}],[\"切入点指声明的一个或多个连接点的集合\",{\"1\":{\"183\":1}}],[\"切入点\",{\"1\":{\"183\":1}}],[\"切面\",{\"1\":{\"183\":1,\"188\":1}}],[\"切换数据库命令\",{\"1\":{\"81\":1}}],[\"切换指定的node版本和位数\",{\"1\":{\"68\":1}}],[\"代理\",{\"1\":{\"183\":1}}],[\"代表的就是\",{\"1\":{\"188\":1}}],[\"代表在\",{\"1\":{\"147\":1}}],[\"代表在指定的范围内触发\",{\"1\":{\"147\":1}}],[\"代表在指定的秒数触发\",{\"1\":{\"147\":1}}],[\"代表5秒触发1次\",{\"1\":{\"147\":1}}],[\"代表从0秒钟开始\",{\"1\":{\"147\":1}}],[\"代表从25秒开始触发到45秒结束触发\",{\"1\":{\"147\":1}}],[\"代表触发步进\",{\"1\":{\"147\":1}}],[\"代表0秒\",{\"1\":{\"147\":1}}],[\"代表每隔1秒钟触发\",{\"1\":{\"147\":1}}],[\"代表为永久有效\",{\"1\":{\"110\":1}}],[\"代表正无穷\",{\"1\":{\"98\":1}}],[\"代表负无穷\",{\"1\":{\"98\":1}}],[\"代表要移除的个数\",{\"1\":{\"90\":2}}],[\"术语解释\",{\"1\":{\"183\":1}}],[\"控制器的bean对象都在这里扫描\",{\"1\":{\"205\":1}}],[\"控制层对象\",{\"1\":{\"182\":1}}],[\"控制反转\",{\"0\":{\"174\":1}}],[\"业务层对象\",{\"1\":{\"182\":1}}],[\"声明式事务管理\",{\"1\":{\"191\":1}}],[\"声明式事务控制\",{\"1\":{\"191\":1}}],[\"声明式事务的支持\",{\"1\":{\"172\":1}}],[\"声明前置通知\",{\"1\":{\"188\":1}}],[\"声明当前是一个bean\",{\"1\":{\"182\":1}}],[\"让其子类自己决定实例化哪一个工厂类\",{\"1\":{\"261\":1}}],[\"让容器生成\",{\"1\":{\"188\":1}}],[\"让容器自动将被调用者\",{\"1\":{\"180\":1}}],[\"让开发人员只需要关注sql语句本身\",{\"1\":{\"154\":1}}],[\"完成被调用者的实例化\",{\"1\":{\"180\":1}}],[\"构造注入是在构造调用者实例的同时\",{\"1\":{\"180\":1}}],[\"构造器\",{\"1\":{\"180\":1}}],[\"国际化\",{\"1\":{\"176\":1}}],[\"还是之后执行等\",{\"1\":{\"183\":1}}],[\"还添加了对\",{\"1\":{\"176\":1}}],[\"还原命令\",{\"1\":{\"53\":1}}],[\"模板图片\",{\"1\":{\"254\":1}}],[\"模板图片与生成的图片\",{\"1\":{\"254\":1}}],[\"模板标签与数据进行绑定\",{\"1\":{\"254\":1}}],[\"模板所需数据\",{\"1\":{\"253\":1}}],[\"模板绑定的配置\",{\"1\":{\"253\":1}}],[\"模板引擎\",{\"1\":{\"173\":1}}],[\"模式中的c\",{\"1\":{\"212\":1}}],[\"模块的焦点\",{\"1\":{\"173\":1}}],[\"模块的基础上建立起来的\",{\"1\":{\"173\":1}}],[\"模块也支持\",{\"1\":{\"173\":1}}],[\"模块\",{\"1\":{\"173\":1}}],[\"模块继承自\",{\"1\":{\"173\":1}}],[\"邮件\",{\"1\":{\"173\":1}}],[\"邮箱\",{\"1\":{\"139\":1}}],[\"容器就不知该匹配哪一个了\",{\"1\":{\"180\":1}}],[\"容器是通过调用者的\",{\"1\":{\"180\":1}}],[\"容器将bean实例调用无参构造器创建对象并对其属性进行初始化的过程称为di注入\",{\"1\":{\"180\":1}}],[\"容器\",{\"1\":{\"173\":1,\"175\":1,\"188\":1}}],[\"建立在由\",{\"1\":{\"173\":1}}],[\"建造者模式对象创建\",{\"1\":{\"163\":1}}],[\"建造者模式可以强制实行一种分步骤进行的建造过程\",{\"1\":{\"157\":1}}],[\"建造者模式\",{\"1\":{\"157\":1}}],[\"而\",{\"1\":{\"183\":1}}],[\"而是通过参数指定配置文件的位置\",{\"1\":{\"178\":1}}],[\"而无须手动编程\",{\"1\":{\"172\":1}}],[\"而不是转发页面\",{\"1\":{\"220\":1}}],[\"而不是从尾部插入\",{\"1\":{\"98\":1}}],[\"而不需要了解具体的建造过程和细节\",{\"1\":{\"157\":1}}],[\"程序\",{\"1\":{\"172\":1}}],[\"支持更多类型的处理器\",{\"1\":{\"215\":1}}],[\"支持当前事务\",{\"1\":{\"191\":1,\"195\":2}}],[\"支持\",{\"1\":{\"172\":1}}],[\"支持网络\",{\"1\":{\"78\":1}}],[\"都是\",{\"1\":{\"222\":1}}],[\"都是交给容器来创建对象\",{\"1\":{\"219\":1}}],[\"都提供了封装\",{\"1\":{\"172\":1}}],[\"都可以做到java对象的转换\",{\"1\":{\"243\":1}}],[\"都可以插入值\",{\"1\":{\"88\":1}}],[\"都可以\",{\"1\":{\"9\":1}}],[\"远程调用等\",{\"1\":{\"172\":1}}],[\"降低\",{\"1\":{\"172\":1}}],[\"管理\",{\"1\":{\"172\":1,\"182\":1}}],[\"方式\",{\"1\":{\"180\":1}}],[\"方便程序的测试\",{\"1\":{\"172\":1}}],[\"方便集成各种优秀框架\",{\"1\":{\"172\":1}}],[\"方便解耦\",{\"1\":{\"172\":1}}],[\"方法返回true时\",{\"1\":{\"227\":1}}],[\"方法返回值\",{\"1\":{\"184\":1}}],[\"方法放入到一个专门的方法栈中等待执行\",{\"1\":{\"225\":1}}],[\"方法出现异常\",{\"1\":{\"188\":1}}],[\"方法参数列表\",{\"1\":{\"188\":1}}],[\"方法的参数格式\",{\"1\":{\"188\":1}}],[\"方法声明\",{\"1\":{\"184\":1}}],[\"方法名\",{\"1\":{\"184\":1}}],[\"方法传入被调用者的实例\",{\"1\":{\"180\":1}}],[\"方法测试了\",{\"1\":{\"165\":1}}],[\"方法将其关闭\",{\"1\":{\"158\":1}}],[\"方法没有参数\",{\"1\":{\"158\":1}}],[\"方法\",{\"1\":{\"157\":1,\"158\":1,\"243\":1,\"244\":1}}],[\"优势\",{\"0\":{\"172\":1}}],[\"双引号\",{\"1\":{\"168\":1}}],[\"单引号\",{\"1\":{\"168\":1}}],[\"单独使用\",{\"0\":{\"159\":1},\"1\":{\"163\":1}}],[\"大于等于\",{\"1\":{\"168\":1}}],[\"大于\",{\"1\":{\"168\":1}}],[\"大圣云沙箱\",{\"1\":{\"12\":1}}],[\"小结\",{\"1\":{\"243\":1,\"244\":1}}],[\"小于等于\",{\"1\":{\"168\":1}}],[\"小于\",{\"1\":{\"168\":1}}],[\"小时\",{\"1\":{\"147\":2}}],[\"备注\",{\"1\":{\"168\":1}}],[\"转换后的list\",{\"1\":{\"244\":6}}],[\"转义符号\",{\"1\":{\"168\":1}}],[\"转义字符\",{\"0\":{\"168\":1}}],[\"转移变量的元素值到目的变量\",{\"1\":{\"110\":1}}],[\"转移消息的归属权\",{\"1\":{\"104\":1}}],[\"那组尖括号里所包的类型\",{\"1\":{\"167\":1}}],[\"那么我们可能会一直if判断下去\",{\"1\":{\"269\":1}}],[\"那么需要使用jsonarray\",{\"1\":{\"244\":1}}],[\"那么就判断字段上是否存在\",{\"1\":{\"237\":2}}],[\"那么\",{\"1\":{\"167\":2}}],[\"那么事务将被打断\",{\"1\":{\"105\":1}}],[\"那么可以考虑将一个字段变更为升序排序且由于我们这边是以考试为思路来设计所以可以考虑使用考试的最高分减去当前人的考试分数获取一个新的升序分数\",{\"1\":{\"71\":1}}],[\"那么执行\",{\"1\":{\"47\":1}}],[\"里传入的是\",{\"1\":{\"167\":1}}],[\"里面可以写通用的\",{\"1\":{\"167\":1}}],[\"暂时常用的就这些\",{\"1\":{\"167\":1}}],[\"片段\",{\"1\":{\"167\":1}}],[\"唯一不可重复\",{\"1\":{\"167\":1}}],[\"遍历的集合中的每一个数据\",{\"1\":{\"167\":1}}],[\"直接返回false\",{\"1\":{\"272\":1}}],[\"直接写list\",{\"1\":{\"167\":1}}],[\"直接使用\",{\"1\":{\"165\":1}}],[\"实际输出的图片\",{\"1\":{\"254\":1}}],[\"实现代码\",{\"0\":{\"270\":1}}],[\"实现的\",{\"1\":{\"189\":1}}],[\"实现类\",{\"1\":{\"187\":1}}],[\"实体类中的对应的属性的类型\",{\"1\":{\"167\":1}}],[\"实例中获取\",{\"1\":{\"158\":1}}],[\"实例可用再更多个线程中进行共享\",{\"1\":{\"151\":1}}],[\"区分大小写\",{\"1\":{\"167\":1}}],[\"主键列使用\",{\"1\":{\"167\":1}}],[\"主要用于消息队列\",{\"1\":{\"102\":1}}],[\"主要用于存储地理位置信息\",{\"1\":{\"100\":1}}],[\"路径查找文件\",{\"1\":{\"166\":1}}],[\"路过图床\",{\"1\":{\"10\":1}}],[\"属性\",{\"1\":{\"195\":1}}],[\"属性表示\",{\"1\":{\"188\":2}}],[\"属性指定的类\",{\"1\":{\"180\":1}}],[\"属性其他表中嵌套是用于指定当前\",{\"1\":{\"167\":1}}],[\"属性是由\",{\"1\":{\"222\":1}}],[\"属性是\",{\"1\":{\"167\":1}}],[\"属性是传入的参数类型\",{\"1\":{\"167\":2}}],[\"属性是在实体类与数据库表字段不符时使用的\",{\"1\":{\"167\":1}}],[\"属性是指定要返回的java实体类\",{\"1\":{\"167\":1}}],[\"属性是这个\",{\"1\":{\"167\":3}}],[\"属性值均\",{\"1\":{\"188\":1}}],[\"属性值\",{\"1\":{\"166\":1,\"180\":1}}],[\"属性名\",{\"1\":{\"166\":1}}],[\"选用的事务\",{\"1\":{\"166\":1}}],[\"选择一个版本进行使用\",{\"1\":{\"67\":1}}],[\"标注不同层的对象\",{\"1\":{\"182\":1}}],[\"标签必须存在\",{\"1\":{\"201\":1}}],[\"标签即可\",{\"1\":{\"167\":1}}],[\"标签使用\",{\"1\":{\"167\":1}}],[\"标签\",{\"1\":{\"167\":2}}],[\"标签的名称\",{\"1\":{\"167\":1}}],[\"标签所对应的方法名\",{\"1\":{\"167\":2}}],[\"标签有以下属性\",{\"1\":{\"166\":1}}],[\"标签就可以看到\",{\"1\":{\"166\":1}}],[\"标记一个事务块的开始\",{\"1\":{\"105\":1}}],[\"点击\",{\"1\":{\"166\":1}}],[\"传入\",{\"1\":{\"165\":1}}],[\"工具类\",{\"0\":{\"231\":1,\"237\":1,\"253\":1,\"291\":1},\"2\":{\"239\":1,\"240\":1,\"245\":1,\"246\":1,\"250\":1,\"251\":1,\"255\":1,\"256\":1,\"258\":1,\"259\":1}}],[\"工具网\",{\"1\":{\"11\":1}}],[\"工作原理\",{\"0\":{\"217\":1}}],[\"工厂创建责任链\",{\"0\":{\"277\":1}}],[\"工厂模式使其创建过程延迟到子类进行\",{\"1\":{\"261\":1}}],[\"工厂模式\",{\"0\":{\"260\":1}}],[\"工厂模式的微妙实现\",{\"1\":{\"173\":1}}],[\"工厂调取\",{\"1\":{\"163\":1}}],[\"工厂\",{\"1\":{\"163\":1}}],[\"参考学过的jdbc\",{\"1\":{\"161\":1}}],[\"参数\",{\"1\":{\"184\":1}}],[\"参数类型和参数个数\",{\"1\":{\"184\":1}}],[\"参数是集合类型\",{\"1\":{\"167\":1}}],[\"参数是配置文件名车\",{\"1\":{\"163\":1}}],[\"参数值\",{\"1\":{\"129\":1}}],[\"参数集合\",{\"1\":{\"129\":1}}],[\"连接点\",{\"1\":{\"183\":1}}],[\"连接数据库的四大参数注意数据库版本使用的是mysql8\",{\"1\":{\"161\":1}}],[\"连接的创建\",{\"1\":{\"154\":1}}],[\"减少get\",{\"1\":{\"160\":1,\"201\":1}}],[\"依赖导入\",{\"0\":{\"201\":1}}],[\"依赖\",{\"1\":{\"160\":1,\"201\":1}}],[\"预处理语句不会被复用\",{\"1\":{\"158\":1}}],[\"它就相当于\",{\"1\":{\"212\":1}}],[\"它可以获取类路径之外的资源\",{\"1\":{\"178\":1}}],[\"它与\",{\"1\":{\"178\":1}}],[\"它不仅提供了\",{\"1\":{\"176\":1}}],[\"它是根据\",{\"1\":{\"175\":1}}],[\"它主要负责初始化各种\",{\"1\":{\"175\":1}}],[\"它以一种类似于\",{\"1\":{\"173\":1}}],[\"它移除了编码式单例的需要\",{\"1\":{\"173\":1}}],[\"它会创建有如下特性的\",{\"1\":{\"158\":1}}],[\"它的内部封装了jdbc\",{\"1\":{\"154\":1}}],[\"系统开销大的对象\",{\"1\":{\"158\":1}}],[\"指导者指挥建造者\",{\"1\":{\"157\":1}}],[\"指定干活的拦截器\",{\"1\":{\"228\":2}}],[\"指定切入点为\",{\"1\":{\"184\":3}}],[\"指定的话就是\",{\"1\":{\"167\":1}}],[\"指定的字段是否存在\",{\"1\":{\"96\":1}}],[\"指定包下的所有mapper接口\",{\"1\":{\"166\":1}}],[\"指定一个版本进行安装\",{\"1\":{\"67\":1}}],[\"指定库还原\",{\"1\":{\"53\":1}}],[\"与导入的表头进行对应校验来验证模板是否一致\",{\"1\":{\"237\":1}}],[\"与spring组合为\",{\"1\":{\"201\":1}}],[\"与\",{\"1\":{\"168\":1}}],[\"与建造者\",{\"1\":{\"157\":1}}],[\"与启动类平级\",{\"1\":{\"19\":1}}],[\"角色分指导者\",{\"1\":{\"157\":1}}],[\"使这些\",{\"1\":{\"172\":1}}],[\"使得同样的构建过程可以创建不同的表示\",{\"1\":{\"157\":1}}],[\"使用serviceloader扫描相关对象时我们需要在meta\",{\"1\":{\"265\":1}}],[\"使用工厂创建对应形状\",{\"0\":{\"265\":1}}],[\"使用时可以自己定义\",{\"1\":{\"257\":1}}],[\"使用反射获取实体类的excel表头\",{\"1\":{\"237\":1}}],[\"使用这个注解后\",{\"1\":{\"221\":1}}],[\"使用构造器设置依赖关系\",{\"1\":{\"180\":1}}],[\"使用资源束\",{\"1\":{\"173\":1}}],[\"使用的mapper接口的完全限定名\",{\"1\":{\"166\":1}}],[\"使用的连接池\",{\"1\":{\"166\":1}}],[\"使用相对于类路径的资源\",{\"1\":{\"166\":1}}],[\"使用数据库的连接池\",{\"1\":{\"161\":1}}],[\"使用jedis\",{\"1\":{\"151\":1}}],[\"使用java来实现排行榜\",{\"0\":{\"72\":1}}],[\"使用中\",{\"1\":{\"114\":1}}],[\"使用\",{\"1\":{\"80\":1,\"110\":1,\"161\":2,\"189\":1}}],[\"使用redis客户端进行链接\",{\"1\":{\"79\":1}}],[\"使用redis客户端进行链接测试\",{\"1\":{\"79\":1}}],[\"使用redis先试思路可行性\",{\"0\":{\"71\":1}}],[\"使用模糊查询获取当前场考试所有用户的key\",{\"1\":{\"74\":1}}],[\"使用方式与\",{\"1\":{\"26\":1}}],[\"使用方式\",{\"1\":{\"9\":1}}],[\"又称生成器模式\",{\"1\":{\"157\":1}}],[\"事件传播等方面的良好支持\",{\"1\":{\"176\":1}}],[\"事件传播\",{\"1\":{\"173\":1}}],[\"事实上使用sqlsessionfactorybuilder的原因是将sqlsessionfactory这个复杂对象的创建交由builder来执行\",{\"1\":{\"157\":1}}],[\"事务的隔离级别\",{\"1\":{\"195\":1}}],[\"事务的粗细粒度\",{\"0\":{\"192\":1}}],[\"事务必须在service层统一控制\",{\"1\":{\"191\":1}}],[\"事务中的方法\",{\"1\":{\"191\":2}}],[\"事务中任意命令执行失败\",{\"1\":{\"105\":1}}],[\"事务默认超时时限\",{\"1\":{\"190\":1}}],[\"事务传播行为是加在方法上的\",{\"1\":{\"191\":1}}],[\"事务传播行为常量\",{\"0\":{\"191\":1},\"1\":{\"191\":1}}],[\"事务传播行为\",{\"1\":{\"190\":1}}],[\"事务隔离级别常量\",{\"1\":{\"190\":1}}],[\"事务隔离级别\",{\"1\":{\"190\":1}}],[\"事务隔离级别将会使用驱动或数据源的默认设置\",{\"1\":{\"158\":1}}],[\"事务定义接口\",{\"1\":{\"190\":1}}],[\"事务类型\",{\"1\":{\"161\":1}}],[\"事务可以一次执行多个命令\",{\"1\":{\"105\":1}}],[\"事务\",{\"0\":{\"105\":1,\"190\":1},\"1\":{\"78\":1,\"161\":1,\"171\":1}}],[\"顾名思义就是资源\",{\"1\":{\"156\":1}}],[\"类型的字符串\",{\"1\":{\"249\":1}}],[\"类似与二级请求也就是\",{\"1\":{\"222\":1}}],[\"类的某引用类型属性类型同源\",{\"1\":{\"180\":1}}],[\"类的属性名相同时\",{\"1\":{\"180\":1}}],[\"类\",{\"1\":{\"156\":1}}],[\"映射器找到相应的处理类时\",{\"1\":{\"217\":1}}],[\"映射\",{\"1\":{\"154\":1}}],[\"关系\",{\"1\":{\"154\":1,\"180\":1}}],[\"关闭链接\",{\"1\":{\"163\":1}}],[\"关闭redis服务命令\",{\"1\":{\"79\":1}}],[\"关闭nodejs版本控制\",{\"1\":{\"68\":1}}],[\"就抛出异常\",{\"1\":{\"195\":1}}],[\"就以非事务方式执行\",{\"1\":{\"195\":1}}],[\"就直接加入该事务\",{\"1\":{\"195\":2}}],[\"就直\",{\"1\":{\"195\":1}}],[\"就叫做声明式事务管理\",{\"1\":{\"191\":1}}],[\"就会创建一个新的事务\",{\"1\":{\"191\":1,\"195\":1}}],[\"就称为事务传播行为\",{\"1\":{\"191\":1}}],[\"就产生一个结果代理类\",{\"1\":{\"183\":1}}],[\"就不再去写测试方法调用了\",{\"1\":{\"165\":1}}],[\"就能完成对数据的持久化操作\",{\"1\":{\"154\":1}}],[\"就是指我们的\",{\"1\":{\"214\":1}}],[\"就是一些代码完成的某个功能\",{\"1\":{\"183\":1}}],[\"就是一个大工厂\",{\"1\":{\"172\":1}}],[\"就是数据库中的一张表\",{\"1\":{\"154\":1}}],[\"就是我们在redis中存储的数据\",{\"1\":{\"128\":1}}],[\"就是上一行命令的地址\",{\"1\":{\"66\":1}}],[\"避免我们与jdbc的api打交道\",{\"1\":{\"154\":1}}],[\"避免npm访问到的是nodejs中自带的npm包管理工具\",{\"1\":{\"66\":1}}],[\"屏蔽了jdbcapi底层的访问细节\",{\"1\":{\"154\":1}}],[\"提取到类上作为一级请求使用\",{\"1\":{\"222\":1}}],[\"提取公共字段\",{\"0\":{\"114\":1}}],[\"提供了不同的映射器实现不同的映射方式\",{\"1\":{\"213\":1}}],[\"提供了\",{\"1\":{\"188\":1}}],[\"提供了对第三方集成到\",{\"1\":{\"173\":1}}],[\"提供\",{\"1\":{\"173\":1}}],[\"提供框架的基本组成部分\",{\"1\":{\"173\":1}}],[\"提供面向切面编程\",{\"1\":{\"172\":1}}],[\"提供的持久层框架包括\",{\"1\":{\"154\":1}}],[\"迁移到了\",{\"1\":{\"154\":1}}],[\"简单使用\",{\"0\":{\"242\":1}}],[\"简单测试下\",{\"1\":{\"80\":1}}],[\"简易的示例监听器\",{\"1\":{\"238\":1}}],[\"简化开发\",{\"1\":{\"172\":1}}],[\"简介\",{\"1\":{\"154\":1}}],[\"采用\",{\"1\":{\"190\":1}}],[\"采用编译期织入和类装载期织入\",{\"1\":{\"183\":1}}],[\"采用动态代理织入\",{\"1\":{\"183\":1}}],[\"采用了orm思想解决了实体类和数据库表映射的问题\",{\"1\":{\"154\":1}}],[\"采用netty\",{\"1\":{\"151\":1}}],[\"采用的直连\",{\"1\":{\"151\":1}}],[\"原始字符串\",{\"1\":{\"257\":1}}],[\"原有都记录下来\",{\"1\":{\"188\":1}}],[\"原来使用的jedis被替换为了lettuce\",{\"1\":{\"151\":1}}],[\"原因\",{\"1\":{\"21\":1}}],[\"经典表达式\",{\"0\":{\"148\":1}}],[\"年这个项目由\",{\"1\":{\"154\":1}}],[\"年\",{\"1\":{\"147\":1,\"154\":1}}],[\"年份\",{\"1\":{\"147\":1}}],[\"除了\",{\"1\":{\"147\":1,\"203\":1}}],[\"允许为空\",{\"1\":{\"147\":1}}],[\"允许值范围\",{\"1\":{\"147\":5}}],[\"占位符和秒数一样\",{\"1\":{\"147\":1}}],[\"内步进20秒命中的时间点触发\",{\"1\":{\"147\":1}}],[\"内存中是断电即失\",{\"1\":{\"78\":1}}],[\"内存存储\",{\"1\":{\"78\":1}}],[\"等到对请求进行响应的所工作完成之后才执行该方法\",{\"1\":{\"227\":1}}],[\"等功能\",{\"1\":{\"173\":1}}],[\"等\",{\"1\":{\"172\":1,\"173\":1,\"216\":1}}],[\"等同\",{\"1\":{\"147\":1}}],[\"等待时间\",{\"1\":{\"110\":2}}],[\"每个月第三周的星期四的10点15分0秒触发任务\",{\"1\":{\"148\":1}}],[\"每个月最后一个星期四的10点15分0秒触发任务\",{\"1\":{\"148\":1}}],[\"每个月最后一个工作日的10点15分0秒触发任务\",{\"1\":{\"148\":1}}],[\"每个月最后一天的10点15分0秒触发任务\",{\"1\":{\"148\":1}}],[\"每三分钟触发一次\",{\"1\":{\"148\":1}}],[\"每小时的第0分0秒开始\",{\"1\":{\"148\":1}}],[\"每小时的10分30秒触发任务\",{\"1\":{\"148\":1}}],[\"每分钟的15秒到30秒之间开始触发\",{\"1\":{\"148\":1}}],[\"每分钟的每15秒开始触发\",{\"1\":{\"148\":1}}],[\"每秒都触发任务\",{\"1\":{\"148\":1}}],[\"每15秒\",{\"1\":{\"148\":1}}],[\"每年10月20号1点10分30秒触发任务\",{\"1\":{\"148\":1}}],[\"每月20号1点10分30秒触发任务\",{\"1\":{\"148\":1}}],[\"每天1点10分30秒触发任务\",{\"1\":{\"148\":1}}],[\"每天零点5分调用\",{\"1\":{\"146\":1}}],[\"每半分钟触发任务\",{\"1\":{\"148\":1}}],[\"每隔5秒触发一次\",{\"1\":{\"148\":2}}],[\"每隔20秒钟触发1次\",{\"1\":{\"147\":1}}],[\"每隔1秒触发1次\",{\"1\":{\"147\":1}}],[\"调用测试\",{\"0\":{\"276\":1}}],[\"调用方法\",{\"1\":{\"254\":1}}],[\"调用处理器传递参数等工作\",{\"1\":{\"215\":1}}],[\"调用\",{\"1\":{\"191\":1}}],[\"调用mapper\",{\"0\":{\"165\":1}}],[\"调度\",{\"1\":{\"173\":1}}],[\"调度器将抛出schedulerexception异常\",{\"1\":{\"147\":5}}],[\"调试cron表达式是否是想要的执行\",{\"1\":{\"145\":1}}],[\"若为true\",{\"1\":{\"225\":1}}],[\"若为类\",{\"1\":{\"184\":1}}],[\"若为接口\",{\"1\":{\"184\":1}}],[\"若值不合法\",{\"1\":{\"147\":5}}],[\"若列表中没有任何元素时也就是这个key都不存在的情况下\",{\"1\":{\"91\":2}}],[\"星期一到星期五的10点15分0秒触发任务\",{\"1\":{\"148\":1}}],[\"星期\",{\"1\":{\"147\":4}}],[\"月迁移到\",{\"1\":{\"154\":1}}],[\"月份\",{\"1\":{\"147\":1}}],[\"月光后台接口服务\",{\"1\":{\"119\":2}}],[\"日期\",{\"1\":{\"147\":3}}],[\"案例\",{\"0\":{\"146\":1,\"254\":1,\"262\":1}}],[\"用到\",{\"1\":{\"203\":1}}],[\"用在接口后\",{\"1\":{\"184\":1}}],[\"用在类名后\",{\"1\":{\"184\":1}}],[\"用在包名后\",{\"1\":{\"184\":1}}],[\"用在方法参数中\",{\"1\":{\"184\":1}}],[\"用于定义\",{\"1\":{\"188\":1}}],[\"用于dao实现类的的注解\",{\"1\":{\"182\":1}}],[\"用于controller实现类的注解\",{\"1\":{\"182\":1}}],[\"用于读取资源文件\",{\"1\":{\"156\":1}}],[\"用户在浏览器中访问相应网页时\",{\"1\":{\"217\":1}}],[\"用户请求的入口控制器\",{\"1\":{\"212\":1}}],[\"用户service实现类的注解\",{\"1\":{\"182\":1}}],[\"用户数据\",{\"1\":{\"165\":1}}],[\"用户id\",{\"1\":{\"165\":1}}],[\"用户联系指导者\",{\"1\":{\"157\":1}}],[\"用什么打码\",{\"1\":{\"141\":1}}],[\"用apiinfobuilder进行定制\",{\"1\":{\"119\":1}}],[\"没有下一级处理器\",{\"1\":{\"272\":1}}],[\"没有设置就是非阻塞模式\",{\"1\":{\"103\":1}}],[\"没给默认值\",{\"1\":{\"141\":1}}],[\"脱敏数据类型\",{\"1\":{\"141\":1}}],[\"能通过反射读取到\",{\"1\":{\"141\":1}}],[\"能做什么\",{\"1\":{\"78\":1}}],[\"作用在字段上\",{\"1\":{\"141\":1}}],[\"作者信息\",{\"1\":{\"119\":1}}],[\"走到这里说明是string类型且存在脱敏注解那么将脱敏注解设置为当前string的处理就好\",{\"1\":{\"140\":1}}],[\"手机号\",{\"1\":{\"139\":1}}],[\"身份证号\",{\"1\":{\"139\":1}}],[\"隐私数据类型枚举\",{\"1\":{\"139\":1}}],[\"泛型\",{\"1\":{\"135\":1,\"237\":2}}],[\"全参数自定义\",{\"1\":{\"135\":1}}],[\"全局拦截异常案例\",{\"1\":{\"123\":1}}],[\"全局拦截器\",{\"1\":{\"21\":1}}],[\"全局异常拦截器\",{\"0\":{\"123\":1}}],[\"响应码\",{\"1\":{\"135\":1}}],[\"响应格式\",{\"1\":{\"135\":1}}],[\"否则不执行\",{\"1\":{\"188\":1}}],[\"否则是失败的错误码\",{\"1\":{\"135\":1}}],[\"否则会注入失败\",{\"1\":{\"130\":1}}],[\"统一的\",{\"1\":{\"135\":1}}],[\"统一返回数据类\",{\"0\":{\"135\":1}}],[\"入参解析\",{\"1\":{\"129\":1}}],[\"入参集合\",{\"1\":{\"129\":1}}],[\"和在\",{\"1\":{\"219\":1}}],[\"和视图解析器也需要此依赖\",{\"1\":{\"201\":1}}],[\"和远程调用等\",{\"1\":{\"173\":1}}],[\"和依赖注入功能\",{\"1\":{\"173\":1}}],[\"和mapper\",{\"1\":{\"165\":1}}],[\"和\",{\"1\":{\"129\":1,\"147\":1,\"154\":2,\"161\":1,\"221\":1,\"235\":1,\"236\":1}}],[\"和我们预期结果一致\",{\"1\":{\"71\":1}}],[\"具体怎么从redis获取可以根据自己情况进行获取\",{\"1\":{\"128\":1}}],[\"接加入该事务\",{\"1\":{\"195\":1}}],[\"接口\",{\"1\":{\"187\":1,\"223\":1}}],[\"接口有两个常用的实现类\",{\"1\":{\"176\":1}}],[\"接口实现类最常见的是org\",{\"1\":{\"175\":1}}],[\"接口是\",{\"1\":{\"173\":1}}],[\"接口和映射文件同包同名\",{\"1\":{\"166\":1}}],[\"接口对象是线程不安全的\",{\"1\":{\"158\":1}}],[\"接口对象是一个重量级对象\",{\"1\":{\"158\":1}}],[\"接口注入数据\",{\"0\":{\"129\":1}}],[\"接口放开以下接口的访问\",{\"1\":{\"120\":1}}],[\"接收数据实体类\",{\"0\":{\"73\":1}}],[\"描述\",{\"1\":{\"119\":2}}],[\"黑色的小火苗\",{\"1\":{\"119\":1,\"233\":1,\"234\":1,\"238\":1,\"253\":1,\"254\":2}}],[\"导入依赖\",{\"0\":{\"160\":1,\"194\":1},\"1\":{\"118\":1,\"252\":1}}],[\"导出的数据库名称\",{\"1\":{\"53\":2}}],[\"导出html文件后页面怎么刷新都无法正常显示页面\",{\"1\":{\"22\":1}}],[\"页面好看\",{\"1\":{\"118\":1}}],[\"自定义拦截器需要实现\",{\"1\":{\"223\":1}}],[\"自定义拦截器\",{\"0\":{\"223\":1}}],[\"自定义数据脱敏注解\",{\"1\":{\"141\":1}}],[\"自动注入\",{\"1\":{\"180\":1}}],[\"自动注入类中的用户id需要在拦截器中进行设置\",{\"1\":{\"115\":1}}],[\"自动注入类\",{\"0\":{\"115\":1}}],[\"自增或自减\",{\"0\":{\"87\":1}}],[\"自增序列\",{\"0\":{\"34\":1}}],[\"已知顺序的情况可以直接默认一条\",{\"1\":{\"276\":1}}],[\"已删除\",{\"1\":{\"114\":1}}],[\"已处理\",{\"1\":{\"104\":1}}],[\"仅在更新时进行处理\",{\"1\":{\"114\":1}}],[\"仅在插入时进行处理\",{\"1\":{\"114\":1}}],[\"仅保留指定区间内的元素\",{\"1\":{\"92\":1}}],[\"更改为true\",{\"1\":{\"163\":1}}],[\"更像bio模式\",{\"1\":{\"151\":1}}],[\"更新和插入时都进行处理\",{\"1\":{\"114\":1}}],[\"更新时间\",{\"1\":{\"114\":1}}],[\"更新人\",{\"1\":{\"114\":1}}],[\"更换数据库\",{\"1\":{\"83\":1}}],[\"某个值\",{\"1\":{\"110\":1}}],[\"把最后一个参数值放到指定集合的第一个出现中间参数的前面\",{\"1\":{\"110\":1}}],[\"起始区间\",{\"1\":{\"110\":1}}],[\"索引位置\",{\"1\":{\"110\":1}}],[\"一个类被\",{\"1\":{\"183\":1}}],[\"一般会把异常发生的时间\",{\"1\":{\"188\":1}}],[\"一般是类中的业务方法\",{\"1\":{\"183\":1}}],[\"一般是业务逻辑类的对象\",{\"1\":{\"183\":1}}],[\"一般省略\",{\"1\":{\"167\":1}}],[\"一般称为hashkey\",{\"1\":{\"110\":1}}],[\"一词来源于\",{\"1\":{\"154\":1}}],[\"一星期的最后一天\",{\"1\":{\"147\":1}}],[\"一星期的第一天\",{\"1\":{\"147\":1}}],[\"一定比单线程效率高\",{\"1\":{\"81\":1}}],[\"做增减操作\",{\"1\":{\"110\":1}}],[\"有没有指定的\",{\"1\":{\"110\":1}}],[\"有序集成员按分数值递减\",{\"1\":{\"98\":1}}],[\"有序集合中对指定成员的分数加上增量\",{\"1\":{\"99\":1}}],[\"有序集合\",{\"0\":{\"98\":1}}],[\"弹出元素并删除\",{\"1\":{\"110\":1}}],[\"弹出变量中的元素\",{\"1\":{\"110\":1}}],[\"两个选一个使用\",{\"1\":{\"167\":1}}],[\"两个set集合的差值\",{\"1\":{\"110\":1}}],[\"两个插入或改动值\",{\"1\":{\"88\":1}}],[\"随机获取变量中的元素\",{\"1\":{\"110\":1}}],[\"随机获取变量中指定个数的元素\",{\"1\":{\"110\":1}}],[\"纯数字\",{\"1\":{\"110\":1}}],[\"则校验下一级处理器\",{\"1\":{\"272\":1}}],[\"则返回空\",{\"1\":{\"237\":1}}],[\"则该方法不会执行\",{\"1\":{\"226\":1}}],[\"则紧接着会执行处理器方法\",{\"1\":{\"225\":1}}],[\"则为该类及其子类中的任意方法\",{\"1\":{\"184\":1}}],[\"则为接口中的任意方法及其所有实现类中的任意方法\",{\"1\":{\"184\":1}}],[\"则全部不添加\",{\"1\":{\"110\":1}}],[\"则继续\",{\"1\":{\"47\":1}}],[\"才添加\",{\"1\":{\"110\":1}}],[\"重复的键会覆盖\",{\"1\":{\"110\":1}}],[\"批量移除set缓存中元素\",{\"1\":{\"110\":1}}],[\"批量添加\",{\"1\":{\"110\":2,\"167\":1}}],[\"批量操作在发送\",{\"1\":{\"105\":1}}],[\"秒数\",{\"1\":{\"147\":2}}],[\"秒\",{\"1\":{\"110\":2}}],[\"键值对\",{\"1\":{\"110\":1}}],[\"键\",{\"1\":{\"110\":5}}],[\"时是所有类型的请求都会进行处理\",{\"1\":{\"222\":1}}],[\"时是不会进行自动注入的\",{\"1\":{\"114\":1}}],[\"时需要引入\",{\"1\":{\"201\":1}}],[\"时需要手动提交\",{\"1\":{\"158\":1}}],[\"时候\",{\"1\":{\"195\":2}}],[\"时根据\",{\"1\":{\"165\":1}}],[\"时重点是如何获取\",{\"1\":{\"163\":1}}],[\"时间类型\",{\"1\":{\"110\":2}}],[\"时间\",{\"1\":{\"110\":2}}],[\"时\",{\"1\":{\"110\":1}}],[\"例如库中图片地址\",{\"1\":{\"254\":2}}],[\"例如在controller方法中加入数据\",{\"1\":{\"227\":1}}],[\"例如统计结果\",{\"1\":{\"192\":1}}],[\"例如传入的参数是\",{\"1\":{\"167\":1}}],[\"例如examuserid\",{\"1\":{\"110\":1}}],[\"例如key中长度为3但是向索引为10的位置设置值时就是失败的\",{\"1\":{\"88\":1}}],[\"放开以下静态资源的访问\",{\"1\":{\"120\":1}}],[\"放弃执行事务块内的所有命令\",{\"1\":{\"105\":1}}],[\"放至id\",{\"1\":{\"34\":1}}],[\"取消\",{\"1\":{\"105\":1}}],[\"取消事务\",{\"1\":{\"105\":1}}],[\"取出指定范围内的元素\",{\"1\":{\"89\":1}}],[\"其工作原理是\",{\"1\":{\"189\":1}}],[\"其用法是\",{\"1\":{\"188\":1}}],[\"其就会自动扫描到\",{\"1\":{\"188\":1}}],[\"其内部提供了对各种优秀框架\",{\"1\":{\"172\":1}}],[\"其它标签引用时使用\",{\"1\":{\"167\":1}}],[\"其有很多方法通过加载并解析资源文件\",{\"1\":{\"156\":1}}],[\"其他无法处理\",{\"1\":{\"238\":1}}],[\"其他列使用\",{\"1\":{\"167\":1}}],[\"其他占位符都要具有具体的时间含义\",{\"1\":{\"147\":1}}],[\"其他客户端提交的命令请求不会插入到事务执行命令序列中\",{\"1\":{\"105\":1}}],[\"其余的命令依然被执行\",{\"1\":{\"105\":1}}],[\"收到\",{\"1\":{\"105\":1}}],[\"打印流信息\",{\"1\":{\"104\":1}}],[\"打印消费者组的信息\",{\"1\":{\"104\":1}}],[\"打开nodejs版本控制\",{\"1\":{\"68\":1}}],[\"显示待处理消息的相关信息\",{\"1\":{\"104\":1}}],[\"只能使用\",{\"1\":{\"222\":1}}],[\"只能有一个\",{\"1\":{\"180\":1}}],[\"只不过在\",{\"1\":{\"219\":1}}],[\"只需要在\",{\"1\":{\"188\":1}}],[\"只需要通过配置就可以完成对事务的管理\",{\"1\":{\"172\":1}}],[\"只有在键不存在时\",{\"1\":{\"110\":1}}],[\"只有当前分数大于redis中存储的分数或分数一直且时长更短时才更新数据\",{\"1\":{\"74\":1}}],[\"只接受新消息\",{\"1\":{\"104\":1}}],[\"组件\",{\"0\":{\"211\":1}}],[\"组名\",{\"1\":{\"104\":1}}],[\"组装key\",{\"1\":{\"74\":3}}],[\"消费者名\",{\"1\":{\"104\":1}}],[\"消费者组相关命令\",{\"0\":{\"104\":1}}],[\"消费组名\",{\"1\":{\"104\":1}}],[\"消息会全部忽略\",{\"1\":{\"104\":1}}],[\"消息\",{\"1\":{\"103\":1,\"104\":1}}],[\"消息id\",{\"1\":{\"103\":1}}],[\"消息就会被丢弃\",{\"1\":{\"102\":1}}],[\"消息队列相关命令\",{\"0\":{\"103\":1}}],[\"消息队列\",{\"1\":{\"88\":1}}],[\"反向获取消息列表\",{\"1\":{\"103\":1}}],[\"会将该方法放到专门的方法栈中\",{\"1\":{\"227\":1}}],[\"会自动提交\",{\"1\":{\"158\":1,\"163\":1}}],[\"会自动过滤已经删除的消息\",{\"1\":{\"103\":1}}],[\"会开启一个事务\",{\"1\":{\"158\":1}}],[\"会阻塞指定的秒数\",{\"1\":{\"91\":2}}],[\"即该方法是在前端控制器渲染\",{\"1\":{\"227\":1}}],[\"即具体的页面地址\",{\"1\":{\"216\":1}}],[\"即处理器\",{\"1\":{\"213\":1}}],[\"即没有实际作用的方法\",{\"1\":{\"188\":1}}],[\"即持久层对象\",{\"1\":{\"182\":1}}],[\"即要么相同\",{\"1\":{\"180\":1}}],[\"即10秒触发1次\",{\"1\":{\"147\":1}}],[\"即0秒触发1次\",{\"1\":{\"147\":1}}],[\"即消息长度\",{\"1\":{\"103\":1}}],[\"即远程字典服务\",{\"1\":{\"78\":1}}],[\"~\",{\"1\":{\"103\":1}}],[\"长度检查不合格\",{\"1\":{\"273\":1}}],[\"长度\",{\"1\":{\"103\":1,\"269\":1}}],[\"限制长度\",{\"1\":{\"103\":1}}],[\"宕机等\",{\"1\":{\"102\":1}}],[\"合并为一个\",{\"1\":{\"101\":1}}],[\"结束区间\",{\"1\":{\"110\":1}}],[\"结束值\",{\"1\":{\"103\":2}}],[\"结束删除之前备份数据\",{\"1\":{\"53\":1}}],[\"结构\",{\"1\":{\"101\":1}}],[\"基于java的持久层框架\",{\"1\":{\"154\":1}}],[\"基数统计\",{\"0\":{\"101\":1}}],[\"基础知识\",{\"0\":{\"81\":1}}],[\"值与代码中调用者\",{\"1\":{\"180\":1}}],[\"值附加过期时间\",{\"1\":{\"110\":1}}],[\"值\",{\"1\":{\"100\":1,\"110\":4}}],[\"添加事务注解\",{\"0\":{\"195\":1}}],[\"添加摘要信息\",{\"1\":{\"119\":1}}],[\"添加一个hash类型的数据进行存储\",{\"1\":{\"110\":1}}],[\"添加消息到末尾\",{\"1\":{\"103\":1}}],[\"添加指定元素到\",{\"1\":{\"101\":1}}],[\"添加地理位置的坐标\",{\"1\":{\"100\":1}}],[\"添加以下内容即可不再提示该警告\",{\"1\":{\"19\":1}}],[\"地理位置\",{\"0\":{\"100\":1}}],[\"地图信息分析\",{\"1\":{\"78\":1}}],[\"分别对应各个请求\",{\"1\":{\"222\":1}}],[\"分页\",{\"1\":{\"204\":1}}],[\"分割\",{\"1\":{\"167\":1}}],[\"分割的字符串\",{\"1\":{\"26\":1}}],[\"分钟\",{\"1\":{\"147\":2}}],[\"分数从高到低排序\",{\"1\":{\"98\":1}}],[\"分数从高到低\",{\"1\":{\"98\":1}}],[\"成员的分数值\",{\"1\":{\"98\":1}}],[\"成员不能重复\",{\"1\":{\"93\":1}}],[\"新成员会从头部进行插入\",{\"1\":{\"98\":1}}],[\"迭代有序集合中的元素\",{\"1\":{\"98\":1}}],[\"迭代hash表中的键值对\",{\"1\":{\"96\":1}}],[\"迭代集合中的元素\",{\"1\":{\"93\":1}}],[\"删除listkey中最右侧的元素\",{\"1\":{\"110\":1}}],[\"删除成功的\",{\"1\":{\"110\":1}}],[\"删除指定\",{\"1\":{\"110\":1}}],[\"删除消费者组\",{\"1\":{\"104\":1}}],[\"删除消费者\",{\"1\":{\"104\":1}}],[\"删除消息\",{\"1\":{\"103\":1}}],[\"删除一个或多个哈希表字段\",{\"1\":{\"96\":1}}],[\"删除命令\",{\"1\":{\"83\":1}}],[\"的延申标签\",{\"1\":{\"222\":1}}],[\"的控制下\",{\"1\":{\"214\":1}}],[\"的存在降低了组件之间的耦合性\",{\"1\":{\"212\":1}}],[\"的大脑\",{\"1\":{\"212\":1}}],[\"的启动配置里选择\",{\"1\":{\"207\":1}}],[\"的默认为repeatable\",{\"1\":{\"190\":1}}],[\"的注解适配自动代理生成器\",{\"1\":{\"189\":1}}],[\"的标识方法\",{\"1\":{\"188\":1}}],[\"的自动代理生成器\",{\"1\":{\"188\":1}}],[\"的代理对象\",{\"1\":{\"188\":1}}],[\"的实现\",{\"0\":{\"184\":1}}],[\"的实例化工作\",{\"1\":{\"177\":1}}],[\"的方法是不能作为连接点与切入点的\",{\"1\":{\"183\":1}}],[\"的方式\",{\"1\":{\"181\":1}}],[\"的value属性用于指定要匹配的bean的id值\",{\"1\":{\"181\":1}}],[\"的配置文件时\",{\"1\":{\"178\":1}}],[\"的区别是\",{\"1\":{\"178\":1}}],[\"的所有功能\",{\"1\":{\"176\":1}}],[\"的所有字段和值\",{\"1\":{\"96\":1}}],[\"的子接口\",{\"1\":{\"176\":1}}],[\"的子标签\",{\"1\":{\"166\":5}}],[\"的工厂\",{\"1\":{\"175\":1}}],[\"的功能\",{\"1\":{\"173\":1}}],[\"的使用难度\",{\"1\":{\"172\":1}}],[\"的直接支持\",{\"1\":{\"172\":1}}],[\"的提交和回滚\",{\"1\":{\"161\":1}}],[\"的持久层框架\",{\"1\":{\"154\":1}}],[\"的组合\",{\"1\":{\"154\":1,\"221\":1}}],[\"的一个开源项目\",{\"1\":{\"154\":1}}],[\"的值进行加减操作\",{\"1\":{\"110\":2}}],[\"的过期时间\",{\"1\":{\"110\":1}}],[\"的监视\",{\"1\":{\"105\":1}}],[\"的基数估算值\",{\"1\":{\"101\":1}}],[\"的\",{\"1\":{\"101\":1,\"110\":2,\"175\":1,\"180\":3,\"188\":1,\"201\":1}}],[\"的优点是\",{\"1\":{\"101\":1}}],[\"的成员\",{\"1\":{\"93\":1}}],[\"该字段只可以使用在字段上\",{\"1\":{\"235\":1,\"236\":1}}],[\"该字符串需要进行拼接\",{\"1\":{\"74\":1}}],[\"该方法在处理器方法执行之后执行\",{\"1\":{\"226\":1}}],[\"该方法在处理器方法执行之前执行\",{\"1\":{\"225\":1}}],[\"该注解在字段上使用会将其认为不需要进行校验的行头参数\",{\"1\":{\"236\":1}}],[\"该注解可以使用在字段上\",{\"1\":{\"235\":1}}],[\"该注解可以定义在类上\",{\"1\":{\"222\":1}}],[\"该注解创建的对象可以作为处理器接收用户的请求\",{\"1\":{\"182\":1}}],[\"该注解默认使用按类型自动装配\",{\"1\":{\"181\":1}}],[\"该注解的value属性用于指定要注入的值\",{\"1\":{\"181\":1}}],[\"该注解使用序列化的方式\",{\"1\":{\"141\":1}}],[\"该类从类路径\",{\"1\":{\"177\":1}}],[\"该标签用于处理数据库字段与实体类字段不一致的情况\",{\"1\":{\"167\":1}}],[\"该属性存在时是指定读取的\",{\"1\":{\"166\":1}}],[\"该功能在\",{\"1\":{\"100\":1}}],[\"该命令后续已经移除\",{\"1\":{\"96\":1}}],[\"所谓事务传播行为是指\",{\"1\":{\"191\":1}}],[\"所谓通知是指拦截到\",{\"1\":{\"183\":1}}],[\"所谓连接点是指那些被拦截到的点\",{\"1\":{\"183\":1}}],[\"所处的线程封闭到\",{\"1\":{\"163\":1}}],[\"所有我们也就针对方法进行事务的控制\",{\"1\":{\"192\":1}}],[\"所有\",{\"1\":{\"110\":1}}],[\"所有给定集合的并集存储在\",{\"1\":{\"95\":1}}],[\"所以简单请求可以封装一下\",{\"1\":{\"249\":1}}],[\"所以该方法可以修改处理器方法的处理结果数据\",{\"1\":{\"226\":1}}],[\"所以一般情况需要程序员根据业务需求开发\",{\"1\":{\"214\":1}}],[\"所以一个应用只需要一个该对象即可\",{\"1\":{\"158\":1}}],[\"所以每次数据库会话结束前需要马上调用其\",{\"1\":{\"158\":1}}],[\"所以使用时必须指定type\",{\"1\":{\"141\":1}}],[\"所以说使用单线程去操作效率就是最高的\",{\"1\":{\"81\":1}}],[\"所以说持久化很重要\",{\"1\":{\"78\":1}}],[\"所以我们需要在全局配置中进行配置\",{\"1\":{\"21\":1}}],[\"交集\",{\"0\":{\"94\":1}}],[\"返回值为boolean\",{\"1\":{\"225\":1}}],[\"返回值类型\",{\"1\":{\"184\":1}}],[\"返回的结果可以是\",{\"1\":{\"217\":1}}],[\"返回的结果\",{\"1\":{\"188\":2}}],[\"返回的数据实体\",{\"1\":{\"135\":1}}],[\"返回通知\",{\"1\":{\"188\":1}}],[\"返回不同类型的io流对象\",{\"1\":{\"156\":1}}],[\"返回所有键值对\",{\"1\":{\"110\":1}}],[\"返回所有给定集合的并集\",{\"1\":{\"95\":1}}],[\"返回\",{\"1\":{\"110\":1,\"163\":1}}],[\"返回给定\",{\"1\":{\"101\":1}}],[\"返回给定所有集合的差集并存储在\",{\"1\":{\"94\":1}}],[\"返回给定所有集合的交集\",{\"1\":{\"94\":1}}],[\"返回一个或多个位置对象的\",{\"1\":{\"100\":1}}],[\"返回有序集合中指定成员的排名\",{\"1\":{\"98\":1}}],[\"返回有序集合中指定成员的索引\",{\"1\":{\"98\":1}}],[\"返回有序集中指定分数区间内的成员\",{\"1\":{\"98\":1}}],[\"返回有序集中指定区间内的成员\",{\"1\":{\"98\":1}}],[\"返回有序集中\",{\"1\":{\"98\":1}}],[\"返回第一个集合与其他集合之间的差异\",{\"1\":{\"93\":1}}],[\"返回集合中一个或多个随机数\",{\"1\":{\"93\":1}}],[\"返回集合中的所有成员\",{\"1\":{\"93\":1}}],[\"元素值\",{\"1\":{\"110\":5}}],[\"元素从\",{\"1\":{\"93\":1}}],[\"元素是否是集合\",{\"1\":{\"93\":1}}],[\"元素名\",{\"1\":{\"88\":1}}],[\"判断是否存在下一级处理器\",{\"1\":{\"272\":1}}],[\"判断是否应该自身执行\",{\"1\":{\"263\":1}}],[\"判断当前请求方法中是否存在\",{\"1\":{\"129\":1}}],[\"判断该key是否已过期\",{\"1\":{\"110\":1}}],[\"判断\",{\"1\":{\"93\":1}}],[\"集合中\",{\"1\":{\"95\":1}}],[\"集合移动到\",{\"1\":{\"93\":1}}],[\"集合\",{\"0\":{\"93\":1},\"1\":{\"93\":1}}],[\"集群\",{\"1\":{\"78\":1}}],[\"对数据分段解密\",{\"1\":{\"257\":1}}],[\"对数据分段加密\",{\"1\":{\"257\":1}}],[\"对相应的处理器发起处理\",{\"1\":{\"217\":1}}],[\"对处理器进行执行\",{\"1\":{\"215\":1}}],[\"对具体的用户请求进行处理\",{\"1\":{\"214\":1}}],[\"对整个方法进行开启提交回滚\",{\"1\":{\"192\":1}}],[\"对方法中的某几行的代码进行开启提交回滚\",{\"1\":{\"192\":1}}],[\"对于引用类型属性的注入\",{\"1\":{\"180\":1}}],[\"对\",{\"0\":{\"184\":1},\"1\":{\"172\":1}}],[\"对象type\",{\"1\":{\"161\":1}}],[\"对象\",{\"1\":{\"158\":1}}],[\"对象分析\",{\"0\":{\"155\":1}}],[\"对jdbc进行了封装\",{\"1\":{\"154\":1}}],[\"对一个\",{\"1\":{\"110\":2}}],[\"对一个列表进行修建\",{\"1\":{\"92\":1}}],[\"对流进行修剪\",{\"1\":{\"103\":1}}],[\"对分数进行指定增量\",{\"0\":{\"99\":1}}],[\"对key所存储的值减去指定的减量值\",{\"1\":{\"87\":1}}],[\"对key中存储的数字值减一\",{\"1\":{\"87\":1}}],[\"对key的值加上指定的浮点增值量\",{\"1\":{\"87\":1}}],[\"对key的值加上指定的增值量\",{\"1\":{\"87\":1}}],[\"保留区间内的元素\",{\"0\":{\"92\":1}}],[\"或jsonobject\",{\"1\":{\"243\":1}}],[\"或是实现类\",{\"1\":{\"180\":1}}],[\"或\",{\"1\":{\"167\":1}}],[\"或这些\",{\"1\":{\"105\":1}}],[\"或多个\",{\"1\":{\"105\":1}}],[\"或者\",{\"1\":{\"147\":1}}],[\"或者更新已存在成员的分数\",{\"1\":{\"98\":1}}],[\"或者执行\",{\"1\":{\"45\":1}}],[\"或发现一个元素可以弹出\",{\"1\":{\"91\":1}}],[\"追加到destination的头部\",{\"1\":{\"91\":1}}],[\"追加命令\",{\"1\":{\"84\":1}}],[\"阻塞毫秒数\",{\"1\":{\"103\":1,\"104\":1}}],[\"阻塞指定的秒数\",{\"1\":{\"91\":1}}],[\"阻塞命令\",{\"0\":{\"91\":1}}],[\"阻塞队列使用\",{\"1\":{\"88\":1}}],[\"前端控制接收到视图地址和数据后\",{\"1\":{\"217\":1}}],[\"前端控制器接收到来自处理适配器的结果后\",{\"1\":{\"217\":1}}],[\"前端控制器dispatcherservlet接收到此请求后\",{\"1\":{\"217\":1}}],[\"前端控制器的后端控制器\",{\"1\":{\"214\":1}}],[\"前端控制器\",{\"1\":{\"212\":1}}],[\"前置通知\",{\"1\":{\"183\":1,\"184\":1,\"188\":2}}],[\"前置不需要打码的长度\",{\"1\":{\"141\":1}}],[\"前面的值代表初始值\",{\"1\":{\"147\":1}}],[\"前或后插入value\",{\"1\":{\"88\":1}}],[\"前四个写法需要注意\",{\"1\":{\"27\":1}}],[\"为java本身的工具类所以不需要担心兼容问题但是jdk应该是需要1\",{\"1\":{\"265\":1}}],[\"为引用类型属性进行隐式自动注入\",{\"1\":{\"180\":1}}],[\"为\",{\"1\":{\"128\":1,\"129\":1,\"135\":1}}],[\"为消费者组设置新的最后递送消息id\",{\"1\":{\"104\":1}}],[\"为哈希表\",{\"1\":{\"97\":2}}],[\"为已存在的列表的尾部添加值\",{\"1\":{\"88\":1}}],[\"为了确保库的引用可以之心下面两行\",{\"1\":{\"47\":1}}],[\"向已存在的集合中添加元素\",{\"1\":{\"110\":2}}],[\"向已存在的列表的头部添加一个值\",{\"1\":{\"88\":1}}],[\"向集合最右边添加元素\",{\"1\":{\"110\":2}}],[\"向集合中添加一个或多个成员\",{\"1\":{\"93\":1}}],[\"向左边批量添加参数元素\",{\"1\":{\"110\":2}}],[\"向有序集合添加一个或多个成员\",{\"1\":{\"98\":1}}],[\"向pivot\",{\"1\":{\"88\":1}}],[\"向列表尾部添加一个或多个值\",{\"1\":{\"88\":1}}],[\"向list添加一个或多个值添加到列表头部\",{\"1\":{\"88\":1}}],[\"最终应该是有匹配结果的\",{\"1\":{\"265\":1}}],[\"最终将视图和数据反馈给用户请求的浏览器\",{\"1\":{\"217\":1}}],[\"最终将执行结果返回给处理适配器handleradaptor\",{\"1\":{\"217\":1}}],[\"最终通知\",{\"1\":{\"183\":1,\"184\":1,\"188\":1}}],[\"最后执行的方法\",{\"1\":{\"227\":1}}],[\"最后对\",{\"1\":{\"216\":1}}],[\"最后得到产品\",{\"1\":{\"157\":1}}],[\"最后由mybatis框架执行sql\",{\"1\":{\"154\":1}}],[\"最后将source移除的元素返回\",{\"1\":{\"90\":1}}],[\"最后进入的反而在最前面\",{\"1\":{\"88\":1}}],[\"最新的稳定版本始终可在固定\",{\"1\":{\"79\":1}}],[\"最新稳定版本\",{\"1\":{\"79\":1}}],[\"先进入的反而在最后\",{\"1\":{\"88\":1}}],[\"因为没有设置请求头等数据\",{\"1\":{\"249\":1}}],[\"因为我们需要转换为指定的对象而不是list<object>\",{\"1\":{\"244\":1}}],[\"因为我这边使用的是knife4j的4\",{\"1\":{\"21\":1}}],[\"因为\",{\"1\":{\"201\":1}}],[\"因为最终的是不能被修改的\",{\"1\":{\"183\":1}}],[\"因为spring只支持方法类型的连接点\",{\"1\":{\"183\":1}}],[\"因为拦截器优先级较高\",{\"1\":{\"115\":1}}],[\"因为这个命令是向列表头部添加一个值\",{\"1\":{\"88\":1}}],[\"栈\",{\"1\":{\"88\":1}}],[\"相应的处理器类接收到指令后\",{\"1\":{\"217\":1}}],[\"相应数据\",{\"1\":{\"135\":1}}],[\"相当于是\",{\"1\":{\"212\":1}}],[\"相对来说效率会低一点\",{\"1\":{\"88\":1}}],[\"相似只不过参数变为了使用\",{\"1\":{\"26\":1}}],[\"效率最高\",{\"1\":{\"88\":1}}],[\"效率高\",{\"1\":{\"78\":1}}],[\"空链表\",{\"1\":{\"88\":1}}],[\"队列名\",{\"1\":{\"103\":1,\"104\":1}}],[\"队列名称\",{\"1\":{\"103\":1,\"104\":1}}],[\"队列\",{\"1\":{\"88\":1}}],[\"列表不存在时不执行且返回0\",{\"1\":{\"88\":2}}],[\"列表\",{\"0\":{\"88\":1}}],[\"从0开始\",{\"1\":{\"237\":1}}],[\"从threadlocal中获取\",{\"1\":{\"163\":2}}],[\"从\",{\"1\":{\"163\":1,\"166\":1}}],[\"从而可以使一个建造过程生成具有不同的内部表象的产品\",{\"1\":{\"157\":1}}],[\"从redis中删除指定的一个key\",{\"1\":{\"110\":1}}],[\"从大到小\",{\"1\":{\"98\":1,\"103\":1}}],[\"从列表中弹出一个值\",{\"1\":{\"91\":1}}],[\"从偏移量\",{\"1\":{\"86\":1}}],[\"从github中找到nvm所在仓库进行下载\",{\"1\":{\"64\":1}}],[\"且可以修改跳转方向\",{\"1\":{\"226\":1}}],[\"且该方法参数中包含\",{\"1\":{\"226\":1}}],[\"且会将aftercompletion\",{\"1\":{\"225\":1}}],[\"且依赖关系为\",{\"1\":{\"147\":1}}],[\"且获取value从start位置到end位置的字符进行返回\",{\"1\":{\"86\":1}}],[\"且所有给定的key都不存在\",{\"1\":{\"85\":1}}],[\"且写法也有一些区别\",{\"1\":{\"26\":1}}],[\"以我的为例文件名就是\",{\"1\":{\"265\":1}}],[\"以后所有的\",{\"1\":{\"188\":1}}],[\"以后遇到其他标签在进行补充吧\",{\"1\":{\"167\":1}}],[\"以此类推\",{\"1\":{\"147\":1}}],[\"以阻塞或非阻塞方式获取消息列表\",{\"1\":{\"103\":1}}],[\"以秒为单位\",{\"1\":{\"84\":1}}],[\"以上\",{\"1\":{\"27\":1}}],[\"存在下一级处理器\",{\"1\":{\"272\":1}}],[\"存在幻读\",{\"1\":{\"190\":1}}],[\"存在不可重复读与幻读\",{\"1\":{\"190\":1}}],[\"存在则返回\",{\"1\":{\"129\":2}}],[\"存在为true\",{\"1\":{\"110\":1}}],[\"存在\",{\"1\":{\"110\":3}}],[\"存在的话卸载当前已安装的包\",{\"1\":{\"52\":1}}],[\"存储的值\",{\"1\":{\"84\":1}}],[\"存储的键名\",{\"1\":{\"84\":1}}],[\"移出并获取列表的最后一个元素\",{\"1\":{\"91\":1}}],[\"移出并获取列表的第一个元素\",{\"1\":{\"91\":1}}],[\"移动命令\",{\"1\":{\"83\":1}}],[\"移除集合中右边的元素在等待的时间里\",{\"1\":{\"110\":1}}],[\"移除集合中右边的元素\",{\"1\":{\"110\":1}}],[\"移除集合中左边的元素在等待的时间里\",{\"1\":{\"110\":1}}],[\"移除集合中的左边第一个元素\",{\"1\":{\"110\":1}}],[\"移除集合中一个或多个成员\",{\"1\":{\"93\":1}}],[\"移除指定key\",{\"1\":{\"110\":1}}],[\"移除有序集合中给定的分数区间的所有成员\",{\"1\":{\"98\":1}}],[\"移除有序集合中给定的排名区间的所有成员\",{\"1\":{\"98\":1}}],[\"移除有序集合中给定的字典区间的所有成员\",{\"1\":{\"98\":1}}],[\"移除有序集合中的一个或多个成员\",{\"1\":{\"98\":1}}],[\"移除并返回集合中的一个随机元素\",{\"1\":{\"93\":1}}],[\"移除并获取列表的最后一位元素\",{\"1\":{\"90\":1}}],[\"移除并获取列表的第一位元素\",{\"1\":{\"90\":1}}],[\"移除source列表的最后一位元素\",{\"1\":{\"90\":1}}],[\"移除时是从尾部开始找要移除的元素\",{\"1\":{\"90\":1}}],[\"移除时是从头部开始找要移除的元素\",{\"1\":{\"90\":1}}],[\"移除key中指定个数的value\",{\"1\":{\"90\":2}}],[\"移除或弹出一个元素\",{\"0\":{\"90\":1}}],[\"移除\",{\"1\":{\"53\":1}}],[\"移除几天前就将\",{\"1\":{\"53\":1}}],[\"过期时间\",{\"1\":{\"110\":1}}],[\"过期时长\",{\"1\":{\"74\":1}}],[\"过期命令\",{\"1\":{\"83\":1}}],[\"五大数据类型\",{\"0\":{\"82\":1}}],[\"这种就可以把\",{\"1\":{\"222\":1}}],[\"这种方式实现了对事务控制的最大程度的解耦\",{\"1\":{\"191\":1}}],[\"这是适配器模式的应用\",{\"1\":{\"215\":1}}],[\"这是一个原子性的操作\",{\"1\":{\"85\":1}}],[\"这些常量均是以\",{\"1\":{\"190\":1}}],[\"这些点指的是方法\",{\"1\":{\"183\":1}}],[\"这些配置也可以在mybaits\",{\"1\":{\"162\":1}}],[\"这样用户只需指定需要建造的类型就可以得到具体产品\",{\"1\":{\"157\":1}}],[\"这个注解可以理解为\",{\"1\":{\"221\":1}}],[\"这个使用\",{\"1\":{\"188\":1}}],[\"这个代理是由容器自动生成的\",{\"1\":{\"188\":1}}],[\"这个属性不常用\",{\"1\":{\"166\":1}}],[\"这个区间是个闭区间\",{\"1\":{\"92\":1}}],[\"这个就是最佳的方案\",{\"1\":{\"81\":1}}],[\"这里是自己手动去设置责任链调用\",{\"1\":{\"276\":1}}],[\"这里是使用默认写好的内置责任链来使用\",{\"1\":{\"276\":1}}],[\"这里就不写了\",{\"1\":{\"254\":1}}],[\"这里可以同时配置多个拦截器\",{\"1\":{\"228\":1}}],[\"这里所说的\",{\"1\":{\"214\":1}}],[\"这里切记使用的是new而不是spring管理的实体\",{\"1\":{\"130\":1}}],[\"这里需要注意的是\",{\"1\":{\"66\":1}}],[\"这里示例展示我这边找到的文件替换的js\",{\"1\":{\"22\":1}}],[\"这里我们可以打开导出的html文件找多两个js引用\",{\"1\":{\"22\":1}}],[\"但是含义不同\",{\"1\":{\"222\":1}}],[\"但是他是springmvc运转历程中的重要的一个控制器\",{\"1\":{\"213\":1}}],[\"但是我们是不能放开所有请求的\",{\"1\":{\"21\":1}}],[\"但这样的同源的被调用\",{\"1\":{\"180\":1}}],[\"但\",{\"1\":{\"110\":2}}],[\"但它有个缺点就是消息无法持久化\",{\"1\":{\"102\":1}}],[\"但对于内存系统来说没有上下文切换效率就是最高的\",{\"1\":{\"81\":1}}],[\"核心实现就是基于aop\",{\"1\":{\"191\":1}}],[\"核心依赖\",{\"1\":{\"186\":1}}],[\"核心容器由以下部分组成\",{\"0\":{\"173\":1}}],[\"核心\",{\"1\":{\"81\":1}}],[\"误区2\",{\"1\":{\"81\":1}}],[\"误区1\",{\"1\":{\"81\":1}}],[\"清除资源\",{\"1\":{\"227\":1}}],[\"清空所有数据库\",{\"1\":{\"83\":1}}],[\"清空全部数据库内容命令\",{\"1\":{\"81\":1}}],[\"清空当前数据库命令\",{\"1\":{\"81\":1}}],[\"清华大学镜像站\",{\"1\":{\"2\":1}}],[\"通知定义切入的时间\",{\"1\":{\"183\":1}}],[\"通知定义了增强代码切入到目标代码的时间点\",{\"1\":{\"183\":1}}],[\"通知的类型\",{\"1\":{\"183\":1}}],[\"通知类型不同\",{\"1\":{\"183\":1}}],[\"通知\",{\"1\":{\"183\":1}}],[\"通过class获获取需要必填校验的字段\",{\"1\":{\"237\":2}}],[\"通过传入要校验的必填字段来判断都是那些字段需要进行校验\",{\"1\":{\"237\":1}}],[\"通过扩展处理器适配器\",{\"1\":{\"215\":1}}],[\"通过注解方式实现事务\",{\"1\":{\"204\":1}}],[\"通过切入点指定一组方法\",{\"1\":{\"183\":1}}],[\"通过\",{\"1\":{\"163\":1,\"173\":1,\"215\":1}}],[\"通过给定的key求2个set变量的差值\",{\"1\":{\"110\":1}}],[\"通过分数返回有序集合指定区间内的成员\",{\"1\":{\"98\":1}}],[\"通过字典区间返回有序集合的成员\",{\"1\":{\"98\":1}}],[\"通过索引\",{\"1\":{\"98\":1}}],[\"通过索引区间返回有序集合指定区间内的成员\",{\"1\":{\"98\":1}}],[\"通过索引获取列表中的元素\",{\"1\":{\"89\":1}}],[\"通过索引设置列表指定位置的值\",{\"1\":{\"88\":1}}],[\"通过指定的配置文件启动服务\",{\"1\":{\"79\":1}}],[\"通灵义码\",{\"1\":{\"8\":1}}],[\"启动时使用\",{\"1\":{\"207\":1}}],[\"启动redis服务\",{\"1\":{\"79\":1}}],[\"启动mysql服务\",{\"0\":{\"58\":1},\"1\":{\"60\":1}}],[\"启动mysql和查看是否启动成功\",{\"1\":{\"52\":1}}],[\"找到对应方法进行执行\",{\"1\":{\"217\":1}}],[\"找到并装载完成\",{\"1\":{\"177\":1}}],[\"找到dameonize\",{\"1\":{\"79\":1}}],[\"找下载示例\",{\"1\":{\"79\":1}}],[\"需修改配置文件\",{\"1\":{\"79\":1}}],[\"需要从三个方面进行检查\",{\"1\":{\"269\":1}}],[\"需要检查一个产品的是否合格\",{\"1\":{\"269\":1}}],[\"需要校验的class\",{\"1\":{\"237\":1}}],[\"需要校验的行头是第几行\",{\"1\":{\"237\":1}}],[\"需要通知\",{\"1\":{\"188\":1}}],[\"需要在方法上添加\",{\"1\":{\"219\":1}}],[\"需要在此插入\",{\"1\":{\"204\":1}}],[\"需要在引用属性上联合使用注解\",{\"1\":{\"181\":1}}],[\"需要在引用属性上使用注解\",{\"1\":{\"181\":1}}],[\"需要在属性上使用注解\",{\"1\":{\"181\":1}}],[\"需要在springboot启动类上添加\",{\"1\":{\"145\":1}}],[\"需要传入\",{\"1\":{\"145\":1}}],[\"需要再后面拼接本场考试是谁的数据也就是\",{\"1\":{\"74\":1}}],[\"需要使用sqlsessionfactorybuilder对象的build\",{\"1\":{\"157\":1}}],[\"需要使用\",{\"1\":{\"74\":1,\"221\":1}}],[\"需要使用简单密码时需要另做修改\",{\"1\":{\"52\":1,\"61\":1}}],[\"需要放开的接口请求\",{\"1\":{\"21\":1}}],[\"上面示例中\",{\"1\":{\"222\":1}}],[\"上的分页插件\",{\"1\":{\"201\":1}}],[\"上下文的支持\",{\"1\":{\"173\":1}}],[\"上传目录为\",{\"1\":{\"79\":1}}],[\"上海交通大学linux用户资源\",{\"1\":{\"5\":1}}],[\"总和中找到\",{\"1\":{\"79\":1}}],[\"及其\",{\"1\":{\"79\":1}}],[\"停止更新很久了\",{\"1\":{\"78\":1}}],[\"英文官网命令查询\",{\"1\":{\"78\":1}}],[\"本地图片所在地址\",{\"1\":{\"254\":1}}],[\"本监听器智能校验参数是否必填\",{\"1\":{\"238\":1}}],[\"本次需校验的数据\",{\"1\":{\"237\":1}}],[\"本次使用的数据库需要自己创建\",{\"1\":{\"159\":1}}],[\"本次下载包所用的是清华大学镜像站中提供的mysql包\",{\"1\":{\"51\":1}}],[\"本是\",{\"1\":{\"154\":1}}],[\"本文记录了\",{\"1\":{\"171\":1}}],[\"本文使用的是knife4j\",{\"1\":{\"118\":1}}],[\"本文学习狂神说来的\",{\"1\":{\"78\":1}}],[\"本身是有一个\",{\"1\":{\"102\":1}}],[\"本质上是一个链表\",{\"1\":{\"88\":1}}],[\"狂神说\",{\"1\":{\"78\":1}}],[\"狂神的公众号\",{\"1\":{\"78\":1}}],[\"学习中需要用到的东西\",{\"1\":{\"78\":1}}],[\"多于一个\",{\"1\":{\"180\":1}}],[\"多个任意字符\",{\"1\":{\"184\":1}}],[\"多个线程操作的话是不安全的\",{\"1\":{\"151\":1}}],[\"多个元素数组\",{\"1\":{\"110\":2}}],[\"多个\",{\"1\":{\"110\":1}}],[\"多少秒后过期\",{\"1\":{\"83\":1}}],[\"多次读写都是在一个cpu上的\",{\"1\":{\"81\":1}}],[\"多线程的上下文切换本身就是耗时操作\",{\"1\":{\"81\":1}}],[\"多线程\",{\"1\":{\"81\":1}}],[\"多样的数据类型\",{\"1\":{\"78\":1}}],[\"多平台文本编辑器\",{\"1\":{\"7\":1}}],[\"多平台\",{\"1\":{\"7\":2}}],[\"特性\",{\"1\":{\"78\":1}}],[\"浏览器会向服务器发送一个请求\",{\"1\":{\"217\":1}}],[\"浏览器插件站\",{\"1\":{\"13\":1}}],[\"浏览量\",{\"1\":{\"78\":1}}],[\"计算基数所需的空间总是固定\",{\"1\":{\"101\":1}}],[\"计算两个位置之间的距离\",{\"1\":{\"100\":1}}],[\"计算给定的一个或多个有序集的并集\",{\"1\":{\"98\":1}}],[\"计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合\",{\"1\":{\"98\":1}}],[\"计算在有序集合中指定区间分数的成员数\",{\"1\":{\"98\":1}}],[\"计数器\",{\"1\":{\"78\":1}}],[\"计时器\",{\"1\":{\"78\":1}}],[\"持久化\",{\"1\":{\"78\":2}}],[\"也称为中央控制器或者核心控制器\",{\"1\":{\"212\":1}}],[\"也可以定义方法上\",{\"1\":{\"222\":1}}],[\"也可以去\",{\"1\":{\"207\":1}}],[\"也可以使用空格进行分割\",{\"1\":{\"189\":1}}],[\"也可不在配置文件中显示的注入\",{\"1\":{\"180\":1}}],[\"也被称为应用上下文\",{\"1\":{\"176\":1}}],[\"也被人称之为结构化数据库\",{\"1\":{\"78\":1}}],[\"也不会批量处理更新\",{\"1\":{\"158\":1}}],[\"也就是\",{\"1\":{\"222\":1}}],[\"也就是我们所说的\",{\"1\":{\"213\":1}}],[\"也就是需要配置\",{\"1\":{\"206\":1}}],[\"也就是不自动提交\",{\"1\":{\"158\":1}}],[\"也就是使用了建造者设计模式\",{\"1\":{\"157\":1}}],[\"也就是指定的索引位也包含在内\",{\"1\":{\"92\":1}}],[\"也就是多个值时\",{\"1\":{\"88\":1}}],[\"也就是安装时配置的目录\",{\"1\":{\"65\":1}}],[\"也代表不存在\",{\"1\":{\"88\":1}}],[\"免费开源\",{\"1\":{\"78\":1}}],[\"并以utf\",{\"1\":{\"257\":1}}],[\"并生成代理\",{\"1\":{\"188\":1}}],[\"并按通知类型与切入点\",{\"1\":{\"188\":1}}],[\"并交给\",{\"1\":{\"182\":1}}],[\"并调用它们的生命周期方法\",{\"1\":{\"175\":1}}],[\"并通过java对象和statement中的sql的动态参数进行映射生成最终执行的sql语句\",{\"1\":{\"154\":1}}],[\"并赋值该\",{\"1\":{\"110\":2}}],[\"并且读取顺序为从第一行顺序向下读取\",{\"1\":{\"265\":1}}],[\"并且添加了国际化\",{\"1\":{\"173\":1}}],[\"并且可以把配置和依赖从实际编码逻辑中解耦\",{\"1\":{\"173\":1}}],[\"并且可以指定平台\",{\"1\":{\"68\":1}}],[\"并且改名为mybatis\",{\"1\":{\"154\":1}}],[\"并且带有以下三个重要的保证\",{\"1\":{\"105\":1}}],[\"并且是很小的\",{\"1\":{\"101\":1}}],[\"并对存储的信息进行操作\",{\"1\":{\"100\":1}}],[\"并存储在新的\",{\"1\":{\"98\":1}}],[\"并集\",{\"0\":{\"95\":1}}],[\"并将结果直接映射为java对象\",{\"1\":{\"154\":1}}],[\"并将该元素添加到destination列表的头部\",{\"1\":{\"90\":1}}],[\"并将key的过期时间设置为seconds\",{\"1\":{\"84\":1}}],[\"并提供多种语言的api\",{\"1\":{\"78\":1}}],[\"可能会出现io错误\",{\"1\":{\"253\":1}}],[\"可重复读\",{\"1\":{\"190\":1}}],[\"可使用该方法名作为切入点\",{\"1\":{\"188\":1}}],[\"可使用byname\",{\"1\":{\"180\":1}}],[\"可不导入\",{\"1\":{\"160\":1}}],[\"可选\",{\"1\":{\"103\":1}}],[\"可用用于高速缓存\",{\"1\":{\"78\":1}}],[\"可基于内存亦可持久化的日志型\",{\"1\":{\"78\":1}}],[\"可以添加到方法上\",{\"1\":{\"220\":1}}],[\"可以通过为标签\",{\"1\":{\"180\":1}}],[\"可以通过注解方便地测试\",{\"1\":{\"172\":1}}],[\"可以方便地实现对程序进行权限拦截和运行监控等功能\",{\"1\":{\"172\":1}}],[\"可以将所有对象的创建和依赖关系的维护交给\",{\"1\":{\"172\":1}}],[\"可以将一个产品的内部表象与产品的生成过程分割开来\",{\"1\":{\"157\":1}}],[\"可以省略事务\",{\"1\":{\"192\":1}}],[\"可以省略\",{\"1\":{\"167\":1}}],[\"可以当成栈\",{\"1\":{\"88\":1}}],[\"可以参考官网json\",{\"1\":{\"40\":1}}],[\"可以使用npm\",{\"1\":{\"66\":1}}],[\"可以使用\",{\"1\":{\"27\":1,\"147\":1}}],[\"是我自己写的一个异常用于抛出并全局捕获\",{\"1\":{\"257\":1}}],[\"是继\",{\"1\":{\"214\":1}}],[\"是整个流程控制的中心\",{\"1\":{\"212\":1}}],[\"是基于\",{\"1\":{\"189\":1}}],[\"是基础类型的\",{\"1\":{\"175\":1}}],[\"是指把增强应用到目标对象来创建新的代理对象的过程\",{\"1\":{\"183\":1}}],[\"是目标方法执行之前执行\",{\"1\":{\"183\":1}}],[\"是切入点和通知的结合\",{\"1\":{\"183\":1}}],[\"是对\",{\"1\":{\"182\":1}}],[\"是通过\",{\"1\":{\"180\":1}}],[\"是线程安全的\",{\"1\":{\"158\":1}}],[\"是一种对象的创建模式\",{\"1\":{\"157\":1}}],[\"是一个管理\",{\"1\":{\"175\":1}}],[\"是一个基于\",{\"1\":{\"154\":1}}],[\"是一个压力测试工具\",{\"1\":{\"80\":1}}],[\"是一个开源的使用ansi\",{\"1\":{\"78\":1}}],[\"是业务数据\",{\"1\":{\"135\":1}}],[\"是否验签通过\",{\"1\":{\"257\":1}}],[\"是否只读\",{\"1\":{\"195\":1}}],[\"是否删除\",{\"1\":{\"114\":1}}],[\"是否存在\",{\"1\":{\"110\":1}}],[\"是\",{\"1\":{\"102\":1,\"158\":1,\"166\":5,\"176\":1}}],[\"是用来做基数统计的算法\",{\"1\":{\"101\":1}}],[\"是单线程的\",{\"1\":{\"81\":1}}],[\"是当下最热门的nosql技术之一\",{\"1\":{\"78\":1}}],[\"是什么\",{\"1\":{\"78\":1}}],[\"概述\",{\"0\":{\"78\":1}}],[\"给指定\",{\"1\":{\"110\":1}}],[\"给一个key设置所有相应的属性\",{\"1\":{\"110\":1}}],[\"给一个指定的\",{\"1\":{\"110\":1}}],[\"给key设置一个新的value值并将旧值返回回去\",{\"1\":{\"84\":1}}],[\"给排序的列表添加当前的为一值\",{\"1\":{\"74\":1}}],[\"给排行榜添加一个人员内部自动判断是否可以存在于排行榜中\",{\"1\":{\"74\":1}}],[\"给定一个过期时间\",{\"1\":{\"74\":1}}],[\"给redis中push一条排行榜数据\",{\"1\":{\"74\":1}}],[\"获取默认执行责任练\",{\"1\":{\"277\":1}}],[\"获取加密内容使用base64进行编码\",{\"1\":{\"257\":1}}],[\"获取公钥\",{\"1\":{\"257\":1}}],[\"获取私钥\",{\"1\":{\"257\":1}}],[\"获取密钥对\",{\"1\":{\"257\":1}}],[\"获取模板输入流\",{\"1\":{\"254\":1}}],[\"获取链接\",{\"1\":{\"163\":1}}],[\"获取的\",{\"1\":{\"128\":1,\"129\":1}}],[\"获取当前用户redis\",{\"1\":{\"128\":1}}],[\"获取当前key下所有的键值对\",{\"1\":{\"110\":1}}],[\"获取集合指定位置的值\",{\"1\":{\"110\":1}}],[\"获取集合的成员数\",{\"1\":{\"93\":1}}],[\"获取指定区间的值\",{\"1\":{\"110\":1}}],[\"获取指定\",{\"1\":{\"110\":1}}],[\"获取指定key的值string\",{\"1\":{\"110\":1}}],[\"获取某个\",{\"1\":{\"110\":1}}],[\"获取某个key下所有的value\",{\"1\":{\"110\":1}}],[\"获取变量中值的长度\",{\"1\":{\"110\":1}}],[\"获取变量中的值\",{\"1\":{\"110\":1}}],[\"获取过期时间\",{\"1\":{\"110\":1}}],[\"获取为空\",{\"1\":{\"110\":1}}],[\"获取\",{\"1\":{\"110\":3,\"163\":1}}],[\"获取消息列表\",{\"1\":{\"103\":1}}],[\"获取流包含的元素数量\",{\"1\":{\"103\":1}}],[\"获取地理位置的坐标\",{\"1\":{\"100\":1}}],[\"获取有序集合的成员数\",{\"1\":{\"98\":1}}],[\"获取哈希表中字段的数量\",{\"1\":{\"96\":1}}],[\"获取哈希表中所有的值\",{\"1\":{\"96\":1}}],[\"获取哈希表中的所有字段\",{\"1\":{\"96\":1}}],[\"获取在哈希表中指定\",{\"1\":{\"96\":1}}],[\"获取所有给定字段的值\",{\"1\":{\"96\":1}}],[\"获取所有给定的key的值\",{\"1\":{\"85\":1}}],[\"获取存储在哈希表中指定字段的值\",{\"1\":{\"96\":1}}],[\"获取列表中的元素\",{\"0\":{\"89\":1}}],[\"获取key的长度\",{\"1\":{\"88\":1}}],[\"获取key的value值返回\",{\"1\":{\"84\":1}}],[\"获取key关联的value\",{\"1\":{\"86\":1}}],[\"获取命令\",{\"1\":{\"84\":1}}],[\"获取排序后所有的key\",{\"1\":{\"74\":1}}],[\"获取hash表中所有数据\",{\"1\":{\"74\":1}}],[\"获取临时密码\",{\"1\":{\"52\":1}}],[\"考试id\",{\"1\":{\"74\":1}}],[\"考试排行榜工具类\",{\"1\":{\"74\":1}}],[\"同时使用会进行两次判断\",{\"1\":{\"233\":1}}],[\"同时将多个field\",{\"1\":{\"96\":1}}],[\"同时设置一个或多个key\",{\"1\":{\"85\":2}}],[\"同时设置或获取多个属性值\",{\"0\":{\"85\":1}}],[\"同样需要使用\",{\"1\":{\"74\":1}}],[\"同分数时我们需要按照考试是时长进行升序\",{\"1\":{\"71\":1}}],[\"排序条件\",{\"1\":{\"110\":1}}],[\"排序条件组装\",{\"1\":{\"74\":1}}],[\"排序\",{\"1\":{\"98\":1,\"110\":1}}],[\"排序key\",{\"1\":{\"74\":1}}],[\"排序所用的key\",{\"1\":{\"74\":1}}],[\"排行榜数据\",{\"1\":{\"74\":1}}],[\"排行榜所存key\",{\"1\":{\"74\":1}}],[\"排行榜最大人数\",{\"1\":{\"74\":1}}],[\"排行榜工具类\",{\"0\":{\"74\":1}}],[\"拼接为本场考试使用的key\",{\"1\":{\"74\":1}}],[\"k\",{\"1\":{\"237\":4}}],[\"keybytes\",{\"1\":{\"257\":4}}],[\"keypairgenerator\",{\"1\":{\"257\":2}}],[\"keypair\",{\"1\":{\"257\":5}}],[\"keyfactory\",{\"1\":{\"257\":11}}],[\"keyconstant\",{\"1\":{\"128\":4,\"129\":1}}],[\"keyandvalue\",{\"1\":{\"110\":4}}],[\"key序列化方式\",{\"1\":{\"109\":1}}],[\"key队列名称\",{\"1\":{\"103\":1}}],[\"key存在新增内容\",{\"1\":{\"88\":1}}],[\"key2\",{\"1\":{\"85\":1,\"91\":2,\"93\":1,\"94\":2,\"95\":2}}],[\"key1\",{\"1\":{\"85\":3,\"91\":2,\"93\":1,\"94\":2,\"95\":2}}],[\"keyspec\",{\"1\":{\"257\":8}}],[\"keys\",{\"1\":{\"81\":1,\"83\":1,\"110\":2}}],[\"key\",{\"0\":{\"83\":1},\"1\":{\"74\":16,\"78\":1,\"83\":7,\"84\":8,\"85\":2,\"86\":2,\"87\":5,\"88\":7,\"89\":2,\"90\":4,\"92\":1,\"93\":9,\"96\":15,\"97\":4,\"98\":22,\"99\":1,\"100\":10,\"101\":3,\"103\":10,\"104\":8,\"105\":5,\"109\":1,\"110\":145,\"128\":6,\"129\":1,\"257\":4}}],[\"knife4j使用html导出接口出现打不开问题解决\",{\"0\":{\"22\":1}}],[\"knife4j\",{\"0\":{\"20\":1},\"1\":{\"4\":1,\"118\":2,\"119\":1}}],[\"准备测试数据\",{\"1\":{\"71\":1}}],[\"由于该方法是在处理器方法执行完后执行\",{\"1\":{\"226\":1}}],[\"由于\",{\"1\":{\"214\":1}}],[\"由于redis的sort排序仅支持一个字段进行升序或降序\",{\"1\":{\"71\":1}}],[\"由它调用其它组件处理用户的请求\",{\"1\":{\"212\":1}}],[\"由此我们可以进行尝试是否可行\",{\"1\":{\"71\":1}}],[\"由此我们可以思考将两个分数组装为一个double类型的分数来进行排序\",{\"1\":{\"71\":1}}],[\"思路\",{\"1\":{\"71\":1}}],[\"卸载指定的版本\",{\"1\":{\"68\":1}}],[\"平台\",{\"1\":{\"68\":1}}],[\"版本根据自己需要使用\",{\"1\":{\"248\":1}}],[\"版本\",{\"1\":{\"119\":1}}],[\"版本添加了\",{\"1\":{\"101\":1}}],[\"版本新增加的数据结构\",{\"1\":{\"102\":1}}],[\"版本新增\",{\"1\":{\"100\":1}}],[\"版本号\",{\"1\":{\"68\":1}}],[\"版本为\",{\"1\":{\"27\":1}}],[\"说明这个方法是可行的\",{\"1\":{\"266\":1}}],[\"说明\",{\"1\":{\"68\":1,\"151\":1,\"195\":1}}],[\"命令对所有\",{\"1\":{\"105\":1}}],[\"命令后进入事务执行\",{\"1\":{\"105\":1}}],[\"命令前被放入队列缓存\",{\"1\":{\"105\":1}}],[\"命令参数\",{\"1\":{\"80\":2}}],[\"命令\",{\"1\":{\"68\":1}}],[\"要被增强的对象\",{\"1\":{\"183\":1}}],[\"要被过期的名称\",{\"1\":{\"83\":1}}],[\"要么有\",{\"1\":{\"180\":1}}],[\"要么一起失败\",{\"1\":{\"85\":1}}],[\"要么一起成功\",{\"1\":{\"85\":1}}],[\"要与代码中调用者\",{\"1\":{\"180\":1}}],[\"要引用的标签\",{\"1\":{\"167\":1}}],[\"要遍历的集合\",{\"1\":{\"167\":1}}],[\"要求\",{\"1\":{\"166\":1}}],[\"要取的key值\",{\"1\":{\"110\":1}}],[\"要弹出的key\",{\"1\":{\"110\":1}}],[\"要添加在\",{\"1\":{\"66\":1}}],[\"要查询的字段名\",{\"1\":{\"33\":1}}],[\"要查询的表\",{\"1\":{\"27\":6,\"36\":2,\"37\":2,\"38\":2,\"39\":2}}],[\"想更新全局的npm的话首先删除全局路径\",{\"1\":{\"66\":1}}],[\"初始化日志输出\",{\"1\":{\"59\":1}}],[\"初始化mysql实例\",{\"0\":{\"59\":1}}],[\"超时设置\",{\"1\":{\"57\":1}}],[\"默认返回的是对象而不是请求或转发的页面\",{\"1\":{\"221\":1}}],[\"默认事务超时时限\",{\"1\":{\"191\":1}}],[\"默认是数据库的隔离级别\",{\"1\":{\"195\":1}}],[\"默认是按名称注入\",{\"1\":{\"181\":1}}],[\"默认是不自动注入引用类型属性\",{\"1\":{\"180\":1}}],[\"默认读取那个\",{\"1\":{\"166\":1}}],[\"默认为\",{\"1\":{\"158\":1}}],[\"默认为一年\",{\"1\":{\"74\":1}}],[\"默认的事务隔离级别\",{\"1\":{\"190\":1}}],[\"默认的\",{\"1\":{\"158\":1}}],[\"默认限制为50\",{\"1\":{\"74\":1}}],[\"默认数据库引擎\",{\"1\":{\"57\":1}}],[\"默认值即可\",{\"1\":{\"34\":1}}],[\"库数据存储地址\",{\"1\":{\"57\":1}}],[\"脚本执行结束\",{\"1\":{\"53\":1}}],[\"脚本执行开始\",{\"1\":{\"53\":1}}],[\"表达无意义的信息之外\",{\"1\":{\"147\":1}}],[\"表达式的原型\",{\"1\":{\"184\":1}}],[\"表达式语言\",{\"1\":{\"173\":1}}],[\"表达式格式\",{\"1\":{\"147\":1}}],[\"表达式可以在\",{\"1\":{\"145\":1}}],[\"表达式\",{\"1\":{\"145\":1}}],[\"表达式替换\",{\"1\":{\"141\":1}}],[\"表示该字段不必须\",{\"1\":{\"235\":1}}],[\"表示切入点表达式\",{\"1\":{\"188\":2}}],[\"表示包\",{\"1\":{\"184\":1}}],[\"表示当前方法的返回值是对象\",{\"1\":{\"220\":1}}],[\"表示当前接口及其实现类\",{\"1\":{\"184\":1}}],[\"表示当前及其子类\",{\"1\":{\"184\":1}}],[\"表示当前及其子包路径\",{\"1\":{\"184\":1}}],[\"表示任意个参数\",{\"1\":{\"184\":1}}],[\"表示可选的部分\",{\"1\":{\"184\":1}}],[\"表示增强的功能\",{\"1\":{\"183\":1}}],[\"表示实体类中的对应的属性名\",{\"1\":{\"167\":1}}],[\"表示数据库表中的列名\",{\"1\":{\"167\":1}}],[\"表示自定义自己的注解privacyencrypt\",{\"1\":{\"141\":1}}],[\"表示业务调用成功\",{\"1\":{\"135\":1}}],[\"表示从头消费\",{\"1\":{\"104\":1}}],[\"表示从尾部开始消费\",{\"1\":{\"104\":1}}],[\"表示最大值\",{\"1\":{\"103\":2}}],[\"表示最小值\",{\"1\":{\"103\":2}}],[\"表示已经过期\",{\"1\":{\"83\":1}}],[\"表示运行系统命令\",{\"1\":{\"53\":1}}],[\"表名称\",{\"1\":{\"34\":1}}],[\"注入给调用者\",{\"1\":{\"180\":1}}],[\"注册的方式访问对象\",{\"1\":{\"173\":1}}],[\"注册后会将所有的请求都进行拦截\",{\"1\":{\"21\":1}}],[\"注解形式控制事务\",{\"0\":{\"193\":1}}],[\"注解声明为最终通知\",{\"1\":{\"188\":1}}],[\"注解声明异常通知方法\",{\"1\":{\"188\":1}}],[\"注解声明环绕通知\",{\"1\":{\"188\":1}}],[\"注解声明后置通知\",{\"1\":{\"188\":1}}],[\"注解方法一般使用\",{\"1\":{\"188\":1}}],[\"注解在一个方法之上\",{\"1\":{\"188\":1}}],[\"注解的细化\",{\"1\":{\"182\":1}}],[\"注解既可以按名称匹配bean也可以按类型匹配bean\",{\"1\":{\"181\":1}}],[\"注解注入\",{\"0\":{\"181\":1}}],[\"注解表示当前任务是定时指定该方法\",{\"1\":{\"145\":1}}],[\"注解表示开启定时任务\",{\"1\":{\"145\":1}}],[\"注解\",{\"0\":{\"218\":1},\"1\":{\"129\":1,\"188\":2,\"219\":1,\"237\":2}}],[\"注意这个\",{\"1\":{\"201\":1}}],[\"注意\",{\"1\":{\"78\":1,\"83\":1,\"147\":1}}],[\"注意此处这是两个反引号\",{\"1\":{\"53\":1}}],[\"目标方法的执行之后\",{\"1\":{\"188\":1}}],[\"目标方法的执行之前\",{\"1\":{\"188\":1}}],[\"目标方法抛出异常时运行\",{\"1\":{\"188\":1}}],[\"目标方法返回值之后运行\",{\"1\":{\"188\":1}}],[\"目标方法运行前后运行\",{\"1\":{\"188\":1}}],[\"目标方法运行前运行\",{\"1\":{\"188\":1}}],[\"目标方法运行后运行\",{\"1\":{\"188\":1}}],[\"目标类+\",{\"1\":{\"188\":1}}],[\"目标对象\",{\"1\":{\"183\":1}}],[\"目录下\",{\"1\":{\"79\":1}}],[\"目录\",{\"1\":{\"53\":1}}],[\"目前mysql8\",{\"1\":{\"52\":1,\"61\":1}}],[\"改为几天\",{\"1\":{\"53\":1}}],[\"开头\",{\"1\":{\"190\":1}}],[\"开启spring表达式\",{\"1\":{\"254\":1}}],[\"开启事务使用\",{\"1\":{\"201\":1}}],[\"开启\",{\"1\":{\"189\":1}}],[\"开发中非常难用的一些\",{\"1\":{\"172\":1}}],[\"开发相关\",{\"0\":{\"0\":1}}],[\"开始值\",{\"1\":{\"103\":2}}],[\"开始\",{\"1\":{\"86\":1}}],[\"开始移除7天之前的备份数据\",{\"1\":{\"53\":1}}],[\"文字时按这种方式可以循环渲染\",{\"1\":{\"254\":1}}],[\"文字时\",{\"1\":{\"254\":1}}],[\"文件其他都交给\",{\"1\":{\"203\":1}}],[\"文件名\",{\"1\":{\"202\":1}}],[\"文件名可自定义\",{\"1\":{\"161\":1}}],[\"文件时需要注意以下几点\",{\"1\":{\"165\":1}}],[\"文件的完全限定名\",{\"1\":{\"164\":1}}],[\"文件\",{\"1\":{\"161\":1,\"166\":1}}],[\"文件不存在\",{\"1\":{\"53\":1}}],[\"文档\",{\"1\":{\"4\":1}}],[\"文档地址\",{\"0\":{\"4\":1},\"1\":{\"241\":1}}],[\"+ex\",{\"1\":{\"188\":1}}],[\"+result\",{\"1\":{\"188\":1}}],[\"+inf\",{\"1\":{\"98\":1}}],[\"+\",{\"1\":{\"53\":4,\"73\":1,\"74\":9,\"103\":2,\"123\":1,\"128\":1,\"139\":2,\"184\":1,\"188\":4,\"254\":1,\"257\":5}}],[\"+1\",{\"1\":{\"34\":1}}],[\"$3$4\",{\"1\":{\"139\":1}}],[\"$2\",{\"1\":{\"139\":2}}],[\"$file\",{\"1\":{\"53\":2}}],[\"$daysago\",{\"1\":{\"53\":1}}],[\"$date\",{\"1\":{\"53\":1}}],[\"$1`\",{\"1\":{\"53\":2}}],[\"$1\",{\"1\":{\"53\":2,\"139\":3}}],[\"$path\",{\"1\":{\"53\":2}}],[\"$log\",{\"1\":{\"53\":7}}],[\"$\",{\"1\":{\"53\":7,\"104\":3,\"161\":4,\"204\":4}}],[\"写shell脚本时不要再win下写好再放进去\",{\"1\":{\"53\":1}}],[\"定义一个创建对象的接口\",{\"1\":{\"261\":1}}],[\"定义了事务底层默认的超时时限\",{\"1\":{\"191\":1}}],[\"定义了专门的表达式用于指定切入点\",{\"1\":{\"184\":1}}],[\"定义的切面类\",{\"1\":{\"189\":1}}],[\"定义的切入点\",{\"1\":{\"188\":1}}],[\"定义aop切面类\",{\"0\":{\"188\":1}}],[\"定义在\",{\"1\":{\"184\":2}}],[\"定义自增序列时一般使用\",{\"1\":{\"34\":1}}],[\"定时任务\",{\"0\":{\"145\":1}}],[\"定时运行备份脚本\",{\"0\":{\"53\":1}}],[\"授权远程链接\",{\"1\":{\"52\":1}}],[\"不应该执行返回false\",{\"1\":{\"263\":1}}],[\"不要使用两次不同公钥对私钥进行解密\",{\"1\":{\"257\":1}}],[\"不然\",{\"1\":{\"201\":1}}],[\"不然会出现奇怪的问题\",{\"1\":{\"53\":1}}],[\"不想使用的时候直接移除配置\",{\"1\":{\"191\":1}}],[\"不可重复读\",{\"1\":{\"190\":1}}],[\"不能被增强的\",{\"1\":{\"183\":1}}],[\"不能为null\",{\"1\":{\"110\":1}}],[\"不再从类路径中读取配置文件\",{\"1\":{\"178\":1}}],[\"不排斥各种优秀的开源框架\",{\"1\":{\"172\":1}}],[\"不等于\",{\"1\":{\"168\":1}}],[\"不区分大小写\",{\"1\":{\"167\":1}}],[\"不常用\",{\"1\":{\"166\":1}}],[\"不常用sql方法\",{\"0\":{\"32\":1}}],[\"不传入时查询全部数据\",{\"1\":{\"165\":1}}],[\"不需要花费精力在驱动的加载\",{\"1\":{\"154\":1}}],[\"不允许为空值\",{\"1\":{\"147\":4}}],[\"不是\",{\"1\":{\"110\":1}}],[\"不是长整型\",{\"1\":{\"110\":1}}],[\"不存在并发问题\",{\"1\":{\"190\":1}}],[\"不存在线程不安全的情况\",{\"1\":{\"151\":1}}],[\"不存在则返回\",{\"1\":{\"129\":2}}],[\"不存在为false\",{\"1\":{\"110\":1}}],[\"不存在\",{\"1\":{\"110\":2}}],[\"不存在区间内的元素都被删除\",{\"1\":{\"92\":1}}],[\"不同的node都使用这个npm\",{\"1\":{\"66\":1}}],[\"不支持简单密码了\",{\"1\":{\"52\":1,\"61\":1}}],[\"修改root密码\",{\"0\":{\"61\":1},\"1\":{\"52\":1}}],[\"执行绘画操作\",{\"1\":{\"263\":1}}],[\"执行期间事务的维护情况\",{\"1\":{\"191\":1}}],[\"执行所有事务块内的命令\",{\"1\":{\"105\":1}}],[\"执行\",{\"1\":{\"79\":1}}],[\"执行结束\",{\"1\":{\"53\":1}}],[\"执行后\",{\"1\":{\"52\":1}}],[\"执行测试\",{\"1\":{\"47\":1}}],[\"安装gcc\",{\"1\":{\"79\":1}}],[\"安装制定版本的node\",{\"1\":{\"68\":1}}],[\"安装全局npm\",{\"1\":{\"66\":1}}],[\"安装nvm\",{\"0\":{\"64\":1}}],[\"安装成功示例\",{\"1\":{\"60\":1}}],[\"安装mysql服务\",{\"0\":{\"60\":1},\"1\":{\"60\":1}}],[\"安装rpm包\",{\"1\":{\"52\":1}}],[\"安装流程\",{\"0\":{\"52\":1}}],[\"查看流和消费者组的相关信息\",{\"1\":{\"104\":1}}],[\"查看哈希表\",{\"1\":{\"96\":1}}],[\"查看key的长度\",{\"1\":{\"84\":1}}],[\"查看key是否存在的命令\",{\"1\":{\"83\":1}}],[\"查看key所存储的类型\",{\"1\":{\"83\":1}}],[\"查看key还有多长时间过期\",{\"1\":{\"83\":1}}],[\"查看过期时间命令\",{\"1\":{\"83\":1}}],[\"查看库内所有的key\",{\"1\":{\"83\":1}}],[\"查看库数据大小命令\",{\"1\":{\"81\":1}}],[\"查看数据库现在有多少key\",{\"1\":{\"83\":1}}],[\"查看所有的key命令\",{\"1\":{\"81\":1}}],[\"查看redis进程是否开启命令\",{\"1\":{\"79\":1}}],[\"查看当前的版本\",{\"1\":{\"68\":1}}],[\"查看当前系统的位数和当前nodejs的位数\",{\"1\":{\"68\":1}}],[\"查看和设置代理\",{\"1\":{\"68\":1}}],[\"查看已经安装的版本\",{\"1\":{\"68\":2}}],[\"查看已安装的node版本\",{\"1\":{\"67\":1}}],[\"查看网络可以安装的版本\",{\"1\":{\"67\":1,\"68\":1}}],[\"查看nvm版本号\",{\"1\":{\"67\":1}}],[\"查看是否存在安装包\",{\"1\":{\"52\":1}}],[\"查看与卸载原有的包\",{\"1\":{\"52\":1}}],[\"查询序列最大值\",{\"1\":{\"34\":1}}],[\"查询所有表中是否存在某个字段\",{\"0\":{\"33\":1}}],[\"复制到\",{\"1\":{\"48\":1}}],[\"解密后内容\",{\"1\":{\"257\":1}}],[\"解密后的内容\",{\"1\":{\"257\":1}}],[\"解密失败\",{\"1\":{\"257\":1}}],[\"解决脏读\",{\"1\":{\"190\":2}}],[\"解决此错误有两个方法我个人是用第二个方法解决的\",{\"0\":{\"48\":1}}],[\"解析请求头失败\",{\"1\":{\"128\":1}}],[\"解压的包中找到\",{\"1\":{\"48\":1}}],[\"在成员变量上使用时表示当前成员变量需要进行必填校验\",{\"1\":{\"233\":1}}],[\"在头部使用时表示当前所有成员变量都需要进行必填校验\",{\"1\":{\"233\":1}}],[\"在配置文件中配置\",{\"0\":{\"228\":1}}],[\"在配置文件中配置即可\",{\"1\":{\"191\":1}}],[\"在方法上时不指定\",{\"1\":{\"222\":1}}],[\"在方法上时\",{\"1\":{\"222\":1}}],[\"在类上时类似与一级请求\",{\"1\":{\"222\":1}}],[\"在当前类中\",{\"1\":{\"221\":1}}],[\"在dispatcherservlet\",{\"1\":{\"214\":1}}],[\"在调用执行期间事务的维护情况\",{\"1\":{\"191\":1}}],[\"在目标方法执行出现异常的时候才会别调用的通知\",{\"1\":{\"188\":1}}],[\"在目标方法执行之后被调用的通知\",{\"1\":{\"188\":1}}],[\"在目标方法执行之前被调用的通知\",{\"1\":{\"188\":1}}],[\"在定义好切面\",{\"1\":{\"188\":1}}],[\"在spring中\",{\"1\":{\"183\":1}}],[\"在数据持久化对象中使用\",{\"1\":{\"182\":1}}],[\"在读取\",{\"1\":{\"178\":1}}],[\"在此标签中不常用\",{\"1\":{\"167\":1}}],[\"在创建\",{\"1\":{\"165\":1}}],[\"在创建时字符集选为utf8mb4排序规则选为utf8mb4\",{\"1\":{\"159\":1}}],[\"在建造者模式中\",{\"1\":{\"157\":1}}],[\"在一个方法上添加\",{\"1\":{\"145\":1}}],[\"在变量左边添加元素值\",{\"1\":{\"110\":1}}],[\"在事务执行过程\",{\"1\":{\"105\":1}}],[\"在输入元素的数量或者体积非常非常大时\",{\"1\":{\"101\":1}}],[\"在有序集合中计算指定字典区间内成员数量\",{\"1\":{\"98\":1}}],[\"在列表的元素前或后插入元素\",{\"1\":{\"88\":1}}],[\"在key的后面追加上value的值\",{\"1\":{\"84\":1}}],[\"在内存情况下\",{\"1\":{\"81\":1}}],[\"在reids根目录执行\",{\"1\":{\"79\":1}}],[\"在用户变量中添加\",{\"1\":{\"66\":1}}],[\"在nvm安装根目录\",{\"1\":{\"65\":1}}],[\"在\",{\"1\":{\"48\":1,\"101\":1,\"189\":1}}],[\"在线cron生成器\",{\"1\":{\"11\":1}}],[\"在线代码高亮\",{\"1\":{\"11\":1}}],[\"运行时也保留\",{\"1\":{\"141\":1}}],[\"运行\",{\"1\":{\"48\":1}}],[\"后\",{\"1\":{\"188\":1}}],[\"后面不同的请求路径\",{\"1\":{\"222\":1}}],[\"后面必须跟\",{\"1\":{\"184\":1}}],[\"后面的值代表偏移量\",{\"1\":{\"147\":1}}],[\"后置通知\",{\"1\":{\"183\":1,\"184\":1,\"188\":2}}],[\"后置不需要打码的长度\",{\"1\":{\"141\":1}}],[\"后消失\",{\"1\":{\"47\":1}}],[\"后端开发\",{\"2\":{\"16\":1,\"23\":1,\"29\":1,\"43\":1,\"75\":1,\"111\":1,\"116\":1,\"121\":1,\"124\":1,\"131\":1,\"136\":1,\"142\":1,\"149\":1,\"152\":1,\"169\":1,\"197\":1,\"208\":1,\"229\":1,\"239\":1,\"245\":1,\"250\":1,\"255\":1,\"258\":1,\"267\":1,\"278\":1}}],[\"中是一样的\",{\"1\":{\"219\":1}}],[\"中定义了事务描述相关的三类常量\",{\"1\":{\"190\":1}}],[\"中定义对应的标签\",{\"1\":{\"167\":1}}],[\"中配置多个包扫描时使用\",{\"1\":{\"189\":1}}],[\"中寻找指定的\",{\"1\":{\"177\":1}}],[\"中的proceed方法表示目标方法被执行\",{\"1\":{\"188\":1}}],[\"中的字符串\",{\"1\":{\"167\":1}}],[\"中的方法\",{\"1\":{\"167\":1}}],[\"中的指定字段的浮点数值加上增量\",{\"1\":{\"97\":1}}],[\"中的指定字段的整数值加上增量\",{\"1\":{\"97\":1}}],[\"中可以\",{\"1\":{\"166\":1}}],[\"中一次会话已创建sqlsession对象开始到sqlsession对象关闭为结束\",{\"1\":{\"158\":1}}],[\"中分别表示为\",{\"1\":{\"154\":1}}],[\"中存在的key\",{\"1\":{\"128\":1}}],[\"中只要有一个key存在\",{\"1\":{\"110\":1}}],[\"中\",{\"1\":{\"94\":1,\"96\":1,\"98\":2,\"101\":1}}],[\"中间元素\",{\"1\":{\"88\":1}}],[\"中给的解决方法\",{\"0\":{\"47\":1}}],[\"中下载对应的版本\",{\"1\":{\"45\":1}}],[\"错误行数据\",{\"1\":{\"237\":1}}],[\"错误的枚举\",{\"1\":{\"135\":1}}],[\"错误信息\",{\"1\":{\"135\":2}}],[\"错误日志收集地址\",{\"1\":{\"57\":1}}],[\"错误解决\",{\"0\":{\"46\":1}}],[\"错误收集\",{\"0\":{\"17\":1}}],[\"yyyy\",{\"1\":{\"114\":2}}],[\"yes\",{\"1\":{\"79\":1}}],[\"y\",{\"1\":{\"53\":4}}],[\"yum\",{\"1\":{\"45\":1,\"47\":1,\"48\":1,\"79\":1}}],[\"ysepan\",{\"1\":{\"13\":1}}],[\"下一级处理器\",{\"1\":{\"272\":1}}],[\"下的\",{\"1\":{\"110\":1}}],[\"下的npm\",{\"1\":{\"66\":1}}],[\"下\",{\"1\":{\"110\":1}}],[\"下指定hashkey的值\",{\"1\":{\"110\":1}}],[\"下找到配置文件\",{\"1\":{\"65\":1}}],[\"下面是一个异常类的demo\",{\"1\":{\"123\":1}}],[\"下面是设置简单密码\",{\"1\":{\"61\":1}}],[\"下面的\",{\"1\":{\"110\":1}}],[\"下面命令可以查看当前有的定时任务\",{\"1\":{\"53\":1}}],[\"下载的虽然是压缩包但是解压后是exe安装包\",{\"1\":{\"64\":1}}],[\"下载安装包\",{\"0\":{\"56\":1},\"1\":{\"79\":1}}],[\"下载包时需要下载四个类型的rpm文件\",{\"1\":{\"51\":1}}],[\"下载所需要的安装包\",{\"0\":{\"51\":1}}],[\"下载对应的安装包可以去\",{\"1\":{\"45\":1}}],[\"下即可解决\",{\"1\":{\"48\":1}}],[\"下次一定网\",{\"1\":{\"11\":1}}],[\"官方自带的性能测试工具\",{\"1\":{\"80\":1}}],[\"官方文档\",{\"1\":{\"45\":1}}],[\"官网地址\",{\"1\":{\"252\":1}}],[\"官网下载地址为\",{\"1\":{\"56\":1}}],[\"官网\",{\"1\":{\"7\":1,\"78\":1}}],[\"额外jsonb操作符\",{\"0\":{\"42\":1}}],[\"字符\",{\"1\":{\"168\":1}}],[\"字符串范围获取或替换\",{\"0\":{\"86\":1}}],[\"字符串\",{\"0\":{\"84\":1}}],[\"字符串的解释\",{\"1\":{\"40\":1}}],[\"字段\",{\"1\":{\"110\":1}}],[\"字段添加指定增量\",{\"0\":{\"97\":1}}],[\"字节公共库地址\",{\"1\":{\"22\":1}}],[\"字节跳动静态资源公共库\",{\"1\":{\"1\":1}}],[\"根据list顺序生成责任链并返回第一个\",{\"1\":{\"277\":1}}],[\"根据value从一个set中查询\",{\"1\":{\"110\":1}}],[\"根据key获取值\",{\"1\":{\"110\":1}}],[\"根据key\",{\"1\":{\"110\":2}}],[\"根据正则匹配key获取所有对应的key\",{\"1\":{\"110\":1}}],[\"根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合\",{\"1\":{\"100\":1}}],[\"根据用户给定的经纬度坐标来获取指定范围内的地理位置集合\",{\"1\":{\"100\":1}}],[\"根据考试id获取对应的排行版数据\",{\"1\":{\"74\":1}}],[\"根据子集获取从父级到当前子集的组织拼接\",{\"0\":{\"39\":1}}],[\"根据父级获取子父级的组织拼接\",{\"0\":{\"38\":1}}],[\"||\",{\"1\":{\"38\":1,\"39\":2,\"74\":2,\"140\":1,\"237\":2}}],[\"`\",{\"1\":{\"189\":2}}],[\"`ls\",{\"1\":{\"53\":1}}],[\"`rm\",{\"1\":{\"53\":1}}],[\"`表名称`\",{\"1\":{\"34\":1}}],[\"`database\",{\"1\":{\"28\":1}}],[\"将每个检查流程进行分隔处理且互相不影响各自的执行\",{\"1\":{\"269\":1}}],[\"将要扫描的文件全路径写入到对应文件\",{\"1\":{\"265\":1}}],[\"将结果交给视图解析器viewresolver进行解析\",{\"1\":{\"217\":1}}],[\"将结果直接返回给前端控制器dispathcherservlet\",{\"1\":{\"217\":1}}],[\"将结果返回给前端控制器dispatcherservlet\",{\"1\":{\"217\":1}}],[\"将这些包中添加注解之后对象的创建权限交给spring容器\",{\"1\":{\"204\":1}}],[\"将这个目录下的\",{\"1\":{\"48\":1}}],[\"将遍历的结果用\",{\"1\":{\"167\":1}}],[\"将sqlsession和线程进行绑定\",{\"1\":{\"163\":1}}],[\"将source尾部移除一个值\",{\"1\":{\"91\":1}}],[\"将本次使用的\",{\"1\":{\"163\":1}}],[\"将从由当前环境配置的\",{\"1\":{\"158\":1}}],[\"将一个复杂对象的构建与它的表示分离\",{\"1\":{\"157\":1}}],[\"将拦截器进行注册\",{\"0\":{\"130\":1}}],[\"将value放置于第一个该值前\",{\"1\":{\"110\":1}}],[\"将value关联到key\",{\"1\":{\"84\":1}}],[\"将数据放入set缓存\",{\"1\":{\"110\":1}}],[\"将报错\",{\"1\":{\"110\":2}}],[\"将创建一个key\",{\"1\":{\"110\":2}}],[\"将值放入缓存并设置时间\",{\"1\":{\"110\":1}}],[\"将值放入缓存\",{\"1\":{\"110\":1}}],[\"将消息标记为\",{\"1\":{\"104\":1}}],[\"将多个\",{\"1\":{\"101\":1}}],[\"将哈希表key中的字段field的值不存在时\",{\"1\":{\"96\":1}}],[\"将哈希表key中的字段field的值设置为value\",{\"1\":{\"96\":1}}],[\"将\",{\"1\":{\"93\":1,\"188\":1}}],[\"将弹出的元素插入到另外一个列表中并返回它\",{\"1\":{\"91\":1}}],[\"将key中存储的数字值增1\",{\"1\":{\"87\":1}}],[\"将key的value进行覆写\",{\"1\":{\"86\":1}}],[\"将key从当前数据库移动至指定数据库中\",{\"1\":{\"83\":1}}],[\"将key从redis中删除\",{\"1\":{\"83\":1}}],[\"将当前数据库清空\",{\"1\":{\"83\":1}}],[\"将当前序列值设置为当前表最大id值\",{\"1\":{\"34\":1}}],[\"将参数修改为yes\",{\"1\":{\"79\":1}}],[\"将redis配置文件复制到\",{\"1\":{\"79\":1}}],[\"将安装包上传到linux服务器上并解压\",{\"1\":{\"79\":1}}],[\"将其织入\",{\"1\":{\"188\":1}}],[\"将其唯一值设置为外部列表进行存储且使用这个来进行存储\",{\"1\":{\"71\":1}}],[\"将其替换为字节公共库中的资源就可以打开\",{\"1\":{\"22\":1}}],[\"将下面这个定时任务写进去\",{\"1\":{\"53\":1}}],[\"将自增序列以下面这种形式弄好后\",{\"1\":{\"34\":1}}],[\"来使用\",{\"1\":{\"206\":1}}],[\"来管理\",{\"1\":{\"203\":1}}],[\"来获取到\",{\"1\":{\"163\":1}}],[\"来实现互斥\",{\"1\":{\"147\":1}}],[\"来实现消息队列的功能\",{\"1\":{\"102\":1}}],[\"来拼接为本场的数据\",{\"1\":{\"74\":1}}],[\"来区分是谁的数据\",{\"1\":{\"74\":1}}],[\"来表示\",{\"1\":{\"34\":1}}],[\"来查看版本号\",{\"1\":{\"27\":1}}],[\"数据填充\",{\"1\":{\"227\":1}}],[\"数据源\",{\"1\":{\"161\":1}}],[\"数据源的名称\",{\"1\":{\"161\":1}}],[\"数据库连接配置文件\",{\"0\":{\"202\":1}}],[\"数据库中的类型column的类型\",{\"1\":{\"167\":1}}],[\"数据库配置\",{\"0\":{\"162\":1}}],[\"数据库\",{\"2\":{\"29\":1,\"43\":1}}],[\"数据库不存在时创建\",{\"1\":{\"28\":1}}],[\"数量\",{\"1\":{\"103\":4,\"110\":2}}],[\"数学科学计算器\",{\"1\":{\"11\":1}}],[\"创建高度处理器\",{\"0\":{\"275\":1}}],[\"创建宽度处理器\",{\"0\":{\"274\":1}}],[\"创建长度处理器\",{\"0\":{\"273\":1}}],[\"创建责任链抽象类\",{\"0\":{\"272\":1}}],[\"创建产品实体类\",{\"0\":{\"271\":1}}],[\"创建相应形状类\",{\"0\":{\"264\":1}}],[\"创建相关注解\",{\"0\":{\"232\":1}}],[\"创建枚举\",{\"1\":{\"263\":1}}],[\"创建输出时案例对象\",{\"1\":{\"254\":1}}],[\"创建word文档\",{\"1\":{\"253\":1}}],[\"创建一个\",{\"0\":{\"207\":1}}],[\"创建\",{\"0\":{\"206\":1}}],[\"创建mvc的配置文件\",{\"0\":{\"205\":1}}],[\"创建spring配置文件application\",{\"0\":{\"204\":1}}],[\"创建sqlsession需要使用sqlsessionfactory接口的的\",{\"1\":{\"158\":1}}],[\"创建新事务\",{\"1\":{\"191\":1,\"195\":1}}],[\"创建新的链表\",{\"1\":{\"88\":1}}],[\"创建业务接口与实现类\",{\"0\":{\"187\":1}}],[\"创建对应的mapper和mapper\",{\"0\":{\"164\":1}}],[\"创建工厂接口\",{\"0\":{\"263\":1}}],[\"创建工厂\",{\"1\":{\"163\":1}}],[\"创建配置文件\",{\"0\":{\"161\":1}}],[\"创建脱敏注解\",{\"0\":{\"141\":1}}],[\"创建脱敏注解处理类\",{\"0\":{\"140\":1}}],[\"创建脱敏枚举\",{\"0\":{\"139\":1}}],[\"创建拦截器\",{\"0\":{\"128\":1}}],[\"创建注解\",{\"0\":{\"127\":1}}],[\"创建api\",{\"1\":{\"119\":1}}],[\"创建时间\",{\"1\":{\"114\":1}}],[\"创建人\",{\"1\":{\"114\":1}}],[\"创建消费者组\",{\"1\":{\"104\":1}}],[\"创建文件夹\",{\"1\":{\"53\":1}}],[\"创建数据库\",{\"1\":{\"28\":1,\"161\":1}}],[\"创建后缀为dio\",{\"1\":{\"9\":1}}],[\"8以上\",{\"1\":{\"265\":1}}],[\"8为标准转化成字符串\",{\"1\":{\"257\":1}}],[\"8<\",{\"1\":{\"201\":4}}],[\"86400\",{\"1\":{\"128\":1}}],[\"83\",{\"1\":{\"71\":2}}],[\"82\",{\"1\":{\"71\":1}}],[\"81\",{\"1\":{\"71\":3}}],[\"8001\",{\"1\":{\"119\":1}}],[\"80\",{\"1\":{\"71\":3}}],[\"8\",{\"1\":{\"27\":1,\"51\":4,\"57\":1,\"101\":1,\"110\":1,\"161\":1,\"162\":1,\"164\":1,\"189\":1,\"196\":1,\"202\":1,\"204\":1,\"205\":1,\"206\":1,\"257\":1}}],[\"测试是否可行\",{\"0\":{\"266\":1}}],[\"测试用户名\",{\"1\":{\"254\":1}}],[\"测试生成\",{\"1\":{\"254\":1}}],[\"测试下是否成功\",{\"0\":{\"207\":1}}],[\"测试依赖\",{\"1\":{\"160\":1}}],[\"测试\",{\"1\":{\"80\":1}}],[\"测试性能\",{\"0\":{\"80\":1}}],[\"测试时请不要使用该参数\",{\"1\":{\"74\":1}}],[\"测试部门3\",{\"1\":{\"27\":2,\"38\":1,\"39\":1}}],[\"测试部门2\",{\"1\":{\"27\":4,\"38\":2,\"39\":2}}],[\"测试顶级部门\",{\"1\":{\"27\":8,\"38\":4,\"39\":4}}],[\">秒数\",{\"1\":{\"147\":1}}],[\">分钟\",{\"1\":{\"147\":1}}],[\">小时\",{\"1\":{\"147\":1}}],[\">日期\",{\"1\":{\"147\":1}}],[\">月\",{\"1\":{\"147\":1}}],[\">=\",{\"1\":{\"140\":1,\"168\":2}}],[\">sortscore\",{\"1\":{\"71\":1}}],[\">>\",{\"1\":{\"53\":7,\"237\":2,\"238\":1}}],[\">\",{\"1\":{\"27\":8,\"38\":4,\"39\":4,\"53\":2,\"74\":5,\"110\":1,\"118\":2,\"123\":3,\"135\":5,\"140\":2,\"154\":3,\"160\":6,\"161\":18,\"164\":6,\"167\":4,\"168\":2,\"186\":1,\"189\":7,\"196\":11,\"201\":12,\"204\":29,\"205\":11,\"206\":3,\"228\":8,\"237\":5,\"248\":1,\"249\":2,\"252\":2,\"254\":5,\"257\":4,\"277\":2}}],[\">测试部门1\",{\"1\":{\"27\":6,\"38\":3,\"39\":3}}],[\"><\",{\"1\":{\"22\":2,\"228\":2}}],[\"输出到文件\",{\"1\":{\"254\":1}}],[\"输出结果\",{\"1\":{\"243\":4,\"244\":6}}],[\"输出结果为\",{\"1\":{\"71\":1,\"266\":1}}],[\"输出示例\",{\"1\":{\"27\":2,\"38\":1,\"39\":1}}],[\"输入流\",{\"1\":{\"253\":1}}],[\"输入下面命令可以进到编辑页面\",{\"1\":{\"53\":1}}],[\"输入子集获取从父级到当前子集的组织拼接\",{\"1\":{\"27\":1}}],[\"输入父级获取子父级的组织拼接\",{\"1\":{\"27\":1}}],[\"子包下的所有类\",{\"1\":{\"184\":1}}],[\"子类\",{\"1\":{\"180\":1}}],[\"子标签的属性是一样的所以这里就写到一起了\",{\"1\":{\"167\":1}}],[\"子标签和\",{\"1\":{\"167\":1}}],[\"子标签\",{\"1\":{\"167\":2}}],[\"子级递归查询父级\",{\"0\":{\"37\":1}}],[\"子集id\",{\"1\":{\"27\":2,\"37\":1,\"39\":1}}],[\"子id递归查询父级\",{\"1\":{\"27\":1}}],[\"父级id\",{\"1\":{\"27\":2,\"36\":1,\"38\":1}}],[\"父级递归查询子级\",{\"0\":{\"36\":1},\"1\":{\"27\":1}}],[\"递归查询\",{\"0\":{\"27\":1,\"35\":1}}],[\"当循环行时在一列中生成多个图片\",{\"1\":{\"254\":1}}],[\"当循环行中某一列中需要渲染多个图片\",{\"1\":{\"254\":1}}],[\"当一个对象存在多个图片时处理\",{\"1\":{\"254\":1}}],[\"当我们仅转换一个对象时我们使用\",{\"1\":{\"243\":1}}],[\"当较多的通知增强方法使用相同的\",{\"1\":{\"188\":1}}],[\"当配置文件中被调用者\",{\"1\":{\"180\":1}}],[\"当参数为\",{\"1\":{\"158\":1}}],[\"当前行数据据\",{\"1\":{\"237\":1}}],[\"当前行头数据\",{\"1\":{\"237\":2}}],[\"当前注解可以使用在类或成员变量上\",{\"1\":{\"233\":1}}],[\"当前没有事务的\",{\"1\":{\"195\":2}}],[\"当前没有事务的时候就抛出异常\",{\"1\":{\"191\":1}}],[\"当前没有事务的时候就以非事务方式执行\",{\"1\":{\"191\":1}}],[\"当前没有事务的时候\",{\"1\":{\"191\":1,\"195\":1}}],[\"当前xml中唯一不可重复\",{\"1\":{\"167\":3}}],[\"当前\",{\"1\":{\"104\":1,\"167\":1}}],[\"当source不存在元素时\",{\"1\":{\"91\":1}}],[\"当列表中存在元素时会直接从尾部移除一位元素\",{\"1\":{\"91\":1}}],[\"当列表中存在元素时会直接从头部移除一位\",{\"1\":{\"91\":1}}],[\"当\",{\"1\":{\"89\":1,\"227\":1,\"235\":1,\"236\":1}}],[\"当索引不存在时也不执行\",{\"1\":{\"88\":1}}],[\"当添加多个值的时候\",{\"1\":{\"88\":1}}],[\"当所有key都不存在时成功\",{\"1\":{\"85\":1}}],[\"当key不存在时会报错\",{\"1\":{\"88\":1}}],[\"当key不存在时设置key的值\",{\"1\":{\"84\":1}}],[\"当key不存在\",{\"1\":{\"88\":1}}],[\"当key存在时不会设置\",{\"1\":{\"84\":1}}],[\"当然可以选择不执行\",{\"1\":{\"47\":1}}],[\"当然你也可以去看\",{\"1\":{\"45\":1}}],[\"当查询的数据为2时则是查询name中包含2的数据就会返回\",{\"1\":{\"26\":1}}],[\"当在使用fastjson2时\",{\"1\":{\"244\":1}}],[\"当在where作为条件时则是会返回满足条件的数据\",{\"1\":{\"26\":1}}],[\"当在select时会如果搜索值在strlist中存在那么会返回查询的值\",{\"1\":{\"26\":1}}],[\"39<\",{\"1\":{\"241\":1}}],[\"3<\",{\"1\":{\"201\":2,\"252\":2}}],[\"30秒\",{\"1\":{\"148\":1}}],[\"30秒触发1次\",{\"1\":{\"147\":1}}],[\"30\",{\"1\":{\"148\":10}}],[\"30t01\",{\"1\":{\"52\":1}}],[\"31536000\",{\"1\":{\"74\":1}}],[\"3306\",{\"1\":{\"202\":1}}],[\"33\",{\"1\":{\"51\":4}}],[\"3\",{\"1\":{\"26\":3,\"57\":1,\"100\":1,\"139\":1,\"148\":2,\"161\":2,\"164\":2,\"201\":1,\"244\":7,\"252\":1,\"276\":1}}],[\"3版本所以放开的有一些多\",{\"1\":{\"21\":1}}],[\"如需其他处理请可以复制当前监听器后重写即可\",{\"1\":{\"238\":1}}],[\"如\",{\"1\":{\"172\":1,\"178\":1,\"191\":1}}],[\"如果我们直接进行判断的话后续如果产品又添加了其他检查类型\",{\"1\":{\"269\":1}}],[\"如果我们不将所有请求拦截就不会出现这些个情况\",{\"1\":{\"21\":1}}],[\"如果没有匹配结果那么我应该直接报错回去\",{\"1\":{\"265\":1}}],[\"如果要转换的json字符串是数组\",{\"1\":{\"244\":1}}],[\"如果走到这里就是没有在导入类上添加\",{\"1\":{\"237\":2}}],[\"如果多行请求头\",{\"1\":{\"237\":2}}],[\"如果这个类处理的请求方法是\",{\"1\":{\"222\":1}}],[\"如果这一步报\",{\"1\":{\"47\":1}}],[\"如果在这个注解的类中想要返回对象\",{\"1\":{\"219\":1}}],[\"如果在事务执行之前这个\",{\"1\":{\"105\":1}}],[\"如果有多个拦截器的时候\",{\"1\":{\"228\":1}}],[\"如果有多个则以逗号分隔\",{\"1\":{\"135\":1}}],[\"如果有一级请求的情况下\",{\"1\":{\"222\":1}}],[\"如果有mybatis的单独配置文件\",{\"1\":{\"204\":1}}],[\"如果一次执行的是多条查询语句\",{\"1\":{\"192\":1}}],[\"如果只有单条的查询语句\",{\"1\":{\"192\":1}}],[\"如果用户需要使用spring的声明式事务管理\",{\"1\":{\"191\":1}}],[\"如果需要的话可以在后置通知的方法中修改结果\",{\"1\":{\"188\":2}}],[\"如果传入的是\",{\"1\":{\"167\":1}}],[\"如果使用这个注解后想要转发页面\",{\"1\":{\"221\":1}}],[\"如果使用\",{\"1\":{\"167\":1}}],[\"如果是mysql5的话\",{\"1\":{\"161\":1}}],[\"如果想要避免不安全\",{\"1\":{\"151\":1}}],[\"如果处理类型为空且正则表达式和替换字符串都为空那么根据前缀不脱敏长度和后缀不脱敏长度进行处理\",{\"1\":{\"140\":1}}],[\"如果处理类型为空那么根据正则表达式和替换字符串进行处理\",{\"1\":{\"140\":1}}],[\"如果处理类型不为空那么根据处理类型进行处理\",{\"1\":{\"140\":1}}],[\"如果值为空那么直接退出不再处理\",{\"1\":{\"140\":1}}],[\"如果bean为null那么直接设置为null\",{\"1\":{\"140\":1}}],[\"如果失败了则是\",{\"1\":{\"135\":1}}],[\"如果超过等待的时间仍没有元素则退出\",{\"1\":{\"110\":2}}],[\"如果中间参数值存在的话\",{\"1\":{\"110\":1}}],[\"如果\",{\"1\":{\"110\":2}}],[\"如果该\",{\"1\":{\"110\":2}}],[\"如果不需要可以不创建\",{\"1\":{\"203\":1}}],[\"如果不是string类型或者当前属性没有脱敏注解那么直接设置为原始处理的beanproperty\",{\"1\":{\"140\":1}}],[\"如果不存在就创建\",{\"1\":{\"104\":1}}],[\"如果不设置的话默认的是\",{\"1\":{\"68\":1}}],[\"如果不设置的默认是\",{\"1\":{\"68\":1}}],[\"如果出现网络断开\",{\"1\":{\"102\":1}}],[\"如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止\",{\"1\":{\"91\":3}}],[\"如果移除了所有值\",{\"1\":{\"88\":1}}],[\"如果key存在时新值会覆盖旧值\",{\"1\":{\"85\":1}}],[\"如果当前要读取的类没有表头校验注解\",{\"1\":{\"237\":1}}],[\"如果当前有事务\",{\"1\":{\"195\":3}}],[\"如果当前有事务就直接加入该事务\",{\"1\":{\"191\":3}}],[\"如果当前分数大于redis中存储的分数或分数一致且时长更短时移除当前redis中的数据且将当前数据存入redis中\",{\"1\":{\"74\":1}}],[\"如果当前redis不存在相同key且未超过排行榜最大人数时直接放入redis即可\",{\"1\":{\"74\":1}}],[\"如果当前为空那么直接将本次数据添加进去即可\",{\"1\":{\"74\":1}}],[\"如果exam\",{\"1\":{\"74\":1}}],[\"如果已经安装了node请先卸载\",{\"1\":{\"64\":1}}],[\"如果之前已经存在过mysql服务需要先删除掉\",{\"1\":{\"60\":1}}],[\"如果centos8使用tar包进行安装可能会遇到下面的错误\",{\"0\":{\"48\":1}}],[\"如果输出\",{\"1\":{\"47\":1}}],[\"如下例就是会返回1\",{\"1\":{\"26\":1}}],[\"示例listener\",{\"0\":{\"238\":1}}],[\"示例\",{\"1\":{\"26\":2}}],[\"01\",{\"1\":{\"254\":1}}],[\"010454\",{\"1\":{\"52\":1}}],[\"05\",{\"1\":{\"253\":1,\"254\":1}}],[\"0~23\",{\"1\":{\"147\":1}}],[\"0~59\",{\"1\":{\"147\":1}}],[\"0后该命令支持设置多个field\",{\"1\":{\"96\":1}}],[\"00\",{\"1\":{\"53\":1}}],[\"064\",{\"1\":{\"163\":1}}],[\"06\",{\"1\":{\"52\":1,\"80\":1}}],[\"0\",{\"1\":{\"22\":1,\"27\":1,\"38\":2,\"45\":3,\"51\":4,\"57\":2,\"74\":1,\"102\":1,\"104\":2,\"110\":1,\"114\":1,\"115\":2,\"119\":4,\"140\":2,\"141\":2,\"146\":2,\"147\":3,\"148\":7,\"160\":1,\"161\":2,\"164\":3,\"184\":1,\"189\":1,\"194\":1,\"196\":1,\"201\":3,\"204\":1,\"205\":1,\"206\":3,\"237\":1,\"241\":1,\"254\":1,\"257\":8,\"277\":2}}],[\"90\",{\"1\":{\"71\":7}}],[\"9\",{\"1\":{\"22\":1,\"45\":3,\"101\":1,\"194\":1,\"201\":1}}],[\"6<\",{\"1\":{\"160\":1,\"201\":2}}],[\"6379\",{\"1\":{\"79\":1,\"80\":1}}],[\"64\",{\"1\":{\"51\":4}}],[\"6\",{\"1\":{\"22\":1,\"52\":1,\"244\":7,\"254\":2}}],[\"2<\",{\"1\":{\"194\":1,\"201\":1}}],[\"25秒触发1次\",{\"1\":{\"147\":1}}],[\"25\",{\"1\":{\"147\":1}}],[\"256\",{\"1\":{\"79\":1}}],[\"26\",{\"1\":{\"80\":2}}],[\"2013\",{\"1\":{\"154\":1}}],[\"2010\",{\"1\":{\"154\":1}}],[\"2011年10月每周日1点10分30秒触发任务\",{\"1\":{\"148\":1}}],[\"2011年10月每天1点10分30秒触发任务\",{\"1\":{\"148\":1}}],[\"2011年10月20号1点10分30秒触发任务\",{\"1\":{\"148\":1}}],[\"2011\",{\"1\":{\"148\":3}}],[\"20秒触发1次\",{\"1\":{\"147\":1}}],[\"2024\",{\"1\":{\"80\":1}}],[\"202306301501\",{\"1\":{\"53\":2}}],[\"2023\",{\"1\":{\"52\":1,\"253\":1,\"254\":2}}],[\"200\",{\"1\":{\"134\":1,\"249\":2}}],[\"2006\",{\"1\":{\"71\":4}}],[\"2005\",{\"1\":{\"71\":4}}],[\"2004\",{\"1\":{\"71\":4}}],[\"2003\",{\"1\":{\"71\":4}}],[\"2002\",{\"1\":{\"71\":4}}],[\"2001\",{\"1\":{\"71\":4,\"189\":1,\"196\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"20\",{\"1\":{\"67\":2,\"71\":1,\"147\":4,\"148\":3}}],[\"28<\",{\"1\":{\"160\":1,\"194\":1,\"201\":2}}],[\"28\",{\"1\":{\"52\":1,\"253\":1}}],[\"24<\",{\"1\":{\"160\":1,\"201\":1}}],[\"24\",{\"1\":{\"52\":1}}],[\"2\",{\"1\":{\"22\":1,\"26\":5,\"67\":2,\"74\":1,\"83\":1,\"100\":1,\"101\":1,\"119\":1,\"160\":3,\"163\":1,\"186\":2,\"201\":3,\"243\":3,\"244\":7,\"248\":2,\"254\":2}}],[\"14<\",{\"1\":{\"201\":1}}],[\"16\",{\"1\":{\"201\":1,\"253\":1}}],[\"163\",{\"1\":{\"119\":1}}],[\"1<\",{\"1\":{\"160\":1,\"201\":1,\"248\":1}}],[\"13\",{\"1\":{\"160\":1,\"186\":2}}],[\"1357310795\",{\"1\":{\"7\":1}}],[\"117\",{\"1\":{\"257\":1}}],[\"11\",{\"1\":{\"154\":1}}],[\"1代表星期天\",{\"1\":{\"147\":1}}],[\"1~7\",{\"1\":{\"147\":1}}],[\"1~31\",{\"1\":{\"147\":1}}],[\"15到45秒内\",{\"1\":{\"148\":1}}],[\"15秒和45秒时触发任务\",{\"1\":{\"147\":1}}],[\"15\",{\"1\":{\"147\":1,\"148\":9,\"160\":3,\"201\":1,\"273\":1,\"274\":1,\"275\":1,\"276\":1}}],[\"128\",{\"1\":{\"257\":1}}],[\"12<\",{\"1\":{\"201\":1}}],[\"127\",{\"1\":{\"119\":1}}],[\"123456\",{\"1\":{\"52\":1,\"61\":1}}],[\"1l\",{\"1\":{\"114\":1}}],[\"1为无期限\",{\"1\":{\"110\":1}}],[\"1时会取出全部\",{\"1\":{\"89\":1}}],[\"17<\",{\"1\":{\"201\":1}}],[\"17\",{\"1\":{\"80\":1}}],[\"1970~2099\",{\"1\":{\"147\":1}}],[\"19\",{\"1\":{\"71\":1}}],[\"18\",{\"1\":{\"67\":2,\"71\":1,\"160\":1,\"201\":1,\"254\":2}}],[\"10<\",{\"1\":{\"201\":1}}],[\"103\",{\"1\":{\"110\":1}}],[\"1024\",{\"1\":{\"257\":1}}],[\"102\",{\"1\":{\"110\":1}}],[\"101\",{\"1\":{\"110\":1}}],[\"100\",{\"1\":{\"80\":1,\"110\":1,\"254\":6}}],[\"100个并发链接\",{\"1\":{\"80\":1}}],[\"100000请求\",{\"1\":{\"80\":1}}],[\"100000\",{\"1\":{\"73\":1,\"80\":1}}],[\"10\",{\"1\":{\"52\":1,\"71\":3,\"139\":1,\"147\":2,\"148\":16,\"252\":1,\"254\":2}}],[\"1c\",{\"1\":{\"47\":3}}],[\"1\",{\"1\":{\"22\":3,\"26\":6,\"34\":4,\"47\":14,\"51\":4,\"53\":2,\"71\":15,\"74\":2,\"110\":3,\"114\":1,\"119\":3,\"134\":1,\"148\":6,\"161\":1,\"163\":1,\"164\":1,\"189\":1,\"196\":1,\"201\":1,\"204\":1,\"205\":1,\"206\":1,\"237\":1,\"244\":7,\"248\":1,\"254\":2,\"276\":1,\"277\":3}}],[\"=null\",{\"1\":{\"188\":1}}],[\"==>\",{\"1\":{\"147\":5}}],[\"==\",{\"1\":{\"74\":1,\"110\":5,\"140\":2,\"163\":1,\"237\":4,\"249\":2,\"272\":1}}],[\"=\",{\"1\":{\"21\":1,\"27\":8,\"33\":2,\"36\":2,\"37\":2,\"38\":4,\"39\":2,\"52\":1,\"57\":3,\"66\":1,\"73\":1,\"74\":26,\"109\":2,\"110\":14,\"114\":11,\"115\":3,\"119\":1,\"120\":1,\"123\":1,\"128\":8,\"129\":4,\"130\":1,\"134\":2,\"135\":3,\"139\":2,\"140\":3,\"141\":1,\"146\":1,\"163\":8,\"164\":3,\"165\":3,\"175\":2,\"177\":2,\"178\":1,\"188\":8,\"195\":2,\"204\":1,\"207\":1,\"237\":21,\"238\":3,\"243\":7,\"244\":7,\"249\":4,\"253\":2,\"254\":13,\"257\":44,\"265\":3,\"271\":1,\"272\":1,\"273\":1,\"274\":1,\"275\":1,\"276\":4,\"277\":3}}],[\"我经常用的是\",{\"1\":{\"166\":1}}],[\"我这里使用的是5\",{\"1\":{\"248\":1}}],[\"我这里使用的是包扫描所以不需要自己一个个进行注册\",{\"1\":{\"165\":1}}],[\"我这里就定义为\",{\"1\":{\"161\":1}}],[\"我们可以根据情况来创建绘画形状为需求来说明并实现工厂模式\",{\"1\":{\"262\":1}}],[\"我们可以去\",{\"1\":{\"45\":1}}],[\"我们不需要自己控制该类\",{\"1\":{\"213\":1}}],[\"我们在\",{\"1\":{\"166\":1}}],[\"我们也可以拦截自定义的异常类\",{\"1\":{\"123\":1}}],[\"我们是基于linux学习\",{\"1\":{\"78\":1}}],[\"我们使用sort将其进行排序后输出key\",{\"1\":{\"71\":1}}],[\"我们使用hash来将各个数据进行存储\",{\"1\":{\"71\":1}}],[\"我们使用拦截器后需要注册\",{\"1\":{\"21\":1}}],[\"我的小站\",{\"1\":{\"13\":1}}],[\"继承时出现警告解决\",{\"0\":{\"19\":1}}],[\"配置的顺序就是拦截器的拦截顺序\",{\"1\":{\"228\":1}}],[\"配置数据库链接数据源\",{\"1\":{\"204\":1}}],[\"配置spring\",{\"0\":{\"203\":1}}],[\"配置包扫描\",{\"1\":{\"189\":1}}],[\"配置文件\",{\"1\":{\"177\":1,\"204\":1,\"206\":1}}],[\"配置文件中开启事务\",{\"0\":{\"196\":1}}],[\"配置文件中注册一个基于\",{\"1\":{\"188\":1}}],[\"配置文件中被调用者\",{\"1\":{\"180\":1}}],[\"配置文件中的定义装配bean\",{\"1\":{\"175\":1}}],[\"配置文件中是有顺序的如果顺序错误也会报错\",{\"1\":{\"166\":1}}],[\"配置文件标签\",{\"0\":{\"166\":1}}],[\"配置\",{\"1\":{\"161\":1,\"204\":2}}],[\"配置npm下载包时的全局包路径\",{\"1\":{\"66\":1}}],[\"配置nvm下载源\",{\"1\":{\"65\":1}}],[\"配置全局npm\",{\"0\":{\"66\":1}}],[\"配置下载源\",{\"0\":{\"65\":1},\"1\":{\"65\":1}}],[\"配置mysql默认编码\",{\"1\":{\"57\":1}}],[\"配置mysql\",{\"0\":{\"57\":1}}],[\"配置类\",{\"1\":{\"19\":1}}],[\"配置阿里云镜像官网指南\",{\"1\":{\"15\":1}}],[\"配置华为云镜像官方文档地址\",{\"1\":{\"15\":1}}],[\"<exclusion>\",{\"1\":{\"252\":3}}],[\"<exclusions>\",{\"1\":{\"252\":2}}],[\"<environment\",{\"1\":{\"161\":1}}],[\"<environments\",{\"1\":{\"161\":1}}],[\"<listener\",{\"1\":{\"206\":1}}],[\"<listener>\",{\"1\":{\"206\":1}}],[\"<lombok\",{\"1\":{\"201\":2}}],[\"<log4j\",{\"1\":{\"201\":1}}],[\"<web\",{\"1\":{\"206\":1}}],[\"<where>\",{\"1\":{\"164\":1}}],[\"<value>\",{\"1\":{\"204\":1}}],[\"<version>2\",{\"1\":{\"201\":1,\"241\":1}}],[\"<version>0\",{\"1\":{\"194\":1,\"252\":1}}],[\"<version>1\",{\"1\":{\"160\":1,\"252\":2}}],[\"<version>4\",{\"1\":{\"160\":1}}],[\"<version>8\",{\"1\":{\"160\":1,\"194\":1,\"201\":1}}],[\"<version>3\",{\"1\":{\"160\":1}}],[\"<version>5\",{\"1\":{\"160\":3,\"186\":2,\"248\":1}}],[\"<version>$\",{\"1\":{\"118\":1,\"194\":2,\"201\":10}}],[\"<url\",{\"1\":{\"206\":1}}],[\"<url>https\",{\"1\":{\"15\":2}}],[\"<uriencoding>utf\",{\"1\":{\"201\":1}}],[\"<junit\",{\"1\":{\"201\":1}}],[\"<jackson\",{\"1\":{\"201\":1}}],[\"<array>\",{\"1\":{\"204\":1}}],[\"<artifactid>ooxml\",{\"1\":{\"252\":2}}],[\"<artifactid>poi\",{\"1\":{\"252\":4}}],[\"<artifactid>pagehelper<\",{\"1\":{\"201\":1}}],[\"<artifactid>httpclient5<\",{\"1\":{\"248\":1}}],[\"<artifactid>fastjson2<\",{\"1\":{\"241\":1}}],[\"<artifactid>tomcat7\",{\"1\":{\"201\":1}}],[\"<artifactid>druid<\",{\"1\":{\"201\":1}}],[\"<artifactid>jackson\",{\"1\":{\"201\":1}}],[\"<artifactid>javax\",{\"1\":{\"201\":1}}],[\"<artifactid>junit<\",{\"1\":{\"160\":1}}],[\"<artifactid>c3p0<\",{\"1\":{\"194\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"160\":1,\"201\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"201\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"160\":1,\"201\":1}}],[\"<artifactid>mysql\",{\"1\":{\"160\":1,\"194\":1,\"201\":1}}],[\"<artifactid>spring\",{\"1\":{\"160\":3,\"186\":2,\"194\":2,\"201\":3}}],[\"<artifactid>knife4j\",{\"1\":{\"118\":1}}],[\"<aop\",{\"1\":{\"189\":1}}],[\"<context\",{\"1\":{\"189\":1,\"204\":2,\"205\":1,\"206\":1}}],[\"<configuration>\",{\"1\":{\"161\":1,\"201\":1}}],[\"<build>\",{\"1\":{\"201\":1}}],[\"<bean\",{\"1\":{\"196\":2,\"204\":5,\"205\":1,\"228\":2}}],[\"<beans\",{\"1\":{\"189\":1,\"196\":1,\"204\":1,\"205\":1}}],[\"<br\",{\"1\":{\"135\":2,\"254\":5}}],[\"<>\",{\"1\":{\"168\":2}}],[\"<=\",{\"1\":{\"168\":2}}],[\"<foreach\",{\"1\":{\"167\":1}}],[\"<init\",{\"1\":{\"206\":1}}],[\"<insert\",{\"1\":{\"167\":1}}],[\"<if\",{\"1\":{\"164\":1}}],[\"<id>aliyunmaven<\",{\"1\":{\"15\":1}}],[\"<id>huaweicloud<\",{\"1\":{\"15\":1}}],[\"<mvc\",{\"1\":{\"205\":2,\"228\":5}}],[\"<mybatis\",{\"1\":{\"201\":2}}],[\"<mysql\",{\"1\":{\"201\":1}}],[\"<maven\",{\"1\":{\"201\":2}}],[\"<mapper\",{\"1\":{\"164\":1}}],[\"<mappers>\",{\"1\":{\"161\":1}}],[\"<mirrorof>\",{\"1\":{\"15\":2}}],[\"<mirror>\",{\"1\":{\"15\":2}}],[\"<druid\",{\"1\":{\"201\":1}}],[\"<datasource\",{\"1\":{\"161\":1}}],[\"<dependencies>\",{\"1\":{\"160\":1,\"201\":1}}],[\"<dependency>\",{\"1\":{\"118\":1,\"160\":7,\"186\":2,\"194\":4,\"201\":11,\"241\":1,\"248\":1,\"252\":3}}],[\"<groupid>io\",{\"1\":{\"252\":1}}],[\"<groupid>javax\",{\"1\":{\"201\":1}}],[\"<groupid>junit<\",{\"1\":{\"160\":1}}],[\"<groupid>mysql<\",{\"1\":{\"160\":1,\"194\":1,\"201\":1}}],[\"<groupid>org\",{\"1\":{\"160\":5,\"186\":2,\"194\":2,\"201\":7,\"248\":1,\"252\":3}}],[\"<groupid>com\",{\"1\":{\"118\":1,\"194\":1,\"201\":3,\"241\":1,\"252\":2}}],[\"<tx\",{\"1\":{\"196\":1,\"204\":1}}],[\"<transactionmanager\",{\"1\":{\"161\":1}}],[\"<t>\",{\"1\":{\"135\":6,\"237\":4}}],[\"<time\",{\"1\":{\"53\":1}}],[\"<port>80<\",{\"1\":{\"201\":1}}],[\"<plugin>\",{\"1\":{\"201\":1}}],[\"<plugins>\",{\"1\":{\"201\":1}}],[\"<param\",{\"1\":{\"206\":4}}],[\"<path>\",{\"1\":{\"201\":1}}],[\"<pagehelper\",{\"1\":{\"201\":1}}],[\"<packaging>war<\",{\"1\":{\"201\":1}}],[\"<package\",{\"1\":{\"161\":1}}],[\"<project\",{\"1\":{\"201\":1}}],[\"<property\",{\"1\":{\"161\":4,\"196\":5,\"204\":11,\"205\":2}}],[\"<properties>\",{\"1\":{\"201\":1}}],[\"<properties\",{\"1\":{\"161\":1}}],[\"<p\",{\"1\":{\"135\":1}}],[\"<p>\",{\"1\":{\"74\":2,\"110\":1,\"114\":2,\"163\":3,\"233\":2,\"235\":2,\"236\":1}}],[\"<scope>provided<\",{\"1\":{\"201\":1}}],[\"<script\",{\"1\":{\"22\":2}}],[\"<servlet>\",{\"1\":{\"206\":1}}],[\"<servlet\",{\"1\":{\"201\":1,\"206\":4}}],[\"<select\",{\"1\":{\"164\":1}}],[\"<spring\",{\"1\":{\"201\":1}}],[\"<sys\",{\"1\":{\"53\":1}}],[\"<stdlib\",{\"1\":{\"53\":1}}],[\"<studio\",{\"1\":{\"53\":1}}],[\"<name>阿里云公共仓库<\",{\"1\":{\"15\":1}}],[\"<\",{\"1\":{\"15\":5,\"53\":2,\"74\":3,\"114\":2,\"118\":4,\"160\":14,\"161\":13,\"164\":7,\"167\":4,\"168\":2,\"186\":3,\"189\":5,\"194\":6,\"196\":5,\"201\":40,\"204\":19,\"205\":6,\"206\":9,\"228\":9,\"237\":3,\"241\":1,\"248\":2,\"252\":10,\"254\":1}}],[\"阿里云盘资源共享站\",{\"1\":{\"13\":1}}],[\"阿里云maven仓库\",{\"1\":{\"3\":1}}],[\"云盘资源搜索\",{\"1\":{\"13\":1}}],[\"记忆力博客网盘\",{\"1\":{\"13\":1}}],[\"资源访问\",{\"1\":{\"176\":1}}],[\"资源加载和透明地创建上下文\",{\"1\":{\"173\":1}}],[\"资源分享\",{\"0\":{\"13\":1}}],[\"资源下载\",{\"1\":{\"5\":1}}],[\"false\",{\"1\":{\"129\":2,\"158\":2,\"237\":1,\"272\":1,\"273\":1,\"274\":1,\"275\":1}}],[\"false不存在\",{\"1\":{\"110\":1}}],[\"favicon\",{\"1\":{\"120\":1}}],[\"factory\",{\"1\":{\"109\":2,\"163\":3,\"175\":1,\"177\":1}}],[\"fasterxml\",{\"1\":{\"114\":1,\"140\":7,\"141\":2,\"201\":1}}],[\"fast\",{\"1\":{\"57\":1}}],[\"fastjson2<\",{\"1\":{\"241\":1}}],[\"fastjson2\",{\"0\":{\"241\":1},\"1\":{\"4\":1,\"128\":1,\"237\":2,\"241\":2,\"243\":3}}],[\"fastjson\",{\"1\":{\"4\":1}}],[\"fill\",{\"1\":{\"114\":4}}],[\"fileoutputstream\",{\"1\":{\"254\":3}}],[\"filevalue\",{\"1\":{\"237\":6}}],[\"filename\",{\"1\":{\"237\":2}}],[\"filesystemxmlapplicationcontext使用示例\",{\"1\":{\"178\":1}}],[\"filesystemxmlapplicationcontext\",{\"0\":{\"178\":1},\"1\":{\"176\":1,\"178\":2}}],[\"filesystemresource\",{\"1\":{\"175\":4,\"177\":2}}],[\"file\",{\"1\":{\"53\":1,\"254\":2}}],[\"fields\",{\"1\":{\"237\":13}}],[\"fieldnames\",{\"1\":{\"237\":8,\"238\":3}}],[\"fieldrequired注解放在class上是才起作用\",{\"1\":{\"235\":1}}],[\"fieldrequired注解存在时\",{\"1\":{\"235\":1}}],[\"fieldrequired注解搭配使用\",{\"1\":{\"235\":1}}],[\"fieldrequired\",{\"0\":{\"233\":1},\"1\":{\"233\":1,\"237\":5}}],[\"fieldfill\",{\"1\":{\"114\":9}}],[\"field2\",{\"1\":{\"96\":3}}],[\"field1\",{\"1\":{\"96\":3}}],[\"field\",{\"1\":{\"96\":4,\"97\":2,\"103\":3,\"141\":1,\"233\":1,\"235\":1,\"236\":1,\"237\":37}}],[\"fi\",{\"1\":{\"53\":3}}],[\"findnullvalueserializer\",{\"1\":{\"140\":2}}],[\"findmatchingkeys\",{\"1\":{\"74\":1,\"110\":1}}],[\"findrankbyexamid\",{\"1\":{\"74\":1}}],[\"find\",{\"0\":{\"26\":1},\"1\":{\"26\":3}}],[\"final\",{\"1\":{\"21\":2,\"74\":6,\"114\":1,\"115\":1,\"120\":3,\"128\":5,\"130\":3,\"134\":2,\"135\":3,\"139\":2,\"163\":2,\"183\":1,\"238\":2,\"257\":3}}],[\"flushall\",{\"1\":{\"81\":1,\"83\":1}}],[\"flushdb\",{\"1\":{\"81\":1,\"83\":1}}],[\"flush\",{\"1\":{\"52\":1,\"254\":1}}],[\"fos\",{\"1\":{\"254\":4}}],[\"foreach>\",{\"1\":{\"167\":1}}],[\"foreach标签\",{\"1\":{\"167\":1}}],[\"foreach\",{\"1\":{\"165\":1,\"237\":2}}],[\"format\",{\"1\":{\"74\":12}}],[\"for\",{\"1\":{\"52\":1,\"53\":1,\"74\":2,\"188\":1,\"237\":7,\"254\":1,\"265\":1}}],[\"force\",{\"1\":{\"52\":1}}],[\"foundation\",{\"1\":{\"154\":1}}],[\"found\",{\"1\":{\"47\":1,\"280\":1}}],[\"freemarkerview\",{\"1\":{\"216\":1}}],[\"freemarker\",{\"1\":{\"173\":1}}],[\"freebuf\",{\"1\":{\"12\":1}}],[\"fri\",{\"1\":{\"148\":1}}],[\"framework\",{\"1\":{\"120\":3}}],[\"from\",{\"1\":{\"26\":1,\"27\":12,\"33\":1,\"34\":1,\"36\":3,\"37\":3,\"38\":3,\"39\":3,\"52\":1,\"164\":1}}],[\"f12打开devtools中网络请求时发现vue\",{\"1\":{\"22\":1}}],[\"function\",{\"1\":{\"53\":2}}],[\"fun\",{\"1\":{\"13\":1}}],[\"微步云沙箱\",{\"1\":{\"12\":1}}],[\"qcfactory\",{\"1\":{\"277\":1}}],[\"qchandler\",{\"1\":{\"272\":3,\"273\":1,\"274\":1,\"275\":1,\"277\":9}}],[\"qualifier\",{\"1\":{\"181\":2}}],[\"quartz\",{\"1\":{\"173\":1}}],[\"queue\",{\"1\":{\"102\":1}}],[\"queryallorbyid\",{\"1\":{\"207\":1}}],[\"queryall\",{\"1\":{\"164\":2,\"165\":1}}],[\"query\",{\"1\":{\"74\":2,\"110\":1}}],[\"quickstart\",{\"1\":{\"4\":1}}],[\"quick\",{\"1\":{\"4\":1}}],[\"qa|grep\",{\"1\":{\"52\":1}}],[\"qq351605872\",{\"1\":{\"13\":1}}],[\"qqe2\",{\"1\":{\"11\":1,\"145\":1,\"148\":1}}],[\"奇q工具网\",{\"1\":{\"11\":1}}],[\"油猴脚本网址\",{\"1\":{\"11\":1}}],[\"杂项\",{\"0\":{\"11\":1}}],[\"图片来自菜鸟教程\",{\"1\":{\"80\":1}}],[\"图片查看器\",{\"1\":{\"7\":1}}],[\"图床\",{\"0\":{\"10\":1},\"1\":{\"10\":1}}],[\"流程图绘图\",{\"1\":{\"9\":1}}],[\"快速生成swagger注释\",{\"1\":{\"8\":1}}],[\"ns\",{\"1\":{\"206\":3}}],[\"nativewebrequest\",{\"1\":{\"129\":5}}],[\"namespace=\",{\"1\":{\"164\":1}}],[\"namespace\",{\"1\":{\"164\":1}}],[\"name=fastjson2\",{\"1\":{\"243\":2}}],[\"name=\",{\"1\":{\"161\":5,\"196\":5,\"204\":11,\"205\":2}}],[\"name`\",{\"1\":{\"28\":1}}],[\"name\",{\"1\":{\"26\":5,\"27\":12,\"33\":1,\"36\":2,\"37\":2,\"38\":4,\"39\":4,\"164\":1,\"166\":2,\"184\":2,\"188\":2,\"243\":4}}],[\"name>dispatcherservlet<\",{\"1\":{\"206\":2}}],[\"name>contextconfiglocation<\",{\"1\":{\"206\":2}}],[\"name>\",{\"1\":{\"15\":1,\"206\":4}}],[\"null\",{\"1\":{\"110\":6,\"115\":2,\"128\":1,\"129\":3,\"135\":7,\"140\":4,\"163\":3,\"164\":1,\"165\":1,\"237\":5,\"265\":1,\"272\":1,\"277\":1}}],[\"numkeys\",{\"1\":{\"98\":2}}],[\"number\",{\"1\":{\"74\":3,\"110\":9}}],[\"nio\",{\"1\":{\"110\":1,\"257\":1}}],[\"n\",{\"1\":{\"80\":1}}],[\"npm\",{\"1\":{\"65\":2,\"66\":7,\"68\":3}}],[\"npmmirror\",{\"1\":{\"65\":2,\"66\":3}}],[\"nvm常用命令\",{\"0\":{\"68\":1}}],[\"nvm安装版本查看\",{\"1\":{\"67\":1}}],[\"nvm使用\",{\"0\":{\"67\":1}}],[\"nvm下载时请选择下图所框选的包\",{\"1\":{\"64\":1}}],[\"nvm下载地址\",{\"1\":{\"64\":1}}],[\"nvm\",{\"0\":{\"63\":1},\"1\":{\"64\":1,\"66\":3,\"67\":5,\"68\":14}}],[\"never\",{\"1\":{\"191\":1}}],[\"nested\",{\"1\":{\"191\":1}}],[\"nexthandler\",{\"1\":{\"272\":7}}],[\"next\",{\"1\":{\"110\":1}}],[\"nextval\",{\"1\":{\"34\":2}}],[\"new\",{\"1\":{\"73\":1,\"74\":1,\"109\":2,\"110\":3,\"115\":1,\"119\":3,\"123\":2,\"130\":1,\"135\":1,\"140\":1,\"163\":2,\"165\":1,\"175\":2,\"177\":2,\"178\":1,\"191\":1,\"195\":1,\"237\":9,\"238\":2,\"243\":1,\"249\":1,\"253\":1,\"254\":13,\"257\":13,\"273\":1,\"274\":1,\"276\":4,\"277\":2}}],[\"net\",{\"1\":{\"11\":1,\"13\":1,\"60\":1}}],[\"netty\",{\"1\":{\"4\":3}}],[\"netty文档\",{\"1\":{\"4\":1}}],[\"nosuchalgorithmexception\",{\"1\":{\"257\":1}}],[\"now\",{\"1\":{\"115\":2,\"128\":2}}],[\"noack\",{\"1\":{\"104\":1}}],[\"noargsconstructor\",{\"1\":{\"73\":2,\"140\":2}}],[\"nodejs\",{\"1\":{\"68\":1}}],[\"node\",{\"1\":{\"65\":2,\"68\":1,\"88\":1}}],[\"nodeps\",{\"1\":{\"52\":2}}],[\"no\",{\"1\":{\"34\":1,\"47\":1}}],[\"notheadrequired\",{\"0\":{\"236\":1},\"1\":{\"236\":1,\"237\":2}}],[\"notfieldrequired\",{\"0\":{\"235\":1},\"1\":{\"235\":1,\"237\":3}}],[\"note\",{\"1\":{\"52\":1}}],[\"notepad\",{\"1\":{\"7\":2}}],[\"not\",{\"1\":{\"28\":1,\"191\":1,\"280\":1}}],[\"uncommitted\",{\"1\":{\"190\":1}}],[\"unwatch\",{\"1\":{\"105\":1}}],[\"unit\",{\"1\":{\"110\":6}}],[\"uninstall\",{\"1\":{\"68\":1}}],[\"uninstaller\",{\"1\":{\"7\":1}}],[\"union\",{\"1\":{\"26\":3,\"27\":4,\"36\":1,\"37\":1,\"38\":1,\"39\":1}}],[\"unicode\",{\"1\":{\"11\":2,\"28\":1,\"57\":2}}],[\"utf\",{\"1\":{\"110\":1,\"161\":1,\"164\":1,\"189\":1,\"196\":1,\"204\":1,\"205\":1,\"206\":1,\"257\":1}}],[\"utf8mb4\",{\"1\":{\"28\":2,\"57\":2}}],[\"utils\",{\"1\":{\"257\":1}}],[\"util\",{\"1\":{\"73\":3,\"74\":4,\"110\":5,\"120\":2,\"123\":1,\"130\":2,\"140\":3,\"164\":1,\"165\":3,\"237\":4,\"238\":4,\"253\":1,\"254\":7,\"265\":2,\"277\":1}}],[\"uri\",{\"1\":{\"249\":3}}],[\"uriencoding>\",{\"1\":{\"201\":1}}],[\"urlencodedformentity\",{\"1\":{\"249\":1}}],[\"url=jdbc\",{\"1\":{\"162\":1,\"202\":1}}],[\"url\",{\"1\":{\"68\":3,\"79\":1,\"161\":2,\"166\":2,\"204\":2,\"206\":1,\"249\":2}}],[\"url>\",{\"1\":{\"15\":2}}],[\"uroot\",{\"1\":{\"53\":3}}],[\"updatefill\",{\"1\":{\"115\":1}}],[\"updatetime\",{\"1\":{\"114\":1,\"115\":1}}],[\"updater\",{\"1\":{\"114\":2,\"115\":2}}],[\"update\",{\"1\":{\"52\":1,\"114\":5,\"167\":2,\"222\":1,\"257\":2}}],[\"upload\",{\"1\":{\"12\":1}}],[\"using\",{\"1\":{\"141\":1}}],[\"usespringel\",{\"1\":{\"254\":1}}],[\"usessl=false\",{\"1\":{\"162\":1,\"202\":1}}],[\"useunicode=true\",{\"1\":{\"162\":1,\"202\":1}}],[\"use\",{\"1\":{\"52\":1,\"67\":1,\"68\":1}}],[\"userworddemo\",{\"1\":{\"254\":5}}],[\"user2\",{\"1\":{\"243\":2}}],[\"user1\",{\"1\":{\"243\":2}}],[\"userjsonstr1\",{\"1\":{\"243\":3}}],[\"userjsonstr\",{\"1\":{\"243\":3}}],[\"usercontroller\",{\"1\":{\"207\":1}}],[\"usermapper\",{\"1\":{\"164\":4,\"165\":3}}],[\"username=mysqlusername\",{\"1\":{\"202\":1}}],[\"username=root\",{\"1\":{\"162\":1}}],[\"username\",{\"1\":{\"161\":2,\"204\":2,\"254\":1}}],[\"userannotationargumentresolver\",{\"1\":{\"120\":1,\"129\":1,\"130\":1}}],[\"user在redis的hash表数据存在\",{\"1\":{\"74\":1}}],[\"userid\",{\"1\":{\"71\":6,\"73\":3,\"74\":4,\"128\":3}}],[\"user=mysql\",{\"1\":{\"59\":1}}],[\"user=\",{\"1\":{\"52\":1}}],[\"user\",{\"1\":{\"52\":5,\"61\":2,\"71\":9,\"74\":2,\"128\":5,\"129\":1,\"164\":3,\"165\":4,\"196\":1,\"207\":1,\"222\":4,\"243\":14}}],[\"usersmapper\",{\"1\":{\"165\":2}}],[\"userserviceimpl\",{\"1\":{\"165\":4}}],[\"userservice\",{\"1\":{\"165\":5}}],[\"usersession\",{\"1\":{\"128\":8,\"129\":4}}],[\"users\",{\"1\":{\"26\":1,\"167\":1,\"254\":2}}],[\"usr\",{\"1\":{\"47\":4,\"48\":1,\"53\":5,\"79\":3}}],[\"ui\",{\"1\":{\"21\":2,\"120\":2,\"130\":1}}],[\"ubuntu\",{\"1\":{\"5\":2}}],[\"ubuntu资源下载站\",{\"1\":{\"5\":1}}],[\"蓝奏云\",{\"1\":{\"7\":2}}],[\"蜂蜜浏览器\",{\"1\":{\"7\":1}}],[\"压缩软件\",{\"1\":{\"7\":1}}],[\"z\",{\"1\":{\"139\":2}}],[\"zunionstore\",{\"1\":{\"98\":1}}],[\"zincrby\",{\"1\":{\"99\":1}}],[\"zinterstore\",{\"1\":{\"98\":1}}],[\"zip\",{\"1\":{\"7\":2}}],[\"zlexcount\",{\"1\":{\"98\":1}}],[\"zcount\",{\"1\":{\"98\":1}}],[\"zcard\",{\"1\":{\"98\":1}}],[\"zremrangebyscore\",{\"1\":{\"98\":1}}],[\"zremrangebyrank\",{\"1\":{\"98\":1}}],[\"zremrangebylex\",{\"1\":{\"98\":1}}],[\"zrem\",{\"1\":{\"98\":1}}],[\"zrevrank\",{\"1\":{\"98\":1}}],[\"zrevrangebyscore\",{\"1\":{\"98\":1}}],[\"zrevrange\",{\"1\":{\"98\":1}}],[\"zrangebyscore\",{\"1\":{\"98\":1}}],[\"zrangebylex\",{\"1\":{\"98\":1}}],[\"zrange\",{\"1\":{\"98\":1}}],[\"zrank\",{\"1\":{\"98\":1}}],[\"zscan\",{\"1\":{\"98\":1}}],[\"zscore\",{\"1\":{\"98\":1}}],[\"zset\",{\"0\":{\"98\":1}}],[\"zadd\",{\"1\":{\"98\":1}}],[\"zxf\",{\"1\":{\"47\":1}}],[\"zh\",{\"1\":{\"4\":2,\"7\":3,\"11\":1,\"45\":1}}],[\"7代表星期六\",{\"1\":{\"147\":1}}],[\"70\",{\"1\":{\"71\":2}}],[\"7\",{\"1\":{\"7\":2,\"53\":2,\"244\":7}}],[\"v\",{\"1\":{\"237\":4}}],[\"v2\",{\"1\":{\"196\":1}}],[\"verify\",{\"1\":{\"257\":3}}],[\"verificationdata\",{\"1\":{\"237\":2,\"238\":1}}],[\"verificationhead\",{\"1\":{\"237\":2,\"238\":1}}],[\"version=\",{\"1\":{\"161\":1,\"164\":1,\"189\":1,\"196\":1,\"204\":1,\"205\":1,\"206\":2}}],[\"version>4\",{\"1\":{\"201\":1}}],[\"version>2\",{\"1\":{\"201\":1}}],[\"version>1\",{\"1\":{\"201\":5}}],[\"version>8\",{\"1\":{\"201\":1}}],[\"version>3\",{\"1\":{\"201\":2}}],[\"version>5\",{\"1\":{\"201\":2}}],[\"version>\",{\"1\":{\"118\":1,\"160\":7,\"186\":2,\"194\":4,\"201\":24,\"241\":1,\"248\":1,\"252\":3}}],[\"version\",{\"1\":{\"27\":1,\"67\":1,\"68\":3,\"118\":1,\"119\":1,\"194\":2,\"201\":10}}],[\"velocity\",{\"1\":{\"173\":1}}],[\"viewresolver\",{\"0\":{\"216\":1},\"1\":{\"216\":2}}],[\"view\",{\"1\":{\"129\":1,\"205\":1,\"216\":4}}],[\"virustotal\",{\"1\":{\"12\":2}}],[\"vlaue\",{\"1\":{\"85\":1}}],[\"value>classpath\",{\"1\":{\"206\":2}}],[\"value>\",{\"1\":{\"204\":1,\"206\":2}}],[\"value=\",{\"1\":{\"161\":4,\"196\":4,\"204\":7,\"205\":2}}],[\"values\",{\"1\":{\"110\":10,\"167\":1}}],[\"valueoperations\",{\"1\":{\"110\":9}}],[\"valueoperations<string\",{\"1\":{\"110\":1}}],[\"valueof\",{\"1\":{\"73\":5,\"74\":6}}],[\"value序列化\",{\"1\":{\"109\":1}}],[\"value记录\",{\"1\":{\"103\":1}}],[\"value设置到hash表的key中\",{\"1\":{\"96\":1}}],[\"value2\",{\"1\":{\"88\":2,\"96\":1}}],[\"value2会在value1前面\",{\"1\":{\"88\":1}}],[\"value值返回的索引位置与key的顺序一致\",{\"1\":{\"85\":1}}],[\"value1\",{\"1\":{\"85\":2,\"88\":2,\"96\":1}}],[\"value\",{\"1\":{\"84\":6,\"85\":3,\"86\":1,\"88\":4,\"90\":2,\"96\":2,\"103\":2,\"109\":1,\"110\":36,\"114\":4,\"140\":5,\"166\":1,\"181\":2,\"188\":6,\"207\":1,\"237\":4}}],[\"value数据库\",{\"1\":{\"78\":1}}],[\"validate\",{\"1\":{\"52\":3,\"61\":3}}],[\"variables\",{\"1\":{\"52\":1,\"61\":1}}],[\"var\",{\"1\":{\"52\":2}}],[\"vm\",{\"1\":{\"52\":1}}],[\"vue\",{\"1\":{\"22\":3}}],[\"vue折线图等\",{\"1\":{\"4\":1}}],[\"void\",{\"1\":{\"21\":2,\"74\":2,\"110\":22,\"115\":2,\"120\":2,\"130\":2,\"140\":1,\"146\":1,\"163\":1,\"165\":1,\"167\":1,\"187\":2,\"188\":5,\"195\":1,\"237\":2,\"238\":3,\"243\":1,\"244\":1,\"254\":1,\"257\":1,\"263\":1,\"264\":3,\"266\":1,\"272\":1,\"276\":1}}],[\"voidtools\",{\"1\":{\"7\":1}}],[\"vscode\",{\"0\":{\"9\":1}}],[\"jcp\",{\"1\":{\"206\":3}}],[\"jcache\",{\"1\":{\"173\":1}}],[\"junit\",{\"1\":{\"201\":1,\"254\":1}}],[\"junit4\",{\"1\":{\"172\":1}}],[\"jp\",{\"1\":{\"188\":5}}],[\"jpg\",{\"1\":{\"10\":2,\"254\":3}}],[\"jmx\",{\"1\":{\"173\":1}}],[\"jndi\",{\"1\":{\"173\":1}}],[\"jedis\",{\"1\":{\"151\":1}}],[\"jasperreports\",{\"1\":{\"173\":1}}],[\"jacksonannotationsinside\",{\"1\":{\"141\":2}}],[\"jackson\",{\"1\":{\"114\":1,\"140\":7,\"141\":2,\"201\":4}}],[\"javaee\",{\"1\":{\"173\":1,\"206\":3}}],[\"javamail\",{\"1\":{\"172\":1,\"173\":1}}],[\"javatype\",{\"1\":{\"167\":1}}],[\"java<\",{\"1\":{\"160\":1,\"194\":1,\"201\":1}}],[\"java对象转换为json字符串\",{\"1\":{\"243\":4}}],[\"java对象\",{\"1\":{\"154\":1}}],[\"javax\",{\"1\":{\"128\":2,\"257\":1}}],[\"java\",{\"0\":{\"282\":1},\"1\":{\"7\":1,\"73\":2,\"74\":3,\"110\":6,\"114\":2,\"115\":1,\"120\":2,\"123\":3,\"127\":1,\"130\":2,\"135\":1,\"140\":2,\"141\":4,\"154\":1,\"163\":2,\"164\":2,\"165\":4,\"172\":2,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"237\":5,\"238\":3,\"253\":4,\"254\":10,\"257\":5,\"265\":2,\"277\":1},\"2\":{\"24\":1,\"76\":1,\"112\":1,\"117\":1,\"122\":1,\"125\":1,\"132\":1,\"137\":1,\"143\":1,\"150\":1,\"153\":1,\"170\":1,\"198\":1,\"209\":1,\"230\":1,\"240\":1,\"246\":1,\"251\":1,\"256\":1,\"259\":1,\"268\":1,\"279\":1}}],[\"joinpoint\",{\"1\":{\"183\":2,\"188\":3}}],[\"join\",{\"1\":{\"36\":1,\"37\":1,\"38\":1,\"39\":1}}],[\"jstlview\",{\"1\":{\"216\":1}}],[\"jsonstring1\",{\"1\":{\"244\":3}}],[\"jsonstring2\",{\"1\":{\"244\":3}}],[\"jsonstring\",{\"1\":{\"244\":9}}],[\"jsonserialize\",{\"1\":{\"141\":2}}],[\"jsonserializer<\",{\"1\":{\"140\":1}}],[\"jsonserializer<string>\",{\"1\":{\"140\":1}}],[\"jsonserializer\",{\"1\":{\"140\":1}}],[\"jsonarray\",{\"1\":{\"244\":2}}],[\"jsonarraytest\",{\"1\":{\"244\":1}}],[\"jsonarray与java的list相互转换\",{\"0\":{\"244\":1}}],[\"json转换为java对象后\",{\"1\":{\"243\":4}}],[\"jsontest\",{\"1\":{\"243\":1}}],[\"json字符串与javaobject相互转换\",{\"0\":{\"243\":1}}],[\"json处理工具包\",{\"1\":{\"201\":1}}],[\"jsonmappingexception\",{\"1\":{\"140\":2}}],[\"jsongenerator\",{\"1\":{\"140\":2}}],[\"jsonobject\",{\"1\":{\"128\":2,\"237\":3,\"243\":2,\"244\":2}}],[\"jsonformat\",{\"1\":{\"114\":3}}],[\"jsonb\",{\"1\":{\"41\":1,\"42\":1}}],[\"jsonb操作符\",{\"0\":{\"41\":1}}],[\"json\",{\"1\":{\"41\":1,\"237\":9,\"243\":3,\"244\":2}}],[\"json和\",{\"0\":{\"41\":1}}],[\"json操作\",{\"0\":{\"40\":1}}],[\"js两个文件找不到\",{\"1\":{\"22\":1}}],[\"js\",{\"1\":{\"22\":3,\"120\":1}}],[\"jingxiang\",{\"1\":{\"15\":1}}],[\"jdk17以上与jdk8版本的导包路径不同\",{\"1\":{\"181\":1}}],[\"jdk6以上可用\",{\"1\":{\"181\":1}}],[\"jdk反编译软件\",{\"1\":{\"7\":1}}],[\"jdbcurl\",{\"1\":{\"196\":1}}],[\"jdbc<\",{\"1\":{\"194\":1,\"201\":1}}],[\"jdbctype\",{\"1\":{\"167\":1}}],[\"jdbc\",{\"1\":{\"161\":2,\"162\":1,\"166\":1,\"172\":1,\"196\":2,\"202\":1,\"204\":1}}],[\"jd\",{\"1\":{\"7\":1}}],[\"guava\",{\"1\":{\"173\":1}}],[\"guide\",{\"1\":{\"15\":1}}],[\"gui\",{\"1\":{\"7\":1,\"12\":1}}],[\"google\",{\"1\":{\"154\":1}}],[\"groupid>\",{\"1\":{\"118\":1,\"160\":7,\"186\":2,\"194\":4,\"201\":12,\"241\":1,\"248\":1,\"252\":6}}],[\"groups\",{\"1\":{\"104\":1}}],[\"group\",{\"1\":{\"104\":4}}],[\"groupname\",{\"1\":{\"104\":5,\"119\":1}}],[\"grep\",{\"1\":{\"52\":2}}],[\"greasyfork\",{\"1\":{\"11\":1}}],[\"gcc\",{\"1\":{\"79\":1}}],[\"globalexceptionhandler\",{\"1\":{\"123\":1}}],[\"global\",{\"1\":{\"52\":2,\"61\":2}}],[\"generatepublic\",{\"1\":{\"257\":2}}],[\"generateprivate\",{\"1\":{\"257\":2}}],[\"generatekeypair\",{\"1\":{\"257\":1}}],[\"generated\",{\"1\":{\"52\":1}}],[\"generator\",{\"1\":{\"257\":3}}],[\"general\",{\"1\":{\"159\":1}}],[\"gen\",{\"1\":{\"140\":4}}],[\"geohash\",{\"1\":{\"100\":2}}],[\"georadiusbymember\",{\"1\":{\"100\":1}}],[\"georadius\",{\"1\":{\"100\":1}}],[\"geodist\",{\"1\":{\"100\":1}}],[\"geopos\",{\"1\":{\"100\":1}}],[\"geoadd\",{\"1\":{\"100\":1}}],[\"geo\",{\"0\":{\"100\":1},\"1\":{\"100\":1}}],[\"getqchandler\",{\"1\":{\"277\":1}}],[\"getheight\",{\"1\":{\"275\":1}}],[\"getheadmap\",{\"1\":{\"237\":3}}],[\"getheader\",{\"1\":{\"128\":1}}],[\"getwidth\",{\"1\":{\"274\":1}}],[\"getlength\",{\"1\":{\"273\":1}}],[\"getbytes\",{\"1\":{\"257\":8}}],[\"getbindingresult\",{\"1\":{\"123\":1}}],[\"getpublic\",{\"1\":{\"257\":1}}],[\"getpublickey\",{\"1\":{\"257\":3}}],[\"getprivate\",{\"1\":{\"257\":1}}],[\"getprivatekey\",{\"1\":{\"257\":3}}],[\"getparameterannotation\",{\"1\":{\"129\":1}}],[\"getparametertype\",{\"1\":{\"129\":1}}],[\"getinstance\",{\"1\":{\"257\":7}}],[\"getinputstream\",{\"1\":{\"254\":4}}],[\"getencoded\",{\"1\":{\"257\":4}}],[\"getentity\",{\"1\":{\"249\":2}}],[\"getexpire\",{\"1\":{\"110\":1}}],[\"getexamtime\",{\"1\":{\"74\":3}}],[\"getexamid\",{\"1\":{\"74\":6}}],[\"getfieldnamemap\",{\"1\":{\"237\":1}}],[\"getfieldnames\",{\"1\":{\"237\":1,\"238\":1}}],[\"getfielderror\",{\"1\":{\"123\":1}}],[\"getdefaultqchandler\",{\"1\":{\"277\":1}}],[\"getdefaultmessage\",{\"1\":{\"123\":1}}],[\"getdemolist\",{\"1\":{\"254\":2}}],[\"getdeclaredfields\",{\"1\":{\"237\":3}}],[\"getvalue\",{\"1\":{\"237\":1}}],[\"getkeypair\",{\"1\":{\"257\":2}}],[\"getkey\",{\"1\":{\"237\":1}}],[\"getname\",{\"1\":{\"188\":1,\"237\":6}}],[\"getmapping\",{\"1\":{\"207\":1,\"222\":1}}],[\"getmapper\",{\"1\":{\"165\":1}}],[\"getmessage\",{\"1\":{\"123\":5,\"188\":1}}],[\"getuser\",{\"1\":{\"165\":3}}],[\"getuserid\",{\"1\":{\"74\":3,\"128\":1}}],[\"getrowindex\",{\"1\":{\"237\":1}}],[\"getresourceasreader\",{\"1\":{\"163\":1}}],[\"getrawclass\",{\"1\":{\"140\":1}}],[\"getrange\",{\"1\":{\"86\":1}}],[\"getargs\",{\"1\":{\"188\":1}}],[\"getannotation\",{\"1\":{\"140\":1,\"237\":3}}],[\"getattribute\",{\"1\":{\"129\":1}}],[\"gettype\",{\"1\":{\"140\":1}}],[\"getter\",{\"1\":{\"135\":2,\"238\":2}}],[\"gettime\",{\"1\":{\"110\":1}}],[\"getcode\",{\"1\":{\"249\":2}}],[\"getconnection\",{\"1\":{\"110\":1}}],[\"getconnectionfactory\",{\"1\":{\"110\":1}}],[\"getclazz\",{\"1\":{\"237\":2,\"238\":1}}],[\"getclass\",{\"1\":{\"123\":2}}],[\"getshape\",{\"1\":{\"265\":1,\"266\":1}}],[\"getstring\",{\"1\":{\"237\":2}}],[\"getstringvalue\",{\"1\":{\"237\":2}}],[\"getsignature\",{\"1\":{\"188\":2}}],[\"getsqlsession\",{\"1\":{\"163\":1,\"165\":1}}],[\"getset\",{\"1\":{\"84\":1}}],[\"getscore\",{\"1\":{\"74\":5}}],[\"getsortscore\",{\"1\":{\"73\":2,\"74\":1}}],[\"get\",{\"1\":{\"71\":1,\"74\":6,\"84\":2,\"110\":3,\"115\":4,\"128\":1,\"163\":2,\"237\":2,\"249\":3,\"277\":3}}],[\"geekuninstaller\",{\"1\":{\"7\":1}}],[\"geek\",{\"1\":{\"7\":1}}],[\"gz\",{\"1\":{\"47\":2,\"79\":1}}],[\"gitee文档\",{\"1\":{\"241\":1}}],[\"gitee\",{\"1\":{\"7\":2,\"241\":1}}],[\"github文档\",{\"1\":{\"241\":1}}],[\"github\",{\"1\":{\"4\":4,\"7\":7,\"64\":1,\"68\":1,\"118\":1,\"119\":1,\"154\":1,\"201\":2,\"204\":1,\"241\":1,\"252\":1}}],[\"github中的fastjson2文档\",{\"1\":{\"4\":1}}],[\"软件病毒检测\",{\"0\":{\"12\":1}}],[\"软件\",{\"0\":{\"7\":1}}],[\"软件收集\",{\"0\":{\"6\":1}}],[\"pkcs8encodedkeyspec\",{\"1\":{\"257\":5}}],[\"pkgs\",{\"1\":{\"5\":1}}],[\"pjp\",{\"1\":{\"188\":2}}],[\"phone\",{\"1\":{\"139\":1}}],[\"p>\",{\"1\":{\"114\":2}}],[\"personserviceimpl\",{\"1\":{\"187\":1,\"195\":1}}],[\"personservice\",{\"1\":{\"187\":2,\"195\":2}}],[\"persist\",{\"1\":{\"110\":2}}],[\"perl\",{\"1\":{\"47\":1}}],[\"pfmerge\",{\"1\":{\"101\":1}}],[\"pfcount\",{\"1\":{\"101\":1}}],[\"pfadd\",{\"1\":{\"101\":1}}],[\"pivot\",{\"1\":{\"88\":1,\"110\":3}}],[\"pictures\",{\"1\":{\"254\":6}}],[\"picturerenderdata>\",{\"1\":{\"254\":2}}],[\"picturerenderdata>>\",{\"1\":{\"254\":2}}],[\"picturerenderdata\",{\"1\":{\"254\":3}}],[\"picture\",{\"1\":{\"10\":1}}],[\"p\",{\"1\":{\"79\":1,\"80\":1}}],[\"pulldata\",{\"1\":{\"146\":1}}],[\"pulldatatask\",{\"1\":{\"146\":1}}],[\"pub\",{\"1\":{\"102\":1}}],[\"publickey\",{\"1\":{\"257\":15}}],[\"public\",{\"1\":{\"21\":3,\"33\":1,\"34\":1,\"73\":3,\"74\":7,\"109\":2,\"110\":58,\"114\":1,\"115\":3,\"119\":2,\"120\":3,\"123\":6,\"127\":1,\"128\":8,\"129\":3,\"130\":3,\"134\":3,\"135\":8,\"139\":3,\"140\":3,\"141\":1,\"146\":2,\"161\":1,\"163\":3,\"164\":2,\"165\":5,\"187\":3,\"188\":6,\"195\":2,\"207\":2,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"237\":8,\"238\":5,\"243\":3,\"244\":1,\"249\":3,\"253\":2,\"254\":3,\"257\":9,\"263\":2,\"264\":9,\"265\":2,\"266\":2,\"271\":1,\"272\":3,\"273\":2,\"274\":2,\"275\":2,\"276\":1,\"277\":3}}],[\"public<\",{\"1\":{\"15\":1}}],[\"putmapping\",{\"1\":{\"222\":1}}],[\"putall\",{\"1\":{\"110\":1}}],[\"put\",{\"1\":{\"73\":5,\"74\":1,\"110\":1,\"237\":4,\"254\":3}}],[\"protected\",{\"1\":{\"272\":2}}],[\"product\",{\"1\":{\"271\":5,\"272\":10,\"273\":7,\"274\":6,\"275\":6,\"276\":5,\"277\":2}}],[\"project\",{\"1\":{\"201\":1}}],[\"projectlombok<\",{\"1\":{\"160\":1,\"201\":1}}],[\"propagation事务的传播\",{\"1\":{\"195\":1}}],[\"propagation\",{\"1\":{\"191\":7,\"195\":7}}],[\"properties>\",{\"1\":{\"201\":1}}],[\"properties\",{\"1\":{\"161\":1,\"166\":2,\"202\":1,\"204\":2}}],[\"property>\",{\"1\":{\"204\":2}}],[\"property\",{\"1\":{\"140\":5,\"166\":1,\"167\":1,\"204\":1}}],[\"proceed\",{\"1\":{\"188\":3}}],[\"proceedingjoinpoint\",{\"1\":{\"188\":3}}],[\"prov\",{\"1\":{\"140\":3}}],[\"proxy\",{\"1\":{\"68\":1,\"183\":1,\"189\":1}}],[\"prehandle\",{\"0\":{\"225\":1},\"1\":{\"128\":2,\"227\":1,\"228\":1}}],[\"prefixnomasklen\",{\"1\":{\"140\":2,\"141\":1}}],[\"prefix\",{\"1\":{\"66\":1,\"205\":1}}],[\"print\",{\"1\":{\"257\":2}}],[\"println\",{\"1\":{\"165\":1,\"187\":1,\"188\":11,\"195\":1,\"257\":4,\"264\":3,\"273\":1,\"274\":1,\"275\":1,\"276\":2}}],[\"printstacktrace\",{\"1\":{\"123\":1,\"163\":1}}],[\"printstream\",{\"1\":{\"123\":2}}],[\"price\",{\"1\":{\"128\":2}}],[\"privacyserializer\",{\"1\":{\"140\":2,\"141\":2}}],[\"privacyencrypt\",{\"1\":{\"140\":8,\"141\":1}}],[\"privacytypeenum\",{\"1\":{\"139\":2,\"140\":5,\"141\":2}}],[\"privatekey\",{\"1\":{\"257\":15}}],[\"private\",{\"1\":{\"21\":2,\"73\":5,\"74\":3,\"114\":6,\"119\":1,\"120\":3,\"130\":3,\"135\":4,\"140\":1,\"163\":2,\"188\":3,\"238\":2,\"254\":6,\"257\":3,\"271\":4}}],[\"privileges\",{\"1\":{\"52\":1}}],[\"p`mysql密码`\",{\"1\":{\"53\":3}}],[\"placeholder\",{\"1\":{\"204\":1}}],[\"plan\",{\"1\":{\"47\":1}}],[\"plugin>\",{\"1\":{\"201\":1}}],[\"plugin<\",{\"1\":{\"201\":1}}],[\"plugins>\",{\"1\":{\"201\":1}}],[\"plugins\",{\"1\":{\"119\":1,\"204\":1}}],[\"plugin\",{\"1\":{\"52\":1,\"254\":1}}],[\"ps\",{\"1\":{\"27\":1,\"66\":1,\"79\":1,\"115\":1,\"148\":1,\"158\":1,\"161\":1,\"162\":1,\"165\":1,\"167\":1,\"182\":1,\"207\":1,\"235\":1,\"257\":1,\"265\":1}}],[\"pageinterceptor\",{\"1\":{\"204\":1}}],[\"pagehelper<\",{\"1\":{\"201\":1}}],[\"pagehelper\",{\"1\":{\"201\":2,\"204\":1}}],[\"packaging>\",{\"1\":{\"201\":1}}],[\"packaging\",{\"1\":{\"201\":1}}],[\"package=\",{\"1\":{\"189\":1,\"204\":1,\"205\":1}}],[\"package\",{\"1\":{\"73\":1,\"74\":1,\"166\":1,\"189\":1,\"271\":1,\"272\":1,\"273\":1}}],[\"pattern>\",{\"1\":{\"206\":2}}],[\"pattern\",{\"1\":{\"93\":1,\"96\":1,\"98\":1,\"110\":3,\"114\":2,\"184\":12}}],[\"path>\",{\"1\":{\"201\":1}}],[\"paths\",{\"1\":{\"119\":1}}],[\"pathselectors\",{\"1\":{\"119\":2}}],[\"path中添加\",{\"1\":{\"66\":1}}],[\"path=\",{\"1\":{\"53\":1,\"228\":2}}],[\"path||\",{\"1\":{\"38\":1}}],[\"path\",{\"1\":{\"21\":2,\"27\":6,\"38\":2,\"39\":3,\"68\":1,\"120\":3,\"130\":2}}],[\"parm\",{\"1\":{\"167\":2}}],[\"param>\",{\"1\":{\"206\":4}}],[\"parametertype属性需要注意\",{\"1\":{\"167\":1}}],[\"parametertype=\",{\"1\":{\"167\":2}}],[\"parametertype\",{\"1\":{\"167\":3}}],[\"parameter\",{\"1\":{\"127\":1}}],[\"param\",{\"1\":{\"74\":3,\"110\":63,\"129\":5,\"135\":4,\"164\":2,\"165\":1,\"184\":2,\"206\":4,\"237\":14,\"249\":2,\"253\":3,\"257\":11,\"263\":1,\"272\":3,\"277\":1}}],[\"parsearray\",{\"1\":{\"244\":2}}],[\"parseobject\",{\"1\":{\"128\":1,\"237\":2,\"243\":4,\"244\":2}}],[\"parseint\",{\"1\":{\"74\":1}}],[\"parsedouble\",{\"1\":{\"74\":3}}],[\"parse\",{\"1\":{\"47\":1}}],[\"parent\",{\"1\":{\"27\":12,\"36\":3,\"37\":3,\"38\":3,\"39\":3}}],[\"password=mysqluserpwd\",{\"1\":{\"202\":1}}],[\"password=root\",{\"1\":{\"162\":1}}],[\"password\",{\"1\":{\"52\":6,\"61\":3,\"161\":2,\"167\":2,\"196\":1,\"204\":2}}],[\"pass\",{\"1\":{\"47\":1}}],[\"pan666\",{\"1\":{\"13\":1}}],[\"poi<\",{\"1\":{\"252\":3}}],[\"poi\",{\"0\":{\"252\":1},\"1\":{\"252\":3,\"253\":2,\"254\":5}}],[\"pointcut2\",{\"1\":{\"188\":2}}],[\"pointcut\",{\"1\":{\"183\":1,\"188\":11}}],[\"port>\",{\"1\":{\"201\":1}}],[\"port\",{\"1\":{\"162\":1}}],[\"port=3306\",{\"1\":{\"57\":1}}],[\"pojo\",{\"1\":{\"154\":1}}],[\"popvalue\",{\"1\":{\"110\":1}}],[\"pop\",{\"1\":{\"110\":3}}],[\"policy=0\",{\"1\":{\"52\":1,\"61\":1}}],[\"post\",{\"1\":{\"249\":3}}],[\"posthandle\",{\"0\":{\"226\":1},\"1\":{\"228\":1}}],[\"postmapping\",{\"1\":{\"222\":1}}],[\"postgresql\",{\"0\":{\"31\":1}}],[\"postimages\",{\"1\":{\"10\":1}}],[\"postimages图床\",{\"1\":{\"10\":1}}],[\"pooled\",{\"1\":{\"161\":2}}],[\"pool连接池\",{\"1\":{\"151\":1}}],[\"pool\",{\"1\":{\"5\":1,\"204\":1}}],[\"png\",{\"1\":{\"9\":1}}],[\"pdfview\",{\"1\":{\"216\":1}}],[\"pdf\",{\"1\":{\"7\":1}}],[\"pdfgear\",{\"1\":{\"7\":2}}],[\"rsa验签\",{\"1\":{\"257\":1}}],[\"rsa签名\",{\"1\":{\"257\":1}}],[\"rsa解密\",{\"1\":{\"257\":2}}],[\"rsa\",{\"1\":{\"257\":7}}],[\"rsa最大解密密文大小\",{\"1\":{\"257\":1}}],[\"rsa最大加密明文大小\",{\"1\":{\"257\":1}}],[\"rsautil\",{\"1\":{\"257\":1}}],[\"rsa加密\",{\"0\":{\"257\":1},\"1\":{\"257\":2}}],[\"rsaexception\",{\"1\":{\"123\":5,\"257\":3}}],[\"run\",{\"1\":{\"207\":1}}],[\"runtime\",{\"1\":{\"127\":1,\"141\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1}}],[\"runtimeexception\",{\"1\":{\"110\":1,\"123\":1,\"237\":4,\"257\":1,\"277\":1}}],[\"rowpolicy\",{\"1\":{\"254\":3}}],[\"rollbackfor\",{\"1\":{\"195\":1}}],[\"rollbackfor=\",{\"1\":{\"195\":1}}],[\"root\",{\"1\":{\"52\":5,\"61\":2,\"68\":1}}],[\"r\",{\"1\":{\"154\":1}}],[\"rasexception\",{\"1\":{\"123\":1}}],[\"range\",{\"1\":{\"110\":2}}],[\"randommember\",{\"1\":{\"110\":2}}],[\"randommembers\",{\"1\":{\"110\":2}}],[\"ranksortkey\",{\"1\":{\"74\":3}}],[\"rankputdata\",{\"1\":{\"74\":4}}],[\"rankkey\",{\"1\":{\"74\":5}}],[\"rank\",{\"1\":{\"74\":20}}],[\"rawkey\",{\"1\":{\"110\":2}}],[\"radius\",{\"1\":{\"100\":2}}],[\"rrem\",{\"1\":{\"90\":1}}],[\"rightpop\",{\"1\":{\"110\":4}}],[\"rightpushifpresent\",{\"1\":{\"110\":2}}],[\"rightpushall\",{\"1\":{\"110\":2}}],[\"rightpush\",{\"1\":{\"74\":1,\"110\":4}}],[\"right\",{\"1\":{\"88\":1}}],[\"rdb\",{\"1\":{\"78\":1}}],[\"rpoplpush\",{\"1\":{\"90\":1}}],[\"rpop\",{\"1\":{\"88\":1,\"90\":2}}],[\"rpushx\",{\"1\":{\"88\":2}}],[\"rpush\",{\"1\":{\"71\":1,\"88\":2}}],[\"rpm\",{\"1\":{\"5\":1,\"45\":2,\"51\":4,\"52\":4}}],[\"rf\",{\"1\":{\"53\":1}}],[\"rectangle\",{\"1\":{\"263\":1,\"264\":3,\"265\":1}}],[\"recursive\",{\"1\":{\"27\":4,\"36\":1,\"37\":1,\"38\":1,\"39\":1}}],[\"render\",{\"1\":{\"253\":1}}],[\"reasonable\",{\"1\":{\"204\":1}}],[\"readlistener<t>\",{\"1\":{\"238\":1}}],[\"readlistener\",{\"1\":{\"238\":1}}],[\"readrowholder\",{\"1\":{\"237\":1}}],[\"readworkbookholder\",{\"1\":{\"237\":2,\"238\":1}}],[\"readcelldata<\",{\"1\":{\"237\":2,\"238\":1}}],[\"readcelldata\",{\"1\":{\"237\":1,\"238\":1}}],[\"readonly\",{\"1\":{\"195\":1}}],[\"reader\",{\"1\":{\"163\":5}}],[\"read\",{\"1\":{\"53\":2,\"190\":4,\"238\":1}}],[\"reflect\",{\"1\":{\"237\":1}}],[\"reflection\",{\"1\":{\"115\":1}}],[\"ref=\",{\"1\":{\"196\":1,\"204\":2}}],[\"refid\",{\"1\":{\"167\":1}}],[\"reource\",{\"1\":{\"166\":1}}],[\"release<\",{\"1\":{\"160\":3,\"186\":2,\"201\":1}}],[\"releases\",{\"1\":{\"7\":4,\"64\":1}}],[\"relation\",{\"1\":{\"154\":1}}],[\"repeatable\",{\"1\":{\"190\":1}}],[\"replaceall\",{\"1\":{\"140\":2}}],[\"replacement\",{\"1\":{\"139\":4,\"140\":3,\"141\":1}}],[\"repo\",{\"1\":{\"15\":1}}],[\"repository\",{\"1\":{\"3\":1,\"15\":2,\"66\":1,\"182\":2}}],[\"ret\",{\"1\":{\"184\":2}}],[\"retentionpolicy\",{\"1\":{\"127\":1,\"141\":2,\"233\":1,\"234\":1,\"235\":1,\"236\":1}}],[\"retention\",{\"1\":{\"127\":1,\"141\":2,\"233\":1,\"234\":1,\"235\":1,\"236\":1}}],[\"returning\",{\"1\":{\"188\":3}}],[\"return\",{\"1\":{\"73\":2,\"74\":5,\"109\":1,\"110\":44,\"119\":2,\"123\":3,\"128\":1,\"129\":5,\"135\":8,\"140\":6,\"163\":2,\"165\":2,\"188\":2,\"207\":1,\"237\":16,\"238\":1,\"249\":8,\"253\":2,\"254\":2,\"257\":10,\"263\":1,\"264\":3,\"265\":1,\"272\":4,\"273\":2,\"274\":2,\"275\":2,\"277\":4}}],[\"restcontroller\",{\"0\":{\"221\":1}}],[\"restcontrolleradvice\",{\"1\":{\"123\":2}}],[\"res\",{\"1\":{\"188\":1}}],[\"res=\",{\"1\":{\"188\":1}}],[\"result=\",{\"1\":{\"188\":1}}],[\"result=false\",{\"1\":{\"188\":1}}],[\"result\",{\"1\":{\"167\":2,\"188\":5,\"257\":2,\"265\":3}}],[\"resultmaper的返回类型\",{\"1\":{\"167\":1}}],[\"resultmap\",{\"1\":{\"167\":5}}],[\"resulttype\",{\"1\":{\"167\":3}}],[\"resulttype=\",{\"1\":{\"164\":1}}],[\"resultcode\",{\"1\":{\"123\":3,\"134\":2,\"135\":7}}],[\"responsebo<>\",{\"1\":{\"135\":1}}],[\"responsebo<t>\",{\"1\":{\"135\":7}}],[\"responsebo<\",{\"1\":{\"123\":3,\"135\":2}}],[\"responsebody\",{\"0\":{\"220\":1},\"1\":{\"123\":2,\"207\":1,\"219\":1,\"221\":1}}],[\"responsebo\",{\"1\":{\"123\":4,\"135\":1}}],[\"response\",{\"1\":{\"123\":2,\"128\":1,\"249\":6}}],[\"resolveargument\",{\"1\":{\"129\":2}}],[\"resolvers\",{\"1\":{\"130\":2}}],[\"resolver\",{\"1\":{\"120\":1}}],[\"resource\",{\"1\":{\"166\":1,\"181\":2}}],[\"resource=\",{\"1\":{\"161\":1}}],[\"resource文件夹中创建\",{\"1\":{\"161\":1}}],[\"resourcehandlerregistry\",{\"1\":{\"21\":1,\"120\":2,\"130\":1}}],[\"resources\",{\"0\":{\"156\":1},\"1\":{\"21\":4,\"120\":4,\"130\":2,\"156\":1,\"163\":2,\"205\":1}}],[\"requestmethod\",{\"1\":{\"222\":2}}],[\"requestmapping\",{\"0\":{\"222\":1},\"1\":{\"207\":1,\"222\":1}}],[\"requestattributes\",{\"1\":{\"129\":2}}],[\"request\",{\"1\":{\"128\":5,\"129\":3}}],[\"requesthandlerselectors\",{\"1\":{\"119\":2}}],[\"requires\",{\"1\":{\"191\":1,\"195\":1}}],[\"required\",{\"1\":{\"191\":1,\"195\":2}}],[\"requiredargsconstructor\",{\"1\":{\"21\":1,\"120\":2,\"130\":2,\"146\":1,\"207\":1}}],[\"requirenonnull\",{\"1\":{\"123\":1,\"265\":1}}],[\"remove\",{\"1\":{\"110\":2,\"163\":1}}],[\"remote\",{\"1\":{\"78\":1}}],[\"reids\",{\"1\":{\"79\":1}}],[\"rediskey\",{\"1\":{\"110\":3}}],[\"redisserializer<string>\",{\"1\":{\"109\":1}}],[\"redisserializer\",{\"1\":{\"109\":6}}],[\"redisscore\",{\"1\":{\"74\":3}}],[\"redistemplate<>\",{\"1\":{\"109\":1}}],[\"redistemplate<string\",{\"1\":{\"109\":2,\"110\":2}}],[\"redistemplate\",{\"1\":{\"109\":2,\"110\":20}}],[\"redisconfig\",{\"1\":{\"109\":1}}],[\"redisconfigbean配置\",{\"0\":{\"109\":1}}],[\"redisconnectionfactory\",{\"1\":{\"109\":2,\"110\":2}}],[\"redis工具类\",{\"0\":{\"108\":1}}],[\"redis工具类不会写的可以去看redisutil工具类\",{\"1\":{\"72\":1}}],[\"redis4\",{\"1\":{\"96\":1}}],[\"redis是将所有的数据全部放在内存中的\",{\"1\":{\"81\":1}}],[\"redis为什么单线程还很快\",{\"1\":{\"81\":1}}],[\"redis默认存在16个数据库\",{\"1\":{\"81\":1}}],[\"redis默认不是后台启动的\",{\"1\":{\"79\":1}}],[\"redis命令参数\",{\"1\":{\"80\":1}}],[\"redis的默认安装路径\",{\"1\":{\"79\":1}}],[\"redis推荐都是再linux服务器上搭建的\",{\"1\":{\"78\":1}}],[\"redis中需要push的数据\",{\"1\":{\"74\":1}}],[\"redisexamuser\",{\"1\":{\"74\":7}}],[\"redisutil工具类\",{\"0\":{\"110\":1}}],[\"redisutil\",{\"1\":{\"74\":15,\"110\":7,\"128\":1}}],[\"redis\",{\"0\":{\"77\":1,\"83\":1,\"288\":1},\"1\":{\"74\":3,\"78\":5,\"79\":8,\"80\":3,\"81\":1,\"100\":2,\"101\":2,\"102\":6,\"105\":1,\"109\":4,\"110\":3,\"128\":1},\"2\":{\"75\":1,\"106\":1,\"107\":1,\"111\":1,\"152\":1}}],[\"redisrankdto\",{\"1\":{\"73\":1,\"74\":3}}],[\"redis设计实时排行榜\",{\"0\":{\"70\":1}}],[\"regex\",{\"1\":{\"139\":4,\"140\":3,\"141\":1}}],[\"region\",{\"1\":{\"110\":4,\"118\":1}}],[\"registry\",{\"1\":{\"21\":6,\"66\":2,\"120\":7,\"130\":2}}],[\"regclass\",{\"1\":{\"34\":2}}],[\"lw\",{\"1\":{\"148\":1}}],[\"lrem\",{\"1\":{\"90\":1}}],[\"lremove\",{\"1\":{\"74\":1}}],[\"lrange\",{\"1\":{\"89\":1}}],[\"lset\",{\"1\":{\"88\":1}}],[\"ls查看\",{\"1\":{\"66\":1}}],[\"llen\",{\"1\":{\"88\":1}}],[\"lpop\",{\"1\":{\"88\":1,\"90\":2}}],[\"lpushx\",{\"1\":{\"88\":2}}],[\"lpush\",{\"1\":{\"88\":4}}],[\"latitude\",{\"1\":{\"100\":3}}],[\"latest\",{\"1\":{\"78\":1}}],[\"lang\",{\"1\":{\"127\":1,\"141\":4,\"188\":3,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"237\":1}}],[\"lang=zh\",{\"1\":{\"11\":1}}],[\"language\",{\"1\":{\"7\":1,\"173\":1}}],[\"lanzouo\",{\"1\":{\"7\":2}}],[\"l\",{\"1\":{\"53\":1,\"148\":1}}],[\"ltrim\",{\"1\":{\"92\":1}}],[\"lt\",{\"1\":{\"53\":1}}],[\"lengthqchandler\",{\"1\":{\"271\":1,\"273\":1,\"276\":6,\"277\":2}}],[\"length\",{\"1\":{\"188\":1,\"237\":2,\"257\":4,\"271\":1}}],[\"length=1\",{\"1\":{\"52\":1,\"61\":1}}],[\"lettuce\",{\"1\":{\"151\":1}}],[\"letterlike\",{\"1\":{\"11\":1}}],[\"leftpop\",{\"1\":{\"110\":4}}],[\"leftpushall\",{\"1\":{\"110\":2}}],[\"leftpush\",{\"1\":{\"110\":4}}],[\"left\",{\"1\":{\"88\":1}}],[\"ln\",{\"1\":{\"47\":2}}],[\"lf6\",{\"1\":{\"22\":2}}],[\"load\",{\"1\":{\"265\":1}}],[\"looprowtablerenderpolicy\",{\"1\":{\"254\":3}}],[\"location=\",{\"1\":{\"204\":1,\"205\":1}}],[\"localimgpath\",{\"1\":{\"254\":2}}],[\"localdatetime\",{\"1\":{\"114\":3,\"115\":3}}],[\"localhost\",{\"1\":{\"52\":3,\"61\":2,\"80\":1}}],[\"local\",{\"1\":{\"47\":2,\"53\":5,\"79\":3,\"115\":5,\"128\":1,\"163\":5,\"206\":1}}],[\"longitude\",{\"1\":{\"100\":3}}],[\"long\",{\"1\":{\"74\":1,\"110\":19,\"114\":1,\"128\":1}}],[\"log4j\",{\"1\":{\"201\":1}}],[\"logs\",{\"1\":{\"57\":1}}],[\"log=\",{\"1\":{\"53\":1}}],[\"log\",{\"1\":{\"52\":4,\"53\":2,\"57\":1,\"123\":4,\"128\":2,\"129\":1,\"243\":4,\"244\":6,\"249\":2}}],[\"loginname\",{\"1\":{\"167\":2}}],[\"login\",{\"1\":{\"21\":1,\"120\":1,\"130\":1}}],[\"lombok\",{\"1\":{\"19\":2,\"73\":4,\"114\":2,\"115\":1,\"120\":1,\"123\":1,\"128\":1,\"129\":1,\"130\":1,\"135\":1,\"140\":3,\"146\":2,\"160\":1,\"201\":4,\"207\":1,\"238\":1,\"254\":2,\"271\":2}}],[\"lombok错误\",{\"0\":{\"18\":1}}],[\"limit\",{\"1\":{\"98\":2}}],[\"list2\",{\"1\":{\"244\":2}}],[\"list1\",{\"1\":{\"244\":2}}],[\"listener>\",{\"1\":{\"206\":1}}],[\"listener\",{\"1\":{\"206\":1,\"238\":1}}],[\"listlength\",{\"1\":{\"110\":1}}],[\"listkey\",{\"1\":{\"110\":10}}],[\"list类型\",{\"1\":{\"110\":2}}],[\"listoperations\",{\"1\":{\"110\":13}}],[\"listoperations<string\",{\"1\":{\"110\":1}}],[\"list<qchandler>\",{\"1\":{\"277\":1}}],[\"list<basicnamevaluepair>\",{\"1\":{\"249\":1}}],[\"list<t>\",{\"1\":{\"238\":2}}],[\"list<integer>\",{\"1\":{\"167\":1,\"244\":2}}],[\"list<userworddemo>\",{\"1\":{\"254\":3}}],[\"list<users>\",{\"1\":{\"167\":1}}],[\"list<user>\",{\"1\":{\"164\":1,\"165\":3}}],[\"list<handlermethodargumentresolver>\",{\"1\":{\"130\":1}}],[\"list<map<string\",{\"1\":{\"74\":2,\"254\":2}}],[\"list<map\",{\"1\":{\"74\":1}}],[\"list<string>>\",{\"1\":{\"237\":2}}],[\"list<string>\",{\"1\":{\"21\":1,\"74\":3,\"110\":10,\"120\":1,\"130\":1,\"237\":4,\"238\":1,\"254\":1}}],[\"list\",{\"0\":{\"88\":1},\"1\":{\"67\":2,\"68\":3,\"74\":4,\"110\":1,\"120\":1,\"130\":1,\"164\":1,\"165\":2,\"167\":4,\"237\":7,\"238\":1,\"244\":8,\"254\":2,\"277\":1}}],[\"like\",{\"1\":{\"52\":1,\"61\":1}}],[\"libs\",{\"1\":{\"51\":1,\"52\":1}}],[\"libssl\",{\"1\":{\"47\":2}}],[\"libtinfo\",{\"1\":{\"48\":2}}],[\"libcrypto\",{\"1\":{\"47\":2}}],[\"lib64\",{\"1\":{\"47\":4,\"48\":1}}],[\"lindex\",{\"1\":{\"89\":1}}],[\"linsert\",{\"1\":{\"88\":1}}],[\"linux安装\",{\"0\":{\"79\":1}}],[\"linux\",{\"0\":{\"285\":1},\"2\":{\"49\":1,\"54\":1}}],[\"lingma\",{\"1\":{\"8\":1}}],[\"line\",{\"1\":{\"4\":1}}],[\"links\",{\"1\":{\"4\":1}}],[\"lky\",{\"1\":{\"7\":2}}],[\"lunix资源下载站\",{\"0\":{\"5\":1}}],[\"iuserservice\",{\"1\":{\"184\":1}}],[\"iuserservice+\",{\"1\":{\"184\":1}}],[\"i18n\",{\"1\":{\"176\":1}}],[\"item=\",{\"1\":{\"167\":1}}],[\"item\",{\"1\":{\"167\":1,\"277\":5}}],[\"ip\",{\"1\":{\"162\":1,\"202\":1}}],[\"ico\",{\"1\":{\"120\":1}}],[\"ibatis\",{\"1\":{\"115\":1,\"154\":3,\"163\":4,\"164\":1}}],[\"i++\",{\"1\":{\"74\":1,\"237\":1,\"254\":1,\"257\":2}}],[\"i\",{\"1\":{\"74\":4,\"237\":4,\"254\":3,\"257\":4}}],[\"ivh\",{\"1\":{\"52\":1}}],[\"if>\",{\"1\":{\"164\":1}}],[\"if\",{\"1\":{\"28\":1,\"53\":3,\"74\":5,\"110\":1,\"115\":2,\"128\":1,\"129\":1,\"140\":6,\"163\":2,\"188\":2,\"237\":19,\"238\":1,\"249\":2,\"257\":2,\"265\":1,\"272\":1,\"273\":1,\"274\":1,\"275\":1,\"277\":2}}],[\"img1\",{\"1\":{\"254\":2}}],[\"imglist\",{\"1\":{\"254\":6}}],[\"img\",{\"1\":{\"254\":1}}],[\"imgurllist\",{\"1\":{\"254\":1}}],[\"imgurl\",{\"1\":{\"254\":1}}],[\"imgse\",{\"1\":{\"10\":1}}],[\"import\",{\"1\":{\"73\":7,\"74\":7,\"109\":6,\"110\":10,\"114\":8,\"115\":5,\"119\":12,\"120\":11,\"123\":12,\"127\":1,\"128\":7,\"129\":8,\"130\":8,\"135\":2,\"140\":15,\"141\":8,\"146\":4,\"163\":6,\"164\":3,\"165\":6,\"188\":4,\"195\":4,\"207\":3,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"237\":14,\"238\":8,\"253\":6,\"254\":20,\"257\":7,\"265\":2,\"271\":5,\"272\":1,\"273\":1,\"274\":1,\"275\":1,\"277\":3}}],[\"implements\",{\"1\":{\"21\":1,\"114\":1,\"115\":1,\"120\":1,\"128\":1,\"129\":1,\"130\":1,\"135\":1,\"140\":1,\"165\":1,\"187\":1,\"195\":1,\"238\":1,\"264\":3}}],[\"id查询\",{\"1\":{\"165\":1}}],[\"id=2\",{\"1\":{\"243\":2}}],[\"id=\",{\"1\":{\"161\":1,\"164\":1,\"167\":1,\"196\":2,\"204\":4,\"205\":1,\"228\":2}}],[\"idea中需要创建\",{\"1\":{\"206\":1}}],[\"idea\",{\"1\":{\"166\":1,\"207\":1}}],[\"idea插件收集\",{\"0\":{\"8\":1}}],[\"identified\",{\"1\":{\"52\":2,\"61\":2}}],[\"id\",{\"1\":{\"27\":28,\"34\":6,\"36\":7,\"37\":7,\"38\":7,\"39\":7,\"103\":9,\"104\":6,\"139\":1,\"161\":1,\"164\":7,\"165\":5,\"166\":1,\"167\":7,\"180\":2,\"243\":4,\"271\":1}}],[\"id>\",{\"1\":{\"15\":2}}],[\"iiice\",{\"1\":{\"11\":1}}],[\"inputlen\",{\"1\":{\"257\":8}}],[\"inputstream\",{\"1\":{\"253\":2,\"254\":4}}],[\"invokehead\",{\"1\":{\"238\":1}}],[\"invoke\",{\"1\":{\"238\":1}}],[\"inside\",{\"1\":{\"264\":3,\"266\":1}}],[\"instance\",{\"1\":{\"189\":1,\"196\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"installed\",{\"1\":{\"68\":1}}],[\"install\",{\"0\":{\"286\":1},\"1\":{\"45\":1,\"47\":2,\"48\":1,\"60\":1,\"67\":1,\"68\":1,\"79\":2}}],[\"insert>\",{\"1\":{\"167\":1}}],[\"insertfill\",{\"1\":{\"115\":1}}],[\"insert\",{\"1\":{\"114\":4,\"167\":1}}],[\"into\",{\"1\":{\"167\":1}}],[\"int\",{\"1\":{\"74\":3,\"134\":2,\"135\":2,\"141\":2,\"237\":1,\"243\":1,\"254\":1,\"257\":8,\"277\":1}}],[\"integers\",{\"1\":{\"244\":2}}],[\"integer\",{\"1\":{\"73\":3,\"74\":2,\"114\":3,\"128\":1,\"164\":1,\"165\":2,\"167\":1,\"237\":1,\"244\":1,\"271\":4}}],[\"integration\",{\"1\":{\"9\":1}}],[\"internalresourceviewresolver\",{\"1\":{\"205\":2}}],[\"internet\",{\"1\":{\"154\":1}}],[\"interfaces\",{\"1\":{\"140\":1,\"237\":4}}],[\"interface\",{\"1\":{\"127\":1,\"141\":1,\"164\":1,\"165\":1,\"187\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"263\":1}}],[\"interceptor>\",{\"1\":{\"228\":4}}],[\"interceptors>\",{\"1\":{\"228\":2}}],[\"interceptor\",{\"1\":{\"120\":2,\"228\":2}}],[\"interceptorregistry\",{\"1\":{\"21\":1,\"120\":2,\"130\":2}}],[\"interactive\",{\"1\":{\"57\":1}}],[\"initverify\",{\"1\":{\"257\":1}}],[\"initsign\",{\"1\":{\"257\":1}}],[\"initialize\",{\"1\":{\"59\":1,\"257\":1}}],[\"init\",{\"1\":{\"57\":2,\"206\":1,\"257\":2}}],[\"ini文件\",{\"1\":{\"57\":1}}],[\"innodb\",{\"1\":{\"57\":1}}],[\"inner\",{\"1\":{\"36\":1,\"37\":1,\"38\":1,\"39\":1}}],[\"incrbyfloat\",{\"1\":{\"87\":1}}],[\"incrby\",{\"1\":{\"87\":1}}],[\"incr\",{\"1\":{\"87\":1}}],[\"increment\",{\"1\":{\"34\":1,\"87\":4,\"97\":4,\"99\":2,\"110\":6}}],[\"include\",{\"1\":{\"167\":2}}],[\"includ\",{\"1\":{\"53\":4}}],[\"in\",{\"0\":{\"26\":1},\"1\":{\"26\":4,\"47\":1,\"53\":1}}],[\"info\",{\"1\":{\"123\":1,\"128\":1,\"129\":1,\"243\":4,\"244\":6,\"249\":2}}],[\"information\",{\"1\":{\"33\":1}}],[\"inf\",{\"1\":{\"21\":2,\"98\":1,\"120\":2,\"206\":1,\"265\":1}}],[\"index为几号数据库\",{\"1\":{\"81\":1}}],[\"index\",{\"1\":{\"4\":1,\"81\":1,\"83\":1,\"88\":1,\"89\":1,\"110\":5}}],[\"isannotationpresent\",{\"1\":{\"237\":11}}],[\"isolation=isolation\",{\"1\":{\"195\":1}}],[\"isolation\",{\"1\":{\"190\":1}}],[\"isnotblank\",{\"1\":{\"140\":2}}],[\"isblank\",{\"1\":{\"140\":1}}],[\"ismember\",{\"1\":{\"110\":3}}],[\"isempty\",{\"1\":{\"74\":1,\"237\":5,\"238\":1,\"277\":1}}],[\"is\",{\"1\":{\"8\":1,\"38\":2,\"52\":1,\"180\":1,\"277\":1}}],[\"i2lyu1l5c8oh>\",{\"1\":{\"7\":1}}],[\"ig1wp04xfhni\",{\"1\":{\"7\":1}}],[\"ioc\",{\"0\":{\"174\":1},\"1\":{\"173\":1,\"175\":1}}],[\"ioexception\",{\"1\":{\"140\":2,\"163\":2,\"249\":2,\"253\":3,\"254\":3}}],[\"io\",{\"1\":{\"4\":1,\"7\":1,\"9\":1,\"78\":2,\"79\":1,\"114\":2,\"119\":1,\"123\":2,\"135\":1,\"140\":1,\"163\":3,\"253\":3,\"254\":5,\"257\":1}}],[\"b\",{\"1\":{\"191\":1}}],[\"boundvalueops\",{\"1\":{\"110\":1}}],[\"boot整合redis\",{\"0\":{\"151\":1}}],[\"boot\",{\"1\":{\"118\":1}}],[\"bootschool\",{\"1\":{\"11\":1}}],[\"boolean\",{\"1\":{\"110\":11,\"128\":1,\"129\":1,\"188\":2,\"237\":2,\"257\":2,\"263\":2,\"264\":3,\"272\":4,\"273\":1,\"274\":1,\"275\":1}}],[\"blackfire\",{\"1\":{\"188\":2,\"189\":3,\"228\":2}}],[\"block\",{\"1\":{\"103\":1,\"104\":1,\"257\":8}}],[\"blpop\",{\"1\":{\"91\":1}}],[\"bean>\",{\"1\":{\"196\":2,\"204\":5,\"205\":1,\"228\":2}}],[\"bean控制注解\",{\"0\":{\"182\":1}}],[\"bean类的属性名与配置文件的被调用者\",{\"1\":{\"180\":1}}],[\"beanfactory使用示例\",{\"1\":{\"175\":1}}],[\"beanfactory\",{\"0\":{\"175\":1},\"1\":{\"173\":1,\"175\":4,\"176\":2,\"177\":1}}],[\"beans>\",{\"1\":{\"189\":1,\"196\":1,\"204\":1,\"205\":1}}],[\"beans\",{\"1\":{\"173\":2,\"175\":1,\"189\":4,\"196\":4,\"204\":4,\"205\":4}}],[\"beans<\",{\"1\":{\"160\":1}}],[\"bean注入\",{\"0\":{\"179\":1},\"1\":{\"171\":1}}],[\"beanproperty\",{\"1\":{\"140\":2}}],[\"bean\",{\"1\":{\"109\":2,\"119\":2,\"173\":1,\"175\":2,\"180\":8,\"181\":1,\"204\":1}}],[\"before|after\",{\"1\":{\"88\":1}}],[\"before\",{\"1\":{\"88\":1,\"188\":3}}],[\"benchmark\",{\"1\":{\"80\":3}}],[\"brpoplpush\",{\"1\":{\"91\":1}}],[\"brpop\",{\"1\":{\"91\":1}}],[\"break\",{\"1\":{\"74\":1,\"265\":1}}],[\"broker\",{\"1\":{\"45\":1}}],[\"build>\",{\"1\":{\"201\":1}}],[\"builder\",{\"1\":{\"157\":1,\"254\":1}}],[\"builders\",{\"1\":{\"119\":3}}],[\"build\",{\"1\":{\"74\":2,\"110\":1,\"119\":2,\"163\":1,\"201\":2,\"249\":4,\"254\":1}}],[\"bindexception\",{\"1\":{\"123\":1}}],[\"bind\",{\"1\":{\"123\":4,\"129\":1,\"207\":1,\"254\":2}}],[\"bin\",{\"1\":{\"53\":1,\"79\":3}}],[\"bytype自动注入\",{\"1\":{\"180\":1,\"181\":1}}],[\"bytearrayoutputstream\",{\"1\":{\"123\":6,\"253\":3,\"257\":5}}],[\"byte\",{\"1\":{\"110\":1,\"253\":2,\"254\":1,\"257\":9}}],[\"bytecdntp\",{\"1\":{\"22\":2}}],[\"bytedance\",{\"1\":{\"1\":1,\"22\":1}}],[\"byname自动注入\",{\"1\":{\"180\":1,\"181\":1}}],[\"by\",{\"1\":{\"52\":2,\"61\":2,\"71\":1,\"74\":5}}],[\"bcuninstaller\",{\"1\":{\"7\":1}}],[\"bc\",{\"1\":{\"7\":1}}],[\"bamboo\",{\"1\":{\"265\":4,\"271\":4,\"272\":2,\"273\":2,\"274\":1,\"275\":1,\"277\":2}}],[\"baomidou\",{\"1\":{\"114\":2,\"115\":1}}],[\"batchsetifabsent\",{\"1\":{\"110\":1}}],[\"batchset\",{\"1\":{\"110\":1}}],[\"base64\",{\"1\":{\"257\":9}}],[\"basepackage\",{\"1\":{\"204\":1}}],[\"base\",{\"1\":{\"189\":2,\"204\":1,\"205\":1}}],[\"baseentity\",{\"1\":{\"114\":1}}],[\"basedir=d\",{\"1\":{\"57\":1}}],[\"basic\",{\"1\":{\"4\":1}}],[\"back\",{\"1\":{\"53\":7}}],[\"banner图在线生成工具\",{\"1\":{\"11\":1}}],[\"bandisoft\",{\"1\":{\"7\":1}}],[\"write\",{\"1\":{\"254\":1,\"257\":2}}],[\"writeandclose\",{\"1\":{\"253\":1}}],[\"writestring\",{\"1\":{\"140\":3}}],[\"wordbytes\",{\"1\":{\"254\":2}}],[\"worddemotest\",{\"1\":{\"254\":1}}],[\"word\",{\"1\":{\"254\":2}}],[\"wordutil\",{\"1\":{\"253\":1,\"254\":2}}],[\"word粘贴使用\",{\"1\":{\"11\":1}}],[\"w3\",{\"1\":{\"189\":1,\"196\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"w3cschool\",{\"1\":{\"4\":1}}],[\"w3c中的fastjson文档\",{\"1\":{\"4\":1}}],[\"wenshao\",{\"1\":{\"241\":1}}],[\"weaving\",{\"1\":{\"183\":1}}],[\"webapp\",{\"1\":{\"206\":1}}],[\"webmvc<\",{\"1\":{\"201\":1}}],[\"webmvcconfigurer\",{\"1\":{\"21\":1,\"120\":2,\"130\":2}}],[\"web相关\",{\"1\":{\"129\":1}}],[\"webdatabinderfactory\",{\"1\":{\"129\":4}}],[\"web\",{\"0\":{\"206\":1},\"1\":{\"119\":1,\"120\":4,\"123\":4,\"128\":1,\"129\":5,\"130\":4,\"205\":1,\"206\":7,\"207\":1}}],[\"webjars\",{\"1\":{\"21\":2,\"120\":4}}],[\"webconfig配置swagger\",{\"0\":{\"120\":1}}],[\"webconfig\",{\"1\":{\"21\":1,\"120\":1,\"130\":1}}],[\"w+\",{\"1\":{\"139\":2}}],[\"w\",{\"1\":{\"139\":3}}],[\"while\",{\"1\":{\"110\":1,\"257\":2,\"277\":1}}],[\"where>\",{\"1\":{\"164\":1}}],[\"where\",{\"1\":{\"26\":1,\"27\":8,\"33\":1,\"36\":1,\"37\":1,\"38\":2,\"39\":1,\"52\":1}}],[\"watch\",{\"1\":{\"105\":2}}],[\"wait\",{\"1\":{\"57\":1}}],[\"wget\",{\"1\":{\"45\":1,\"47\":1}}],[\"width\",{\"1\":{\"271\":1}}],[\"widthqchandler\",{\"1\":{\"271\":1,\"273\":1,\"274\":1,\"276\":4}}],[\"withmethodannotation\",{\"1\":{\"119\":1}}],[\"withhash\",{\"1\":{\"100\":2}}],[\"withdist\",{\"1\":{\"100\":2}}],[\"withcoord\",{\"1\":{\"100\":2}}],[\"withscores\",{\"1\":{\"98\":4}}],[\"with\",{\"1\":{\"27\":4,\"36\":1,\"37\":1,\"38\":1,\"39\":1}}],[\"windows再github上下载\",{\"1\":{\"78\":1}}],[\"windows\",{\"1\":{\"64\":1}}],[\"win安装mysql8\",{\"0\":{\"55\":1}}],[\"win快捷方式移除软件\",{\"1\":{\"7\":1}}],[\"winoffice部署软件\",{\"1\":{\"7\":1}}],[\"win系统优化软件\",{\"1\":{\"7\":1}}],[\"win截屏软件\",{\"1\":{\"7\":1}}],[\"win\",{\"0\":{\"287\":1},\"1\":{\"7\":1},\"2\":{\"62\":1,\"69\":1}}],[\"win文件搜索软件\",{\"1\":{\"7\":1}}],[\"win卸载软件\",{\"1\":{\"7\":2}}],[\"wwwc\",{\"1\":{\"7\":2}}],[\"www\",{\"1\":{\"4\":1,\"7\":4,\"11\":4,\"12\":1,\"13\":1,\"15\":1,\"45\":1,\"47\":1,\"66\":1,\"189\":10,\"196\":13,\"204\":10,\"205\":10,\"206\":1}}],[\"x509encodedkeyspec\",{\"1\":{\"257\":5}}],[\"xwpftemplate\",{\"1\":{\"253\":3}}],[\"xsd\",{\"1\":{\"189\":3,\"196\":4,\"204\":3,\"205\":3,\"206\":1}}],[\"xsi\",{\"1\":{\"189\":1,\"196\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"xsi=\",{\"1\":{\"189\":1,\"196\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"xml<\",{\"1\":{\"206\":2}}],[\"xmlschema\",{\"1\":{\"189\":1,\"196\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"xmlns\",{\"1\":{\"189\":3,\"196\":4,\"204\":3,\"205\":3,\"206\":4}}],[\"xmlns=\",{\"1\":{\"189\":1,\"196\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"xmlbeanfactory\",{\"1\":{\"175\":2,\"177\":1}}],[\"xml映射文件需要注册到mybatis的全局配置文件中\",{\"1\":{\"165\":1}}],[\"xml映射文件名称必须与实体类同名\",{\"1\":{\"165\":1}}],[\"xml映射文件必须与实体类在同一个包下\",{\"1\":{\"165\":1}}],[\"xml文件中配置\",{\"1\":{\"162\":1,\"212\":1}}],[\"xml\",{\"0\":{\"164\":1,\"204\":1,\"206\":1},\"1\":{\"161\":3,\"163\":1,\"164\":2,\"165\":1,\"167\":2,\"175\":2,\"177\":1,\"178\":1,\"189\":1,\"196\":1,\"203\":2,\"204\":2,\"205\":1,\"206\":5}}],[\"xml相互跳转\",{\"1\":{\"8\":1}}],[\"x之后\",{\"1\":{\"151\":1}}],[\"xiaoymin\",{\"1\":{\"119\":1}}],[\"xiaoymin<\",{\"1\":{\"118\":1}}],[\"xiaominfo\",{\"1\":{\"4\":1}}],[\"xinfo\",{\"1\":{\"104\":3}}],[\"xclaim\",{\"1\":{\"104\":1}}],[\"xpending\",{\"1\":{\"104\":1}}],[\"xack\",{\"1\":{\"104\":1}}],[\"xadd\",{\"1\":{\"103\":2}}],[\"xgroup\",{\"1\":{\"104\":5}}],[\"xreadgroup\",{\"1\":{\"104\":2}}],[\"xread\",{\"1\":{\"103\":2}}],[\"xrevrange\",{\"1\":{\"103\":2}}],[\"xrange\",{\"1\":{\"103\":2}}],[\"xlen\",{\"1\":{\"103\":2}}],[\"xdel\",{\"1\":{\"103\":2}}],[\"xtrim\",{\"1\":{\"103\":2}}],[\"x86\",{\"1\":{\"51\":4}}],[\"xxx\",{\"1\":{\"34\":4}}],[\"x\",{\"1\":{\"4\":1}}],[\"5l\",{\"1\":{\"148\":1}}],[\"58\",{\"1\":{\"80\":1}}],[\"50\",{\"1\":{\"74\":1,\"253\":1}}],[\"524220z\",{\"1\":{\"52\":1}}],[\"56\",{\"1\":{\"52\":1}}],[\"5\",{\"1\":{\"4\":1,\"22\":1,\"45\":3,\"48\":2,\"102\":1,\"146\":1,\"147\":1,\"148\":3,\"160\":1,\"194\":1,\"201\":1,\"244\":7,\"254\":1}}],[\"404\",{\"1\":{\"280\":1}}],[\"40秒触发1次\",{\"1\":{\"147\":1}}],[\"4<\",{\"1\":{\"252\":1}}],[\"45秒时触发任务\",{\"1\":{\"148\":1}}],[\"45秒触发1次\",{\"1\":{\"147\":1}}],[\"45\",{\"1\":{\"147\":4,\"148\":2}}],[\"4\",{\"1\":{\"4\":1,\"26\":2,\"139\":4,\"206\":2,\"244\":7}}],[\"ofurl\",{\"1\":{\"254\":1}}],[\"ofstream\",{\"1\":{\"254\":4}}],[\"offset\",{\"1\":{\"86\":2,\"98\":1,\"257\":14}}],[\"off\",{\"1\":{\"68\":1}}],[\"officetools\",{\"1\":{\"7\":2}}],[\"ooxml<\",{\"1\":{\"252\":1}}],[\"out\",{\"1\":{\"165\":1,\"187\":1,\"188\":11,\"195\":1,\"257\":14,\"264\":3,\"273\":1,\"274\":1,\"275\":1,\"276\":2}}],[\"outputstream\",{\"1\":{\"253\":3}}],[\"output\",{\"1\":{\"47\":1}}],[\"o\",{\"1\":{\"154\":1}}],[\"ok\",{\"1\":{\"134\":2,\"135\":5}}],[\"override\",{\"1\":{\"115\":2,\"128\":1,\"129\":2,\"130\":1,\"140\":2,\"165\":1,\"187\":1,\"195\":1,\"238\":3,\"264\":6,\"273\":1,\"274\":1,\"275\":1}}],[\"overview\",{\"1\":{\"4\":1}}],[\"obj\",{\"1\":{\"110\":2}}],[\"object>\",{\"1\":{\"253\":1,\"254\":1}}],[\"objects\",{\"1\":{\"123\":2,\"140\":2,\"154\":1,\"265\":2}}],[\"object\",{\"1\":{\"110\":6,\"128\":1,\"129\":1,\"154\":1,\"188\":6}}],[\"openapi2\",{\"1\":{\"118\":1}}],[\"opensession\",{\"1\":{\"158\":2,\"163\":3}}],[\"openssl\",{\"1\":{\"47\":4}}],[\"opensource\",{\"1\":{\"4\":1}}],[\"opsforset\",{\"1\":{\"110\":2}}],[\"opsforlist\",{\"1\":{\"110\":4}}],[\"opsforvalue\",{\"1\":{\"110\":1}}],[\"opsforhash\",{\"1\":{\"110\":2}}],[\"opt\",{\"1\":{\"79\":2}}],[\"oracle默认为read\",{\"1\":{\"190\":1}}],[\"orm\",{\"1\":{\"154\":1}}],[\"or\",{\"1\":{\"104\":2}}],[\"order\",{\"1\":{\"74\":4}}],[\"org\",{\"1\":{\"4\":3,\"5\":1,\"7\":1,\"10\":1,\"11\":2,\"27\":2,\"47\":1,\"68\":1,\"74\":3,\"109\":6,\"110\":4,\"115\":2,\"119\":2,\"120\":5,\"123\":4,\"128\":3,\"129\":7,\"130\":5,\"146\":2,\"161\":2,\"163\":4,\"164\":6,\"165\":4,\"188\":4,\"189\":10,\"195\":3,\"196\":14,\"204\":16,\"205\":12,\"206\":4,\"207\":2,\"254\":2,\"257\":1,\"265\":4,\"271\":4,\"272\":2,\"273\":2,\"274\":1,\"275\":1,\"277\":2}}],[\"on\",{\"1\":{\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"68\":1}}],[\"odysseusyuan\",{\"1\":{\"7\":1}}],[\"abstract\",{\"1\":{\"272\":2}}],[\"abatis\",{\"1\":{\"154\":1}}],[\"advice\",{\"1\":{\"183\":1}}],[\"addlist\",{\"1\":{\"167\":2}}],[\"addargumentresolvers\",{\"1\":{\"130\":1}}],[\"addrank\",{\"1\":{\"74\":1}}],[\"addresourcelocations\",{\"1\":{\"21\":3,\"120\":3}}],[\"addresourcehandler\",{\"1\":{\"21\":3,\"120\":3}}],[\"addresourcehandlers\",{\"1\":{\"21\":1,\"120\":1}}],[\"add\",{\"1\":{\"74\":1,\"110\":2,\"130\":1,\"187\":3,\"188\":1,\"195\":2,\"222\":1,\"237\":3,\"238\":2,\"254\":3}}],[\"addpathpatterns\",{\"1\":{\"21\":1,\"120\":2,\"130\":1}}],[\"addinterceptor\",{\"1\":{\"21\":1,\"120\":2,\"130\":1}}],[\"addinterceptors\",{\"1\":{\"21\":1,\"120\":1,\"130\":1}}],[\"autoproxy通过扫描找到\",{\"1\":{\"189\":1}}],[\"autoproxy的底层是由\",{\"1\":{\"189\":1}}],[\"autoproxy\",{\"1\":{\"189\":1}}],[\"autowired与\",{\"1\":{\"181\":1}}],[\"autowired\",{\"1\":{\"181\":1}}],[\"autowire\",{\"1\":{\"180\":1}}],[\"author\",{\"1\":{\"163\":1,\"233\":1,\"234\":1,\"238\":1,\"253\":1,\"254\":2}}],[\"authorityinterceptor\",{\"1\":{\"21\":3,\"120\":4,\"130\":2}}],[\"authentication\",{\"1\":{\"52\":1}}],[\"aop=\",{\"1\":{\"189\":1,\"196\":1}}],[\"aop示例\",{\"0\":{\"185\":1}}],[\"aop\",{\"0\":{\"183\":1,\"184\":1},\"1\":{\"171\":1,\"172\":1,\"183\":1,\"189\":7,\"196\":4}}],[\"aof\",{\"1\":{\"78\":1}}],[\"access\",{\"1\":{\"154\":1}}],[\"accessors\",{\"1\":{\"73\":2,\"114\":1,\"254\":2,\"271\":2}}],[\"aftercompletion\",{\"0\":{\"227\":1},\"1\":{\"228\":1}}],[\"afterreturn\",{\"1\":{\"188\":1}}],[\"afterreturning\",{\"1\":{\"188\":3}}],[\"afterthrowing\",{\"1\":{\"188\":3}}],[\"after\",{\"1\":{\"88\":1,\"188\":3}}],[\"app>\",{\"1\":{\"206\":1}}],[\"app\",{\"1\":{\"206\":2}}],[\"application\",{\"1\":{\"178\":1,\"206\":1}}],[\"applicationcontext\",{\"0\":{\"176\":1},\"1\":{\"173\":1,\"176\":2,\"177\":1,\"178\":1}}],[\"append\",{\"1\":{\"84\":2}}],[\"api<\",{\"1\":{\"201\":1}}],[\"api\",{\"1\":{\"172\":3,\"201\":3}}],[\"apis\",{\"1\":{\"119\":1}}],[\"apiinfo\",{\"1\":{\"119\":5}}],[\"apiinfobuilder\",{\"1\":{\"119\":2}}],[\"apioperation\",{\"1\":{\"119\":2}}],[\"apimodelproperty\",{\"1\":{\"114\":1}}],[\"apachecharts\",{\"1\":{\"4\":1}}],[\"apache\",{\"1\":{\"4\":3,\"115\":1,\"154\":2,\"163\":4,\"164\":1,\"201\":1,\"248\":1,\"252\":3,\"257\":1}}],[\"available\",{\"1\":{\"67\":1,\"68\":1}}],[\"ago\",{\"1\":{\"53\":1}}],[\"age\",{\"1\":{\"164\":1}}],[\"agedm\",{\"1\":{\"11\":1}}],[\"age动漫网\",{\"1\":{\"11\":1}}],[\"a\",{\"1\":{\"52\":1,\"139\":2,\"180\":1,\"191\":1}}],[\"amd64\",{\"1\":{\"45\":2}}],[\"alter\",{\"1\":{\"52\":2,\"61\":2}}],[\"allargsconstructor\",{\"1\":{\"73\":2,\"140\":2}}],[\"all\",{\"1\":{\"27\":4,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"135\":5}}],[\"alibaba<\",{\"1\":{\"201\":1}}],[\"alibaba\",{\"1\":{\"4\":2,\"128\":1,\"140\":1,\"201\":1,\"204\":1,\"237\":5,\"238\":3,\"241\":2}}],[\"aliyun\",{\"1\":{\"3\":1,\"15\":2}}],[\"arg\",{\"1\":{\"188\":2}}],[\"args\",{\"1\":{\"165\":1,\"188\":3,\"266\":1,\"276\":1}}],[\"around\",{\"1\":{\"188\":4}}],[\"artifactid>\",{\"1\":{\"118\":1,\"160\":7,\"186\":2,\"194\":4,\"201\":12,\"241\":1,\"248\":1,\"252\":6}}],[\"array>\",{\"1\":{\"204\":1}}],[\"arraylist<>\",{\"1\":{\"74\":1,\"110\":1,\"237\":2,\"238\":2,\"254\":2}}],[\"arraylist\",{\"1\":{\"74\":1,\"110\":1,\"167\":1,\"237\":1,\"238\":1,\"254\":1}}],[\"arrays\",{\"1\":{\"21\":1,\"120\":2,\"130\":2,\"244\":1}}],[\"arch\",{\"1\":{\"68\":4}}],[\"archive\",{\"1\":{\"5\":1,\"68\":1}}],[\"aspects<\",{\"1\":{\"186\":1}}],[\"aspectj的通知类型\",{\"1\":{\"184\":1}}],[\"aspectj\",{\"0\":{\"184\":1},\"1\":{\"183\":1,\"184\":1,\"188\":5,\"189\":5}}],[\"aspect\",{\"1\":{\"183\":1,\"188\":3,\"189\":1}}],[\"asc|desc\",{\"1\":{\"100\":2}}],[\"asc\",{\"1\":{\"71\":1,\"74\":1}}],[\"ascii\",{\"1\":{\"11\":1}}],[\"as\",{\"1\":{\"26\":4,\"27\":8,\"36\":1,\"37\":1,\"38\":4,\"39\":4}}],[\"aslist\",{\"1\":{\"21\":1,\"120\":1,\"130\":1,\"244\":1}}],[\"assistant\",{\"1\":{\"8\":1}}],[\"ai\",{\"1\":{\"8\":1}}],[\"analysiscontext\",{\"1\":{\"237\":3,\"238\":5}}],[\"any\",{\"1\":{\"119\":1}}],[\"annotationtype\",{\"1\":{\"237\":2}}],[\"annotationawareaspectjautoproxycreator\",{\"1\":{\"189\":1}}],[\"annotations\",{\"1\":{\"114\":1,\"119\":3,\"164\":1}}],[\"annotation\",{\"1\":{\"109\":2,\"114\":3,\"119\":2,\"120\":4,\"123\":3,\"127\":1,\"128\":1,\"130\":4,\"141\":6,\"146\":1,\"188\":1,\"195\":2,\"196\":1,\"204\":1,\"205\":1,\"207\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"237\":1}}],[\"and\",{\"1\":{\"33\":1,\"38\":1,\"164\":1}}],[\"ant\",{\"1\":{\"22\":1}}],[\"antd\",{\"1\":{\"22\":2}}],[\"an\",{\"1\":{\"8\":1}}],[\"easylistener\",{\"1\":{\"238\":1}}],[\"easylistener<t>\",{\"1\":{\"238\":1}}],[\"easyexcelutil\",{\"1\":{\"237\":1,\"238\":4}}],[\"easyexcel\",{\"0\":{\"231\":1},\"1\":{\"4\":1,\"234\":1}}],[\"easyexcel文档\",{\"1\":{\"4\":1}}],[\"ehcache\",{\"1\":{\"173\":1}}],[\"ejb\",{\"1\":{\"173\":1}}],[\"ee\",{\"1\":{\"172\":2}}],[\"empty\",{\"1\":{\"277\":1}}],[\"email\",{\"1\":{\"139\":1,\"164\":1}}],[\"emqx官网下载\",{\"1\":{\"45\":1}}],[\"emqx\",{\"1\":{\"45\":7}}],[\"else\",{\"1\":{\"115\":2,\"257\":2}}],[\"elementtype\",{\"1\":{\"127\":1,\"141\":2,\"233\":2,\"234\":1,\"235\":1,\"236\":1}}],[\"element\",{\"1\":{\"101\":2}}],[\"el7\",{\"1\":{\"45\":2,\"51\":4}}],[\"entryset\",{\"1\":{\"237\":1}}],[\"entry<string\",{\"1\":{\"237\":1}}],[\"entries\",{\"1\":{\"110\":1}}],[\"entityutils\",{\"1\":{\"249\":2}}],[\"entity\",{\"1\":{\"164\":2,\"165\":2,\"204\":1,\"271\":1,\"272\":1,\"273\":1,\"274\":1,\"275\":1}}],[\"environment的id表示\",{\"1\":{\"166\":1}}],[\"environment\",{\"1\":{\"166\":4}}],[\"environments\",{\"1\":{\"166\":2}}],[\"environments>\",{\"1\":{\"161\":1}}],[\"environment>\",{\"1\":{\"161\":1}}],[\"en\",{\"1\":{\"161\":1,\"164\":1}}],[\"encodebase64\",{\"1\":{\"257\":3}}],[\"encodebase64string\",{\"1\":{\"257\":1}}],[\"encoding=\",{\"1\":{\"161\":1,\"164\":1,\"189\":1,\"196\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"encryptdata\",{\"1\":{\"257\":3}}],[\"encrypteddata\",{\"1\":{\"257\":2}}],[\"encrypt\",{\"1\":{\"140\":12,\"257\":7}}],[\"enums\",{\"1\":{\"140\":1,\"141\":1}}],[\"enumcode\",{\"1\":{\"135\":3}}],[\"enum\",{\"1\":{\"134\":1,\"139\":1,\"263\":1}}],[\"enablescheduling\",{\"1\":{\"145\":1}}],[\"enableswagger2webmvc\",{\"1\":{\"119\":2}}],[\"enableknife4j\",{\"1\":{\"119\":2}}],[\"endregion\",{\"1\":{\"110\":4,\"118\":1}}],[\"end\",{\"1\":{\"86\":1,\"103\":4,\"110\":3,\"160\":2,\"201\":2,\"252\":1}}],[\"engine=innodb\",{\"1\":{\"57\":1}}],[\"ef|grep\",{\"1\":{\"79\":1}}],[\"equals\",{\"1\":{\"74\":1,\"110\":5,\"129\":1,\"140\":1,\"237\":2,\"264\":3}}],[\"equalsandhashcode\",{\"1\":{\"19\":1}}],[\"err\",{\"1\":{\"53\":1,\"57\":1}}],[\"errorlist\",{\"1\":{\"238\":3}}],[\"error=\",{\"1\":{\"57\":1}}],[\"errors\",{\"1\":{\"47\":1}}],[\"error\",{\"1\":{\"21\":1,\"120\":1,\"123\":8,\"128\":1,\"130\":1,\"134\":1,\"135\":8}}],[\"echo\",{\"1\":{\"53\":8}}],[\"echarts\",{\"1\":{\"4\":1}}],[\"e\",{\"1\":{\"52\":1,\"53\":1,\"66\":1,\"123\":8,\"128\":2,\"163\":2,\"249\":2,\"257\":5}}],[\"ext<\",{\"1\":{\"252\":1}}],[\"extends\",{\"1\":{\"123\":1,\"140\":1,\"273\":1,\"274\":1,\"275\":1}}],[\"extern\",{\"1\":{\"115\":1,\"123\":1,\"128\":1,\"129\":1,\"140\":1,\"146\":1}}],[\"ex\",{\"1\":{\"188\":2}}],[\"exclusions>\",{\"1\":{\"252\":2}}],[\"exclusion>\",{\"1\":{\"252\":3}}],[\"excludepathpatterns\",{\"1\":{\"21\":1,\"120\":2,\"130\":1}}],[\"exclude\",{\"1\":{\"21\":2,\"120\":3,\"130\":2}}],[\"excelfieldverification\",{\"1\":{\"237\":4}}],[\"excelproperty\",{\"1\":{\"237\":7}}],[\"excel\",{\"1\":{\"123\":1,\"140\":1,\"237\":7,\"238\":4}}],[\"excelexception\",{\"1\":{\"123\":1}}],[\"exceptionhandler\",{\"1\":{\"123\":4}}],[\"exception\",{\"1\":{\"123\":8,\"128\":1,\"188\":1,\"195\":2,\"257\":8}}],[\"execute\",{\"1\":{\"249\":2}}],[\"execution\",{\"1\":{\"184\":5,\"188\":5}}],[\"exec\",{\"1\":{\"105\":3}}],[\"expression\",{\"1\":{\"173\":2}}],[\"experimental\",{\"1\":{\"73\":1,\"114\":1,\"254\":1,\"271\":1}}],[\"expiretime\",{\"1\":{\"110\":3}}],[\"expire\",{\"1\":{\"22\":2,\"74\":4,\"83\":2,\"110\":6}}],[\"examuserid\",{\"1\":{\"110\":3}}],[\"examuserredistempkey\",{\"1\":{\"74\":3}}],[\"examuserrediskey\",{\"1\":{\"74\":6}}],[\"examrankutil\",{\"1\":{\"73\":2,\"74\":1}}],[\"examtime\",{\"1\":{\"71\":6,\"73\":4,\"74\":3}}],[\"examid\",{\"1\":{\"71\":6,\"73\":3,\"74\":8}}],[\"exam\",{\"1\":{\"71\":9,\"74\":6}}],[\"examples\",{\"1\":{\"4\":1}}],[\"exists\",{\"1\":{\"28\":1,\"83\":2}}],[\"everything\",{\"1\":{\"7\":1}}],[\"edu\",{\"1\":{\"2\":1,\"5\":1}}],[\"square\",{\"1\":{\"263\":1,\"264\":3,\"265\":1}}],[\"sqlsession获取mapper\",{\"0\":{\"163\":1}}],[\"sqlsession接口对象用于执行持久化操作\",{\"1\":{\"158\":1}}],[\"sqlsession\",{\"1\":{\"158\":3,\"163\":16}}],[\"sqlsessionfactorybeanname\",{\"1\":{\"204\":1}}],[\"sqlsessionfactorybean\",{\"1\":{\"204\":1}}],[\"sqlsessionfactorybuilder\",{\"0\":{\"157\":1},\"1\":{\"163\":3}}],[\"sqlsessionfactory\",{\"0\":{\"158\":1},\"1\":{\"158\":1,\"163\":4,\"204\":3}}],[\"sqlsessionfactory的创建\",{\"1\":{\"157\":1}}],[\"sql\",{\"0\":{\"284\":1},\"1\":{\"53\":3,\"154\":1,\"167\":3,\"191\":1},\"2\":{\"30\":1,\"44\":1}}],[\"slf4j\",{\"1\":{\"115\":3,\"123\":3,\"128\":3,\"129\":3,\"140\":3,\"146\":3,\"249\":1}}],[\"ssm\",{\"0\":{\"200\":1},\"1\":{\"201\":1}}],[\"ss\",{\"1\":{\"114\":2}}],[\"sset\",{\"1\":{\"110\":1}}],[\"sscan\",{\"1\":{\"93\":1}}],[\"successlist\",{\"1\":{\"238\":3}}],[\"success\",{\"1\":{\"207\":1,\"237\":3}}],[\"suffix\",{\"1\":{\"205\":1}}],[\"suffixnomasklen\",{\"1\":{\"140\":2,\"141\":1}}],[\"sunset\",{\"1\":{\"163\":1,\"164\":3,\"165\":4,\"184\":3,\"195\":1,\"204\":3,\"205\":1,\"253\":1,\"254\":3}}],[\"sun\",{\"1\":{\"147\":1,\"148\":1}}],[\"sunionstore\",{\"1\":{\"95\":1}}],[\"sunion\",{\"1\":{\"95\":1}}],[\"super\",{\"1\":{\"123\":1}}],[\"supported\",{\"1\":{\"191\":1}}],[\"supportsinternal\",{\"1\":{\"263\":1,\"264\":3,\"265\":1}}],[\"supports\",{\"1\":{\"191\":1,\"195\":1}}],[\"supportsparameter\",{\"1\":{\"129\":1}}],[\"support\",{\"1\":{\"120\":1,\"129\":3,\"130\":1,\"173\":1}}],[\"sub\",{\"1\":{\"102\":1}}],[\"sudo\",{\"1\":{\"45\":2,\"52\":1,\"53\":1}}],[\"sdiffstore\",{\"1\":{\"94\":1}}],[\"sdiff\",{\"1\":{\"93\":1}}],[\"srcdata\",{\"1\":{\"257\":3}}],[\"src=\",{\"1\":{\"22\":2}}],[\"srem\",{\"1\":{\"93\":1}}],[\"srandmember\",{\"1\":{\"93\":1}}],[\"sat\",{\"1\":{\"147\":1}}],[\"sadd\",{\"1\":{\"93\":1}}],[\"sandbox\",{\"1\":{\"12\":1}}],[\"signature\",{\"1\":{\"257\":12}}],[\"sign\",{\"1\":{\"257\":8}}],[\"sinter\",{\"1\":{\"94\":1}}],[\"sismember\",{\"1\":{\"93\":1}}],[\"size\",{\"1\":{\"74\":2,\"110\":10,\"237\":4,\"254\":3,\"277\":2}}],[\"simple\",{\"1\":{\"47\":1}}],[\"shapetest\",{\"1\":{\"266\":1}}],[\"shapes\",{\"1\":{\"265\":2}}],[\"shapefactory\",{\"1\":{\"265\":1,\"266\":1}}],[\"shapeenum\",{\"1\":{\"263\":2,\"264\":6,\"265\":3,\"266\":1}}],[\"shape\",{\"1\":{\"263\":3,\"264\":9,\"265\":12}}],[\"shaskey\",{\"1\":{\"110\":1}}],[\"sha\",{\"1\":{\"79\":1}}],[\"shutdown\",{\"1\":{\"57\":1,\"79\":1}}],[\"sh\",{\"1\":{\"53\":2}}],[\"show\",{\"1\":{\"52\":2,\"61\":1}}],[\"software\",{\"1\":{\"154\":1}}],[\"soft\",{\"1\":{\"74\":4}}],[\"sortquery<string>\",{\"1\":{\"74\":2,\"110\":1}}],[\"sortquerybuilder\",{\"1\":{\"74\":3}}],[\"sortquery\",{\"1\":{\"74\":5,\"110\":4}}],[\"sortparameters\",{\"1\":{\"74\":3}}],[\"sort\",{\"1\":{\"71\":3,\"73\":1,\"74\":17,\"110\":2}}],[\"sortscore\",{\"1\":{\"71\":6,\"74\":1}}],[\"so\",{\"1\":{\"47\":4,\"48\":2}}],[\"source>\",{\"1\":{\"201\":1}}],[\"source>1\",{\"1\":{\"201\":1}}],[\"sourceencoding>\",{\"1\":{\"201\":1}}],[\"sourceencoding>utf\",{\"1\":{\"201\":1}}],[\"sourcekey\",{\"1\":{\"101\":2}}],[\"source\",{\"1\":{\"47\":1,\"90\":1,\"91\":1,\"93\":2}}],[\"scheduling\",{\"1\":{\"146\":1}}],[\"scheduled\",{\"1\":{\"145\":2,\"146\":2}}],[\"schemas<\",{\"1\":{\"252\":2}}],[\"schemalocation=\",{\"1\":{\"189\":1,\"196\":1,\"204\":1,\"205\":1,\"206\":1}}],[\"schema\",{\"1\":{\"33\":2,\"189\":9,\"196\":12,\"204\":9,\"205\":9}}],[\"scope>\",{\"1\":{\"201\":1}}],[\"scope\",{\"1\":{\"129\":1}}],[\"score2\",{\"1\":{\"98\":1}}],[\"score1\",{\"1\":{\"98\":1}}],[\"score\",{\"1\":{\"71\":6,\"73\":5,\"74\":9}}],[\"scan\",{\"1\":{\"110\":1,\"189\":1,\"204\":1,\"205\":1}}],[\"scanoptions\",{\"1\":{\"110\":6}}],[\"scard\",{\"1\":{\"93\":1}}],[\"sc\",{\"1\":{\"60\":1}}],[\"script>\",{\"1\":{\"22\":2}}],[\"scientific\",{\"1\":{\"11\":1}}],[\"swagger2\",{\"1\":{\"119\":1}}],[\"swaggerconfig\",{\"0\":{\"119\":1},\"1\":{\"119\":1}}],[\"swagger配置\",{\"1\":{\"21\":1,\"120\":1}}],[\"swagger\",{\"0\":{\"20\":1},\"1\":{\"21\":3,\"114\":1,\"118\":1,\"119\":2,\"120\":3,\"130\":2}}],[\"swaggertools\",{\"1\":{\"8\":1}}],[\"step\",{\"1\":{\"147\":1}}],[\"stereotype\",{\"1\":{\"110\":1,\"115\":1,\"128\":1,\"129\":1,\"146\":1,\"188\":1,\"195\":1,\"207\":1}}],[\"struts2\",{\"1\":{\"172\":1}}],[\"streams\",{\"1\":{\"103\":1,\"104\":1}}],[\"stream\",{\"0\":{\"102\":1},\"1\":{\"102\":2,\"104\":2,\"253\":3}}],[\"strlen\",{\"1\":{\"84\":2}}],[\"stringutils\",{\"1\":{\"140\":4}}],[\"stringutil\",{\"1\":{\"140\":2}}],[\"string类型\",{\"1\":{\"110\":2}}],[\"stringredisserializer\",{\"1\":{\"109\":2}}],[\"string>>\",{\"1\":{\"74\":3,\"237\":1}}],[\"string>\",{\"1\":{\"73\":2,\"74\":3,\"109\":2,\"110\":10,\"237\":8}}],[\"string\",{\"0\":{\"84\":1},\"1\":{\"52\":1,\"73\":6,\"74\":31,\"110\":77,\"123\":1,\"128\":5,\"134\":2,\"135\":5,\"139\":4,\"140\":2,\"141\":2,\"165\":1,\"178\":1,\"188\":1,\"207\":1,\"237\":4,\"243\":3,\"244\":3,\"249\":5,\"254\":2,\"257\":24,\"266\":1,\"276\":1}}],[\"storedist\",{\"1\":{\"100\":2}}],[\"store\",{\"1\":{\"100\":2}}],[\"storage\",{\"1\":{\"57\":1}}],[\"stop\",{\"1\":{\"89\":1,\"92\":1,\"98\":3}}],[\"stop=\",{\"1\":{\"89\":1}}],[\"stopbubbling=true\",{\"1\":{\"19\":1}}],[\"standardcharsets\",{\"1\":{\"110\":2,\"257\":2}}],[\"stable\",{\"1\":{\"79\":1}}],[\"statement的创建等复杂的过程\",{\"1\":{\"154\":1}}],[\"status\",{\"1\":{\"52\":1}}],[\"static\",{\"1\":{\"21\":2,\"74\":9,\"110\":56,\"114\":1,\"115\":1,\"120\":2,\"128\":5,\"130\":1,\"135\":7,\"163\":5,\"165\":1,\"237\":7,\"249\":2,\"254\":3,\"257\":12,\"265\":1,\"266\":1,\"276\":1,\"277\":2}}],[\"starter<\",{\"1\":{\"118\":1}}],[\"start=0\",{\"1\":{\"89\":1}}],[\"start\",{\"1\":{\"4\":1,\"34\":1,\"45\":2,\"52\":1,\"60\":1,\"86\":1,\"89\":1,\"92\":1,\"98\":3,\"103\":4,\"110\":3,\"160\":2,\"201\":2,\"252\":1}}],[\"spec\",{\"1\":{\"257\":2}}],[\"special\",{\"1\":{\"15\":1}}],[\"spel\",{\"1\":{\"173\":1}}],[\"spi\",{\"1\":{\"119\":1}}],[\"spop\",{\"1\":{\"93\":1}}],[\"springmvc中默认返回的是页面\",{\"1\":{\"219\":1}}],[\"springmvc框架提供的该核心控制器需要我们在web\",{\"1\":{\"212\":1}}],[\"springmvc\",{\"1\":{\"212\":1,\"213\":1,\"216\":1}}],[\"springmvcapplication\",{\"1\":{\"206\":1}}],[\"springmvc的配置文件\",{\"1\":{\"205\":1}}],[\"spring<\",{\"1\":{\"201\":1}}],[\"springssm整合\",{\"0\":{\"199\":1}}],[\"spring中的aop只能对方法进行拦截\",{\"1\":{\"192\":1}}],[\"spring中提供了对事务的管理\",{\"1\":{\"191\":1}}],[\"spring提供的对事务的管理\",{\"1\":{\"191\":1}}],[\"spring配置文件中注册aop代理类\",{\"0\":{\"189\":1}}],[\"spring配置文件的名称\",{\"1\":{\"175\":1,\"177\":1}}],[\"springdata也是和springboot齐名的项目\",{\"1\":{\"151\":1}}],[\"springfox\",{\"1\":{\"119\":8}}],[\"springframework<\",{\"1\":{\"160\":3,\"186\":2,\"194\":2,\"201\":3}}],[\"springframework\",{\"1\":{\"74\":3,\"109\":6,\"110\":4,\"115\":1,\"119\":2,\"120\":5,\"123\":4,\"128\":3,\"129\":7,\"130\":5,\"146\":2,\"175\":1,\"188\":1,\"189\":9,\"195\":3,\"196\":13,\"204\":10,\"205\":10,\"206\":2,\"207\":2,\"254\":1}}],[\"spring\",{\"0\":{\"151\":1,\"171\":1,\"172\":1,\"173\":1,\"190\":1,\"200\":1,\"210\":1},\"1\":{\"118\":1,\"119\":2,\"160\":2,\"171\":1,\"172\":7,\"173\":8,\"178\":1,\"182\":1,\"183\":1,\"186\":1,\"188\":2,\"189\":3,\"194\":2,\"196\":4,\"201\":11,\"203\":1,\"204\":5,\"205\":3,\"206\":1,\"219\":1}}],[\"springboot2\",{\"1\":{\"151\":1}}],[\"springboot定时任务\",{\"0\":{\"144\":1}}],[\"springboot实现自定义脱敏注解\",{\"0\":{\"138\":1}}],[\"springboot统一数据返回类\",{\"0\":{\"133\":1}}],[\"springboot\",{\"0\":{\"126\":1,\"289\":1}}],[\"springboot配置swagger\",{\"0\":{\"118\":1}}],[\"springboot项目根下创建lombok\",{\"1\":{\"19\":1}}],[\"spring系列\",{\"0\":{\"290\":1},\"2\":{\"116\":1,\"121\":1,\"124\":1,\"131\":1,\"136\":1,\"142\":1,\"149\":1,\"169\":1,\"197\":1,\"208\":1,\"229\":1}}],[\"security\",{\"1\":{\"257\":3}}],[\"seconds\",{\"1\":{\"83\":2,\"84\":1,\"110\":3}}],[\"separator=\",{\"1\":{\"167\":1}}],[\"separator\",{\"1\":{\"167\":1}}],[\"session\",{\"1\":{\"128\":3,\"129\":4,\"163\":3}}],[\"ser\",{\"1\":{\"140\":1}}],[\"serialversionuid\",{\"1\":{\"114\":1}}],[\"serialize\",{\"1\":{\"140\":1}}],[\"serializers\",{\"1\":{\"140\":1}}],[\"serializerprovider\",{\"1\":{\"140\":3}}],[\"serializer\",{\"1\":{\"109\":2,\"141\":1}}],[\"serializable\",{\"1\":{\"114\":2,\"135\":2,\"190\":1}}],[\"servelet\",{\"1\":{\"173\":1}}],[\"servertimezone=gmt\",{\"1\":{\"162\":1,\"202\":1}}],[\"server\",{\"1\":{\"51\":1,\"52\":1,\"78\":1,\"79\":1}}],[\"servlet>\",{\"1\":{\"206\":1}}],[\"servlet<\",{\"1\":{\"201\":1}}],[\"servlet\",{\"1\":{\"120\":3,\"128\":3,\"130\":3,\"201\":3,\"205\":1,\"206\":5}}],[\"services下创建以shape的全路径为名的文件\",{\"1\":{\"265\":1}}],[\"serviceloader<shape>\",{\"1\":{\"265\":1}}],[\"serviceloader\",{\"1\":{\"265\":3}}],[\"service\",{\"1\":{\"12\":1,\"119\":2,\"182\":2,\"184\":5,\"187\":2,\"188\":2,\"189\":1,\"195\":3,\"204\":1}}],[\"sequence\",{\"1\":{\"34\":1}}],[\"seq\",{\"1\":{\"34\":5}}],[\"select>\",{\"1\":{\"164\":1}}],[\"select\",{\"1\":{\"26\":6,\"27\":13,\"33\":1,\"34\":3,\"36\":3,\"37\":3,\"38\":3,\"39\":3,\"52\":1,\"81\":1,\"83\":1,\"119\":1,\"164\":1,\"167\":2}}],[\"setheight\",{\"1\":{\"276\":1}}],[\"sethashvalueserializer\",{\"1\":{\"109\":1}}],[\"sethashkeyserializer\",{\"1\":{\"109\":1}}],[\"setwidth\",{\"1\":{\"276\":1}}],[\"setlength\",{\"1\":{\"276\":1}}],[\"setnexthandler\",{\"1\":{\"272\":1,\"273\":1,\"274\":1,\"276\":2,\"277\":1}}],[\"setnx\",{\"1\":{\"84\":1}}],[\"setimglist\",{\"1\":{\"254\":1}}],[\"setimg\",{\"1\":{\"254\":1}}],[\"setid\",{\"1\":{\"104\":2}}],[\"setusername\",{\"1\":{\"254\":1}}],[\"setentity\",{\"1\":{\"249\":1}}],[\"setex\",{\"1\":{\"84\":1}}],[\"setaccessible\",{\"1\":{\"237\":5}}],[\"setattribute\",{\"1\":{\"128\":1}}],[\"setting\",{\"1\":{\"203\":1}}],[\"setter\",{\"1\":{\"180\":1}}],[\"set注入\",{\"1\":{\"180\":1}}],[\"set生成\",{\"1\":{\"160\":1,\"201\":1}}],[\"setfieldvalbyname\",{\"1\":{\"115\":6}}],[\"set集合中需要移除的元素值\",{\"1\":{\"110\":1}}],[\"set集合key\",{\"1\":{\"110\":3}}],[\"set<string>\",{\"1\":{\"110\":5}}],[\"set类型\",{\"1\":{\"110\":2}}],[\"setoperations\",{\"1\":{\"110\":13}}],[\"setoperations<string\",{\"1\":{\"110\":1}}],[\"setkeyserializer\",{\"1\":{\"109\":1}}],[\"setconnectionfactory\",{\"1\":{\"109\":1}}],[\"set中的值是不能重复的\",{\"1\":{\"93\":1}}],[\"setrange\",{\"1\":{\"86\":1}}],[\"set=utf8mb4\",{\"1\":{\"57\":1}}],[\"setvalueserializer\",{\"1\":{\"109\":1}}],[\"setval\",{\"1\":{\"34\":1}}],[\"set\",{\"0\":{\"26\":1,\"93\":1},\"1\":{\"26\":3,\"28\":1,\"52\":3,\"57\":2,\"61\":2,\"66\":2,\"84\":2,\"110\":5,\"128\":1,\"163\":1,\"167\":1}}],[\"search\",{\"1\":{\"3\":1}}],[\"s\",{\"1\":{\"12\":1,\"47\":2,\"53\":2}}],[\"systemresource\",{\"1\":{\"177\":2}}],[\"system\",{\"1\":{\"165\":1,\"187\":1,\"188\":11,\"195\":1,\"257\":6,\"264\":3,\"273\":1,\"274\":1,\"275\":1,\"276\":2}}],[\"systemctl\",{\"1\":{\"45\":1,\"52\":2}}],[\"symlink\",{\"1\":{\"66\":1}}],[\"symbol\",{\"1\":{\"140\":1,\"141\":1}}],[\"symbols\",{\"1\":{\"11\":1}}],[\"symbl\",{\"1\":{\"11\":1}}],[\"syntax\",{\"1\":{\"4\":1}}],[\"smove\",{\"1\":{\"93\":1}}],[\"smembers\",{\"1\":{\"93\":1}}],[\"sm\",{\"1\":{\"10\":2}}],[\"snipaste\",{\"1\":{\"7\":2,\"80\":1}}],[\"sjtu\",{\"1\":{\"5\":1}}],[\"sjtug\",{\"1\":{\"5\":1}}],[\"draco1023<\",{\"1\":{\"252\":1}}],[\"drawio\",{\"1\":{\"9\":2}}],[\"draw\",{\"1\":{\"9\":1,\"263\":1,\"264\":6,\"266\":2}}],[\"druiddatasource\",{\"1\":{\"204\":1}}],[\"druid\",{\"1\":{\"201\":3,\"204\":1}}],[\"driven\",{\"1\":{\"196\":1,\"204\":1,\"205\":1}}],[\"driverclassname\",{\"1\":{\"204\":1}}],[\"driverclass\",{\"1\":{\"196\":1}}],[\"driver=com\",{\"1\":{\"162\":1,\"202\":1}}],[\"driver\",{\"1\":{\"161\":2,\"162\":1,\"196\":1,\"202\":1,\"204\":1}}],[\"driver和url都不一样\",{\"1\":{\"161\":1}}],[\"dtd\",{\"1\":{\"161\":3,\"164\":3}}],[\"dto\",{\"1\":{\"73\":1,\"74\":27}}],[\"dd\",{\"1\":{\"114\":2}}],[\"ddl\",{\"0\":{\"28\":1}}],[\"dbsize\",{\"1\":{\"81\":1,\"83\":1}}],[\"db\",{\"1\":{\"53\":2,\"83\":1,\"161\":1,\"190\":1,\"202\":1,\"204\":1}}],[\"di注入有三大类\",{\"1\":{\"180\":1}}],[\"di注入\",{\"0\":{\"180\":1}}],[\"difference\",{\"1\":{\"110\":2}}],[\"dictionary\",{\"1\":{\"78\":1}}],[\"dispatcherservlet\",{\"0\":{\"212\":1},\"1\":{\"212\":2,\"214\":1}}],[\"dispatcherservlet<\",{\"1\":{\"206\":1}}],[\"discard\",{\"1\":{\"105\":1}}],[\"dist\",{\"1\":{\"68\":1}}],[\"dism\",{\"1\":{\"7\":1}}],[\"dism++\",{\"1\":{\"7\":1}}],[\"director\",{\"1\":{\"157\":1}}],[\"directory\",{\"1\":{\"53\":2}}],[\"dir\",{\"1\":{\"53\":2}}],[\"dao\",{\"1\":{\"154\":1}}],[\"dameonize\",{\"1\":{\"79\":1}}],[\"day\",{\"1\":{\"53\":1}}],[\"daysago=$\",{\"1\":{\"53\":1}}],[\"datasourcetransactionmanager\",{\"1\":{\"196\":1,\"204\":1}}],[\"datasource>\",{\"1\":{\"161\":1}}],[\"datasource\",{\"1\":{\"158\":1,\"161\":1,\"166\":1,\"196\":4,\"204\":6}}],[\"databytes\",{\"1\":{\"257\":4}}],[\"databind<\",{\"1\":{\"201\":1}}],[\"databind\",{\"1\":{\"140\":6,\"141\":1}}],[\"databasename\",{\"1\":{\"53\":1,\"162\":1}}],[\"databases\",{\"1\":{\"52\":1}}],[\"database\",{\"1\":{\"28\":1,\"57\":1,\"161\":4,\"162\":4,\"202\":4,\"204\":4}}],[\"datadir=d\",{\"1\":{\"57\":1}}],[\"data\",{\"1\":{\"53\":3,\"57\":1,\"73\":2,\"74\":3,\"109\":4,\"110\":3,\"114\":2,\"135\":10,\"154\":1,\"237\":1,\"238\":1,\"243\":1,\"249\":3,\"253\":3,\"254\":9,\"257\":15,\"271\":2}}],[\"date\",{\"1\":{\"53\":4}}],[\"d\",{\"1\":{\"53\":7,\"57\":1,\"66\":1,\"74\":2,\"139\":5,\"178\":1,\"254\":1}}],[\"dynlibs\",{\"1\":{\"48\":1}}],[\"demomain\",{\"1\":{\"257\":1}}],[\"demolist\",{\"1\":{\"254\":3}}],[\"demolist设置数据\",{\"1\":{\"254\":1}}],[\"deepoove<\",{\"1\":{\"252\":2}}],[\"deepoove\",{\"1\":{\"252\":1,\"253\":2,\"254\":5}}],[\"dependencies>\",{\"1\":{\"160\":1,\"201\":1}}],[\"dependency>\",{\"1\":{\"118\":1,\"160\":7,\"186\":2,\"194\":4,\"201\":11,\"241\":1,\"248\":1,\"252\":3}}],[\"decodebase64\",{\"1\":{\"257\":4}}],[\"decodedkey\",{\"1\":{\"257\":4}}],[\"decompiler\",{\"1\":{\"7\":1}}],[\"declaring\",{\"1\":{\"184\":2}}],[\"declete\",{\"1\":{\"60\":1}}],[\"decryptdata\",{\"1\":{\"257\":2}}],[\"decrypteddata\",{\"1\":{\"257\":2}}],[\"decrypt\",{\"1\":{\"257\":7}}],[\"decrby\",{\"1\":{\"87\":1}}],[\"decrement\",{\"1\":{\"87\":2}}],[\"decr\",{\"1\":{\"87\":1}}],[\"default=\",{\"1\":{\"161\":1}}],[\"default\",{\"1\":{\"57\":2,\"141\":5,\"166\":1,\"190\":1,\"191\":1,\"195\":1}}],[\"delconsumer\",{\"1\":{\"104\":2}}],[\"del\",{\"1\":{\"53\":2,\"74\":1,\"83\":2,\"110\":1,\"114\":1}}],[\"delete\",{\"1\":{\"38\":2,\"110\":3}}],[\"destroy\",{\"1\":{\"104\":2}}],[\"destkey\",{\"1\":{\"101\":1,\"110\":5}}],[\"destination\",{\"1\":{\"90\":1,\"91\":1,\"93\":2,\"94\":2,\"95\":2,\"98\":3}}],[\"destination不存在时会创建\",{\"1\":{\"90\":1}}],[\"description\",{\"1\":{\"119\":1}}],[\"desc\",{\"1\":{\"74\":1}}],[\"design\",{\"1\":{\"22\":1}}],[\"desmos\",{\"1\":{\"11\":1}}],[\"development\",{\"1\":{\"161\":2}}],[\"developer\",{\"1\":{\"3\":1,\"15\":1}}],[\"devtools\",{\"1\":{\"57\":3,\"66\":1}}],[\"dev\",{\"0\":{\"283\":1},\"1\":{\"11\":1,\"56\":1}}],[\"deb\",{\"1\":{\"5\":1}}],[\"dofinal\",{\"1\":{\"257\":4}}],[\"doafterallanalysed\",{\"1\":{\"238\":1}}],[\"doother\",{\"1\":{\"191\":1}}],[\"dosome\",{\"1\":{\"191\":1}}],[\"domain\",{\"1\":{\"189\":1}}],[\"double\",{\"1\":{\"73\":3,\"74\":5,\"110\":5}}],[\"done\",{\"1\":{\"53\":1}}],[\"dongzl\",{\"1\":{\"4\":2}}],[\"do\",{\"1\":{\"53\":1}}],[\"dog\",{\"1\":{\"10\":1}}],[\"dog图床\",{\"1\":{\"10\":1}}],[\"downloads\",{\"1\":{\"7\":1,\"45\":1,\"56\":1,\"78\":1}}],[\"download\",{\"1\":{\"7\":2,\"79\":1}}],[\"docx\",{\"1\":{\"254\":2}}],[\"doctype\",{\"1\":{\"161\":1,\"164\":1}}],[\"documented\",{\"1\":{\"127\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1}}],[\"documentationtype\",{\"1\":{\"119\":2}}],[\"documentation\",{\"1\":{\"119\":8}}],[\"docket\",{\"1\":{\"119\":3}}],[\"docs\",{\"1\":{\"4\":3,\"78\":1}}],[\"doc\",{\"1\":{\"4\":1,\"21\":2,\"120\":2,\"130\":1}}],[\"dubbo\",{\"1\":{\"4\":1}}],[\"dubbo文档\",{\"1\":{\"4\":1}}],[\"华为仓库\",{\"1\":{\"3\":1}}],[\"华为云镜像站\",{\"1\":{\"2\":1}}],[\"仓库\",{\"0\":{\"3\":1}}],[\"md5withrsa\",{\"1\":{\"257\":2}}],[\"mvc\",{\"0\":{\"210\":1},\"1\":{\"205\":4,\"212\":1,\"228\":3}}],[\"mvc=\",{\"1\":{\"205\":1}}],[\"mvnrepository\",{\"1\":{\"3\":1}}],[\"mvn\",{\"1\":{\"3\":1,\"15\":1}}],[\"mchange\",{\"1\":{\"196\":1}}],[\"mchange<\",{\"1\":{\"194\":1}}],[\"mm\",{\"1\":{\"114\":4}}],[\"mq\",{\"1\":{\"102\":1}}],[\"m|km|ft|mi\",{\"1\":{\"100\":3}}],[\"methodparameter\",{\"1\":{\"129\":10}}],[\"methodargumentnotvalidexception\",{\"1\":{\"123\":3}}],[\"method\",{\"1\":{\"120\":1,\"129\":2,\"130\":1,\"222\":3,\"264\":3,\"266\":1}}],[\"metadata\",{\"1\":{\"237\":1,\"238\":1}}],[\"metaobject\",{\"1\":{\"115\":11}}],[\"metaobjecthandler\",{\"1\":{\"115\":2}}],[\"meta\",{\"1\":{\"21\":2,\"120\":2}}],[\"message\",{\"1\":{\"102\":1,\"123\":2,\"135\":7}}],[\"members\",{\"1\":{\"110\":2}}],[\"member\",{\"1\":{\"93\":4,\"98\":5,\"99\":1,\"100\":7}}],[\"member2\",{\"1\":{\"93\":2,\"98\":1,\"100\":1}}],[\"member1\",{\"1\":{\"93\":2,\"98\":1,\"100\":1}}],[\"mget\",{\"1\":{\"85\":1}}],[\"mode\",{\"1\":{\"257\":2}}],[\"modelandview\",{\"1\":{\"221\":1,\"226\":1}}],[\"modelandview也可以是其他\",{\"1\":{\"217\":1}}],[\"modelandviewcontainer\",{\"1\":{\"129\":4}}],[\"model\",{\"1\":{\"129\":1}}],[\"modifiers\",{\"1\":{\"184\":2}}],[\"mon\",{\"1\":{\"148\":1}}],[\"move\",{\"1\":{\"83\":2,\"110\":2}}],[\"moonlight\",{\"1\":{\"73\":2,\"74\":2,\"120\":3,\"123\":4,\"140\":3,\"141\":2,\"237\":4,\"238\":1}}],[\"mkdir\",{\"1\":{\"53\":1,\"79\":1}}],[\"m\",{\"1\":{\"22\":2,\"53\":6,\"154\":1}}],[\"milliseconds\",{\"1\":{\"103\":2,\"104\":2}}],[\"minvalue\",{\"1\":{\"34\":1}}],[\"min\",{\"1\":{\"22\":2,\"98\":7}}],[\"mirror\",{\"1\":{\"65\":2,\"68\":4}}],[\"mirror>\",{\"1\":{\"15\":2}}],[\"mirrorof>\",{\"1\":{\"15\":2}}],[\"mirrors\",{\"1\":{\"2\":2,\"3\":1,\"5\":1,\"65\":2}}],[\"miaosou\",{\"1\":{\"13\":1}}],[\"msg\",{\"1\":{\"134\":4,\"135\":5}}],[\"msetnx\",{\"1\":{\"85\":1}}],[\"mset\",{\"1\":{\"85\":1}}],[\"ms\",{\"1\":{\"10\":2}}],[\"myinterceptor\",{\"1\":{\"228\":1}}],[\"myinterceptor2\",{\"1\":{\"228\":3}}],[\"myfinally\",{\"1\":{\"188\":1}}],[\"myaspect\",{\"1\":{\"188\":1}}],[\"mybaits\",{\"0\":{\"155\":1}}],[\"mybatis会自己推断\",{\"1\":{\"167\":1}}],[\"mybatisutil\",{\"1\":{\"163\":1,\"165\":2}}],[\"mybatis<\",{\"1\":{\"160\":1,\"201\":2}}],[\"mybatis通过xml或注解的方式将要执行的各种的statement配置起来\",{\"1\":{\"154\":1}}],[\"mybatis\",{\"0\":{\"154\":1,\"159\":1,\"200\":1},\"1\":{\"154\":2,\"160\":2,\"161\":5,\"163\":2,\"164\":3,\"172\":1,\"201\":7,\"203\":2,\"204\":3}}],[\"mybatismetaobjecthandler\",{\"1\":{\"115\":1,\"128\":1}}],[\"mybatisplus\",{\"1\":{\"114\":2,\"115\":1}}],[\"mybatis字段自动注入\",{\"0\":{\"113\":1}}],[\"mybatisx\",{\"1\":{\"8\":1}}],[\"my\",{\"1\":{\"52\":1,\"79\":3}}],[\"mysql根目录下创建my\",{\"1\":{\"57\":1}}],[\"mysql下载\",{\"1\":{\"56\":1}}],[\"mysql备份使用的shell脚本\",{\"1\":{\"53\":1}}],[\"mysql8\",{\"1\":{\"52\":1}}],[\"mysql密码\",{\"1\":{\"52\":1,\"61\":1}}],[\"mysqldump\",{\"1\":{\"53\":1}}],[\"mysqld\",{\"1\":{\"52\":4,\"57\":1,\"59\":1,\"60\":1}}],[\"mysql\",{\"0\":{\"25\":1},\"1\":{\"27\":1,\"51\":4,\"52\":2,\"53\":9,\"56\":2,\"57\":6,\"60\":2,\"162\":2,\"190\":1,\"196\":1,\"201\":1,\"202\":2}}],[\"mycomputermanager\",{\"1\":{\"7\":2}}],[\"multiget\",{\"1\":{\"110\":1}}],[\"multisetifabsent\",{\"1\":{\"110\":1}}],[\"multiset\",{\"1\":{\"110\":1}}],[\"multi\",{\"1\":{\"7\":1,\"105\":1}}],[\"mavan\",{\"1\":{\"207\":1}}],[\"maven引入依赖\",{\"1\":{\"241\":1}}],[\"maven<\",{\"1\":{\"201\":1}}],[\"maven镜像源配置\",{\"0\":{\"15\":1}}],[\"maven中央仓库\",{\"1\":{\"3\":1}}],[\"maven\",{\"0\":{\"3\":1,\"14\":1},\"1\":{\"3\":1,\"15\":5,\"201\":3}}],[\"manager=\",{\"1\":{\"196\":1,\"204\":1}}],[\"mandatory\",{\"1\":{\"191\":1,\"195\":1}}],[\"main\",{\"1\":{\"165\":2,\"266\":1,\"276\":1}}],[\"matchedkeys\",{\"1\":{\"110\":3}}],[\"match\",{\"1\":{\"93\":1,\"96\":1,\"98\":1,\"110\":1}}],[\"matchingkeys\",{\"1\":{\"74\":3}}],[\"map1\",{\"1\":{\"254\":3}}],[\"map<boolean\",{\"1\":{\"237\":3}}],[\"map<integer\",{\"1\":{\"237\":6,\"238\":1}}],[\"map<string\",{\"1\":{\"73\":1,\"74\":3,\"110\":4,\"237\":3,\"253\":1,\"254\":3}}],[\"mapping>\",{\"1\":{\"206\":2}}],[\"mapping=\",{\"1\":{\"205\":1}}],[\"mapping\",{\"1\":{\"154\":1,\"228\":2}}],[\"mapperxml标签\",{\"0\":{\"167\":1}}],[\"mapperscannerconfigurer\",{\"1\":{\"204\":2}}],[\"mappers\",{\"1\":{\"166\":3}}],[\"mappers>\",{\"1\":{\"161\":1}}],[\"mapper>\",{\"1\":{\"164\":1}}],[\"mapper\",{\"1\":{\"8\":1,\"161\":2,\"164\":5,\"165\":2,\"166\":1,\"167\":1,\"204\":3}}],[\"maps\",{\"1\":{\"154\":1}}],[\"map这时候值是map集合\",{\"1\":{\"96\":1}}],[\"map集合\",{\"1\":{\"96\":1}}],[\"map\",{\"1\":{\"73\":1,\"74\":4,\"110\":4,\"237\":14,\"238\":1,\"253\":1,\"254\":5}}],[\"mariadb\",{\"1\":{\"52\":2}}],[\"markdown\",{\"1\":{\"4\":1}}],[\"markdown官网地址\",{\"1\":{\"4\":1}}],[\"make\",{\"1\":{\"47\":2,\"79\":2}}],[\"maxlen\",{\"1\":{\"103\":2}}],[\"maxscore\",{\"1\":{\"73\":2}}],[\"max\",{\"1\":{\"34\":1,\"74\":3,\"98\":7,\"257\":8}}],[\"maxvalue\",{\"1\":{\"34\":1}}],[\"master\",{\"1\":{\"4\":1}}],[\"height\",{\"1\":{\"271\":1}}],[\"heightqchandler\",{\"1\":{\"271\":1,\"274\":1,\"275\":1,\"276\":5}}],[\"headnumber\",{\"1\":{\"237\":3}}],[\"headmap\",{\"1\":{\"237\":8}}],[\"headcellmap\",{\"1\":{\"237\":8,\"238\":2}}],[\"headverification注解在类上存在时\",{\"1\":{\"236\":1}}],[\"headverification注解搭配使用\",{\"1\":{\"236\":1}}],[\"headverification\",{\"0\":{\"234\":1},\"1\":{\"234\":1,\"237\":2}}],[\"header\",{\"1\":{\"128\":2}}],[\"headerresolveinterceptor\",{\"1\":{\"120\":4,\"128\":1,\"130\":3}}],[\"hexists\",{\"1\":{\"96\":1}}],[\"hh\",{\"1\":{\"114\":2}}],[\"hyperloglog\",{\"0\":{\"101\":1},\"1\":{\"101\":7}}],[\"hibernate\",{\"1\":{\"172\":1}}],[\"hincrbyfloat\",{\"1\":{\"97\":1}}],[\"hincrby\",{\"1\":{\"97\":1}}],[\"highlightcode\",{\"1\":{\"11\":1}}],[\"hscan\",{\"1\":{\"96\":1}}],[\"hsetnx\",{\"1\":{\"96\":1}}],[\"hset\",{\"1\":{\"96\":1}}],[\"hlen\",{\"1\":{\"96\":1}}],[\"hvals\",{\"1\":{\"96\":1}}],[\"hkeys\",{\"1\":{\"96\":1}}],[\"hdel\",{\"1\":{\"96\":1}}],[\"hmget\",{\"1\":{\"96\":1}}],[\"hmset\",{\"1\":{\"71\":6,\"74\":4,\"96\":1,\"110\":2}}],[\"hgetall\",{\"1\":{\"96\":1}}],[\"hget\",{\"1\":{\"96\":1,\"110\":1}}],[\"handladapter\",{\"0\":{\"215\":1}}],[\"handleexception\",{\"1\":{\"123\":1}}],[\"handlerlist\",{\"1\":{\"277\":9}}],[\"handleradapter\",{\"1\":{\"215\":1}}],[\"handlermapping负责根据用户请求找到\",{\"1\":{\"213\":1}}],[\"handlermapping也是控制器\",{\"1\":{\"213\":1}}],[\"handlermapping\",{\"0\":{\"213\":1}}],[\"handlermethodargumentresolver\",{\"1\":{\"120\":1,\"129\":2,\"130\":1}}],[\"handler\",{\"0\":{\"214\":1},\"1\":{\"128\":1,\"213\":1,\"214\":5,\"271\":3,\"272\":1,\"273\":1,\"277\":2}}],[\"handlerinterceptor接口\",{\"0\":{\"224\":1}}],[\"handlerinterceptor\",{\"1\":{\"128\":2,\"223\":1}}],[\"handlers\",{\"1\":{\"115\":1}}],[\"handbook\",{\"1\":{\"4\":2}}],[\"hasparameterannotation\",{\"1\":{\"129\":1}}],[\"haspmap序列化\",{\"1\":{\"109\":1}}],[\"hasnext\",{\"1\":{\"110\":1}}],[\"haskey\",{\"1\":{\"74\":1,\"110\":3}}],[\"hashsize\",{\"1\":{\"110\":1}}],[\"hashmultiget\",{\"1\":{\"110\":1}}],[\"hashmap<>\",{\"1\":{\"237\":3,\"254\":3}}],[\"hashmap<string\",{\"1\":{\"73\":1}}],[\"hashmap序列化\",{\"1\":{\"109\":1}}],[\"hashmap\",{\"1\":{\"73\":1,\"237\":1,\"254\":1}}],[\"hashvalues\",{\"1\":{\"110\":1}}],[\"hashkey的value值\",{\"1\":{\"110\":1}}],[\"hashkeys\",{\"1\":{\"110\":8}}],[\"hashkey\",{\"1\":{\"110\":14}}],[\"hash表字段key所对应的值\",{\"1\":{\"110\":1}}],[\"hash表字段key\",{\"1\":{\"110\":5}}],[\"hash表key\",{\"1\":{\"110\":7}}],[\"hash表设置一个值\",{\"1\":{\"110\":1}}],[\"hash类型\",{\"1\":{\"110\":2}}],[\"hashoperations\",{\"1\":{\"110\":12}}],[\"hashoperations<string\",{\"1\":{\"110\":1}}],[\"hash\",{\"0\":{\"96\":1},\"1\":{\"110\":9}}],[\"hashentries\",{\"1\":{\"74\":3,\"110\":1}}],[\"h\",{\"1\":{\"53\":2,\"80\":1}}],[\"h>\",{\"1\":{\"53\":4}}],[\"host\",{\"1\":{\"52\":2,\"119\":1}}],[\"honeyview\",{\"1\":{\"7\":2}}],[\"home\",{\"1\":{\"2\":1,\"4\":1,\"10\":1,\"12\":1,\"66\":3}}],[\"html\",{\"1\":{\"4\":3,\"7\":1,\"15\":1,\"21\":3,\"120\":3,\"130\":1,\"205\":4}}],[\"httpurl\",{\"1\":{\"254\":2}}],[\"httppost\",{\"1\":{\"249\":2}}],[\"httppost简单请求\",{\"1\":{\"249\":1}}],[\"http\",{\"1\":{\"5\":1,\"7\":1,\"13\":1,\"128\":2,\"135\":1,\"164\":1,\"189\":10,\"196\":13,\"204\":10,\"205\":10,\"206\":4,\"249\":2,\"252\":1,\"257\":1}}],[\"httpclients\",{\"1\":{\"249\":2}}],[\"httpclientutil\",{\"1\":{\"249\":1}}],[\"httpclient\",{\"0\":{\"247\":1,\"249\":1}}],[\"httpclient文档\",{\"1\":{\"4\":1}}],[\"httpcomponents\",{\"1\":{\"4\":1,\"248\":1}}],[\"httpservletresponse\",{\"1\":{\"128\":2}}],[\"httpservletrequest\",{\"1\":{\"128\":2}}],[\"https\",{\"1\":{\"1\":1,\"2\":2,\"3\":3,\"4\":10,\"5\":2,\"7\":13,\"10\":4,\"11\":9,\"12\":3,\"13\":3,\"15\":2,\"22\":3,\"45\":1,\"47\":1,\"56\":1,\"64\":1,\"65\":2,\"66\":2,\"68\":2,\"78\":2,\"79\":1,\"119\":2,\"145\":1,\"148\":1,\"161\":1,\"241\":2}}],[\"hc\",{\"1\":{\"4\":1,\"257\":1}}],[\"huaweicloud\",{\"1\":{\"2\":1,\"3\":1,\"15\":2}}],[\"tl<\",{\"1\":{\"252\":2}}],[\"tl\",{\"0\":{\"252\":1},\"1\":{\"252\":4}}],[\"t\",{\"1\":{\"135\":4,\"167\":3,\"188\":1,\"237\":8,\"238\":5}}],[\"title\",{\"1\":{\"119\":1}}],[\"timeunit\",{\"1\":{\"110\":6}}],[\"timeout\",{\"1\":{\"91\":6,\"110\":6,\"128\":1,\"191\":1}}],[\"timeout=2147483\",{\"1\":{\"57\":2}}],[\"time=$\",{\"1\":{\"53\":1}}],[\"time\",{\"1\":{\"53\":3,\"74\":4,\"110\":5,\"114\":3,\"115\":1}}],[\"ttl\",{\"1\":{\"83\":2}}],[\"transactional\",{\"1\":{\"195\":3}}],[\"transaction\",{\"1\":{\"195\":2,\"196\":1,\"204\":1}}],[\"transactiondefinition\",{\"1\":{\"190\":1}}],[\"transactionmanager\",{\"1\":{\"166\":1,\"196\":2,\"204\":2}}],[\"treadlocal\",{\"1\":{\"163\":1}}],[\"tree\",{\"1\":{\"4\":1}}],[\"try\",{\"1\":{\"110\":1,\"128\":1,\"163\":1,\"249\":2,\"257\":4}}],[\"true\",{\"1\":{\"73\":1,\"110\":6,\"128\":1,\"129\":2,\"158\":1,\"189\":1,\"204\":1,\"237\":7,\"254\":3,\"271\":1}}],[\"tx\",{\"1\":{\"196\":4,\"204\":4}}],[\"tx=\",{\"1\":{\"196\":1,\"204\":1}}],[\"tx<\",{\"1\":{\"194\":1,\"201\":1}}],[\"txt中的npm\",{\"1\":{\"68\":1}}],[\"txt中的node\",{\"1\":{\"68\":1}}],[\"txdmbrtik2<d\",{\"1\":{\"52\":1}}],[\"this\",{\"1\":{\"115\":6,\"134\":2,\"135\":3,\"139\":2,\"272\":1}}],[\"threadlocal<sqlsession>\",{\"1\":{\"163\":1}}],[\"threadlocal<>\",{\"1\":{\"115\":1,\"163\":1}}],[\"threadlocal<integer>\",{\"1\":{\"115\":1}}],[\"thread\",{\"1\":{\"115\":5,\"128\":1,\"163\":5}}],[\"threatbook\",{\"1\":{\"12\":1}}],[\"throwing\",{\"1\":{\"188\":1}}],[\"throwable\",{\"1\":{\"188\":2}}],[\"throws\",{\"1\":{\"140\":2,\"184\":2,\"188\":1,\"253\":2,\"254\":2,\"257\":5}}],[\"throw\",{\"1\":{\"110\":1,\"237\":4,\"257\":3,\"277\":1}}],[\"then\",{\"1\":{\"53\":3}}],[\"tap\",{\"1\":{\"47\":1}}],[\"target>\",{\"1\":{\"201\":1}}],[\"target>1\",{\"1\":{\"201\":1}}],[\"target\",{\"1\":{\"127\":1,\"141\":2,\"183\":1,\"189\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1}}],[\"tar\",{\"1\":{\"47\":3,\"48\":1,\"79\":1}}],[\"tablename\",{\"1\":{\"202\":1}}],[\"tablefield\",{\"1\":{\"114\":5}}],[\"table\",{\"1\":{\"11\":1,\"33\":1,\"254\":1}}],[\"testgenerateword\",{\"1\":{\"254\":1}}],[\"test=\",{\"1\":{\"164\":1}}],[\"test\",{\"1\":{\"47\":2,\"119\":3,\"243\":1,\"244\":1,\"254\":4}}],[\"text\",{\"1\":{\"38\":2,\"39\":2}}],[\"templates\",{\"1\":{\"254\":1}}],[\"template\",{\"1\":{\"109\":7,\"253\":3}}],[\"temporary\",{\"1\":{\"52\":3}}],[\"temp\",{\"1\":{\"27\":22,\"36\":5,\"37\":5,\"38\":7,\"39\":6,\"52\":1,\"254\":1}}],[\"team\",{\"1\":{\"7\":1}}],[\"tobytearray\",{\"1\":{\"253\":1,\"257\":2}}],[\"tojsonstring\",{\"1\":{\"237\":2,\"243\":2,\"244\":3}}],[\"tomcat7\",{\"1\":{\"201\":1,\"207\":1}}],[\"tomcat\",{\"1\":{\"201\":2,\"207\":1}}],[\"tomap\",{\"1\":{\"73\":1,\"74\":1}}],[\"tokenutil\",{\"1\":{\"128\":1}}],[\"token\",{\"1\":{\"128\":5}}],[\"tostring\",{\"1\":{\"123\":1,\"128\":1,\"249\":2}}],[\"tos\",{\"1\":{\"22\":2}}],[\"tongyi\",{\"1\":{\"8\":1}}],[\"type=\",{\"1\":{\"161\":2}}],[\"type\",{\"1\":{\"4\":1,\"83\":2,\"140\":2,\"141\":1,\"166\":2,\"167\":1,\"184\":4,\"233\":1,\"234\":1}}],[\"tsinghua\",{\"1\":{\"2\":1}}],[\"tuna\",{\"1\":{\"2\":1}}],[\"镜像站\",{\"0\":{\"2\":1},\"1\":{\"66\":1}}],[\"c3p0\",{\"1\":{\"196\":1}}],[\"cj\",{\"1\":{\"162\":1,\"196\":1,\"202\":1}}],[\"css\",{\"1\":{\"120\":1}}],[\"currorg\",{\"1\":{\"129\":1}}],[\"curruser\",{\"1\":{\"129\":3}}],[\"currentuser\",{\"1\":{\"127\":1,\"129\":3}}],[\"current\",{\"1\":{\"4\":1,\"128\":3,\"129\":1}}],[\"cursor<byte\",{\"1\":{\"110\":1}}],[\"cursor\",{\"1\":{\"93\":1,\"96\":1,\"98\":1,\"110\":3}}],[\"cpu上下文会切换\",{\"1\":{\"81\":1}}],[\"cp\",{\"1\":{\"79\":1}}],[\"c++命令即可\",{\"1\":{\"79\":1}}],[\"c语言编写\",{\"1\":{\"78\":1}}],[\"centos\",{\"1\":{\"52\":1}}],[\"centos7安装mysql8\",{\"0\":{\"50\":1}}],[\"centos7安装emqx\",{\"0\":{\"45\":1}}],[\"cd\",{\"1\":{\"47\":1}}],[\"cdn\",{\"1\":{\"1\":1,\"22\":5}}],[\"card\",{\"1\":{\"139\":1}}],[\"carbon\",{\"1\":{\"128\":3}}],[\"catch\",{\"1\":{\"128\":1,\"163\":1,\"249\":2,\"257\":4}}],[\"cast\",{\"1\":{\"38\":2,\"39\":2}}],[\"cache\",{\"1\":{\"34\":1,\"257\":10}}],[\"callsuper=call\",{\"1\":{\"19\":1}}],[\"circle\",{\"1\":{\"263\":1,\"264\":3,\"265\":1,\"266\":2}}],[\"cipher\",{\"1\":{\"257\":15}}],[\"ci\",{\"1\":{\"28\":1,\"57\":2,\"159\":1}}],[\"c\",{\"1\":{\"27\":10,\"36\":2,\"37\":2,\"38\":3,\"39\":3,\"80\":1}}],[\"ctrl+鼠标左键\",{\"1\":{\"166\":1}}],[\"cte\",{\"1\":{\"27\":12,\"36\":3,\"37\":3,\"38\":3,\"39\":3}}],[\"ctool\",{\"1\":{\"11\":1}}],[\"clazz\",{\"1\":{\"237\":12}}],[\"classicrequestbuilder\",{\"1\":{\"249\":2}}],[\"classichttprequest\",{\"1\":{\"249\":2}}],[\"class<\",{\"1\":{\"237\":3}}],[\"class>\",{\"1\":{\"206\":2}}],[\"class>org\",{\"1\":{\"206\":2}}],[\"class=\",{\"1\":{\"189\":1,\"196\":2,\"204\":5,\"205\":1,\"228\":2}}],[\"class文件中保留\",{\"1\":{\"141\":1}}],[\"classpathresource\",{\"1\":{\"254\":5}}],[\"classpathxmlapplicationcontext使用示例\",{\"1\":{\"177\":1}}],[\"classpathxmlapplicationcontext\",{\"0\":{\"177\":1},\"1\":{\"176\":1,\"178\":1}}],[\"classpath\",{\"1\":{\"21\":3,\"120\":3,\"166\":1,\"177\":1,\"204\":2}}],[\"class\",{\"1\":{\"21\":1,\"73\":1,\"74\":1,\"109\":1,\"110\":1,\"114\":1,\"115\":1,\"119\":2,\"120\":1,\"123\":5,\"128\":3,\"129\":4,\"130\":1,\"135\":1,\"140\":3,\"141\":1,\"146\":1,\"163\":1,\"165\":2,\"166\":1,\"180\":1,\"187\":1,\"188\":1,\"195\":3,\"207\":1,\"237\":15,\"238\":1,\"243\":3,\"244\":3,\"249\":1,\"253\":1,\"254\":2,\"257\":1,\"264\":3,\"265\":2,\"266\":1,\"271\":1,\"272\":1,\"273\":1,\"274\":1,\"275\":1,\"277\":1}}],[\"closeablehttpclient\",{\"1\":{\"249\":2}}],[\"closesqlsession\",{\"1\":{\"163\":1}}],[\"close\",{\"1\":{\"158\":1,\"163\":1,\"253\":1,\"254\":1,\"257\":2}}],[\"cli\",{\"1\":{\"79\":1}}],[\"client5\",{\"1\":{\"257\":1}}],[\"client5<\",{\"1\":{\"248\":1}}],[\"client\",{\"1\":{\"4\":1,\"51\":1,\"249\":4}}],[\"crypto\",{\"1\":{\"257\":1}}],[\"creator\",{\"1\":{\"114\":2,\"115\":2}}],[\"createword\",{\"1\":{\"253\":1,\"254\":1}}],[\"createdefault\",{\"1\":{\"249\":2}}],[\"createcontextual\",{\"1\":{\"140\":1}}],[\"createrestapi\",{\"1\":{\"119\":1}}],[\"createtime\",{\"1\":{\"114\":1,\"115\":1}}],[\"create\",{\"1\":{\"28\":1,\"34\":1,\"104\":2,\"114\":1,\"253\":1,\"254\":5}}],[\"crxsoso\",{\"1\":{\"13\":1}}],[\"crx搜搜\",{\"1\":{\"13\":1}}],[\"cron表达式解释\",{\"0\":{\"147\":1}}],[\"crontab\",{\"1\":{\"53\":2}}],[\"cron\",{\"1\":{\"11\":1,\"145\":3,\"146\":1,\"147\":1,\"148\":1}}],[\"cc\",{\"1\":{\"11\":1}}],[\"corn在线表达式网站\",{\"1\":{\"148\":1}}],[\"corn\",{\"0\":{\"148\":1}}],[\"core和\",{\"1\":{\"173\":1}}],[\"core<\",{\"1\":{\"160\":1,\"201\":1}}],[\"core\",{\"1\":{\"74\":2,\"109\":1,\"110\":2,\"115\":1,\"129\":1,\"140\":1,\"173\":1,\"254\":1}}],[\"coreybutler\",{\"1\":{\"64\":1}}],[\"code枚举类\",{\"0\":{\"134\":1}}],[\"code\",{\"1\":{\"123\":1,\"134\":5,\"135\":13,\"154\":1}}],[\"coding\",{\"1\":{\"8\":1}}],[\"count\",{\"1\":{\"90\":2,\"93\":3,\"96\":2,\"98\":3,\"100\":4,\"103\":11,\"104\":3,\"110\":3}}],[\"collect\",{\"0\":{\"281\":1}}],[\"collection=\",{\"1\":{\"167\":1}}],[\"collection\",{\"1\":{\"167\":1}}],[\"collation\",{\"1\":{\"57\":2}}],[\"collate\",{\"1\":{\"28\":1}}],[\"column\",{\"1\":{\"33\":1,\"167\":1}}],[\"columns\",{\"1\":{\"33\":1}}],[\"concurrent\",{\"1\":{\"110\":1}}],[\"concat\",{\"1\":{\"27\":2}}],[\"consumer\",{\"1\":{\"104\":2}}],[\"consumername\",{\"1\":{\"104\":1}}],[\"console\",{\"1\":{\"59\":1}}],[\"controller\",{\"0\":{\"207\":1,\"219\":1},\"1\":{\"182\":2,\"205\":1,\"207\":2,\"213\":1,\"214\":1,\"221\":1}}],[\"contact\",{\"1\":{\"119\":6}}],[\"contextloaderlistener<\",{\"1\":{\"206\":1}}],[\"context=\",{\"1\":{\"189\":1,\"196\":1,\"204\":1,\"205\":1}}],[\"context<\",{\"1\":{\"160\":1,\"186\":1}}],[\"contextualserializer\",{\"1\":{\"140\":2}}],[\"context\",{\"1\":{\"109\":2,\"119\":2,\"120\":1,\"128\":1,\"129\":2,\"130\":1,\"173\":5,\"178\":1,\"189\":4,\"196\":4,\"204\":4,\"205\":4,\"206\":2,\"237\":8,\"238\":5}}],[\"cont\",{\"1\":{\"90\":1}}],[\"conunt\",{\"1\":{\"90\":1}}],[\"conf\",{\"1\":{\"79\":3}}],[\"configure\",{\"1\":{\"253\":2,\"254\":3}}],[\"configuration>\",{\"1\":{\"161\":1,\"201\":1}}],[\"configuration\",{\"1\":{\"21\":2,\"109\":2,\"119\":2,\"120\":3,\"128\":1,\"130\":3,\"161\":1,\"166\":1}}],[\"configlocation\",{\"1\":{\"178\":1,\"204\":1}}],[\"config\",{\"1\":{\"19\":1,\"47\":1,\"66\":3,\"79\":3,\"120\":3,\"130\":3,\"161\":2,\"253\":4,\"254\":3}}],[\"config文件\",{\"1\":{\"19\":1}}],[\"connector\",{\"1\":{\"160\":1,\"194\":1,\"201\":1}}],[\"connectionfactory\",{\"1\":{\"110\":4}}],[\"connection\",{\"1\":{\"57\":1,\"74\":1,\"109\":1,\"110\":1,\"158\":1,\"161\":2}}],[\"connect=\",{\"1\":{\"57\":2}}],[\"compile\",{\"1\":{\"253\":1}}],[\"compiler\",{\"1\":{\"201\":4}}],[\"component\",{\"1\":{\"110\":2,\"115\":2,\"128\":2,\"129\":2,\"146\":2,\"182\":2,\"188\":2,\"189\":1,\"204\":1,\"205\":1}}],[\"combopooleddatasource\",{\"1\":{\"196\":1}}],[\"committed\",{\"1\":{\"190\":2}}],[\"commands\",{\"1\":{\"78\":1}}],[\"commonj\",{\"1\":{\"173\":1}}],[\"common\",{\"1\":{\"51\":1,\"73\":2,\"74\":2,\"140\":3,\"141\":2,\"237\":4,\"238\":1,\"254\":1}}],[\"community\",{\"1\":{\"51\":4}}],[\"com\",{\"1\":{\"1\":1,\"2\":1,\"3\":3,\"4\":5,\"5\":1,\"7\":12,\"10\":1,\"11\":3,\"12\":3,\"13\":2,\"15\":4,\"22\":3,\"45\":1,\"56\":1,\"64\":1,\"65\":2,\"66\":2,\"68\":1,\"114\":3,\"115\":1,\"119\":3,\"128\":1,\"140\":8,\"141\":2,\"145\":1,\"148\":1,\"184\":3,\"188\":2,\"189\":3,\"195\":1,\"196\":2,\"204\":2,\"228\":2,\"237\":5,\"238\":3,\"241\":2,\"252\":1,\"253\":2,\"254\":6}}],[\"cxasm\",{\"1\":{\"7\":1}}],[\"checknexthandler\",{\"1\":{\"272\":1,\"273\":1,\"274\":1,\"275\":1}}],[\"check\",{\"1\":{\"272\":2,\"273\":1,\"274\":1,\"275\":1,\"276\":2}}],[\"chain\",{\"1\":{\"73\":1,\"254\":1,\"271\":1}}],[\"char\",{\"1\":{\"141\":1}}],[\"charset\",{\"1\":{\"110\":1,\"257\":1}}],[\"characterencoding=utf\",{\"1\":{\"162\":1,\"202\":1}}],[\"character\",{\"1\":{\"28\":1,\"57\":1}}],[\"chart\",{\"1\":{\"4\":1}}],[\"chuyu\",{\"1\":{\"7\":1}}],[\"cn\",{\"1\":{\"2\":1,\"4\":4,\"5\":1,\"7\":1,\"11\":4,\"73\":2,\"74\":2,\"120\":3,\"123\":4,\"140\":3,\"141\":2,\"164\":3,\"165\":4,\"204\":3,\"205\":1,\"237\":4,\"238\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
