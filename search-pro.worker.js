const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":687,\"nextId\":687,\"documentIds\":{\"0\":\"1\",\"1\":\"1#静态资源库\",\"2\":\"1#镜像站\",\"3\":\"1#maven-仓库\",\"4\":\"1#文档地址\",\"5\":\"2\",\"6\":\"3\",\"7\":\"3#软件\",\"8\":\"3#idea插件收集\",\"9\":\"3#vscode-插件收集\",\"10\":\"4\",\"11\":\"5\",\"12\":\"6\",\"13\":\"7\",\"14\":\"8\",\"15\":\"8#android-studio-下载\",\"16\":\"8#配置sdk和gradle相关的存放地址\",\"17\":\"8#创建一个项目\",\"18\":\"8#创建虚拟手机\",\"19\":\"8@0\",\"20\":\"9\",\"21\":\"9#linearlayout线性布局\",\"22\":\"9#相对布局relativelayout\",\"23\":\"9#相对于父元素-7个常用属性\",\"24\":\"9#相对于兄弟元素-4个常用属性\",\"25\":\"9#相对于兄弟元素的对齐方式\",\"26\":\"9#帧布局framelayout\",\"27\":\"9@0\",\"28\":\"10\",\"29\":\"10#相关概念\",\"30\":\"10#es-术语\",\"31\":\"10#indices-索引\",\"32\":\"10#type-类型\",\"33\":\"10#field-字段\",\"34\":\"10#mapping-映射\",\"35\":\"10#document-文档\",\"36\":\"10#nrt-接近实时\",\"37\":\"10#cluster-集群\",\"38\":\"10#node-节点\",\"39\":\"10#shards-replicas-分片和复制\",\"40\":\"10#elasticsearch的客户端操作\",\"41\":\"10#elasticsearch-head\",\"42\":\"10#使用-apifox-工具进行-resuful-接口访问\",\"43\":\"10#创建索引-index-和映射-mapping\",\"44\":\"10#先创建索引后设置-mapping\",\"45\":\"10#删除索引\",\"46\":\"10#创建文档\",\"47\":\"10#删除文档document\",\"48\":\"10#查询文档-根据id查询\",\"49\":\"10#查询文档-querystring查询\",\"50\":\"10#查询文档-term查询\",\"51\":\"10#ik-分词器\",\"52\":\"10#ik分词器-分词\",\"53\":\"10#使用-ik-进行分词\",\"54\":\"10#kibana\",\"55\":\"10#kibana-设置\",\"56\":\"10#kibana-dsl-使用\",\"57\":\"10#索引操作\",\"58\":\"10#javaapi-操作-elasticsearch\",\"59\":\"10#创建索引\",\"60\":\"10#创建映射\",\"61\":\"10#创建文档-1\",\"62\":\"10#xcontentbuilder-构建-document-对象\",\"63\":\"10#使用-jackson-将实体类转换\",\"64\":\"10#查询文档操作\",\"65\":\"10#重复代码提取-看此篇幅前先看这里\",\"66\":\"10#termquery\",\"67\":\"10#querystring\",\"68\":\"10#mathquery\",\"69\":\"10#根据id-查询\",\"70\":\"10#分页\",\"71\":\"10#查询结果高亮代码实现\",\"72\":\"10#spring-data-elasticsearch\",\"73\":\"10#dao-编写规则\",\"74\":\"10#案例\",\"75\":\"10#创建-dao接口\",\"76\":\"10#常用方法案例\",\"77\":\"10#聚合查询\",\"78\":\"10@0\",\"79\":\"10@1\",\"80\":\"11\",\"81\":\"11#rabbitmq-页面的使用\",\"82\":\"11#添加用户\",\"83\":\"11#virtual-hosts配置\",\"84\":\"11#rabbitmq的使用\",\"85\":\"11#简单模式\",\"86\":\"11#发送消息案例\",\"87\":\"11#接收消息的案例\",\"88\":\"11#工作模式-workqueues\",\"89\":\"11#生产者示例\",\"90\":\"11#多个消费者示例\",\"91\":\"11#订阅模式概述\",\"92\":\"11#publish-subscribe发布与订阅模式\",\"93\":\"11#fanout-广播模式\",\"94\":\"11#生产者示例-1\",\"95\":\"11#两个消费者示例\",\"96\":\"11#routing-路由模式\",\"97\":\"11#生产者案例\",\"98\":\"11#消费者案例\",\"99\":\"11#topics-通配符模式\",\"100\":\"11#生产者\",\"101\":\"11#消费者\",\"102\":\"11#模式之间的总结\",\"103\":\"11#高级特性\",\"104\":\"11#消息的可靠投递\",\"105\":\"11#确认模式-confirm\",\"106\":\"11#退回模式\",\"107\":\"11#consumer-ack\",\"108\":\"11#消费限流\",\"109\":\"11#ttl\",\"110\":\"11#死信队列\",\"111\":\"11#延迟队列\",\"112\":\"12\",\"113\":\"12#文件上传\",\"114\":\"12@0\",\"115\":\"13\",\"116\":\"13#maven镜像源配置\",\"117\":\"13@0\",\"118\":\"14\",\"119\":\"14#lombok错误\",\"120\":\"14#继承时出现警告解决\",\"121\":\"14#swagger-knife4j\",\"122\":\"14#请求接口文档地址失败解决\",\"123\":\"14#knife4j使用html导出接口出现打不开问题解决\",\"124\":\"14@0\",\"125\":\"14@1\",\"126\":\"15\",\"127\":\"15#find-in-set\",\"128\":\"15#递归查询\",\"129\":\"15#ddl\",\"130\":\"15@0\",\"131\":\"15@1\",\"132\":\"16\",\"133\":\"16#不常用sql方法\",\"134\":\"16#查询所有表中是否存在某个字段\",\"135\":\"16#自增序列\",\"136\":\"16#递归查询\",\"137\":\"16#父级递归查询子级\",\"138\":\"16#子级递归查询父级\",\"139\":\"16#根据父级获取子父级的组织拼接\",\"140\":\"16#根据子集获取从父级到当前子集的组织拼接\",\"141\":\"16#json操作\",\"142\":\"16#json和-jsonb操作符\",\"143\":\"16#额外jsonb操作符\",\"144\":\"16@0\",\"145\":\"16@1\",\"146\":\"17\",\"147\":\"17@0\",\"148\":\"17@1\",\"149\":\"18\",\"150\":\"18#安装vue框架\",\"151\":\"18#官方-api\",\"152\":\"18#vue\",\"153\":\"18#vue-实例选项-el\",\"154\":\"18#实例选项-data\",\"155\":\"18#实例选项-methods\",\"156\":\"18#术语解释-插值表达式-重要\",\"157\":\"18#系统指令-v-text和v-html\",\"158\":\"18#系统指令-v-if-和-v-show\",\"159\":\"18#系统指令-v-on绑定事件\",\"160\":\"18#系统指令-v-for\",\"161\":\"18#系统指令-v-for-数组\",\"162\":\"18#系统指令-v-for-对象\",\"163\":\"18#系统指令-v-for-key属性-非常重要的面试题\",\"164\":\"18#系统指令-v-bind\",\"165\":\"18#系统指令-v-bind基本用法\",\"166\":\"18#系统指令-v-bind绑定class-对象\",\"167\":\"18#系统指令-v-bind-绑定class-数组\",\"168\":\"18#系统指令-v-bind-绑定style-对象\",\"169\":\"18#系统指令-v-bind-绑定style-数组\",\"170\":\"18#系统指令-v-model-基础用法\",\"171\":\"18#系统指令-v-model-原理及实现\",\"172\":\"18#系统指令-v-model-绑定其他表单元素\",\"173\":\"18#系统指令-v-cloak\",\"174\":\"18#系统指令-v-once\",\"175\":\"18#过滤器-过滤器的分析\",\"176\":\"18#过滤器-过滤器的基本用法\",\"177\":\"18#过滤器-传参数和串联使用\",\"178\":\"18#表格案例-使用过滤器完成日期格式处理\",\"179\":\"18#ref属性-获取dom\",\"180\":\"18#自定义指令\",\"181\":\"18#全局自定义指令\",\"182\":\"18#局部自定义指令\",\"183\":\"18#实例选项-计算属性-文档分析\",\"184\":\"18#在vue中实现发送网络请求\",\"185\":\"18#axios-介绍-及基本使用\",\"186\":\"18#表格案例-axios-列表\",\"187\":\"18#表格案例-axios-删除商品\",\"188\":\"18#表格案例-axios-添加商品\",\"189\":\"18#表格案例-axios-搜索功能-实现\",\"190\":\"18#实例选项-watch-基本使用\",\"191\":\"18#组件\",\"192\":\"18#组件特点\",\"193\":\"18#全局组件\",\"194\":\"18#局部组件\",\"195\":\"18#组件嵌套\",\"196\":\"18#组件通信的几种情况\",\"197\":\"18#父子组件传值-props属性\",\"198\":\"18#组件和模块的区别\",\"199\":\"18#单页应用-简称spa\",\"200\":\"18#单页应用-spa-实现原理\",\"201\":\"18#路由-js-实现路由\",\"202\":\"18#路由-vue-router-文档\",\"203\":\"18#路由-vue-router的基本用法\",\"204\":\"18#路由-vue-router-动态路由\",\"205\":\"18#路由-vue-router-to-属性赋值\",\"206\":\"18#路由-vue-router-重定向\",\"207\":\"18#路由-vue-router-编程式导航\",\"208\":\"18#路由的激活样式\",\"209\":\"18#路由-vue-router-嵌套路由\",\"210\":\"18#过度动画\",\"211\":\"18#vue-cli-工具-介绍\",\"212\":\"18#vue-cli-安装\",\"213\":\"18#vue-cli-创建项目\",\"214\":\"18#vue-cli-项目目录解释\",\"215\":\"18#vue-cli-简化模板代码\",\"216\":\"18#案例-效果演示\",\"217\":\"18#案例-导入素材\",\"218\":\"18#案例-提取公共组件-头部-侧边栏-列表\",\"219\":\"18#案例-路由功能\",\"220\":\"18#案例-提取路由模块\",\"221\":\"18#案例-列表渲染\",\"222\":\"18#案例-删除功能\",\"223\":\"18#案例-渲染新增组件\",\"224\":\"18#案例-新增功能完善\",\"225\":\"18#案例-显示编辑数据\",\"226\":\"18#案例-编辑-提交功能\",\"227\":\"18#案例优化-axios-统一导入\",\"228\":\"18#案例优化-设置baseurl\",\"229\":\"18#案例优化-统一设置激活样式\",\"230\":\"18@0\",\"231\":\"18@1\",\"232\":\"19\",\"233\":\"19#安装\",\"234\":\"19#启动\",\"235\":\"19@0\",\"236\":\"20\",\"237\":\"20#错误解决\",\"238\":\"20#如果错误中有报缺少openssl1-1-1可以查看官网-中给的解决方法\",\"239\":\"20#如果centos8使用tar包进行安装可能会遇到下面的错误-error-while-loading-shared-libraries-libtinfo-so-5-cannot-open-shared-object-file-no-such-file-or-directory-解决此错误有两个方法我个人是用第二个方法解决的\",\"240\":\"20@0\",\"241\":\"21\",\"242\":\"21#下载所需要的安装包\",\"243\":\"21#安装流程\",\"244\":\"21#定时运行备份脚本\",\"245\":\"21@0\",\"246\":\"22\",\"247\":\"22#pcre安装\",\"248\":\"22#zlib库\",\"249\":\"22@0\",\"250\":\"23\",\"251\":\"23#下载安装包\",\"252\":\"23#配置mysql\",\"253\":\"23#启动mysql服务\",\"254\":\"23#初始化mysql实例\",\"255\":\"23#安装mysql服务\",\"256\":\"23#修改root密码\",\"257\":\"23@0\",\"258\":\"24\",\"259\":\"24#安装nvm\",\"260\":\"24#配置下载源\",\"261\":\"24#nvm使用\",\"262\":\"24#nvm常用命令\",\"263\":\"24#配置全局npm\",\"264\":\"24@0\",\"265\":\"25\",\"266\":\"25#httpservlet\",\"267\":\"25@0\",\"268\":\"25@1\",\"269\":\"26\",\"270\":\"26#内置注解\",\"271\":\"26#元注解\",\"272\":\"26#自定义注解\",\"273\":\"26@0\",\"274\":\"26@1\",\"275\":\"27\",\"276\":\"27#网络编程-程序的分类\",\"277\":\"27#tcp协议-osi网络模型\",\"278\":\"27#三次握手-和-四次挥手\",\"279\":\"27#套接字-serversocket\",\"280\":\"27#构造器\",\"281\":\"27#方法\",\"282\":\"27#多线程的客户端与服务器之间的交互\",\"283\":\"27#服务器端\",\"284\":\"27#客户端\",\"285\":\"27@0\",\"286\":\"27@1\",\"287\":\"28\",\"288\":\"28#简介\",\"289\":\"28#类加载器\",\"290\":\"28#如何使用反射\",\"291\":\"28#获取-class-方式\",\"292\":\"28#使用返回获取构造器\",\"293\":\"28#获取并使用无参构造器创建对象\",\"294\":\"28#获取并使用带参构造器创建对象\",\"295\":\"28#使用反射获取并使用方法\",\"296\":\"28#使用反射获取并使用属性\",\"297\":\"28#内省\",\"298\":\"28#简介-1\",\"299\":\"28@0\",\"300\":\"28@1\",\"301\":\"29\",\"302\":\"29#为了方便使用我们将jdbc封装成一个工具类\",\"303\":\"29#version-1-0-1\",\"304\":\"29#version-1-0-0\",\"305\":\"29@0\",\"306\":\"29@1\",\"307\":\"30\",\"308\":\"30#栈\",\"309\":\"30#队列\",\"310\":\"30#数组\",\"311\":\"30#链表\",\"312\":\"30#红黑树\",\"313\":\"30#单列集合\",\"314\":\"30#collection接口\",\"315\":\"30#list接口\",\"316\":\"30#linkedlist集合\",\"317\":\"30#set接口\",\"318\":\"30#hashset实现类\",\"319\":\"30#双列集合\",\"320\":\"30#map-接口\",\"321\":\"30@0\",\"322\":\"30@1\",\"323\":\"31\",\"324\":\"31#使用redis先试思路可行性\",\"325\":\"31#使用java来实现排行榜\",\"326\":\"31#接收数据实体类\",\"327\":\"31#排行榜工具类\",\"328\":\"31@0\",\"329\":\"31@1\",\"330\":\"32\",\"331\":\"32#概述\",\"332\":\"32#linux安装\",\"333\":\"32#测试性能\",\"334\":\"32#基础知识\",\"335\":\"32#五大数据类型\",\"336\":\"32#redis-key\",\"337\":\"32#string-字符串\",\"338\":\"32#同时设置或获取多个属性值\",\"339\":\"32#字符串范围获取或替换\",\"340\":\"32#自增或自减\",\"341\":\"32#list-列表\",\"342\":\"32#获取列表中的元素\",\"343\":\"32#移除或弹出一个元素\",\"344\":\"32#阻塞命令\",\"345\":\"32#保留区间内的元素\",\"346\":\"32#set-集合\",\"347\":\"32#交集\",\"348\":\"32#并集\",\"349\":\"32#hash\",\"350\":\"32#字段添加指定增量\",\"351\":\"32#zset-有序集合\",\"352\":\"32#对分数进行指定增量\",\"353\":\"32#geo-地理位置\",\"354\":\"32#hyperloglog-基数统计\",\"355\":\"32#stream\",\"356\":\"32#消息队列相关命令\",\"357\":\"32#消费者组相关命令\",\"358\":\"32#事务\",\"359\":\"32@0\",\"360\":\"32@1\",\"361\":\"33\",\"362\":\"33#redisconfigbean配置\",\"363\":\"33#redisutil工具类\",\"364\":\"33@0\",\"365\":\"33@1\",\"366\":\"34\",\"367\":\"34#eureka-集群示例\",\"368\":\"34#eureka-使用\",\"369\":\"34#eureka-注册服务\",\"370\":\"34@0\",\"371\":\"34@1\",\"372\":\"35\",\"373\":\"35#openfeign-使用示例\",\"374\":\"35#feign-超时配置\",\"375\":\"35#feign-继承熔断器\",\"376\":\"35#熔断降级示例\",\"377\":\"35#feign-请求与相应压缩\",\"378\":\"35#feign-日志\",\"379\":\"35@0\",\"380\":\"35@1\",\"381\":\"36\",\"382\":\"36#断路器-circuitbreaker\",\"383\":\"36#隔离-builkhead\",\"384\":\"36#信号量隔离\",\"385\":\"36#线程池隔离\",\"386\":\"36#限流-ratelimiter\",\"387\":\"36@0\",\"388\":\"36@1\",\"389\":\"37\",\"390\":\"37#loadbalancer-负载均衡\",\"391\":\"37#loadbalancer整合resttemplate\",\"392\":\"37#演示负载均衡使用\",\"393\":\"37#loadblancerclient\",\"394\":\"37@0\",\"395\":\"37@1\",\"396\":\"38\",\"397\":\"38#案例\",\"398\":\"38#zipkin-server\",\"399\":\"38#zipkin-client\",\"400\":\"38#使用rabbitmq传输链路数据\",\"401\":\"38#使用elasticsearch存储链路数据\",\"402\":\"38@0\",\"403\":\"38@1\",\"404\":\"39\",\"405\":\"39#实践\",\"406\":\"39#从-configservice-中获取-application-yml的配置\",\"407\":\"39#本地配置数据\",\"408\":\"39#自动刷新配置\",\"409\":\"39#配置中心服务端\",\"410\":\"39#配置中心客户端\",\"411\":\"39@0\",\"412\":\"39@1\",\"413\":\"40\",\"414\":\"40#路由配置方式\",\"415\":\"40#基础路由配置方式\",\"416\":\"40#基于代码的路由配置方式\",\"417\":\"40#和注册中心相结合的路由配置方式\",\"418\":\"40#路由匹配规则\",\"419\":\"40#predicate-断言条件\",\"420\":\"40#通过请求参数匹配\",\"421\":\"40#通过header匹配\",\"422\":\"40#通过cookie匹配\",\"423\":\"40#通过host匹配\",\"424\":\"40#通过请求方式匹配\",\"425\":\"40#通过请求路径匹配\",\"426\":\"40#组合匹配\",\"427\":\"40#filters-过滤器规则\",\"428\":\"40#prefixpath\",\"429\":\"40#stripprefix\",\"430\":\"40#rewritepath\",\"431\":\"40#setpath\",\"432\":\"40#removerequestheader\",\"433\":\"40#removerequestparameter\",\"434\":\"40#setrequestheader\",\"435\":\"40#default-filters\",\"436\":\"40#自定义过滤器\",\"437\":\"40#全局过滤器\",\"438\":\"40#局部过滤器\",\"439\":\"40#高级特性\",\"440\":\"40#配置文件\",\"441\":\"40#全局过滤器-创建一个全局过滤器-打印熔断器状态-代码如下\",\"442\":\"40#降级方法\",\"443\":\"40#统一跨域请求\",\"444\":\"40#跨域请求解决示例\",\"445\":\"40#gateway-使用\",\"446\":\"40@0\",\"447\":\"40@1\",\"448\":\"41\",\"449\":\"41@0\",\"450\":\"41@1\",\"451\":\"42\",\"452\":\"42#隔离\",\"453\":\"42#线程池隔离\",\"454\":\"42#信号量隔离\",\"455\":\"42#线程池隔离和信号量隔离的区别\",\"456\":\"42#熔断\",\"457\":\"42#降级\",\"458\":\"42#限流\",\"459\":\"42#漏桶算法\",\"460\":\"42#令牌桶算法\",\"461\":\"42#固定时间窗口算法\",\"462\":\"42#滑动时间窗口算法\",\"463\":\"42@0\",\"464\":\"42@1\",\"465\":\"43\",\"466\":\"43#提取公共字段\",\"467\":\"43#自动注入类\",\"468\":\"43@0\",\"469\":\"43@1\",\"470\":\"44\",\"471\":\"44#swaggerconfig\",\"472\":\"44#webconfig配置swagger\",\"473\":\"44@0\",\"474\":\"44@1\",\"475\":\"45\",\"476\":\"45@0\",\"477\":\"45@1\",\"478\":\"46\",\"479\":\"46#创建注解\",\"480\":\"46#创建拦截器\",\"481\":\"46#接口注入数据\",\"482\":\"46#将拦截器进行注册\",\"483\":\"46@0\",\"484\":\"46@1\",\"485\":\"47\",\"486\":\"47#code枚举类\",\"487\":\"47#统一返回数据类\",\"488\":\"47@0\",\"489\":\"47@1\",\"490\":\"48\",\"491\":\"48#创建脱敏枚举\",\"492\":\"48#创建脱敏注解处理类\",\"493\":\"48#创建脱敏注解\",\"494\":\"48@0\",\"495\":\"48@1\",\"496\":\"49\",\"497\":\"49#定时任务\",\"498\":\"49#案例\",\"499\":\"49#cron表达式解释\",\"500\":\"49#corn-经典表达式\",\"501\":\"49@0\",\"502\":\"49@1\",\"503\":\"50\",\"504\":\"50#搭建生产者工程\",\"505\":\"50#搭建消费者工程\",\"506\":\"50@0\",\"507\":\"50@1\",\"508\":\"51\",\"509\":\"51@0\",\"510\":\"51@1\",\"511\":\"52\",\"512\":\"52#mybaits-对象分析\",\"513\":\"52#resources\",\"514\":\"52#sqlsessionfactorybuilder\",\"515\":\"52#sqlsessionfactory\",\"516\":\"52#mybatis-单独使用\",\"517\":\"52#导入依赖\",\"518\":\"52#创建配置文件\",\"519\":\"52#数据库配置\",\"520\":\"52#sqlsession获取mapper\",\"521\":\"52#创建对应的mapper和mapper-xml\",\"522\":\"52#调用mapper\",\"523\":\"52#配置文件标签\",\"524\":\"52#mapperxml标签\",\"525\":\"52#转义字符\",\"526\":\"52@0\",\"527\":\"52@1\",\"528\":\"53\",\"529\":\"53#spring-优势\",\"530\":\"53#spring-核心容器由以下部分组成\",\"531\":\"53#控制反转-ioc\",\"532\":\"53#beanfactory\",\"533\":\"53#applicationcontext\",\"534\":\"53#classpathxmlapplicationcontext\",\"535\":\"53#filesystemxmlapplicationcontext\",\"536\":\"53#bean注入\",\"537\":\"53#di注入\",\"538\":\"53#注解注入\",\"539\":\"53#bean控制注解\",\"540\":\"53#aop\",\"541\":\"53#aspectj-对-aop-的实现\",\"542\":\"53#aop示例\",\"543\":\"53#引入依赖\",\"544\":\"53#创建业务接口与实现类\",\"545\":\"53#定义aop切面类\",\"546\":\"53#spring配置文件中注册aop代理类\",\"547\":\"53#spring-事务\",\"548\":\"53#事务传播行为常量\",\"549\":\"53#事务的粗细粒度\",\"550\":\"53#注解形式控制事务\",\"551\":\"53#导入依赖\",\"552\":\"53#添加事务注解\",\"553\":\"53#配置文件中开启事务\",\"554\":\"53@0\",\"555\":\"53@1\",\"556\":\"54\",\"557\":\"54#spring-整合-mybatis-ssm\",\"558\":\"54#依赖导入\",\"559\":\"54#数据库连接配置文件\",\"560\":\"54#配置spring\",\"561\":\"54#创建spring配置文件application-xml\",\"562\":\"54#创建mvc的配置文件\",\"563\":\"54#创建-web-xml\",\"564\":\"54#创建一个-controller-测试下是否成功\",\"565\":\"54@0\",\"566\":\"54@1\",\"567\":\"55\",\"568\":\"55#组件\",\"569\":\"55#dispatcherservlet\",\"570\":\"55#handlermapping\",\"571\":\"55#handler\",\"572\":\"55#handladapter\",\"573\":\"55#viewresolver\",\"574\":\"55#工作原理\",\"575\":\"55#注解\",\"576\":\"55#controller\",\"577\":\"55#responsebody\",\"578\":\"55#restcontroller\",\"579\":\"55#requestmapping\",\"580\":\"55#自定义拦截器\",\"581\":\"55#handlerinterceptor接口\",\"582\":\"55#prehandle\",\"583\":\"55#posthandle\",\"584\":\"55#aftercompletion\",\"585\":\"55#在配置文件中配置\",\"586\":\"55@0\",\"587\":\"55@1\",\"588\":\"56\",\"589\":\"56#搭建生产者工程\",\"590\":\"56#搭建消费者工程\",\"591\":\"56@0\",\"592\":\"56@1\",\"593\":\"57\",\"594\":\"57#创建相关注解\",\"595\":\"57#fieldrequired\",\"596\":\"57#headverification\",\"597\":\"57#notfieldrequired\",\"598\":\"57#notheadrequired\",\"599\":\"57#工具类\",\"600\":\"57#示例listener\",\"601\":\"57@0\",\"602\":\"57@1\",\"603\":\"58\",\"604\":\"58#简单使用\",\"605\":\"58#json字符串与javaobject相互转换\",\"606\":\"58#jsonarray与java的list相互转换\",\"607\":\"58@0\",\"608\":\"58@1\",\"609\":\"59\",\"610\":\"59#封装实体类和枚举类\",\"611\":\"59#httptype枚举\",\"612\":\"59#httpresponse-返回实体\",\"613\":\"59#组织请求体\",\"614\":\"59#工具类\",\"615\":\"59@0\",\"616\":\"59@1\",\"617\":\"60\",\"618\":\"60#工具类\",\"619\":\"60#案例\",\"620\":\"60@0\",\"621\":\"60@1\",\"622\":\"61\",\"623\":\"61@0\",\"624\":\"61@1\",\"625\":\"62\",\"626\":\"62#开闭原则-ocp\",\"627\":\"62#单一职责原则-srp\",\"628\":\"62#里氏替换原则-lsp\",\"629\":\"62#依赖倒置原则-dip\",\"630\":\"62#接口隔离原则-isp\",\"631\":\"62#迪米特法则-lod\",\"632\":\"62@0\",\"633\":\"62@1\",\"634\":\"63\",\"635\":\"63#实现代码\",\"636\":\"63#创建产品实体类\",\"637\":\"63#创建责任链抽象类\",\"638\":\"63#创建长度处理器\",\"639\":\"63#创建宽度处理器\",\"640\":\"63#创建高度处理器\",\"641\":\"63#调用测试\",\"642\":\"63#工厂创建责任链\",\"643\":\"63@0\",\"644\":\"63@1\",\"645\":\"64\",\"646\":\"64#懒加载-懒汉式-单例示例\",\"647\":\"64#直接加载-饿汉式-单例示例\",\"648\":\"64@0\",\"649\":\"64@1\",\"650\":\"65\",\"651\":\"65#介绍\",\"652\":\"65#案例\",\"653\":\"65#创建工厂接口\",\"654\":\"65#创建相应形状类\",\"655\":\"65#使用工厂创建对应形状\",\"656\":\"65#测试是否可行\",\"657\":\"65@0\",\"658\":\"65@1\",\"659\":\"66\",\"660\":\"66#静态代理\",\"661\":\"66#动态代理\",\"662\":\"66#jdk动态代理\",\"663\":\"66#原始-jdk-代理\",\"664\":\"66#工厂模式-jdk-代理\",\"665\":\"66#cglib-动态代理\",\"666\":\"66@0\",\"667\":\"66@1\",\"668\":\"67\",\"669\":\"68\",\"670\":\"69\",\"671\":\"70\",\"672\":\"71\",\"673\":\"72\",\"674\":\"73\",\"675\":\"74\",\"676\":\"75\",\"677\":\"76\",\"678\":\"77\",\"679\":\"78\",\"680\":\"79\",\"681\":\"80\",\"682\":\"81\",\"683\":\"82\",\"684\":\"83\",\"685\":\"84\",\"686\":\"85\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,6],\"2\":[1,11],\"3\":[2,15],\"4\":[1,58],\"5\":[1,19],\"6\":[1],\"7\":[1,68],\"8\":[1,13],\"9\":[2,9],\"10\":[1,12],\"11\":[1,39],\"12\":[1,15],\"13\":[1,18],\"14\":[2],\"15\":[3,16],\"16\":[1,7],\"17\":[1,82],\"18\":[1,27],\"19\":[null,null,1],\"20\":[1,47],\"21\":[1,71],\"22\":[1,5],\"23\":[2,20],\"24\":[2,13],\"25\":[1,13],\"26\":[1,25],\"27\":[null,null,1],\"28\":[1,30],\"29\":[1,72],\"30\":[2,42],\"31\":[3,15],\"32\":[3,14],\"33\":[3,2],\"34\":[3,10],\"35\":[3,21],\"36\":[3,5],\"37\":[3,9],\"38\":[3,30],\"39\":[4,84],\"40\":[1,7],\"41\":[2,43],\"42\":[5,68],\"43\":[5,27],\"44\":[2,26],\"45\":[1,10],\"46\":[1,24],\"47\":[1,9],\"48\":[2,11],\"49\":[2,21],\"50\":[2,16],\"51\":[2,16],\"52\":[2,27],\"53\":[3,43],\"54\":[1,32],\"55\":[2,8],\"56\":[3,13],\"57\":[1,137],\"58\":[3,42],\"59\":[1,70],\"60\":[1,76],\"61\":[1],\"62\":[4,86],\"63\":[3,129],\"64\":[1],\"65\":[3,98],\"66\":[1,17],\"67\":[1,16],\"68\":[1,17],\"69\":[2,16],\"70\":[1,58],\"71\":[1,77],\"72\":[3],\"73\":[2,33],\"74\":[1,141],\"75\":[2,43],\"76\":[1,126],\"77\":[1,208],\"78\":[null,null,1],\"79\":[null,null,1],\"80\":[1,122],\"81\":[2],\"82\":[1,3],\"83\":[2,22],\"84\":[1,83],\"85\":[1,55],\"86\":[1,114],\"87\":[1,131],\"88\":[3,8],\"89\":[1,77],\"90\":[1,81],\"91\":[1,48],\"92\":[2],\"93\":[2,19],\"94\":[1,99],\"95\":[1,84],\"96\":[2,25],\"97\":[1,87],\"98\":[1,85],\"99\":[2,28],\"100\":[1,87],\"101\":[1,91],\"102\":[1,30],\"103\":[1],\"104\":[1,25],\"105\":[3,169],\"106\":[1,159],\"107\":[2,188],\"108\":[1,91],\"109\":[1,74],\"110\":[1,126],\"111\":[1,8],\"112\":[1,48],\"113\":[1,286],\"114\":[null,null,1],\"115\":[1],\"116\":[1,29],\"117\":[null,null,1],\"118\":[1],\"119\":[1],\"120\":[1,10],\"121\":[2],\"122\":[1,53],\"123\":[1,32],\"124\":[null,null,1],\"125\":[null,null,1],\"126\":[1],\"127\":[3,24],\"128\":[1,42],\"129\":[1,16],\"130\":[null,null,2],\"131\":[null,null,1],\"132\":[1],\"133\":[1],\"134\":[1,14],\"135\":[1,32],\"136\":[1],\"137\":[1,20],\"138\":[1,20],\"139\":[1,36],\"140\":[1,31],\"141\":[1,2],\"142\":[2,2],\"143\":[1,1],\"144\":[null,null,2],\"145\":[null,null,1],\"146\":[1,91],\"147\":[null,null,1],\"148\":[null,null,1],\"149\":[1],\"150\":[1,38],\"151\":[2,15],\"152\":[1],\"153\":[3,17],\"154\":[2,35],\"155\":[2,42],\"156\":[4,52],\"157\":[4,18],\"158\":[5,21],\"159\":[3,40],\"160\":[3],\"161\":[5,30],\"162\":[5,16],\"163\":[6,30],\"164\":[3],\"165\":[3,17],\"166\":[5,15],\"167\":[6,14],\"168\":[6,23],\"169\":[6,16],\"170\":[4,36],\"171\":[4,26],\"172\":[4,9],\"173\":[3,25],\"174\":[3,13],\"175\":[2,34],\"176\":[2,26],\"177\":[2,22],\"178\":[2,24],\"179\":[2,20],\"180\":[1],\"181\":[1,38],\"182\":[1,12],\"183\":[3,44],\"184\":[1,25],\"185\":[3,36],\"186\":[3,24],\"187\":[3,22],\"188\":[3,28],\"189\":[4,30],\"190\":[3,23],\"191\":[1],\"192\":[1,20],\"193\":[1,31],\"194\":[1,27],\"195\":[1,35],\"196\":[1,11],\"197\":[2,46],\"198\":[1,10],\"199\":[3,28],\"200\":[3,17],\"201\":[3,11],\"202\":[4,26],\"203\":[3,46],\"204\":[4,44],\"205\":[5,35],\"206\":[4,10],\"207\":[4,9],\"208\":[1,14],\"209\":[4,25],\"210\":[1,41],\"211\":[4,24],\"212\":[3,47],\"213\":[3,66],\"214\":[3,51],\"215\":[3,25],\"216\":[2],\"217\":[2,19],\"218\":[5,8],\"219\":[2,86],\"220\":[2,9],\"221\":[2,61],\"222\":[2,42],\"223\":[2,59],\"224\":[2,76],\"225\":[2,61],\"226\":[3,42],\"227\":[3,17],\"228\":[2,14],\"229\":[2,7],\"230\":[null,null,1],\"231\":[null,null,1],\"232\":[6,26],\"233\":[1,66],\"234\":[1,31],\"235\":[null,null,1],\"236\":[1,26],\"237\":[1],\"238\":[1,45],\"239\":[2,15],\"240\":[null,null,1],\"241\":[1],\"242\":[1,16],\"243\":[1,87],\"244\":[1,97],\"245\":[null,null,1],\"246\":[2,27],\"247\":[1,22],\"248\":[1,88],\"249\":[null,null,1],\"250\":[1],\"251\":[1,7],\"252\":[1,44],\"253\":[1],\"254\":[1,4],\"255\":[1,12],\"256\":[1,22],\"257\":[null,null,1],\"258\":[1],\"259\":[1,18],\"260\":[1,20],\"261\":[1,20],\"262\":[1,46],\"263\":[1,37],\"264\":[null,null,1],\"265\":[1,20],\"266\":[1,147],\"267\":[null,null,2],\"268\":[null,null,1],\"269\":[1,16],\"270\":[1,20],\"271\":[1,22],\"272\":[1,42],\"273\":[null,null,2],\"274\":[null,null,1],\"275\":[1],\"276\":[2,6],\"277\":[2,11],\"278\":[3,5],\"279\":[3],\"280\":[1,32],\"281\":[1,149],\"282\":[1],\"283\":[1,94],\"284\":[1,55],\"285\":[null,null,2],\"286\":[null,null,1],\"287\":[1],\"288\":[1,7],\"289\":[1,50],\"290\":[1,18],\"291\":[3,41],\"292\":[1],\"293\":[1,33],\"294\":[1,48],\"295\":[1,55],\"296\":[1,49],\"297\":[1],\"298\":[1,57],\"299\":[null,null,2],\"300\":[null,null,1],\"301\":[3,19],\"302\":[1],\"303\":[3,155],\"304\":[3,211],\"305\":[null,null,2],\"306\":[null,null,1],\"307\":[1],\"308\":[1,17],\"309\":[1,18],\"310\":[1,18],\"311\":[1,30],\"312\":[1,44],\"313\":[1],\"314\":[1,26],\"315\":[1,48],\"316\":[1,46],\"317\":[1,24],\"318\":[1,53],\"319\":[1],\"320\":[2,52],\"321\":[null,null,2],\"322\":[null,null,1],\"323\":[1],\"324\":[1,44],\"325\":[1,1],\"326\":[1,47],\"327\":[1,167],\"328\":[null,null,2],\"329\":[null,null,1],\"330\":[1],\"331\":[1,52],\"332\":[1,58],\"333\":[1,26],\"334\":[1,31],\"335\":[1],\"336\":[2,35],\"337\":[3,25],\"338\":[1,19],\"339\":[1,13],\"340\":[1,14],\"341\":[3,58],\"342\":[1,13],\"343\":[1,23],\"344\":[1,23],\"345\":[1,10],\"346\":[3,40],\"347\":[1,9],\"348\":[1,9],\"349\":[1,47],\"350\":[1,9],\"351\":[3,76],\"352\":[1,6],\"353\":[3,39],\"354\":[3,28],\"355\":[1,20],\"356\":[1,50],\"357\":[1,57],\"358\":[1,31],\"359\":[null,null,1],\"360\":[null,null,1],\"361\":[1],\"362\":[1,42],\"363\":[1,303],\"364\":[null,null,2],\"365\":[null,null,1],\"366\":[3,49],\"367\":[2,68],\"368\":[2,71],\"369\":[2,76],\"370\":[null,null,2],\"371\":[null,null,1],\"372\":[3,55],\"373\":[2,32],\"374\":[2,20],\"375\":[2,24],\"376\":[1,44],\"377\":[2,21],\"378\":[2,43],\"379\":[null,null,2],\"380\":[null,null,1],\"381\":[1,79],\"382\":[3,275],\"383\":[3,19],\"384\":[1,71],\"385\":[1,76],\"386\":[3,84],\"387\":[null,null,2],\"388\":[null,null,1],\"389\":[3,78],\"390\":[3,29],\"391\":[1,38],\"392\":[1,48],\"393\":[1,27],\"394\":[null,null,2],\"395\":[null,null,1],\"396\":[5,47],\"397\":[1],\"398\":[2,25],\"399\":[2,46],\"400\":[1,70],\"401\":[1,62],\"402\":[null,null,2],\"403\":[null,null,1],\"404\":[3,53],\"405\":[1,115],\"406\":[5,46],\"407\":[1,32],\"408\":[1,20],\"409\":[1,44],\"410\":[1,69],\"411\":[null,null,2],\"412\":[null,null,1],\"413\":[3,112],\"414\":[1,10],\"415\":[1,50],\"416\":[1,43],\"417\":[1,40],\"418\":[1,31],\"419\":[2,99],\"420\":[1,36],\"421\":[1,42],\"422\":[1,40],\"423\":[1,44],\"424\":[1,34],\"425\":[1,31],\"426\":[1,36],\"427\":[2,25],\"428\":[1,23],\"429\":[1,29],\"430\":[1,28],\"431\":[1,29],\"432\":[1,17],\"433\":[1,15],\"434\":[1,18],\"435\":[2,24],\"436\":[1,28],\"437\":[1,93],\"438\":[1,94],\"439\":[1,55],\"440\":[1,98],\"441\":[4,39],\"442\":[1,13],\"443\":[1,39],\"444\":[1,55],\"445\":[2,65],\"446\":[null,null,2],\"447\":[null,null,1],\"448\":[1,152],\"449\":[null,null,2],\"450\":[null,null,1],\"451\":[1,19],\"452\":[1],\"453\":[1,6],\"454\":[1,17],\"455\":[1,17],\"456\":[1,29],\"457\":[1,9],\"458\":[1,11],\"459\":[1,12],\"460\":[1,15],\"461\":[1,36],\"462\":[1,13],\"463\":[null,null,2],\"464\":[null,null,1],\"465\":[1],\"466\":[1,70],\"467\":[1,55],\"468\":[null,null,2],\"469\":[null,null,1],\"470\":[1,24],\"471\":[1,73],\"472\":[1,72],\"473\":[null,null,2],\"474\":[null,null,1],\"475\":[1,67],\"476\":[null,null,2],\"477\":[null,null,1],\"478\":[2],\"479\":[1,15],\"480\":[1,92],\"481\":[1,77],\"482\":[1,61],\"483\":[null,null,2],\"484\":[null,null,1],\"485\":[1],\"486\":[1,17],\"487\":[1,58],\"488\":[null,null,2],\"489\":[null,null,1],\"490\":[1],\"491\":[1,30],\"492\":[1,90],\"493\":[1,56],\"494\":[null,null,2],\"495\":[null,null,1],\"496\":[1],\"497\":[1,14],\"498\":[1,24],\"499\":[1,75],\"500\":[2,46],\"501\":[null,null,2],\"502\":[null,null,1],\"503\":[4],\"504\":[1,169],\"505\":[1,131],\"506\":[null,null,2],\"507\":[null,null,1],\"508\":[2,17],\"509\":[null,null,2],\"510\":[null,null,1],\"511\":[1,65],\"512\":[2],\"513\":[1,7],\"514\":[1,24],\"515\":[1,38],\"516\":[2,4],\"517\":[1,51],\"518\":[1,79],\"519\":[1,20],\"520\":[1,78],\"521\":[2,63],\"522\":[1,63],\"523\":[1,49],\"524\":[1,111],\"525\":[1,16],\"526\":[null,null,2],\"527\":[null,null,1],\"528\":[1,6],\"529\":[2,40],\"530\":[2,64],\"531\":[3],\"532\":[1,27],\"533\":[1,16],\"534\":[1,18],\"535\":[1,22],\"536\":[1],\"537\":[1,51],\"538\":[1,20],\"539\":[1,21],\"540\":[1,60],\"541\":[4,63],\"542\":[1],\"543\":[1,19],\"544\":[1,16],\"545\":[1,148],\"546\":[1,69],\"547\":[2,33],\"548\":[1,53],\"549\":[1,13],\"550\":[1],\"551\":[1,28],\"552\":[1,58],\"553\":[1,65],\"554\":[null,null,2],\"555\":[null,null,1],\"556\":[1],\"557\":[5],\"558\":[1,153],\"559\":[1,20],\"560\":[1,9],\"561\":[2,109],\"562\":[1,65],\"563\":[3,73],\"564\":[3,35],\"565\":[null,null,2],\"566\":[null,null,1],\"567\":[2],\"568\":[1],\"569\":[1,16],\"570\":[1,13],\"571\":[1,15],\"572\":[1,9],\"573\":[1,20],\"574\":[1,25],\"575\":[1],\"576\":[2,11],\"577\":[2,3],\"578\":[2,13],\"579\":[1,32],\"580\":[1,4],\"581\":[1],\"582\":[1,7],\"583\":[1,9],\"584\":[1,12],\"585\":[1,30],\"586\":[null,null,2],\"587\":[null,null,1],\"588\":[4],\"589\":[1,201],\"590\":[1,180],\"591\":[null,null,2],\"592\":[null,null,1],\"593\":[2],\"594\":[1],\"595\":[1,24],\"596\":[1,19],\"597\":[1,25],\"598\":[1,22],\"599\":[1,147],\"600\":[1,67],\"601\":[null,null,2],\"602\":[null,null,2],\"603\":[1,23],\"604\":[1],\"605\":[1,37],\"606\":[1,43],\"607\":[null,null,2],\"608\":[null,null,2],\"609\":[1,28],\"610\":[1],\"611\":[1,12],\"612\":[3,82],\"613\":[1,102],\"614\":[1,60],\"615\":[null,null,2],\"616\":[null,null,2],\"617\":[2,40],\"618\":[1,50],\"619\":[1,159],\"620\":[null,null,2],\"621\":[null,null,2],\"622\":[1,168],\"623\":[null,null,2],\"624\":[null,null,2],\"625\":[1,49],\"626\":[3,39],\"627\":[3,68],\"628\":[3,112],\"629\":[3,54],\"630\":[3,100],\"631\":[3,118],\"632\":[null,null,2],\"633\":[null,null,2],\"634\":[1,13],\"635\":[1],\"636\":[1,30],\"637\":[1,37],\"638\":[1,31],\"639\":[1,29],\"640\":[1,26],\"641\":[1,31],\"642\":[1,43],\"643\":[null,null,2],\"644\":[null,null,2],\"645\":[1,34],\"646\":[3,31],\"647\":[3,17],\"648\":[null,null,2],\"649\":[null,null,2],\"650\":[1],\"651\":[1,4],\"652\":[1,2],\"653\":[1,25],\"654\":[1,28],\"655\":[1,43],\"656\":[1,19],\"657\":[null,null,2],\"658\":[null,null,2],\"659\":[4,31],\"660\":[1,61],\"661\":[1,8],\"662\":[1,40],\"663\":[3,57],\"664\":[3,78],\"665\":[2,95],\"666\":[null,null,2],\"667\":[null,null,2],\"668\":[1,3],\"669\":[1],\"670\":[1],\"671\":[1],\"672\":[1],\"673\":[1],\"674\":[1],\"675\":[1],\"676\":[1],\"677\":[1],\"678\":[1],\"679\":[1],\"680\":[2],\"681\":[1],\"682\":[1],\"683\":[1],\"684\":[1],\"685\":[1],\"686\":[1]},\"averageFieldLength\":[1.6411417147703973,43.9553772371958,0.4466810801592926],\"storedFields\":{\"0\":{\"h\":\"开发相关\"},\"1\":{\"h\":\"静态资源库\",\"t\":[\"字节跳动静态资源公共库: https://cdn.bytedance.com/\"]},\"2\":{\"h\":\"镜像站\",\"t\":[\"清华大学镜像站: https://mirrors.tuna.tsinghua.edu.cn/\",\"华为云镜像站: https://mirrors.huaweicloud.com/home\"]},\"3\":{\"h\":\"maven 仓库\",\"t\":[\"阿里云Maven仓库: https://developer.aliyun.com/mvn/search\",\"maven中央仓库: https://mvnrepository.com/\",\"华为仓库: https://mirrors.huaweicloud.com/repository/maven/\"]},\"4\":{\"h\":\"文档地址\",\"t\":[\"knife4j 文档: https://doc.xiaominfo.com/docs/quick-start\",\"easyExcel文档: https://easyexcel.opensource.alibaba.com/docs/current/\",\"HttpClient文档: https://hc.apache.org/httpcomponents-client-4.5.x/quickstart.html\",\"dubbo文档: https://cn.dubbo.apache.org/zh-cn/overview/home/\",\"w3c中的fastjson文档: https://www.w3cschool.cn/fastjson/\",\"github中的fastjson2文档: https://github.com/alibaba/fastjson2\",\"netty文档: https://dongzl.github.io/netty-handbook/#/\",\"github-netty: https://github.com/dongzl/netty-handbook/tree/master/docs\",\"Markdown官网地址: https://markdown.com.cn/basic-syntax/links.html\",\"apachecharts(vue折线图等): https://echarts.apache.org/examples/zh/index.html#chart-type-line\"]},\"5\":{\"h\":\"Lunix资源下载站\",\"t\":[\"deb/rpm/...资源下载: https://pkgs.org/\",\"ubuntu资源下载站: http://archive.ubuntu.com/ubuntu/pool/\",\"上海交通大学Linux用户资源: https://mirrors.sjtug.sjtu.edu.cn/\"]},\"6\":{\"h\":\"软件收集\"},\"7\":{\"h\":\"软件\",\"t\":[\"JD_GUI jdk反编译软件: http://java-decompiler.github.io/\",\"Geek [win卸载软件]: https://geekuninstaller.com/download\",\"everything [win文件搜索软件]: https://www.voidtools.com/zh-cn/downloads/\",\"7-zip [压缩软件-多平台]: https://7-zip.org/\",\"Honeyview·蜂蜜浏览器-图片查看器[win]: https://www.bandisoft.com/honeyview/\",\"Snipaste [win截屏软件]\",\"官网: https://zh.snipaste.com/download.html\",\"蓝奏云: https://wwwc.lanzouo.com/iG1Wp04xfhni\",\"dism++ [win系统优化软件]\",\"github: https://github.com/Chuyu-Team/Dism-Multi-language/releases\",\"蓝奏云: https://wwwc.lanzouo.com/i2LYu1l5c8oh>\",\"BC uninstaller [win卸载软件]: https://www.bcuninstaller.com/\",\"PDFgear [PDF- 多平台]: https://www.pdfgear.com/zh/\",\"lky_OfficeTools [winOffice部署软件]\",\"github: https://github.com/OdysseusYuan/LKY_OfficeTools/releases\",\"MyComputerManager [win快捷方式移除软件]\",\"github: https://github.com/1357310795/MyComputerManager/releases\",\"notepad-- 多平台文本编辑器\",\"gitee: https://gitee.com/cxasm/notepad--/releases\"]},\"8\":{\"h\":\"idea插件收集\",\"t\":[\"mybatisX: mapper-xml相互跳转\",\"swaggerTools: 快速生成swagger注释\",\"TONGYI Lingma is an AI coding assistant: 通灵义码\"]},\"9\":{\"h\":\"vscode 插件收集\",\"t\":[\"Draw.io Integration 流程图绘图\",\"使用方式: 创建后缀为dio/drawIo/drawIo.png 都可以\"]},\"10\":{\"h\":\"图床\",\"t\":[\"SM.MS 图床: https://sm.ms/home/picture\",\"jpg.dog图床: https://jpg.dog/\"]},\"11\":{\"h\":\"杂项\",\"t\":[\"工具网: https://ctool.dev/\",\"油猴脚本网址: https://greasyfork.org/zh-CN\",\"下次一定网: https://www.iiice.cn/#/\",\"Age动漫网 :https://www.agedm.org/\",\"数学科学计算器: https://www.desmos.com/scientific?lang=zh-CN\",\"在线代码高亮(word粘贴使用): https://highlightcode.com/\",\"Banner图在线生成工具: https://www.bootschool.net/ascii\",\"Unicode 符号表 : https://symbl.cc/cn/unicode/table/#letterlike-symbols\",\"奇Q工具网(在线cron生成器): https://qqe2.com/cron\"]},\"12\":{\"h\":\"软件病毒检测\",\"t\":[\"微步云沙箱: https://s.threatbook.com/\",\"VirusTotal: https://www.virustotal.com/gui/home/upload\",\"大圣云沙箱: https://sandbox.freebuf.com/service\"]},\"13\":{\"h\":\"资源分享\",\"t\":[\"浏览器插件站[crx搜搜]: https://www.crxsoso.com/\",\"记忆力博客网盘: http://qq351605872.ysepan.com/\",\"云盘资源搜索: https://miaosou.fun/\",\"我的小站-阿里云盘资源共享站: https://pan666.net/\"]},\"14\":{\"h\":\"Android系列之Android Studio\"},\"15\":{\"h\":\"Android studio 下载\",\"t\":[\"Android studio官网下载地址: https://developer.android.google.cn/studio?hl=zh-cn\",\"Snipaste 2024 07 23 19 13 01\"]},\"16\":{\"h\":\"配置sdk和gradle相关的存放地址\",\"t\":[\"配置全局默认设置\",\"打开全局配置\",\"配置android studio sdk默认位置\",\"配置android studio sdk默认位置\",\"配置gradle下载存放位置\",\"gradle下载存放位置\"]},\"17\":{\"h\":\"创建一个项目\",\"t\":[\"点击 new Project\",\"创建项目\",\"选择EmptyActivity\",\"Snipaste 2024 07 23 19 17 35\",\"配置app名称等相关配置\",\"Snipaste 2024 07 23 19 19 16\",\"离线安装gradle\",\"Snipaste 2024 07 23 19 34 02\",\"从国内镜像源中找到对应的gradle包直接将其下载下来\",\"镜像源地址: https://mirrors.aliyun.com/macports/distfiles/gradle/\",\"Snipaste 2024 07 23 19 40 45\",\"找到C:\\\\Users\\\\user\\\\.gradle\\\\wrapper\\\\dists\\\\gradle-8.7-bin,里面会有一个乱码的文件夹将下载好的压缩包直接放入这个乱码文件夹中即可\",\"由于上面改了gradle下载存放地址,所以有的可能需要去上面修改的存放地址下找wrapper\\\\dists\\\\gradle-8.7-bin\",\"Snipaste 2024 07 23 19 37 03\",\"找到setting.gradle或setting.gradle.kt修改为国内镜像源\",\"pluginManagement { repositories { maven { url=uri (\\\"https://maven.aliyun.com/repository/gradle-plugin\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/public\\\") } maven { url=uri (\\\"https://jitpack.io\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/releases\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/google\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/central\\\") } google() mavenCentral() gradlePluginPortal() } } dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { maven { url=uri (\\\"https://maven.aliyun.com/repository/public\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/gradle-plugin\\\") } maven { url=uri (\\\"https://jitpack.io\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/releases\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/google\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/central\\\") } google() mavenCentral() } }\",\"示例图\",\"找到缓存包清理一下缓存.\",\"没有更改gradle存放位置的,去C:\\\\Users\\\\user\\\\.gradle 找到caches 清空该文件夹即可(可能需要先关闭android studio).\",\"更改了gradle存放位置的在更改后的位置中找到caches清空即可. 例如我的更改后的位置是D:\\\\devtools\\\\gradle-repo,那么我需要清除的缓存地址就是D:\\\\devtools\\\\gradle-repo\\\\caches\",\"一切正常的话应该如下图一样\",\"成功示例图\"]},\"18\":{\"h\":\"创建虚拟手机\",\"t\":[\"创建好后不要打开这个虚拟手机,我们需要先将这个虚拟手机迁移到一个固定位置,一直堆积在c盘会很容易爆满.\",\"在c盘中找到C:\\\\Users\\\\user\\\\.android\\\\avd\",\"里面会有一个Nexus_4_API_30.ini文件 和Nexus_4_API_30.avd文件夹\",\"我们想 Nexus_4_API_30.avd文件夹迁移到一个新的位置,我这里迁移到了D:\\\\devtools\\\\Android\\\\avd目录下\",\"打开Nexus_4_API_30.ini 文件,修改path变量为最新的地址,例如我的就是D:\\\\devtools\\\\Android\\\\avd\\\\Nexus_4_API_30.avd\",\"Nexus_4_API_30.ini\"]},\"19\":{\"c\":[\"android\"]},\"20\":{\"h\":\"Android系列之UI\",\"t\":[\"学习于: http://8.136.122.222/book/primary/\",\"android的UI可以分为两类,一类叫做ViewGroup容器,一类叫做View视图.\",\"View视图: TextView,Button,InageView都是常见的视图.\",\"ViewGroup视图: 内部可以承载/放置/添加View视图.\",\"基础布局容易\",\"LinearLayout线性布局: 横着或竖着按顺序排列.\",\"RelativceLayout相对布局: 起始坐标时屏幕左上角,以同级或上级为参考系定位位置.\",\"FrameLayout帧布局: 像千层饼一样,一层压着一层.\",\"ConstrainLayout约束布局: Google于2016年新发布的一种布局方式,它不在android的基础api包里,需额外引入.\",\"AbsoluteLayout绝对布局: 以屏幕左上角为参考系,定位自己的位置,android2.2后废弃.\",\"GridLayout网格布局: 可以指定行数列数,子控件自动根据行列数进行分配位置,于android 4.0后新增进api中\",\"TableLayout表格布局: 类似于网格布局,以一个TableRow标签定义为一行或一列.\"]},\"21\":{\"h\":\"LinearLayout线性布局\",\"t\":[\"线性布局就是从左到右或从上到下按顺序排列的一种布局.\",\"属性\",\"可选值\",\"说明\",\"orientaion\",\"vertical: 垂直排列 horizontal: 水平排列\",\"也就是这个线性布局到底是水平还是垂直方向逐个排列\",\"layout_width layout_height\",\"1. match_parent: 填充父容器的剩余空间 2. wrap_content: 根据子视图宽高自适应自己的宽高 3. 自定义大小 单位为dp\",\"layout_width和layout_height 是android中控件的必要属性,规定了控件的宽度和高度,这两个的属性的值可以是自定的值,也可以根据内容自适应,还可以填充整个剩余空间.\",\"background\",\"#ff0000 红色\",\"填充背景色\",\"gravity\",\"1.center：所有子视图相对于父容器居中显示 2.horizontal_center:所有子容器的横向方向上相对父容器居中显示 3.vertical_center:所有子视图的纵向方向上相对父容器居中显示\",\"决定子控件相对该父容器的位置\",\"layout_gravity\",\"1.center：该容器相对于它的父容器居中显示 2.horizontal_center:该容器横向方向上相对它的父容器居中显示 3.vertical_center:该容器纵向方向上相对它的父容器居中显示\",\"决定该容器相对它的父容器的位置\",\"weight\",\"按比例分配父容器剩余的宽度或高度\",\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> <LinearLayout xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"match_parent\\\" android:gravity=\\\"center\\\" //子视图相对父视图居中显示 android:orientation=\\\"horizontal\\\"> //所有子视图横向摆放 ......... 省略 </LinearLayout>\"]},\"22\":{\"h\":\"相对布局RelativeLayout\",\"t\":[\"相对布局在摆放子视图位置时，按照指定的参考系来摆放子视图的位置，默认以屏幕左上角(0,0)位置作为参考系摆放位置\"]},\"23\":{\"h\":\"相对于父元素 7个常用属性\",\"t\":[\"属性\",\"可选值\",\"说明\",\"layout_alignParentTop\",\"true/false\",\"是否让控件相对于父容器顶部对齐\",\"layout_alignParentBottom\",\"true/false\",\"是否让控件相对于父容器底部对齐\",\"layout_alignParentLeft\",\"true/false\",\"是否让控件相对于父容器左边对齐\",\"layout_alignParentRight\",\"true/false\",\"是否让控件相对于父容器右边对齐\",\"layout_centerHorizontal\",\"true/false\",\"相对父容器水平居中显示\",\"layout_centerVertical\",\"true/false\",\"相对父容器垂直居中显示\",\"centerInParent\",\"true/false\",\"相对父容器居中显示\"]},\"24\":{\"h\":\"相对于兄弟元素 4个常用属性\",\"t\":[\"属性\",\"可选值\",\"说明\",\"layout_above\",\"@+id/\",\"指定在那个控件的上侧\",\"layout_below\",\"@+id/\",\"指定在那个控件的上侧\",\"android:layout_toLeftOf\",\"@+id/\",\"指定在那个控件的左侧\",\"android:layout_toRightOf\",\"@+id/\",\"指定在那个控件的右侧\"]},\"25\":{\"h\":\"相对于兄弟元素的对齐方式\",\"t\":[\"属性\",\"可选值\",\"说明\",\"layout_alignLeft\",\"@+id/\",\"该控件的左边沿与指定控件的左边对齐\",\"layout_aliginRight\",\"@+id/\",\"该控件的右边沿与指定控件的右边对齐\",\"layout_alignTop\",\"@+id/\",\"该控件的上边沿与指定控件的上边沿对齐\",\"layout_alignBottom\",\"@+id/\",\"该控件的下边沿与指定控件的下边沿对齐\"]},\"26\":{\"h\":\"帧布局FrameLayout\",\"t\":[\"组件的默认位置都是左上角，组件之间可以重叠。\",\"像千层饼一样，一层压着一层 可以设置上下左右的对齐、水平垂直居中、设置方式与线性布局相似\",\"属性\",\"可选值\",\"说明\",\"layout_gravity\",\"center/center_vertical/center_horizontal\",\"组件相对父容器的位置\",\"layout_marginLeft\",\"具体的数值100dp\",\"左侧外间距\",\"layout_marginTop\",\"具体的数值100dp\",\"上侧外间距\",\"layout_marginRight\",\"具体的数值100dp\",\"右侧外间距\",\"layout_marginBottom\",\"具体的数值100dp\",\"下侧外间距\"]},\"27\":{\"c\":[\"android\"]},\"28\":{\"h\":\"ElasticSearch全文检索\",\"t\":[\"将⾮结构化数据中的⼀部分信息提取出来,重新组织,使其变得有⼀定结构,然后对此有⼀定结构的数 据进⾏搜索,从⽽达到搜索相对较快的⽬的。这部分从⾮结构化数据中提取出的然后重新组织的信息, 我们称之索引.\",\"例如\",\"字典的拼⾳表和部⾸检字表就相当于字典的索引,对每⼀个字的解释是⾮结构化的,如果字典没有⾳节表和部⾸检字表,在茫茫辞海中找⼀个字只能顺序扫描。 然⽽字的某些信息可以提取出来进⾏结构化处理,⽐如读⾳,就⽐较结构化,分声母和韵母,分别只有⼏种可以⼀⼀列举,于是将读⾳拿出来按⼀定的顺序排列,每⼀项读⾳都指向此字的详细解释的页数。 我们搜索时按结构化的拼⾳搜到读⾳,然后按其指向的页数,便可找到我们的⾮结构化数据——也即对字的解释。\",\"这种先建⽴索引,再对索引进⾏搜索的过程就叫全⽂检索(Full-text Search)。\"]},\"29\":{\"h\":\"相关概念\",\"t\":[\"索引库\",\"索引库就是存储索引的保存在磁盘上的⼀系列的⽂件. ⾥⾯存储了建⽴好的索引信息以及⽂档对象。 ⼀个索引库相当于数据库中的⼀张表\",\"document对象\",\"获取原始内容的⽬的是为了索引,在索引前需要将原始内容创建成⽂档(Document),⽂档中包括⼀个⼀个的域(Field),域中存储内容。每个⽂档都有⼀个唯⼀的编号,就是⽂档id。 document对象相当于表中的⼀条记录。\",\"field对象\",\"如果我们把document看做是数据库中⼀条记录的话,field相当于是记录中的字段。field是索引库中存储数据的最⼩单位。field的数据类型⼤致可以分为数值类型和⽂本类型,⼀般需要查询的字段都是⽂本类型的. field的还有如下属性： 是否分词：是否对域的内容进⾏分词处理。前提是我们要对域的内容进⾏查询。 是否索引：将Field分析后的词或整个Field值进⾏索引,只有索引⽅可搜索到。 ⽐如：商品名称、商品简介分析后进⾏索引,订单号、⾝份证号不⽤分词但也要索引,这些将来都要作为查询条件。 是否存储：将Field值存储在⽂档中,存储在⽂档中的Field才可以从Document中获取 ⽐如：商品名称、订单号,凡是将来要从Document中获取的Field都要存储。\",\"term对象\",\"从⽂档对象中拆分出来的每个单词叫做⼀个Term,不同的域中拆分出来的相同的单词是不同的term。 term中包含两部分⼀部分是⽂档的域名,另⼀部分是单词的内容。term是创建索引的关键词对象。\",\"简介\",\"Elaticsearch,简称为es, es是⼀个开源的⾼扩展的分布式全⽂检索引擎,它可以近乎实时的存储、检索数据； 本⾝扩展性很好,可以扩展到上百台服务器,处理PB级别的数据。es也使⽤Java开发并使⽤Lucene作为其核⼼来实现所有索引和搜索的功能,但是它的⽬的是通过简单的RESTful API来隐藏 Lucene的复杂性,从⽽让全⽂搜索变得简单\",\"ElasticSearch对⽐Solr\",\"Solr 利⽤ Zookeeper 进⾏分布式管理,⽽ Elasticsearch ⾃⾝带有分布式协调管理功能; Solr ⽀持更多格式的数据,⽽ Elasticsearch 仅⽀持json⽂件格式； Solr 官⽅提供的功能更多,⽽ Elasticsearch 本⾝更注重于核⼼功能,⾼级功能多有第三⽅插件提供； Solr 在传统的搜索应⽤中表现好于 Elasticsearch,但在处理实时搜索应⽤时效率明显低于 Elasticsearch\"]},\"30\":{\"h\":\"ES 术语\",\"t\":[\"Elasticsearch是⾯向⽂档(document oriented)的,这意味着它可以存储整个对象或⽂档(document)。然⽽它不仅仅是存储,还会索引(index)每个⽂档的内容使之可以被搜索。在Elasticsearch中,你可以对⽂档(⽽⾮成⾏成列的数据)进⾏索引、搜索、排序、过滤。\",\"Elasticsearch⽐传统关系型数据库如下:\",\"Relational DB -> Databases -> Tables -> Rows -> Columns Elasticsearch -> Indices -> Types -> Documents -> Fields 简单来说就是 数据库 对应 es 的索引 数据表 对应 es 的类型 表记录 对应 es 的文档 表的列 对应 es 的fields(属性)\"]},\"31\":{\"h\":\"Indices(索引)\",\"t\":[\"⼀个索引就是⼀个拥有⼏分相似特征的⽂档的集合。 ⼀个集群中,可以定义任意多的索引. 示例 比如说现在由三个索引,客户数据索引,产品目录索引,订单数据索引. 一个索引由一个名字来标识,并且当我们要对对应于这个索引中的文档进行索引,搜索,更新,删除的时候都需要使用这个标识(名字).\"]},\"32\":{\"h\":\"type(类型)\",\"t\":[\"在⼀个索引中,你可以定义⼀种或多种类型。 ⼀个类型是你的索引的⼀个逻辑上的分类/分区,其语义完全由你来定。 通常,会为具有⼀组共同字段的⽂档定义⼀个类型。 示例 ⽐如说现在运营⼀个博客平台并且将所有的数据存储到⼀个索引中。 在这个索引中,可以为⽤户数据定义⼀个类型,为博客数据定义另⼀个类型,当然也可以为评论数据定义另⼀个类型。\"]},\"33\":{\"h\":\"Field(字段)\",\"t\":[\"相当于是数据表的字段,对⽂档数据根据不同属性进⾏的分类标识\"]},\"34\":{\"h\":\"mapping(映射)\",\"t\":[\"mapping是处理数据的⽅式和规则⽅⾯做⼀些限制,如某个字段的数据类型、默认值、分析器、是否被索引等等,这些都是映射⾥⾯可以设置的,其它就是处理es⾥⾯数据的⼀些使⽤规则设置也叫做映射,按着最优规则处理数据对性能提⾼很⼤,因此才需要建⽴映射,并且需要思考如何建⽴映射才能对性能更好\"]},\"35\":{\"h\":\"document(⽂档)\",\"t\":[\"⼀个⽂档是⼀个可被索引的基础信息单元。⽐如,你可以拥有某⼀个客户的⽂档,某⼀个产品的⼀个⽂档,当然,也可以拥有某个订单的⼀个⽂档。⽂档以JSON(Javascript Object Notation)格式来表⽰,⽽JSON是⼀个到处存在的互联⽹数据交互格式。 在⼀个index/type⾥⾯,你可以存储任意多的⽂档。注意,尽管⼀个⽂档,物理上存在于⼀个索引之中,⽂档必须被索引/赋予⼀个索引的type。\"]},\"36\":{\"h\":\"NRT(接近实时)\",\"t\":[\"Elasticsearch是⼀个接近实时的搜索平台。 这意味着,从索引⼀个⽂档直到这个⽂档能够被搜索到有⼀个轻微的延迟(通常是1秒以内)\"]},\"37\":{\"h\":\"cluster(集群)\",\"t\":[\"⼀个集群就是由⼀个或多个节点组织在⼀起,它们共同持有整个的数据,并⼀起提供索引和搜索功能。 ⼀个集群由⼀个唯⼀的名字标识,这个名字默认就是“elasticsearch”。 这个名字是重要的,因为⼀个节点只能通过指定某个集群的名字,来加⼊这个集群\"]},\"38\":{\"h\":\"node(节点)\",\"t\":[\"⼀个节点是集群中的⼀个服务器,作为集群的⼀部分,它存储数据,参与集群的索引和搜索功能。 和集群类似,⼀个节点也是由⼀个名字来标识的,默认情况下,这个名字是⼀个随机的漫威漫画⾓⾊的名字,这个名字会在启动的时候赋予节点。这个名字对于管理⼯作来说挺重要的,因为在这个管理过程中,你会去确定⽹络中的哪些服务器对应于Elasticsearch集群中的哪些节点。 ⼀个节点可以通过配置集群名称的⽅式来加⼊⼀个指定的集群。默认情况下,每个节点都会被安排加⼊到⼀个叫做“elasticsearch”的集群中,这意味着,如果你在你的⽹络中启动了若⼲个节点,并假定它们能够相互发现彼此,它们将会⾃动地形成并加⼊到⼀个叫做“elasticsearch”的集群中。 在⼀个集群⾥,只要你想,可以拥有任意多个节点。⽽且,如果当前你的⽹络中没有运⾏任何 Elasticsearch节点,这时启动⼀个节点,会默认创建并加⼊⼀个叫做“elasticsearch”的集群。\"]},\"39\":{\"h\":\"shards&replicas(分⽚和复制)\",\"t\":[\"⼀个索引可以存储超出单个结点硬件限制的⼤量数据。⽐如,⼀个具有10亿⽂档的索引占据1TB的磁盘空间,⽽任⼀节点都没有这样⼤的磁盘空间；或者单个节点处理搜索请求,响应太慢。为了解决这个问题,Elasticsearch提供了将索引划分成多份的能⼒,这些份就叫做分⽚。当你创建⼀个索引的时候,你可以指定你想要的分⽚的数量。每个分⽚本⾝也是⼀个功能完善并且独⽴的“索引”,这个“索引”可以被放置到集群中的任何节点上。分⽚很重要,主要有两⽅⾯的原因： 1. 允许你⽔平分割/扩展你的内容容量。 2. 允许你在分⽚(潜在地,位于多个节点上)之上进⾏分布式的、并⾏的操作,进⽽提⾼性能/吞吐 量。 ⾄于⼀个分⽚怎样分布,它的⽂档怎样聚合回搜索请求,是完全由Elasticsearch管理的,对于作为⽤户的你来说,这些都是透明的。 在⼀个⽹络/云的环境⾥,失败随时都可能发⽣,在某个分⽚/节点不知怎么的就处于离线状态,或者由于任何原因消失了,这种情况下,有⼀个故障转移机制是⾮常有⽤并且是强烈推荐的。为此⽬的,Elasticsearch允许你创建分⽚的⼀份或多份拷贝,这些拷贝叫做复制分⽚,或者直接叫复制。 复制之所以重要,有两个主要原因： 在分⽚/节点失败的情况下,提供了⾼可⽤性。因为这个原因,注意到复制分⽚从不与原/主要(original/primary)分⽚置于同⼀节点上是⾮常重要的。 扩展你的搜索量/吞吐量,因为搜索可以在所有的复制上并⾏运⾏。总之,每个索引可以被分成多个分⽚。 ⼀个索引也可以被复制0次(意思是没有复制)或多次。⼀旦复制了,每个索引就有了主分⽚(作为复制源的原来的分⽚)和复制分⽚(主分⽚的拷贝)之别。分⽚和复制的数量可以在索引创建的时候指定。在索引创建之后,你可以在任何时候动态地改变复制的数量,但是你事后不能改变分⽚的数量。 默认情况下,Elasticsearch中的每个索引被分⽚5个主分⽚和1个复制,这意味着,如果你的集群中⾄少 有两个节点,你的索引将会有5个主分⽚和另外5个复制分⽚(1个完全拷贝),这样的话每个索引总共 就有10个分⽚\"]},\"40\":{\"h\":\"ElasticSearch的客户端操作\",\"t\":[\"1. elasticsearch-head插件 2. 使⽤elasticsearch提供的Restful接⼜直接访问 3. 使⽤elasticsearch提供的API进⾏访问\"]},\"41\":{\"h\":\"elasticsearch-head\",\"t\":[\"ElasticSearch不同于Solr⾃带图形化界⾯,我们可以通过安装ElasticSearch的head插件,完成图形化界⾯的效果,完成索引数据的查看。 安装插件的⽅式有两种,在线安装和本地安装。 本⽂档采⽤本地安装⽅式进⾏head插件的安装。 elasticsearch-5-*以上版本安装head需要安装node和grunt 下载head插件：https://github.com/mobz/elasticsearch-head\",\"将elasticsearch-head-master压缩包解压到任意⽬录,但是要和elasticsearch的安装⽬录区别开\",\"下载nodejs：https://nodejs.org/en/download/\",\"使用 nodejs 安装\",\"# 在 elasticsearch-head-master 根目录下运行下面命令 npm install -g grunt-cli # 进⼊elasticsearch-head-master⽬录启动head npm install grunt server # 打开浏览器,输⼊ http://localhost:9100 即可访问到web页面\"]},\"42\":{\"h\":\"使用 apifox 工具进行 Resuful 接口访问\",\"t\":[\"接口语法\",\"curl -X<VERB> '<PROTOCOL>://<HOST>:<PORT>/<PATH>?<QUERY_STRING>' -d '<BODY>'\",\"参数\",\"解释\",\"VERB\",\"适当的 HTTP ⽅法 或 谓词 : GET、 POST、 PUT、 HEAD 或者 DELETE。\",\"PROTOCOL\",\"http 或者 https(如果你在 Elasticsearch 前⾯有⼀个 https 代理)\",\"HOST\",\"Elasticsearch 集群中任意节点的主机名,或者⽤ localhost 代表本地机器上的节点。\",\"PORT\",\"运⾏ Elasticsearch HTTP 服务的端⼜号,默认是 9200 。\",\"PATH\",\"API 的终端路径(例如 _count 将返回集群中⽂档数量)。Path 可能包含多个组件,例如：_cluster/stats 和 _nodes/stats/jvm 。\",\"QUERY_STRING\",\"任意可选的查询字符串参数 (例如 ?pretty 将格式化地输出 JSON 返回值,使其更容易阅读)\",\"BODY\",\"⼀个 JSON 格式的请求体 (如果请求需要的话)\"]},\"43\":{\"h\":\"创建索引(index)和映射(mapping)\",\"t\":[\"请求url\",\"PUT ip:9200/test1\",\"请求体\",\"{ \\\"mappings\\\":{ \\\"article\\\": { \\\"properties\\\": { \\\"id\\\": { \\\"type\\\": \\\"long\\\", \\\"store\\\": true, \\\"index\\\":\\\"not_analyzed\\\" }, \\\"title\\\": { \\\"type\\\": \\\"text\\\", \\\"store\\\": true, \\\"index\\\":\\\"analyzed\\\", \\\"analyzer\\\":\\\"standard\\\" }, \\\"content\\\": { \\\"type\\\": \\\"text\\\", \\\"store\\\": true, \\\"index\\\":\\\"analyzed\\\", \\\"analyzer\\\":\\\"standard\\\" } } } } }\",\"示例图\",\"在 es_head 中查看\",\"es_head_test1\"]},\"44\":{\"h\":\"先创建索引后设置 mapping\",\"t\":[\"请求的url\",\"# 创建索引 PUT http://centos:9200/test2 # 设置 mapping POST http://centos:9200/test2/hello/_mapping\",\"请求体\",\"{ \\\"hello\\\":{ \\\"properties\\\": { \\\"id\\\":{ \\\"type\\\":\\\"long\\\", \\\"store\\\":true }, \\\"title\\\":{ \\\"type\\\":\\\"text\\\", \\\"store\\\":true, \\\"index\\\":true, \\\"analyzer\\\":\\\"standard\\\" }, \\\"content\\\":{ \\\"type\\\":\\\"text\\\", \\\"store\\\":true, \\\"index\\\":\\\"analyzed\\\", \\\"analyzer\\\":\\\"standard\\\" } } } }\"]},\"45\":{\"h\":\"删除索引\",\"t\":[\"请求 url\",\"DELETE http://192.168.65.128:9200/test1\"]},\"46\":{\"h\":\"创建文档\",\"t\":[\"请求 url\",\"POST http://centos:9200/test2/hello/1\",\"请求体\",\"{ \\\"id\\\":1, \\\"title\\\":\\\"ElasticSearch是⼀个基于Lucene的搜索服务器\\\", \\\"content\\\":\\\"它提供了⼀个分布式多⽤户能⼒的全⽂搜索引擎，基于RESTful web接⼝\\\" }\",\"成功截图\",\"es apifox success\",\"es_head 数据截图\",\"es head index\"]},\"47\":{\"h\":\"删除⽂档document\",\"t\":[\"请求 url\",\"DELETE http://centos:9200/test2/hello/1\"]},\"48\":{\"h\":\"查询文档-根据id查询\",\"t\":[\"请求url\",\"GET centos:9200/test2/hello/1\",\"请求成功\",\"es apifox get\"]},\"49\":{\"h\":\"查询⽂档-querystring查询\",\"t\":[\"请求url\",\"POST http://centos:9200/test2/hello/_search\",\"请求体\",\"{ \\\"query\\\":{ \\\"query_string\\\":{ \\\"default_field\\\":\\\"title\\\", \\\"query\\\":\\\"搜索服务器\\\" } } }\",\"请求成功返回\",\"es apifox search\",\"使用标准分词的时候是一个字一个词进行分词的,所以我们查询不同的词也可以查询出该结果例如 刚索\"]},\"50\":{\"h\":\"查询⽂档-term查询\",\"t\":[\"请求url\",\"POST http://centos:9200/test2/hello/_search\",\"请求体\",\"{ \\\"query\\\":{ \\\"term\\\":{ \\\"title\\\":\\\"搜索服务器\\\" } } }\",\"因为 term 是不分词查找所以是在当前案例中是没有结果的.\"]},\"51\":{\"h\":\"IK 分词器\",\"t\":[\"简介\",\"IKAnalyzer是⼀个开源的，基于java语⾔开发的轻量级的中⽂分词⼯具包。从2006年12⽉推出1.0版开始，IKAnalyzer已经推出 了3个⼤版本。最初，它是以开源项⽬Lucene为应⽤主体的，结合词典分词和⽂法分析算法的中⽂分词组件。 新版本的IKAnalyzer3.0则发展为 ⾯向Java的公⽤分词组件，独⽴于Lucene项⽬，同时提供了对Lucene的默认优化实现。\"]},\"52\":{\"h\":\"IK分词器 分词\",\"t\":[\"请求 url\",\"http://centos:9200/_analyze?analyzer=ik_smart&pretty=true&text=我是程序员 http://centos:9200/_analyze?analyzer=ik_max_word&pretty=true&text=我是程序员 解释 analyzer 分词模式 ik_smart 粗粒度分词,根据语义进行最粗粒度的分词 ik_max_word 细粒度分词,会将⽂本做最细粒度的拆分 standard es自己的分词模式,一个中文字符一个词 pretty 格式输出 text 分词的字符串\"]},\"53\":{\"h\":\"使用 Ik 进行分词\",\"t\":[\"创建索引请求url\",\"PUT http://centos:9200/test3\",\"请求体\",\"{ \\\"mappings\\\":{ \\\"ik_test\\\": { \\\"properties\\\": { \\\"id\\\": { \\\"type\\\": \\\"long\\\", \\\"store\\\": true, \\\"index\\\":\\\"not_analyzed\\\" }, \\\"title\\\": { \\\"type\\\": \\\"text\\\", \\\"store\\\": true, \\\"index\\\":\\\"analyzed\\\", \\\"analyzer\\\":\\\"ik_max_word\\\" }, \\\"content\\\": { \\\"type\\\": \\\"text\\\", \\\"store\\\": true, \\\"index\\\":\\\"analyzed\\\", \\\"analyzer\\\":\\\"ik_max_word\\\" } } } } }\",\"创建文档的请求url\",\"POST http://centos:9200/test3/ik_test/1\",\"请求体\",\"{ \\\"id\\\":1, \\\"title\\\":\\\"ElasticSearch是⼀个基于Lucene的搜索服务器\\\", \\\"content\\\":\\\"它提供了⼀个分布式多⽤户能⼒的全⽂搜索引擎，基于RESTful web接⼝\\\" }\",\"查询文档title的请求\",\"GET http://centos:9200/test3/_search\",\"请求体\",\"{ \\\"query\\\":{ \\\"term\\\":{ \\\"title\\\":\\\"搜索\\\" } } }\",\"这样是可以查出来的,但是如果我们换成刚才查询使用的 '钢索' 这个词的时候就搜不出来了.\"]},\"54\":{\"h\":\"Kibana\",\"t\":[\"简介\",\"Kibana 是⼀款开源的数据分析和可视化平台，它是 Elastic Stack 成员之⼀，设计⽤于和 Elasticsearch协作。 可以使⽤ Kibana 对 Elasticsearch 索引中的数据进⾏搜索、查看、交互操作。 可以很⽅便的利⽤图表、表格及地图对数据进⾏多元化的分析和呈现。 Kibana 可以使⼤数据通俗易懂。 它很简单，基于浏览器的界⾯便于您快速创建和分享动态数据仪表板来追踪 Elasticsearch 的实时数据变化。\",\"快捷键\",\"ctrl+i ⾃动缩进 ctrl+enter 提交请求 down 打开⾃动补全菜单 enter或tab 选中项⾃动补全 esc 关闭补全菜单\"]},\"55\":{\"h\":\"Kibana 设置\",\"t\":[\"要是 Kibana必须至少配置一个索引,索引用于标识 Elasticsearch 索引进行分析和搜索也可以用于配置字段.\",\"根据以下图片进行配置索引\",\"搜索数据 \"]},\"56\":{\"h\":\"Kibana DSL 使用\",\"t\":[\"Query DSL是⼀个Java开源框架⽤于构建类型安全的SQL查询语句。采⽤API代替传统的拼接字符串来构造查询语句。\",\"⽬前Querydsl⽀持的平台包括JPA,JDO，SQL，Java Collections，RDF，Lucene，Hibernate Search。\",\"elasticsearch提供了⼀整套基于JSON的DSL语⾔来定义查询\"]},\"57\":{\"h\":\"索引操作\",\"t\":[\"查询所有索引\",\"GET /_cat/indices?v\",\"结果图如下 \",\"删除某个索引\",\"DELETE /test2\",\"结果图如下 \",\"新增一个索引\",\"# 因为没有这个所以了,先创建这个索引 PUT test2 # 为 test2 这个索引添加 mapping 映射 PUT /test2/testinfo/_mapping { \\\"properties\\\": { \\\"name\\\": { \\\"type\\\": \\\"text\\\", \\\"analyzer\\\": \\\"ik_smart\\\", \\\"search_analyzer\\\": \\\"ik_smart\\\" }, \\\"city\\\": { \\\"type\\\": \\\"text\\\", \\\"analyzer\\\": \\\"ik_smart\\\", \\\"search_analyzer\\\": \\\"ik_smart\\\" }, \\\"age\\\": { \\\"type\\\": \\\"long\\\" }, \\\"description\\\": { \\\"type\\\": \\\"text\\\", \\\"analyzer\\\": \\\"ik_smart\\\", \\\"search_analyzer\\\": \\\"ik_smart\\\" } } } # 解释 # \\\"name\\\": 域 # analyzer: 分词器 # search_analyzer: 搜索分词器\",\"新增文档数据\",\"PUT test2/testinfo/1 { \\\"name\\\":\\\"李四\\\", \\\"age\\\":22, \\\"city\\\":\\\"北京\\\", \\\"description\\\":\\\"北京东城区\\\" } # 为了一行方便查数据,多添加几条. PUT test2/testinfo/2 { \\\"name\\\":\\\"王一\\\", \\\"age\\\":26, \\\"city\\\":\\\"陕西\\\", \\\"description\\\":\\\"王一来自陕西东部\\\" } PUT test2/testinfo/3 { \\\"name\\\":\\\"张三\\\", \\\"age\\\":25, \\\"city\\\":\\\"黄河\\\", \\\"description\\\":\\\"张三来自黄河流域\\\" } PUT test2/testinfo/4 { \\\"name\\\":\\\"王老五\\\", \\\"age\\\":24, \\\"city\\\":\\\"杭州\\\", \\\"description\\\":\\\"王老五来自杭州某乡\\\" } PUT test2/testinfo/5 { \\\"name\\\":\\\"李老六\\\", \\\"age\\\":23, \\\"city\\\":\\\"四川\\\", \\\"description\\\":\\\"李老六来自四川成都\\\" }\",\"修改文档数据\",\"PUT test2/testinfo/4 { \\\"name\\\":\\\"王老五_put\\\", \\\"age\\\":22, \\\"city\\\":\\\"杭州\\\", \\\"description\\\":\\\"王老五来自杭州某乡\\\" }\",\"查询所有数据\",\"# 根据id 查询 GET /test2/testinfo/4 # 查询所有 GET /test2/testinfo/_search\",\"sort 排序\",\"GET /test2/_search { \\\"query\\\": { # match_all 所有字段 \\\"match_all\\\": {} }, \\\"sort\\\": [ { # 根据 age 这个字段进行倒序排序 \\\"age\\\": { \\\"order\\\": \\\"desc\\\" } } ] }\",\"分页实现\",\"GET /test2/_search { \\\"query\\\": { \\\"match_all\\\": {} }, \\\"sort\\\": [ { \\\"age\\\": { \\\"order\\\": \\\"desc\\\" } } ], \\\"from\\\": 0, \\\"size\\\": 2 }\",\"term 查询\",\"GET _search { \\\"query\\\": { # 使用 term 时是不分词的 \\\"term\\\": { \\\"city\\\": { \\\"value\\\": \\\"四川\\\" } } } }\",\"terms 多个词条查询\",\"GET _search { \\\"query\\\": { \\\"terms\\\": { \\\"city\\\": [ \\\"四川\\\", \\\"杭州\\\" ] } } }\",\"mathc 查询\",\"GET _search { \\\"query\\\": { # 使用 match 时是分词的 \\\"match\\\": { \\\"city\\\": \\\"四川杭州 \\\" } } }\",\"query_string 查询\",\"GET _search { \\\"query\\\": { \\\"query_string\\\": { \\\"default_field\\\": \\\"city\\\", \\\"query\\\": \\\"四川杭州\\\" } } }\",\"range 查询(范围查询) 例如年龄范围\",\"GET _search { \\\"query\\\": { \\\"range\\\": { \\\"age\\\": { \\\"gte\\\": 20, \\\"lte\\\": 24 } } } }\",\"exists 查询(exists 过滤可以⽤于查找拥有某个域的数据)\",\"GET _search { \\\"query\\\": { \\\"exists\\\":{ \\\"field\\\":\\\"address\\\" } } }\",\"bool 查询\",\"bool 可以⽤来合并多个条件查询结果的布尔逻辑，它包含⼀下操作符：\",\"must : 多个查询条件的完全匹配,相当于 and。\",\"must_not : 多个查询条件的相反匹配，相当于 not。\",\"should : ⾄少有⼀个查询条件匹配, 相当于 or。\",\"# bool --- must GET _search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ { \\\"term\\\": { \\\"city\\\": { \\\"value\\\": \\\"四川\\\" } } }, { \\\"range\\\": { \\\"age\\\": { \\\"gte\\\": 20, \\\"lte\\\": 30 } } } ] } } } # bool --- must_not GET _search { \\\"query\\\": { \\\"bool\\\": { \\\"must_not\\\": [ { \\\"term\\\": { \\\"city\\\": { \\\"value\\\": \\\"四川\\\" } } }, { \\\"range\\\": { \\\"age\\\": { \\\"gte\\\": 20, \\\"lte\\\": 30 } } } ] } } } # bool --- should GET _search { \\\"query\\\": { \\\"bool\\\": { \\\"should\\\": [ { \\\"term\\\": { \\\"city\\\": { \\\"value\\\": \\\"四川\\\" } } }, { \\\"range\\\": { \\\"age\\\": { \\\"gte\\\": 20, \\\"lte\\\": 30 } } } ] } } }\",\"prefix 匹配开头查询\",\"GET _search { \\\"query\\\": { \\\"prefix\\\": { \\\"name\\\": { \\\"value\\\": \\\"李\\\" } } } }\",\"multi_match 在那些字段中查找匹配字符\",\"GET _search { \\\"query\\\": { \\\"multi_match\\\": { \\\"query\\\": \\\"四川\\\", \\\"fields\\\": [ \\\"city\\\", \\\"description\\\" ] } } }\",\"bool -filter (filter 只能用在 bool 里面)\",\"GET _search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ {\\\"match\\\": { \\\"city\\\": \\\"四川\\\" }} ], \\\"filter\\\": { \\\"range\\\": { \\\"age\\\": { \\\"gte\\\": 20, \\\"lte\\\": 24 } } } } } }\",\"因为过滤可以使⽤缓存，同时不计算分数，通常的规则是，使⽤查询(query)语句来进⾏ 全⽂ 搜索或者其它任何需要影响 相关性得分 的搜索。除此以外的情况都使⽤过滤(filters)\"]},\"58\":{\"h\":\"JavaApi 操作 ElasticSearch\",\"t\":[\"pom 导入依赖\",\"<dependencies> <dependency> <groupId>org.elasticsearch</groupId> <artifactId>elasticsearch</artifactId> <version>5.6.8</version> </dependency> <dependency> <groupId>org.elasticsearch.client</groupId> <artifactId>transport</artifactId> <version>5.6.8</version> </dependency> <dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-to-slf4j</artifactId> <version>2.9.1</version> </dependency> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> <version>1.7.24</version> </dependency> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-simple</artifactId> <version>1.7.21</version> </dependency> <dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> <version>1.2.12</version> </dependency> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> </dependency> </dependencies>\"]},\"59\":{\"h\":\"创建索引\",\"t\":[\"/** * @author black_fire */ public class CreateIndexTest { TransportClient client; @Before public void init() throws Exception{ // 1. 配置 Settings settings = Settings.builder().put(\\\"cluster.name\\\",\\\"my-elasticsearch\\\").build(); // 2. 客户端 client = new PreBuiltTransportClient(settings); // 给客户端创建连接节点 client.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(\\\"192.168.65.128\\\"),9300)); } /** * 创建索引不添加映射 * Settings.builder().put(\\\"cluster.name\\\",\\\"my-elasticsearch\\\").build() * 根据 es 名创建一个设置 * new PreBuiltTransportClient(settings) * 创建客户端 * InetSocketTransportAddress(InetAddress address, int port) * 创建链接节点,需要传入 ip地址和 请求端口 * prepareCreate(String index) * 传入 要创建的索引名 * .get() * 执行当前方法 */ @Test public void test() throws Exception{ // 3. 创建索引 .get() 是执行 该创建 client.admin().indices().prepareCreate(\\\"index_hello\\\").get(); // 释放资源 client.close(); } }\"]},\"60\":{\"h\":\"创建映射\",\"t\":[\"/** * @author black_fire */ public class CreateIndexTest { TransportClient client; @Before public void init() throws Exception{ // 1. 配置 Settings settings = Settings.builder().put(\\\"cluster.name\\\",\\\"my-elasticsearch\\\").build(); // 2. 客户端 client = new PreBuiltTransportClient(settings); // 给客户端创建连接节点 client.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(\\\"192.168.65.128\\\"),9300)); } @Test public void setMappings() throws Exception{ // mapping 主体 XContentBuilder builder = XContentFactory.jsonBuilder() .startObject() .startObject(\\\"article\\\") .startObject(\\\"properties\\\") .startObject(\\\"id\\\") .field(\\\"type\\\",\\\"integer\\\") .field(\\\"store\\\",\\\"yes\\\") .endObject() .startObject(\\\"title\\\") .field(\\\"type\\\",\\\"string\\\") .field(\\\"store\\\",\\\"yes\\\") .field(\\\"analyzer\\\",\\\"ik_smart\\\") .endObject() .startObject(\\\"content\\\") .field(\\\"type\\\",\\\"string\\\") .field(\\\"store\\\",\\\"yes\\\") .field(\\\"analyzer\\\",\\\"ik_smart\\\") .endObject() .endObject() .endObject() .endObject(); // 使用 api 给索引创建 mapping client.admin().indices().preparePutMapping(\\\"index_hello\\\").setType(\\\"article\\\").setSource(builder).get(); // 释放资源 client.close(); } }\"]},\"61\":{\"h\":\"创建文档\"},\"62\":{\"h\":\"XContentBuilder 构建 Document 对象\",\"t\":[\"import org.elasticsearch.client.transport.TransportClient; import org.elasticsearch.common.settings.Settings; import org.elasticsearch.common.transport.InetSocketTransportAddress; import org.elasticsearch.common.xcontent.XContentBuilder; import org.elasticsearch.common.xcontent.XContentFactory; import org.elasticsearch.transport.client.PreBuiltTransportClient; import org.junit.Before; import org.junit.Test; import java.net.InetAddress; /** * @author black_fire */ public class CreateIndexTest { TransportClient client; @Before public void init() throws Exception{ // 1. 配置 Settings settings = Settings.builder().put(\\\"cluster.name\\\",\\\"my-elasticsearch\\\").build(); // 2. 客户端 client = new PreBuiltTransportClient(settings); // 给客户端创建连接节点 client.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(\\\"192.168.65.128\\\"),9300)); } /** * 使用 XContentBuilder 构建 Document 对象 */ @Test public void testAddDocument() throws Exception{ // 创建一个文档对象 XContentBuilder builder = XContentFactory.jsonBuilder() .startObject() .field(\\\"id\\\",2L) .field(\\\"title\\\",\\\"北方入秋速度明显加快,多地降温明显\\\") .field(\\\"content\\\",\\\"客机在某某机场被隔离,10多名乘客病倒\\\") .endObject(); // 把文档对象添加到索引库 client.prepareIndex() // 设置索引名称 .setIndex(\\\"index_hello\\\") // 设置type .setType(\\\"article\\\") // 设置id .setId(\\\"2\\\") // 设置文档信息 .setSource(builder) // 执行操作 .get(); // 关闭客户端 client.close(); } }\"]},\"63\":{\"h\":\"使用 jackson 将实体类转换\",\"t\":[\"pom导入依赖\",\"<dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-core</artifactId> <version>2.13.1</version> </dependency> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-annotations</artifactId> <version>2.13.1</version> </dependency> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.13.1</version> </dependency>\",\"实体类\",\"public class Article { private Integer id; private String title; private String content; // 省略 get/set 方法 }\",\"使用 jackson 转换实体类进行创建文档\",\"import com.black_fire.admin.Article; import com.fasterxml.jackson.databind.ObjectMapper; import org.elasticsearch.client.transport.TransportClient; import org.elasticsearch.common.settings.Settings; import org.elasticsearch.common.transport.InetSocketTransportAddress; import org.elasticsearch.common.xcontent.XContentBuilder; import org.elasticsearch.common.xcontent.XContentFactory; import org.elasticsearch.common.xcontent.XContentType; import org.elasticsearch.transport.client.PreBuiltTransportClient; import org.junit.Before; import org.junit.Test; import java.net.InetAddress; /** * @author black_fire */ public class CreateIndexTest { TransportClient client; @Before public void init() throws Exception { // 1. 配置 Settings settings = Settings.builder().put(\\\"cluster.name\\\", \\\"my-elasticsearch\\\").build(); // 2. 客户端 client = new PreBuiltTransportClient(settings); // 给客户端创建连接节点 client.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(\\\"192.168.65.128\\\"), 9300)); } @Test public void testAddDocument1() throws Exception { Article article = new Article(); article.setId(1); article.setTitle(\\\"测试 jackson 转换- title\\\"); article.setContent(\\\"测试 jackson 转换- content\\\"); ObjectMapper objectMapper = new ObjectMapper(); String json = objectMapper.writeValueAsString(article); // 把文档对象添加到索引库 client.prepareIndex(\\\"index_hello\\\", \\\"article\\\", \\\"3\\\") // 设置文档信息 .setSource(json, XContentType.JSON) // 执行操作 .get(); // 关闭客户端 client.close(); } /** * 为查询准备数据 */ @Test public void testAddDocument3() throws Exception { for (int i = 4; i < 100; i++) { //创建⼀个Article对象 Article article = new Article(); //设置对象的属性 article.setId(i); article.setTitle(\\\"⼥护⼠路遇昏迷男⼦跪地抢救：救⼈是职责更是本能\\\" + i); article.setContent(\\\"江⻄变质营养餐事件已致24⼈就医 多名官员被调查\\\" + i); //把article对象转换成json格式的字符串。 ObjectMapper objectMapper = new ObjectMapper(); String jsonDocument = objectMapper.writeValueAsString(article); System.out.println(jsonDocument); //使⽤client对象把⽂档写⼊索引库 client.prepareIndex(\\\"index_hello\\\", \\\"article\\\", i + \\\"\\\") .setSource(jsonDocument, XContentType.JSON) .get(); } //关闭客户端 client.close(); } }\"]},\"64\":{\"h\":\"查询文档操作\"},\"65\":{\"h\":\"重复代码提取(看此篇幅前先看这里)\",\"t\":[\"import org.elasticsearch.action.search.SearchResponse; import org.elasticsearch.client.transport.TransportClient; import org.elasticsearch.common.settings.Settings; import org.elasticsearch.common.transport.InetSocketTransportAddress; import org.elasticsearch.index.query.QueryBuilder; import org.elasticsearch.index.query.QueryBuilders; import org.elasticsearch.search.SearchHit; import org.elasticsearch.search.SearchHits; import org.elasticsearch.transport.client.PreBuiltTransportClient; import org.junit.Before; import org.junit.Test; import java.net.InetAddress; import java.util.Iterator; import java.util.Map; /** * @author black_fire */ public class IndexSearchTest { TransportClient client; @Before public void init() throws Exception { // 1. 配置 Settings settings = Settings.builder().put(\\\"cluster.name\\\", \\\"my-elasticsearch\\\").build(); // 2. 客户端 client = new PreBuiltTransportClient(settings); // 给客户端创建连接节点 client.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(\\\"192.168.65.128\\\"), 9300)); } private void search(QueryBuilder builder) { // 执行查询得到一个结果 SearchResponse searchResponse = client.prepareSearch(\\\"index_hello\\\") .setTypes(\\\"article\\\") .setQuery(builder) .get(); // 处理结果 SearchHits searchHits = searchResponse.getHits(); System.out.println(\\\"总行数\\\" + searchHits.getTotalHits()); Iterator<SearchHit> searchHitIterator = searchHits.iterator(); while (searchHitIterator.hasNext()) { SearchHit searchHit = searchHitIterator.next(); // source --> document 文档输出 System.out.println(searchHit.getSourceAsString()); System.out.println(\\\"----文档属性----\\\"); Map<String, Object> sourceAsMap = searchHit.getSourceAsMap(); System.out.println(sourceAsMap.get(\\\"id\\\")); System.out.println(sourceAsMap.get(\\\"title\\\")); System.out.println(sourceAsMap.get(\\\"content\\\")); } } }\"]},\"66\":{\"h\":\"termQuery\",\"t\":[\"@Test public void testQueryByTeam() throws Exception { // 产生 queryBuilder QueryBuilder builder = QueryBuilders.termQuery(\\\"title\\\", \\\"跪地\\\"); search(builder); }\"]},\"67\":{\"h\":\"queryString\",\"t\":[\"@Test public void testQueryByQueryString() throws Exception { // 产生 queryBuilder QueryBuilder builder = QueryBuilders.queryStringQuery(\\\"美丽的女护士\\\"); search(builder); }\"]},\"68\":{\"h\":\"mathQuery\",\"t\":[\"@Test public void testQueryByMathQuery() throws Exception { // 产生 queryBuilder QueryBuilder builder = QueryBuilders.matchQuery(\\\"title\\\",\\\"女护士\\\"); search(builder); }\"]},\"69\":{\"h\":\"根据id 查询\",\"t\":[\"@Test public void testQueryById(){ // 产生 queryBuilder QueryBuilder builder = QueryBuilders.idsQuery().addIds(\\\"2\\\",\\\"3\\\"); search(builder); }\"]},\"70\":{\"h\":\"分页\",\"t\":[\"@Test public void testQueryByMachAll(){ // 产生 queryBuilder QueryBuilder builder = QueryBuilders.matchAllQuery(); // 执行查询得到一个结果 SearchResponse searchResponse = client.prepareSearch(\\\"index_hello\\\") .setTypes(\\\"article\\\") .setQuery(builder) .setFrom(0) .setSize(5) .get(); // 处理结果 SearchHits searchHits = searchResponse.getHits(); System.out.println(\\\"总行数\\\" + searchHits.getTotalHits()); Iterator<SearchHit> searchHitIterator = searchHits.iterator(); while (searchHitIterator.hasNext()) { SearchHit searchHit = searchHitIterator.next(); // source --> document 文档输出 System.out.println(searchHit.getSourceAsString()); System.out.println(\\\"----文档属性----\\\"); Map<String, Object> sourceAsMap = searchHit.getSourceAsMap(); System.out.println(sourceAsMap.get(\\\"id\\\")); System.out.println(sourceAsMap.get(\\\"title\\\")); System.out.println(sourceAsMap.get(\\\"content\\\")); } }\"]},\"71\":{\"h\":\"查询结果高亮代码实现\",\"t\":[\"@Test public void testQueryByHighlight(){ // 产生 queryBuilder QueryBuilder builder = QueryBuilders.multiMatchQuery(\\\"测试\\\",\\\"title\\\",\\\"content\\\"); // 对高亮进行标注 HighlightBuilder highlightBuilder = new HighlightBuilder(); highlightBuilder.field(\\\"title\\\"); highlightBuilder.preTags(\\\"<em>\\\"); highlightBuilder.postTags(\\\"</em>\\\"); // 执行查询得到一个结果 SearchResponse searchResponse = client.prepareSearch(\\\"index_hello\\\") .setTypes(\\\"article\\\") .setQuery(builder) .highlighter(highlightBuilder) .get(); // 处理结果 SearchHits searchHits = searchResponse.getHits(); System.out.println(\\\"总行数\\\" + searchHits.getTotalHits()); Iterator<SearchHit> searchHitIterator = searchHits.iterator(); while (searchHitIterator.hasNext()) { SearchHit searchHit = searchHitIterator.next(); // source --> document 文档输出 System.out.println(\\\"----文档内容----\\\"); System.out.println(searchHit.getSourceAsString()); System.out.println(\\\"----高亮结果----\\\"); Map<String, HighlightField> highlightFieldMap = searchHit.getHighlightFields(); for (Map.Entry<String,HighlightField> entry :highlightFieldMap.entrySet()){ System.out.println(entry.getKey() + \\\"\\\\t\\\" + Arrays.toString(entry.getValue().getFragments())); } } }\"]},\"72\":{\"h\":\"Spring Data ElasticSearch\"},\"73\":{\"h\":\"Dao 编写规则\",\"t\":[\"⽅法命名规则查询的基本语法findBy + 属性 + 关键词 + 连接符\",\"关键字\",\"命名规则\",\"解释\",\"⽰例\",\"and\",\"findByField1AndField2\",\"根据Field1和Field2获得数据\",\"findByTitleAndContent\",\"or\",\"findByField1OrField2\",\"根据Field1或Field2获得数据\",\"findByTitleOrContent\",\"is\",\"findByField\",\"根据Field获得数据\",\"findByTitle\",\"not\",\"findByFieldNot\",\"根据Field获得补集数据\",\"findByTitleNot\",\"between\",\"findByFieldBetween\",\"获得指定范围的数据\",\"findByPriceBetween\",\"lessThanEqual\",\"findByFieldLessThan\",\"获得⼩于等于指定值的数据\",\"findByPriceLessThan\"]},\"74\":{\"h\":\"案例\",\"t\":[\"使用spring boot形式创建,pom依赖如下\",\"?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.1.16.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>com.black_fire</groupId> <artifactId>es-demo2</artifactId> <version>0.0.1-SNAPSHOT</version> <name>es-demo2</name> <description>Demo project for Spring Boot</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-elasticsearch</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>\",\"application.yml如下\",\"spring: data: elasticsearch: cluster-name: my-elasticsearch cluster-nodes: 192.168.65.128:9300\",\"创建实体类\",\"import org.springframework.data.annotation.Id; import org.springframework.data.elasticsearch.annotations.Document; import org.springframework.data.elasticsearch.annotations.Field; import org.springframework.data.elasticsearch.annotations.FieldType; /** * @author black_fire */ @Document(indexName = \\\"black_fire_test\\\",type = \\\"article\\\") public class Article { @Id @Field(type = FieldType.Long,store = true) private Integer id; @Field(type = FieldType.Text,store = true,analyzer = \\\"ik_smart\\\") private String title; @Field(type = FieldType.Text,store = true,analyzer = \\\"ik_smart\\\") private String content; // 省略 get/set 方法 }\"]},\"75\":{\"h\":\"创建 Dao接口\",\"t\":[\"import com.black_fire.admin.Article; import org.springframework.data.elasticsearch.repository.ElasticsearchRepository; import java.awt.print.Pageable; import java.util.List; /** * @author black_fire */ public interface ArticleDao extends ElasticsearchRepository<Article, Long> { /** * 根据 title 查询结果 * * @param title 要查询的 title * @return 多条结果 */ List<Article> findByTitle(String title); /** * 根据 title 和 content 查询结果 * * @param title 要查询的 title * @param content 要查询的 content * @return 多条结果 */ List<Article> findByTitleAndAndContent(String title, String content); /** * 根据 title 或 content 查询结果 * * @param title 要查询的 title * @param content 要查询的 content * @param pageable 分页接口 * @return 多条结果 */ List<Article> findByTitleOrContent(String title, String content, Pageable pageable); }\"]},\"76\":{\"h\":\"常用方法案例\",\"t\":[\"import com.black_fire.esdemo2.dao.ArticleDao; import com.black_fire.esdemo2.domain.Article; import org.elasticsearch.index.query.QueryBuilder; import org.elasticsearch.index.query.QueryBuilders; import org.junit.jupiter.api.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.data.domain.PageRequest; import org.springframework.data.domain.Pageable; import org.springframework.data.elasticsearch.core.ElasticsearchTemplate; import org.springframework.data.elasticsearch.core.query.NativeSearchQuery; import org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder; import org.springframework.test.context.junit4.SpringRunner; @SpringBootTest @RunWith(SpringRunner.class) class EsDemo2ApplicationTests { @Autowired private ElasticsearchTemplate template; @Autowired private ArticleDao articleDao; /** * 添加索引和映射 */ @Test public void test(){ //创建索引，并配置映射关系 如果这里执行后没有 映射直接执行下面那行就可以了 template.createIndex(Article.class); //配置映射关系 template.putMapping(Article.class); } /** * 给某个索引添加文档 这里使用的是内置方法 */ @Test public void addDocument() { for (int i = 1; i <= 10; i++) { //创建⼀个Article对象 Article article = new Article(); article.setId(i); article.setTitle(\\\"⼥护⼠路遇昏迷男⼦跪地抢救：救⼈是职责更是本能\\\" + i); article.setContent(\\\"这是⼀个美丽的⼥护⼠妹妹\\\" + i); //把⽂档写⼊索引库 articleDao.save(article); } } /** * 根据 文档id 删除一个文档 */ @Test public void deleteDocument(){ articleDao.deleteById(3L); } /** * 查询所有文档 */ @Test public void findAll(){ articleDao.findAll().forEach(System.out::println); } /** * 根据文档id 查询文档 */ @Test public void findById(){ System.out.println(articleDao.findById(1L)); } /** * 刚才自定义的查询方法 */ @Test public void findByTitle(){ // articleDao.findByTitle(\\\"跪地\\\").forEach(System.out::println); articleDao.findByTitleLike(\\\"跪地救人\\\").forEach(System.out::println); } /** * 使用自定义查询方法 * 加上 Like 就是分词查,不加就是普通 math */ @Test public void findByTitleOrContent(){ // articleDao.findByTitleOrContent(\\\"跪地\\\",\\\"救人\\\").forEach(System.out::println); articleDao.findByTitleLikeOrContent(\\\"跪地女护士\\\",\\\"救人\\\").forEach(System.out::println); } /** * 使用自定义分页查询方法 */ @Test public void findByTitlePage(){ Pageable page = PageRequest.of(1,5); articleDao.findByTitleOrContent(\\\"跪地\\\",\\\"救人\\\",page).forEach(System.out::println); } /** * 使用本地 Query 进行查询 */ @Test public void testNativeSearchQuery(){ NativeSearchQuery nativeSearchQuery = new NativeSearchQueryBuilder() .withQuery(QueryBuilders.queryStringQuery(\\\"跪地\\\").defaultField(\\\"title\\\")) .withPageable(PageRequest.of(1,5)).build(); template.queryForList(nativeSearchQuery,Article.class).forEach(System.out::println); } }\"]},\"77\":{\"h\":\"聚合查询\",\"t\":[\"创建 汽车实体类\",\"import org.springframework.data.annotation.Id; import org.springframework.data.elasticsearch.annotations.Document; import org.springframework.data.elasticsearch.annotations.Field; import org.springframework.data.elasticsearch.annotations.FieldType; /** * @author black_fire */ @Document(indexName = \\\"car_index\\\",type = \\\"car\\\") public class Car { @Id @Field(type = FieldType.Long,store = true) private Long id; @Field(type = FieldType.Text,store = true ,analyzer = \\\"ik_smart\\\") private String name; @Field(type = FieldType.Text,store = true,analyzer = \\\"ik_smart\\\",fielddata = true) private String brand; @Field(type = FieldType.Text,store = true,analyzer = \\\"ik_smart\\\",fielddata = true) private String color; @Field(type = FieldType.Double,store = true) private Double price; // get/set/构造器/toString 省略 }\",\"创建 Dao\",\"import com.black_fire.esdemo2.domain.Car; import org.springframework.data.elasticsearch.repository.ElasticsearchRepository; /** * @author black_fire */ public interface CarDao extends ElasticsearchRepository<Car,Long> {}\",\"使用示例\",\"import com.black_fire.esdemo2.domain.Car; import org.elasticsearch.index.query.QueryBuilders; import org.elasticsearch.search.aggregations.AggregationBuilders; import org.elasticsearch.search.aggregations.bucket.terms.StringTerms; import org.elasticsearch.search.aggregations.metrics.avg.InternalAvg; import org.junit.jupiter.api.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.data.elasticsearch.core.ElasticsearchTemplate; import org.springframework.data.elasticsearch.core.aggregation.AggregatedPage; import org.springframework.data.elasticsearch.core.query.FetchSourceFilter; import org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder; import org.springframework.test.context.junit4.SpringRunner; import java.util.List; /** * @author black_fire */ @SpringBootTest @RunWith(SpringRunner.class) public class CarTest { @Autowired private ElasticsearchTemplate template; @Autowired private CarDao carDao; @Test public void test() { //创建索引，并配置映射关系 如果这里执行后没有 映射直接执行下面那行就可以了 template.createIndex(Car.class); //配置映射关系 template.putMapping(Car.class); } /** * 准备一些数据 */ @Test public void addDocument() { carDao.save(new Car(1l, \\\"⽐亚迪A1\\\", \\\"⽐亚迪\\\", \\\"红⾊\\\", 50000d)); carDao.save(new Car(2l, \\\"⽐亚迪A2\\\", \\\"⽐亚迪\\\", \\\"⽩⾊\\\", 70000d)); carDao.save(new Car(3l, \\\"⽐亚迪A3\\\", \\\"⽐亚迪\\\", \\\"⽩⾊\\\", 80000d)); carDao.save(new Car(4l, \\\"⽐亚迪A4\\\", \\\"⽐亚迪\\\", \\\"红⾊\\\", 60000d)); carDao.save(new Car(5l, \\\"⽐亚迪A5\\\", \\\"⽐亚迪\\\", \\\"红⾊\\\", 90000d)); carDao.save(new Car(6l, \\\"宝⻢A1\\\", \\\"宝⻢\\\", \\\"红⾊\\\", 10000d)); carDao.save(new Car(7l, \\\"宝⻢A2\\\", \\\"宝⻢\\\", \\\"⿊⾊\\\", 20000d)); carDao.save(new Car(8l, \\\"宝⻢A3\\\", \\\"宝⻢\\\", \\\"⿊⾊\\\", 30000d)); carDao.save(new Car(9l, \\\"宝⻢A4\\\", \\\"宝⻢\\\", \\\"红⾊\\\", 40000d)); carDao.save(new Car(10l, \\\"宝⻢A5\\\", \\\"宝⻢\\\", \\\"红⾊\\\", 50000d)); carDao.save(new Car(11l, \\\"奔驰A1\\\", \\\"奔驰\\\", \\\"红⾊\\\", 10000d)); carDao.save(new Car(12l, \\\"奔驰A2\\\", \\\"奔驰\\\", \\\"⿊⾊\\\", 20000d)); carDao.save(new Car(13l, \\\"奔驰A3\\\", \\\"奔驰\\\", \\\"⿊⾊\\\", 30000d)); carDao.save(new Car(14l, \\\"奔驰A4\\\", \\\"奔驰\\\", \\\"红⾊\\\", 40000d)); carDao.save(new Car(15l, \\\"奔驰A5\\\", \\\"奔驰\\\", \\\"红⾊\\\", 50000d)); } /* 划分桶 GET /car_index/car/_search { \\\"query\\\": { \\\"bool\\\":{ \\\"should\\\": [ {\\\"match_all\\\": {}} ] } }, \\\"aggs\\\": { \\\"group_by_color\\\": { \\\"terms\\\": { \\\"field\\\": \\\"color\\\" }, \\\"aggs\\\": { \\\"avg_price\\\": { \\\"avg\\\": { \\\"field\\\": \\\"price\\\" } } } } } } */ /** * 将上面的划分桶 使用java 代码实现 */ @Test public void testQuerySelfAgs() { //查询条件的构建器 NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder().withQuery(QueryBuilders.matchAllQuery()); //排除所有的字段查询， queryBuilder.withSourceFilter(new FetchSourceFilter(new String[] {}, null)); //添加聚合条件 // queryBuilder.addAggregation(AggregationBuilders.terms(\\\"group_by_color\\\").field(\\\"color\\\")); queryBuilder.addAggregation(AggregationBuilders.terms(\\\"group_by_color\\\").field(\\\"color\\\") .subAggregation(AggregationBuilders.avg(\\\"avg_price\\\")).field(\\\"price\\\")); //执⾏查询，把查询结果直接转为聚合page AggregatedPage<Car> aggPage = (AggregatedPage<Car>) carDao.search(queryBuilder.build()); //从所有的聚合中获取对应名称的聚合 StringTerms agg = (StringTerms) aggPage.getAggregation(\\\"group_by_color\\\"); //从聚合的结果中获取所有的桶信息 List<StringTerms.Bucket> buckets = agg.getBuckets(); for (StringTerms.Bucket bucket : buckets) { String brand = bucket.getKeyAsString(); long docCount = bucket.getDocCount(); // System.out.println(\\\"color = \\\" + brand + \\\" 总数：\\\" + docCount); // 取得内部聚合 InternalAvg avg = (InternalAvg) bucket.getAggregations().asMap().get(\\\"avg_price\\\"); System.out.println(\\\"color = \\\" + brand + \\\" 总数：\\\" + docCount+ \\\"平均价格\\\"+avg.getValue()); } } }\"]},\"78\":{\"c\":[\"后端开发\"]},\"79\":{\"c\":[\"java\"]},\"80\":{\"h\":\"RabbitMQ\",\"t\":[\"简介\",\"RabbitMQ官方地址：http://www.rabbitmq.com/ 2007年,Rabbit 技术公司基于 AMQP 标准开发的 RabbitMQ 1.0 发布。RabbitMQ 采用 Erlang 语言开发。Erlang 语言专门为开发高并发和分布式系统的一种语言,在电信领域使用广泛。\",\"RabbitMQ 架构图\",\"RabbitMQ架构\",\"RabbitMQ相关概念\",\"Broker 接收和分发消息的应用, RabbitMQ Server 就是 Message Broker Virtual host 出于多租户和安全因素设计的,把AMQP的基本组件划分到一个虚拟的分组中,类似与网络中的 namespace(命名空间) 概念. 当多个不同的用户使用同一个i额 RabbitMQ server 提供服务时,可以划分出多个 vhost 每个用爱自己的 vhost创建 exchange/queue等. Connection publisher/consumer 和 broker 之间的 TCP 链接 Channel 如果每一次访问 RabbitMQ 都建立一个 Connection, 在消息量大的时候建立 TCP Connection 的开销将是巨大的,效率也较低. Channel 实在 connection 内部建立的逻辑链接,如果应用支持多线程,通常多个 thread 创建单独的 channel 进行通信, AMQP method 包含了 channel id 帮助客户端和message broker 识别 channel,所以 channel 之间是完全隔离的. Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP Connection 的开销 Exchange message 到达 broker 的第一站,根据分发规则,匹配查询表中的 routing key,分发消息到queue 中去. 常用的类型有 direct(point-to-point) topic(publish-subscribe) fanout(multicase) Queue 消息最终被送到这里等待 consumer 取走 Binding exchange 和 queue 之间虚拟链接, binding 中可以包含 routing key. Binding 信息被保存到 exchange 中的查询表中,用于 message 的分发依据.\",\"RabbitMQ提供了6种模式\",\"简单模式 work模式 Publish/Subscribe发布与订阅模式 Routing路由模式 Topics主题模式 RPC远程调用模式 官网对应模式介绍：https://www.rabbitmq.com/getstarted.html\",\"rabbitmq 6model\"]},\"81\":{\"h\":\"RabbitMQ 页面的使用\"},\"82\":{\"h\":\"添加用户\",\"t\":[\"rabbitmq add user\"]},\"83\":{\"h\":\"Virtual Hosts配置\",\"t\":[\"RabbitMQ也有类似的权限管理； 在RabbitMQ中可以虚拟消息服务器Virtual Host,每个Virtual Hosts相当于⼀个相对独⽴的RabbitMQ 服务器,每个VirtualHost之间是相互隔离的。 exchange、queue、message不能互通。 Virtual Name⼀般以/开头\",\"创建 Virtual Hosts\",\"rabbitmq create VirtualHosts\",\"为上面创建的 virtual 设置权限 \"]},\"84\":{\"h\":\"Rabbitmq的使用\",\"t\":[\"pom.xml\",\"<properties> <rabbitmq.version>5.6.0</rabbitmq.version> </properties> <dependencies> <!-- 使用 amqp 链接 rabbitmq --> <dependency> <groupId>com.rabbitmq</groupId> <artifactId>amqp-client</artifactId> <version>${rabbitmq.version}</version> </dependency> </dependencies>\",\"为了方便使用,将其提取为一个工具类\",\"import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; import java.io.IOException; import java.util.concurrent.TimeoutException; /** * @author black_fire */ public class ConnectionUtils { private final static String IP = \\\"192.168.65.128\\\"; private final static int PORT = 5672; private final static String VIRTUALHOST = \\\"/black_fire_test\\\"; private final static String USERNAME = \\\"black_fire\\\"; private final static String PASSWORD = \\\"black_fire\\\"; public static Connection getConnection() { // 创建链接工厂 ConnectionFactory connectionFactory = new ConnectionFactory(); // 为其设置参数 connectionFactory.setHost(IP); connectionFactory.setPort(PORT); connectionFactory.setVirtualHost(VIRTUALHOST); connectionFactory.setUsername(USERNAME); connectionFactory.setPassword(PASSWORD); Connection connection = null; try { connection = connectionFactory.newConnection(); } catch (IOException | TimeoutException e) { e.printStackTrace(); } return connection; } }\"]},\"85\":{\"h\":\"简单模式\",\"t\":[\"使用时代码流程,具体代码可以参考下面的案例\",\"1. 获取链接 2. 创建频道 3. 创建队列 4. 发送消息/接收消息 5. 发送消息需要关闭资源,接收消息不需要关闭资源因为需要监听最新的消息进行消费.\",\"发送消息使用的时 channel 中的 basicPublish 方法\",\"basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body) throws IOException basicPublish参数解释 参数1：交换机名称,如果没有指定则使用默认 Default Exchange 参数2：路由key,简单模式可以传递队列名称 参数3：消息其它属性 参数4：消息内容\",\"接收消息时使用的时 channel 中的 basicConsume 方法\",\"basicConsume(String queue, boolean autoAck, Consumer callback) basicConsume参数解释 参数1：队列名称 参数2：是否自动确认,设置为true为表示消息接收到自动向mq回复接收到了,mq接收到回复会删除消息,设置为false则需要手动确认 参数3：消息接收到后回调\"]},\"86\":{\"h\":\"发送消息案例\",\"t\":[\"import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import java.io.IOException; import java.util.concurrent.TimeoutException; /** * @author black_fire */ public class Producer { public final static String QUEUE_NAME = \\\"simple_queue\\\"; /** * 1. 获取链接(创建 connection 提取为一个公共方法方便重用) * Connection connection = ConnectionUtils.getConnection(); * 2. 创建频道 * Channel channel = connection.createChannel(); * 3. 创建队列 * channel.queueDeclare(QUEUE_NAME, true, false, false, null); * queueDeclare 方法参数解释: * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map<String, Object> arguments) throws IOException; * 参数1：队列名称 * 参数2：是否定义持久化队列 * 参数3：是否独占本次连接, 只能有一个 Consumer 监听这个队列 * 参数4：是否在不使用的时候自动删除队列,当没有 Consumer 时,自动删除 * 参数5：队列其它参数 * 4. 发送消息 * channel.basicPublish(\\\"\\\", QUEUE_NAME, null, massage.getBytes()); * basicPublish参数解释 * basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body) throws IOException * 参数1：交换机名称,如果没有指定则使用默认 Default Exchange * 参数2：路由key,简单模式可以传递队列名称 * 参数3：消息其它属性 * 参数4：消息内容 * */ public static void producerTest(){ // 通过 ConnectionUtils 获取一个 链接 Connection connection = ConnectionUtils.getConnection(); try { // 创建频道 Channel channel = connection.createChannel(); channel.queueDeclare(QUEUE_NAME, true, false, false, null); String massage = \\\"hello I is simple_queue;\\\"; channel.basicPublish(\\\"\\\", QUEUE_NAME, null, massage.getBytes()); System.out.println(\\\"已发送 消息\\\" + massage); // 释放资源 channel.close(); connection.close(); } catch (IOException | TimeoutException e) { e.printStackTrace(); } } public static void main(String[] args) { producerTest(); } }\"]},\"87\":{\"h\":\"接收消息的案例\",\"t\":[\"import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.*; import java.io.IOException; import java.nio.charset.StandardCharsets; /** * @author black_fire */ public class Consumer { /** * 1. 获取链接(创建 connection 提取为一个公共方法方便重用) * Connection connection = ConnectionUtils.getConnection(); * 2. 创建频道 * Channel channel = connection.createChannel(); * 3. 创建队列 * channel.queueDeclare(QUEUE_NAME, true, false, false, null); * queueDeclare 方法参数解释: * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map<String, Object> arguments) throws IOException; * 参数1：队列名称 * 参数2：是否定义持久化队列 * 参数3：是否独占本次连接, 只能有一个 Consumer 监听这个队列 * 参数4：是否在不使用的时候自动删除队列,当没有 Consumer 时,自动删除 * 参数5：队列其它参数 * 4. 接收消息 * basicConsume(String queue, boolean autoAck, Consumer callback) * basicConsume参数解释 * basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body) throws IOException * 参数1：队列名称 * 参数2：是否自动确认,设置为true为表示消息接收到自动向mq回复接收到了,mq接收到回复会删除消息,设置为false则需要手动确认 * 参数3：消息接收到后回调 */ public static void consumerTest() { Connection connection = ConnectionUtils.getConnection(); try { Channel channel = connection.createChannel(); channel.queueDeclare(Producer.QUEUE_NAME, true, false, false, null); com.rabbitmq.client.Consumer consumer = new DefaultConsumer(channel) { /* 使用匿名内部类 handleDelivery() 该方法表示接收到消息的回调 consumerTag 消息者标签,在channel.basicConsume时候可以指定 envelope 消息包的内容,可从中获取消息id,消息routingkey,交换机,消息和重传标志(收到消息失败后是否需要重新发送) properties 消息的配置内容 body 消息 */ @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"路由key\\\".concat(envelope.getRoutingKey())); System.out.println(\\\"交换机\\\".concat(envelope.getExchange())); System.out.println(\\\"消息id\\\".concat(String.valueOf(envelope.getDeliveryTag()))); System.out.println(\\\"接收到的消息\\\".concat(new String(body, StandardCharsets.UTF_8))); } }; channel.basicConsume(Producer.QUEUE_NAME, true, consumer); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { consumerTest(); } }\"]},\"88\":{\"h\":\"工作模式(workQueues)\",\"t\":[\"该模式是一种竞争模式,只是多个消费者消费一个生产者生产的消息.\",\"与简单模式相比,只是多了一个或多个消费者(consumer).\",\"多个消费者同时消费时,提高了消费效率,且不重复\"]},\"89\":{\"h\":\"生产者示例\",\"t\":[\"import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import java.io.IOException; import java.util.concurrent.TimeoutException; /** * @author black_fire */ public class Producer { public final static String QUEUE_NAME = \\\"work_queue\\\"; /** * 基本和 简单模式差不多一样的代码注释可以在简单模式案例中查看 */ public static void producerTest() { // 通过 ConnectionUtils 获取一个 链接 Connection connection = ConnectionUtils.getConnection(); try { // 创建频道 Channel channel = connection.createChannel(); channel.queueDeclare(QUEUE_NAME, true, false, false, null); for (int item = 0; item <= 30; item++) { String massage = \\\"hello I is simple_queue; work_queue model-\\\"+item; channel.basicPublish(\\\"\\\", QUEUE_NAME, null, massage.getBytes()); System.out.println(\\\"已发送 消息\\\" + massage); } // 释放资源 channel.close(); connection.close(); } catch (IOException | TimeoutException e) { e.printStackTrace(); } } public static void main(String[] args) { producerTest(); } }\"]},\"90\":{\"h\":\"多个消费者示例\",\"t\":[\"其实就是复制一份消费者1 改一下名称就可以了.\",\"import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.*; import java.io.IOException; import java.nio.charset.StandardCharsets; /** * @author black_fire */ public class Consumer1 { /** * 基本和 简单模式差不多一样的代码注释可以在简单模式案例中查看 */ public static void consumerTest() { Connection connection = ConnectionUtils.getConnection(); try { Channel channel = connection.createChannel(); channel.queueDeclare(Producer.QUEUE_NAME, true, false, false, null); com.rabbitmq.client.Consumer consumer = new DefaultConsumer(channel) { @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"路由key\\\".concat(envelope.getRoutingKey())); System.out.println(\\\"交换机\\\".concat(envelope.getExchange())); System.out.println(\\\"消息id\\\".concat(String.valueOf(envelope.getDeliveryTag()))); System.out.println(\\\"consumer1 -接收到的消息\\\".concat(new String(body, StandardCharsets.UTF_8))); } }; channel.basicConsume(Producer.QUEUE_NAME, true, consumer); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { consumerTest(); } }\",\"import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.*; import java.io.IOException; import java.nio.charset.StandardCharsets; /** * @author black_fire */ public class Consumer2 { /** * 基本和 简单模式差不多一样的代码注释可以在简单模式案例中查看 */ public static void consumerTest() { Connection connection = ConnectionUtils.getConnection(); try { Channel channel = connection.createChannel(); channel.queueDeclare(Producer.QUEUE_NAME, true, false, false, null); com.rabbitmq.client.Consumer consumer = new DefaultConsumer(channel) { @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"路由key\\\".concat(envelope.getRoutingKey())); System.out.println(\\\"交换机\\\".concat(envelope.getExchange())); System.out.println(\\\"消息id\\\".concat(String.valueOf(envelope.getDeliveryTag()))); System.out.println(\\\"consumer2- 接收到的消息\\\".concat(new String(body, StandardCharsets.UTF_8))); } }; channel.basicConsume(Producer.QUEUE_NAME, true, consumer); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { consumerTest(); } }\"]},\"91\":{\"h\":\"订阅模式概述\",\"t\":[\"在订阅模型中,多了一个exchange角色,而且过程略有变化：\",\"P 生产者,也就是要发送消息的程序,但是不再发送到队列中,而是发给X(交换机) C 消费者,消息的接受者,会一直等待消息到来。 Queue 消息队列,接收消息、缓存消息。 Exchange 交换机,图中的X。一方面,接收生产者发送的消息。另一方面,知道如何处理消息,例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。 到底如何操作,取决于Exchange的类型。 Exchange有常见以下3种类型： Fanout: 广播,将消息交给所有绑定到交换机的队列 Direct: 定向,把消息交给符合指定routing key 的队列 Topic: 通配符,把消息交给符合routing pattern(路由模式) 的队列\",\"Exchange(交换机)只负责转发消息,不具备存储消息的能力,因此如果没有任何队列与Exchange绑定,或者没有符合路由规则的队列,那么消息会丢失！\"]},\"92\":{\"h\":\"Publish/Subscribe发布与订阅模式\"},\"93\":{\"h\":\"Fanout 广播模式\",\"t\":[\"交换机需要与队列进行绑定,绑定之后 一个消息可以被多个消费者都收到。 发布订阅模式与工作队列模式的区别 1. 工作队列模式不用定义交换机,而发布/订阅模式需要定义交换机。 2. 发布/订阅模式的生产方是面向交换机发送消息,工作队列模式的生产方是面向队列发送消息(底层使用默认交换机)。 3、发布/订阅模式需要设置队列和交换机的绑定,工作队列模式不需要设置,实际上工作队列模式会将队列绑 定到默认的交换机 。\"]},\"94\":{\"h\":\"生产者示例\",\"t\":[\"import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.BuiltinExchangeType; import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import java.io.IOException; import java.util.concurrent.TimeoutException; /** * @author black_fire */ public class Producer { public final static String FANOUT_EXCHANGE = \\\"fanout_exchange\\\"; public final static String FANOUT_QUEUE_1 = \\\"fanout_queue_1\\\"; public final static String FANOUT_QUEUE_2 = \\\"fanout_queue_2\\\"; /** * 基本和 简单模式差不多一样的代码注释可以在简单模式案例中查看 */ public static void producerTest() { // 通过 ConnectionUtils 获取一个 链接 Connection connection = ConnectionUtils.getConnection(); try { // 创建频道 Channel channel = connection.createChannel(); /* 声明交换机 exchangeDeclare(String exchange, BuiltinExchangeType type) 参数1: 交换机名称 参数2: 交换机类型: fanout,topic,direct,headers */ channel.exchangeDeclare(FANOUT_EXCHANGE, BuiltinExchangeType.FANOUT); // 声明两个队列 channel.queueDeclare(FANOUT_QUEUE_1, true, false, false, null); channel.queueDeclare(FANOUT_QUEUE_2, true, false, false, null); /* 把队列绑定交换机 queueBind(String queue, String exchange, String routingKey) 参数1: 队列名 参数2: 交换机名 参数3: 因为是广播模式所以不用传 */ channel.queueBind(FANOUT_QUEUE_1,FANOUT_EXCHANGE,\\\"\\\"); channel.queueBind(FANOUT_QUEUE_2,FANOUT_EXCHANGE,\\\"\\\"); for (int item = 1; item <= 10; item++) { String massage = \\\"hello I is simple_queue; fanout model-\\\"+item; channel.basicPublish(FANOUT_EXCHANGE, \\\"\\\", null, massage.getBytes()); System.out.println(\\\"已发送 消息\\\" + massage); } // 释放资源 channel.close(); connection.close(); } catch (IOException | TimeoutException e) { e.printStackTrace(); } } public static void main(String[] args) { producerTest(); } }\"]},\"95\":{\"h\":\"两个消费者示例\",\"t\":[\"import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.*; import java.io.IOException; import java.nio.charset.StandardCharsets; /** * @author black_fire */ public class Consumer1 { /** * 基本和 简单模式差不多一样的代码注释可以在简单模式案例中查看 */ public static void consumerTest() { Connection connection = ConnectionUtils.getConnection(); try { Channel channel = connection.createChannel(); channel.queueDeclare(Producer.FANOUT_QUEUE_1, true, false, false, null); /* 给当前消费者绑定消费队列和交换机 */ channel.queueBind(Producer.FANOUT_QUEUE_1,Producer.FANOUT_EXCHANGE,\\\"\\\"); Consumer consumer = new DefaultConsumer(channel) { @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"路由key\\\".concat(envelope.getRoutingKey())); System.out.println(\\\"交换机\\\".concat(envelope.getExchange())); System.out.println(\\\"消息id\\\".concat(String.valueOf(envelope.getDeliveryTag()))); System.out.println(\\\"consumer1 -接收到的消息\\\".concat(new String(body, StandardCharsets.UTF_8))); } }; channel.basicConsume(Producer.FANOUT_QUEUE_1, true, consumer); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { consumerTest(); } }\",\" import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.*; import java.io.IOException; import java.nio.charset.StandardCharsets; /** * @author black_fire */ public class Consumer2 { /** * 基本和 简单模式差不多一样的代码注释可以在简单模式案例中查看 */ public static void consumerTest() { Connection connection = ConnectionUtils.getConnection(); try { Channel channel = connection.createChannel(); channel.queueDeclare(Producer.FANOUT_QUEUE_2, true, false, false, null); /* 给当前消费者绑定消费队列和交换机 */ channel.queueBind(Producer.FANOUT_QUEUE_2,Producer.FANOUT_EXCHANGE,\\\"\\\"); Consumer consumer = new DefaultConsumer(channel) { @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"路由key\\\".concat(envelope.getRoutingKey())); System.out.println(\\\"交换机\\\".concat(envelope.getExchange())); System.out.println(\\\"消息id\\\".concat(String.valueOf(envelope.getDeliveryTag()))); System.out.println(\\\"consumer2- 接收到的消息\\\".concat(new String(body, StandardCharsets.UTF_8))); } }; channel.basicConsume(Producer.FANOUT_QUEUE_2, true, consumer); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { consumerTest(); } }\"]},\"96\":{\"h\":\"Routing 路由模式\",\"t\":[\"Routing模式要求队列在绑定交换机时要指定routing key, 消息会转发到符合routing key的队列 路由模式特点： 队列与交换机的绑定,不能是任意绑定了,而是要指定一个 RoutingKey (路由key) 消息的发送方在 向 Exchange发送消息时,也必须指定消息的 RoutingKey Exchange不再把消息交给每一个绑定的队列,而是根据消息的 Routing Key 进行判断,只有队列的 Routingkey 与消息的 Routing key 完全一致,才会接收到消息.\"]},\"97\":{\"h\":\"生产者案例\",\"t\":[\"import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.BuiltinExchangeType; import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import java.io.IOException; import java.util.concurrent.TimeoutException; /** * @author black_fire */ public class Producer { public final static String DIRECT_EXCHANGE = \\\"direct_exchange\\\"; public final static String DIRECT_QUEUE_INSERT = \\\"direct_queue_1\\\"; public final static String DIRECT_QUEUE_UPDATE = \\\"direct_queue_2\\\"; /** * 基本和 简单模式差不多一样的代码注释可以在简单模式案例中查看 */ public static void producerTest() { // 通过 ConnectionUtils 获取一个 链接 Connection connection = ConnectionUtils.getConnection(); try { // 创建频道 Channel channel = connection.createChannel(); /* 声明交换机 exchangeDeclare(String exchange, BuiltinExchangeType type) 参数1: 交换机名称 参数2: 交换机类型: fanout,topic,direct,headers */ channel.exchangeDeclare(DIRECT_EXCHANGE, BuiltinExchangeType.DIRECT); // 声明两个队列 channel.queueDeclare(DIRECT_QUEUE_INSERT, true, false, false, null); channel.queueDeclare(DIRECT_QUEUE_UPDATE, true, false, false, null); /* 把队列绑定交换机 queueBind(String queue, String exchange, String routingKey) 参数1: 队列名 参数2: 交换机名 参数3: 因为是广播模式所以不用传 */ channel.queueBind(DIRECT_QUEUE_INSERT,DIRECT_EXCHANGE,\\\"insert\\\"); channel.queueBind(DIRECT_QUEUE_UPDATE,DIRECT_EXCHANGE,\\\"update\\\"); String insertMassage = \\\"新增鞋子 routingKey insert\\\"; channel.basicPublish(DIRECT_EXCHANGE, \\\"insert\\\", null, insertMassage.getBytes()); String updateMassage = \\\"新增鞋子 routingKey update\\\"; channel.basicPublish(DIRECT_EXCHANGE, \\\"update\\\", null, updateMassage.getBytes()); // 释放资源 channel.close(); connection.close(); } catch (IOException | TimeoutException e) { e.printStackTrace(); } } public static void main(String[] args) { producerTest(); } }\"]},\"98\":{\"h\":\"消费者案例\",\"t\":[\"import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.*; import java.io.IOException; import java.nio.charset.StandardCharsets; /** * @author black_fire */ public class Consumer1 { /** * 基本和 简单模式差不多一样的代码注释可以在简单模式案例中查看 */ public static void consumerTest() { Connection connection = ConnectionUtils.getConnection(); try { Channel channel = connection.createChannel(); channel.queueDeclare(Producer.DIRECT_QUEUE_INSERT, true, false, false, null); /* 给当前消费者绑定消费队列和交换机 */ channel.queueBind(Producer.DIRECT_QUEUE_INSERT, Producer.DIRECT_EXCHANGE,\\\"insert\\\"); Consumer consumer = new DefaultConsumer(channel) { @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"路由key\\\".concat(envelope.getRoutingKey())); System.out.println(\\\"交换机\\\".concat(envelope.getExchange())); System.out.println(\\\"消息id\\\".concat(String.valueOf(envelope.getDeliveryTag()))); System.out.println(\\\"consumer1 -接收到的消息\\\".concat(new String(body, StandardCharsets.UTF_8))); } }; channel.basicConsume(Producer.DIRECT_QUEUE_INSERT, true, consumer); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { consumerTest(); } }\",\"import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.*; import java.io.IOException; import java.nio.charset.StandardCharsets; /** * @author black_fire */ public class Consumer2 { /** * 基本和 简单模式差不多一样的代码注释可以在简单模式案例中查看 */ public static void consumerTest() { Connection connection = ConnectionUtils.getConnection(); try { Channel channel = connection.createChannel(); channel.queueDeclare(Producer.DIRECT_QUEUE_UPDATE, true, false, false, null); /* 给当前消费者绑定消费队列和交换机 */ channel.queueBind(Producer.DIRECT_QUEUE_UPDATE, Producer.DIRECT_EXCHANGE,\\\"\\\"); Consumer consumer = new DefaultConsumer(channel) { @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"路由key\\\".concat(envelope.getRoutingKey())); System.out.println(\\\"交换机\\\".concat(envelope.getExchange())); System.out.println(\\\"消息id\\\".concat(String.valueOf(envelope.getDeliveryTag()))); System.out.println(\\\"consumer2- 接收到的消息\\\".concat(new String(body, StandardCharsets.UTF_8))); } }; channel.basicConsume(Producer.DIRECT_QUEUE_UPDATE, true, consumer); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { consumerTest(); } }\"]},\"99\":{\"h\":\"Topics 通配符模式\",\"t\":[\"Topic 类型与 Direct 相比,都是可以根据 RoutingKey 把消息路由到不同的队列. 只不过 Topic 类型Exchange 可以让队列在绑定 Routing key 的时候使用通配符！ Routingkey 一般都是有一个或多个单词组成,多个单词之间以”.”分割. 例如： item.insert 通配符规则： # ：匹配一个或多个词 * ：匹配不多不少恰好1个词 举例： item.# ：能够匹配 item.insert.abc 或者 item.insert item.* ：只能匹配 item.insert\"]},\"100\":{\"h\":\"生产者\",\"t\":[\"import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.BuiltinExchangeType; import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import java.io.IOException; import java.util.concurrent.TimeoutException; /** * @author black_fire */ public class Producer { public final static String TOPIC_EXCHANGE = \\\"topic_exchange\\\"; public final static String TOPIC_QUEUE_ALL = \\\"topic_queue_all\\\"; public final static String TOPIC_QUEUE_INSERT_UPDATE = \\\"topic_queue_insert_update\\\"; /** * 基本和 简单模式差不多一样的代码注释可以在简单模式案例中查看 */ public static void producerTest() { // 通过 ConnectionUtils 获取一个 链接 Connection connection = ConnectionUtils.getConnection(); try { // 创建频道 Channel channel = connection.createChannel(); /* 声明交换机 exchangeDeclare(String exchange, BuiltinExchangeType type) 参数1: 交换机名称 参数2: 交换机类型: fanout,topic,direct,headers */ channel.exchangeDeclare(TOPIC_EXCHANGE, BuiltinExchangeType.TOPIC); // 声明两个队列 channel.queueDeclare(TOPIC_QUEUE_ALL, true, false, false, null); channel.queueDeclare(TOPIC_QUEUE_INSERT_UPDATE, true, false, false, null); String insertMassage = \\\"新增鞋子 topic model routingKey item.insert\\\"; channel.basicPublish(TOPIC_EXCHANGE, \\\"item.insert\\\", null, insertMassage.getBytes()); String updateMassage = \\\"更新鞋子 topic model routingKey item.update\\\"; channel.basicPublish(TOPIC_EXCHANGE, \\\"item.update\\\", null, updateMassage.getBytes()); String deleteMassage = \\\"删除鞋子 topic model routingKey item.delete\\\"; channel.basicPublish(TOPIC_EXCHANGE, \\\"item.delete\\\", null, updateMassage.getBytes()); // 释放资源 channel.close(); connection.close(); } catch (IOException | TimeoutException e) { e.printStackTrace(); } } public static void main(String[] args) { producerTest(); } }\"]},\"101\":{\"h\":\"消费者\",\"t\":[\"import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.*; import java.io.IOException; import java.nio.charset.StandardCharsets; /** * @author black_fire */ public class Consumer1 { /** * 基本和 简单模式差不多一样的代码注释可以在简单模式案例中查看 */ public static void consumerTest() { Connection connection = ConnectionUtils.getConnection(); try { Channel channel = connection.createChannel(); // 声明交换机 channel.exchangeDeclare(Producer.TOPIC_EXCHANGE,BuiltinExchangeType.TOPIC); channel.queueDeclare(Producer.TOPIC_QUEUE_ALL, true, false, false, null); /* 给当前消费者绑定消费队列和交换机 */ channel.queueBind(Producer.TOPIC_QUEUE_ALL, Producer.TOPIC_EXCHANGE,\\\"item.*\\\"); Consumer consumer = new DefaultConsumer(channel) { @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"路由key\\\".concat(envelope.getRoutingKey())); System.out.println(\\\"交换机\\\".concat(envelope.getExchange())); System.out.println(\\\"消息id\\\".concat(String.valueOf(envelope.getDeliveryTag()))); System.out.println(\\\"consumer1 -接收到的消息\\\".concat(new String(body, StandardCharsets.UTF_8))); } }; channel.basicConsume(Producer.TOPIC_QUEUE_ALL, true, consumer); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { consumerTest(); } }\",\"import cn.black_fire.rabbitmq.utils.ConnectionUtils; import com.rabbitmq.client.*; import java.io.IOException; import java.nio.charset.StandardCharsets; /** * @author black_fire */ public class Consumer2 { /** * 基本和 简单模式差不多一样的代码注释可以在简单模式案例中查看 */ public static void consumerTest() { Connection connection = ConnectionUtils.getConnection(); try { Channel channel = connection.createChannel(); // 声明交换机 channel.exchangeDeclare(Producer.TOPIC_EXCHANGE,BuiltinExchangeType.TOPIC); channel.queueDeclare(Producer.TOPIC_QUEUE_INSERT_UPDATE, true, false, false, null); /* 给当前消费者绑定消费队列和交换机 */ channel.queueBind(Producer.TOPIC_QUEUE_INSERT_UPDATE, Producer.TOPIC_EXCHANGE,\\\"item.update\\\"); channel.queueBind(Producer.TOPIC_QUEUE_INSERT_UPDATE, Producer.TOPIC_EXCHANGE,\\\"item.insert\\\"); Consumer consumer = new DefaultConsumer(channel) { @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { System.out.println(\\\"路由key\\\".concat(envelope.getRoutingKey())); System.out.println(\\\"交换机\\\".concat(envelope.getExchange())); System.out.println(\\\"消息id\\\".concat(String.valueOf(envelope.getDeliveryTag()))); System.out.println(\\\"consumer2- 接收到的消息\\\".concat(new String(body, StandardCharsets.UTF_8))); } }; channel.basicConsume(Producer.TOPIC_QUEUE_INSERT_UPDATE, true, consumer); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { consumerTest(); } }\"]},\"102\":{\"h\":\"模式之间的总结\",\"t\":[\"简单模式 HelloWorld 一个生产者、一个消费者,不需要设置交换机(使用默认的交换机) 工作队列模式 Work Queue 一个生产者、多个消费者(竞争关系),不需要设置交换机(使用默认的交换机) 发布订阅模式 Publish/subscribe 需要设置类型为fanout的交换机,并且交换机和队列进行绑定,当发送消息到交换机后,交换机会将消息发送到绑定的队列 路由模式 Routing 需要设置类型为direct的交换机,交换机和队列进行绑定,并且指定routingkey,当发送消息到交换机后,交换机会根据routing key将消息发送到对应的队列 通配符模式 Topic 需要设置类型为topic的交换机,交换机和队列进行绑定,并且指定通配符方式的routing key,当发送消息到交换机后,交换机会根据routing key将消息发送到对应的队列\"]},\"103\":{\"h\":\"高级特性\"},\"104\":{\"h\":\"消息的可靠投递\",\"t\":[\"简介\",\"在使用 RabbitMQ 的时候,作为消息发送方希望杜绝任何消息丢失或者投递失败场景。 RabbitMQ 为我们提供了两种方式用来控制消息的投递可靠性模式. confirm 确认模式 return 退回模式 rabbitmq 整个消息投递的路径为： producer--->rabbitmq broker--->exchange--->queue--->consumer 消息从 producer 到 exchange 则会返回一个 confirmCallback 消息从 exchange-->queue 投递失败则会返回一个 returnCallback\"]},\"105\":{\"h\":\"确认模式(confirm)\",\"t\":[\"以 spring 整合形式演示案例.\",\"创建 properties 和 spring config xml文件\",\"rabbitmq.host=192.168.65.128 rabbitmq.port=5672 rabbitmq.username=black_fire rabbitmq.password=black_fire rabbitmq.virtual-host=/black_fire_test\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:rabbit=\\\"http://www.springframework.org/schema/rabbit\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd\\\"> <!-- 加载 properties 配置文件 --> <context:property-placeholder location=\\\"classpath:rabbitmq.properties\\\"/> <!-- 定义rabbitmq connectionFactory 也就是创建链接 publisher-confirms=\\\"true\\\" 开启确认模式 --> <rabbit:connection-factory id=\\\"connectionFactory\\\" host=\\\"${rabbitmq.host}\\\" port=\\\"${rabbitmq.port}\\\" username=\\\"${rabbitmq.username}\\\" password=\\\"${rabbitmq.password}\\\" virtual-host=\\\"${rabbitmq.virtual-host}\\\" publisher-confirms=\\\"true\\\" /> <!-- 定义管理交换机、队列 --> <rabbit:admin connection-factory=\\\"connectionFactory\\\"/> <!--定义rabbitTemplate对象操作可以在代码中方便发送消息--> <rabbit:template id=\\\"rabbitTemplate\\\" connection-factory=\\\"connectionFactory\\\"/> <!-- 测试消息可靠性投递 --> <rabbit:queue id=\\\"test_queue_confirm\\\" name=\\\"test_queue_confirm\\\" /> <rabbit:direct-exchange name=\\\"test_exchange_confirm\\\"> <rabbit:bindings> <!-- 如果不配置 routingKey 那么默认使用 queue 名称,如果配置了那么正常情况下使用 routingKey 来接收 --> <rabbit:binding queue=\\\"test_queue_confirm\\\" key=\\\"confirm\\\" /> </rabbit:bindings> </rabbit:direct-exchange> </beans>\",\"使用 确认模式发送消息\",\"import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.amqp.rabbit.connection.CorrelationData; import org.springframework.amqp.rabbit.core.RabbitTemplate; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; /** * @author black_fire */ @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(\\\"classpath:/spring-rabbitmq.xml\\\") public class ProducerTest { @Autowired private RabbitTemplate rabbitTemplate; /** * 消息可靠性投递 * 确认模式: * 在 spring 配置文件的 rabbit:connection-factory 中配置 publisher-confirms=\\\"true\\\" * 如果投递失败会出发 rabbitTemplate 的 ConfirmCallBack回调 */ @Test public void testConfirm() { rabbitTemplate.setConfirmCallback(new RabbitTemplate.ConfirmCallback() { /** * @param correlationData 相关配置信息 * @param ack exchange 交换机 是否成功找到了消息. true 成功 false 失败 * @param cause 失败原因 */ @Override public void confirm(CorrelationData correlationData, boolean ack, String cause) { System.out.println(\\\"confirm 方法被执行了 ~~~~\\\"); if (ack) { // 当 交换机找到消息 System.out.println(\\\"成功接收消息: cause==> \\\" + cause); } else { // 当交换机没找到消息 System.out.println(\\\"接收消息失败: cause==> \\\" + cause); } } }); rabbitTemplate.convertAndSend(\\\"test_exchange_confirm\\\", \\\"confirm\\\", \\\"send routingKey message...\\\"); } }\"]},\"106\":{\"h\":\"退回模式\",\"t\":[\"使用退回模式的 properties 更改其 spring config xml 文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:rabbit=\\\"http://www.springframework.org/schema/rabbit\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd\\\"> <!-- 加载 properties 配置文件 --> <context:property-placeholder location=\\\"classpath:rabbitmq.properties\\\"/> <!-- 定义rabbitmq connectionFactory 也就是创建链接 publisher-confirms=\\\"true\\\" 开启确认模式 publisher-returns=\\\"true\\\" 开启退回模式 --> <rabbit:connection-factory id=\\\"connectionFactory\\\" host=\\\"${rabbitmq.host}\\\" port=\\\"${rabbitmq.port}\\\" username=\\\"${rabbitmq.username}\\\" password=\\\"${rabbitmq.password}\\\" virtual-host=\\\"${rabbitmq.virtual-host}\\\" publisher-confirms=\\\"true\\\" publisher-returns=\\\"true\\\" /> <!-- 定义管理交换机、队列 --> <rabbit:admin connection-factory=\\\"connectionFactory\\\"/> <!--定义rabbitTemplate对象操作可以在代码中方便发送消息--> <rabbit:template id=\\\"rabbitTemplate\\\" connection-factory=\\\"connectionFactory\\\"/> <!-- 测试消息可靠性投递 --> <rabbit:queue id=\\\"test_queue_confirm\\\" name=\\\"test_queue_confirm\\\" /> <rabbit:direct-exchange name=\\\"test_exchange_confirm\\\"> <rabbit:bindings> <!-- 如果不配置 routingKey 那么默认使用 queue 名称,如果配置了那么正常情况下使用 routingKey 来接收 --> <rabbit:binding queue=\\\"test_queue_confirm\\\" key=\\\"confirm\\\" /> </rabbit:bindings> </rabbit:direct-exchange> </beans>\",\"使用回退模式发送\",\" import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.amqp.core.Message; import org.springframework.amqp.rabbit.connection.CorrelationData; import org.springframework.amqp.rabbit.core.RabbitTemplate; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; /** * @author black_fire */ @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(\\\"classpath:/spring-rabbitmq.xml\\\") public class ProducerTest { @Autowired private RabbitTemplate rabbitTemplate; /** * 退回模式 * 1. publisher-returns=\\\"true\\\" 开启退回模式 * 2. 设置 ReturnCallBack * 3. 设置 Exchange 处理消息失败的模式: setMandatory * * */ @Test public void testReturn(){ /* 设置交换机处理失败的模式 默认情况: 如果消息没有路由到Queue,则丢弃消息 true情况: 如果消息没有路由到Queue,则返回给消息发送方ReturnCallBack */ rabbitTemplate.setMandatory(true); rabbitTemplate.setReturnCallback(new RabbitTemplate.ReturnCallback() { /** * @param message 消息对象 * @param replyCode 错误码 * @param replyText 错误信息 * @param exchange 交换机 * @param routingKey 路由键 */ @Override public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) { System.out.println(\\\"return 执行了~~~\\\"); } }); // 下面发送消息是错误发送演示 rabbitTemplate.convertAndSend(\\\"test_exchange_confirm\\\", \\\"confirm2\\\", \\\"send routingKey message...\\\"); } }\"]},\"107\":{\"h\":\"Consumer Ack\",\"t\":[\"简介\",\"ack指Acknowledge,确认。 表示消费端收到消息后的确认方式。 有三种确认方式： 自动确认：acknowledge=\\\"none\\\" 手动确认：acknowledge=\\\"manual\\\" 根据异常情况确认：acknowledge=\\\"auto\\\" 其中自动确认是指,当消息一旦被Consumer接收到,则自动确认收到,并将相应 message 从RabbitMQ 的消息缓存中移除。但是在实际业务处理中,很可能消息接收到,业务处理出现异常,那么该消息就会丢失。 如果设置了手动确认方式,则需要在业务处理成功后,调用channel.basicAck(),手动签收,如果出现异常,则调用channel.basicNack()方法,让其自动重新发送消息。\",\"以 spring 整合形式演示案例.\",\"创建 properties 和 spring config xml文件\",\"rabbitmq.host=192.168.65.128 rabbitmq.port=5672 rabbitmq.username=black_fire rabbitmq.password=black_fire rabbitmq.virtual-host=/black_fire_test\",\"spring config xml 文件内容\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:rabbit=\\\"http://www.springframework.org/schema/rabbit\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd\\\"> <!-- 加载 properties 配置文件 --> <context:property-placeholder location=\\\"classpath:rabbitmq.properties\\\"/> <!-- 定义rabbitmq connectionFactory 也就是创建链接 --> <rabbit:connection-factory id=\\\"connectionFactory\\\" host=\\\"${rabbitmq.host}\\\" port=\\\"${rabbitmq.port}\\\" username=\\\"${rabbitmq.username}\\\" password=\\\"${rabbitmq.password}\\\" virtual-host=\\\"${rabbitmq.virtual-host}\\\" /> <!-- 生成消息返回的 bean--> <context:component-scan base-package=\\\"cn.black_fire.rabbitmq.listener\\\" /> <!-- acknowledge=\\\"manual\\\" 开启手动签收消息 --> <rabbit:listener-container connection-factory=\\\"connectionFactory\\\" acknowledge=\\\"manual\\\"> <rabbit:listener ref=\\\"ackListener\\\" queue-names=\\\"test_queue_confirm\\\" /> </rabbit:listener-container> </beans>\",\"接收消息的示例对象\",\"package cn.black_fire.rabbitmq.listener; import com.rabbitmq.client.Channel; import org.springframework.amqp.core.Message; import org.springframework.amqp.rabbit.listener.api.ChannelAwareMessageListener; import org.springframework.stereotype.Component; /** * @author black_fire */ @Component public class AckListener implements ChannelAwareMessageListener { @Override public void onMessage(Message message, Channel channel) throws Exception { long deliverTag = message.getMessageProperties().getDeliveryTag(); try { System.out.println(new String(message.getBody())); System.out.println(\\\"处理业务逻辑\\\"); // 正常情况下,就会执行签收 channel.basicAck(deliverTag,true); }catch (Exception e){ e.printStackTrace(); /* 拒绝签收多个消息 basicNack(long deliveryTag, boolean multiple, boolean requeue) deliveryTag: deliverTag multiple: 是否拒绝多个消息 requeue: true 重回队列 */ channel.basicNack(deliverTag,true,true); } } }\",\"写一个死循环测试接收消息即可\",\"import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; /** * @author black_fire */ @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = \\\"classpath:spring-rabbitmq.xml\\\") public class AckTst { @Test public void test(){ while (true){} } }\"]},\"108\":{\"h\":\"消费限流\",\"t\":[\"只需要修改 spring config xml 文件就可以了\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:rabbit=\\\"http://www.springframework.org/schema/rabbit\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd\\\"> <!-- 加载 properties 配置文件 --> <context:property-placeholder location=\\\"classpath:rabbitmq.properties\\\"/> <!-- 定义rabbitmq connectionFactory 也就是创建链接 --> <rabbit:connection-factory id=\\\"connectionFactory\\\" host=\\\"${rabbitmq.host}\\\" port=\\\"${rabbitmq.port}\\\" username=\\\"${rabbitmq.username}\\\" password=\\\"${rabbitmq.password}\\\" virtual-host=\\\"${rabbitmq.virtual-host}\\\" /> <!-- 生成消息返回的 bean--> <context:component-scan base-package=\\\"cn.black_fire.rabbitmq.listener\\\" /> <!-- 限流处理: acknowledge=\\\"manual\\\" 开启手动签收消息 prefetch=\\\"1\\\" 每次只读取一个消息进行处理 只有签收一个后才会处理下一个 接收消息实体类实现 ChannelAwareMessageListener 接口. --> <rabbit:listener-container connection-factory=\\\"connectionFactory\\\" acknowledge=\\\"manual\\\" prefetch=\\\"1\\\"> <rabbit:listener ref=\\\"ackListener\\\" queue-names=\\\"test_queue_confirm\\\" /> </rabbit:listener-container> </beans>\"]},\"109\":{\"h\":\"TTL\",\"t\":[\"TTL Time To Live消息过期时间设置\",\"在 spring config xml文件中实现 TTL (在生产者一端)\",\"<!-- ttl 队列过期时间 --> <rabbit:queue id=\\\"test_queue_ttl\\\" name=\\\"test_queue_ttl\\\"> <rabbit:queue-arguments> <!-- key 固定字符串 value 时间间隔,以毫秒为单位 value-type 需要设置为 Integer 类型,默认为 String 会报错 --> <entry key=\\\"x-message-ttl\\\" value=\\\"10000\\\" value-type=\\\"java.lang.Integer\\\" /> </rabbit:queue-arguments> </rabbit:queue> <rabbit:topic-exchange name=\\\"test_exchange_ttl\\\"> <rabbit:bindings> <rabbit:binding pattern=\\\"ttl.#\\\" queue=\\\"test_queue_ttl\\\" /> </rabbit:bindings> </rabbit:topic-exchange>\",\"ttl 消息过期时间示例\",\"@Test public void test(){ MessagePostProcessor messagePostProcessor = new MessagePostProcessor() { @Override public Message postProcessMessage(Message message) throws AmqpException { // 设置 message 的过期时间 默认单位为毫秒 message.getMessageProperties().setExpiration(\\\"5000\\\"); return message; } }; // 消息过期 rabbitTemplate.convertAndSend(\\\"test_queue_ttl\\\",\\\"ttl.hhh\\\",\\\"message ttl\\\", messagePostProcessor); }\"]},\"110\":{\"h\":\"死信队列\",\"t\":[\"简介\",\"死信队列,英文缩写：DLX 。 Dead Letter Exchange(死信交换机),当消息成为Dead message后,可以被重新发送到另一个交换机,这个交换机就是DLX。\",\"rabbitmq DLX\",\"消息成为死信的三种情况: 1. 队列消息长度到达限制； 2. 消费者拒接消费消息,basicNack/basicReject,并且不把消息重新放入原目标队列,requeue=false； 3. 原队列存在消息过期设置,消息到达超时时间未被消费；\",\"在 spring config xml 中配置死信队列(生产端)\",\"<!-- 1. 声明正常的队列(test_queue_dlx)和交换机(test_exchange_dlx) --> <rabbit:queue name=\\\"test_queue_dlx\\\" id=\\\"test_queue_dlx\\\"> <!--3. 正常队列绑定死信交换机--> <rabbit:queue-arguments> <!--3.1 x-dead-letter-exchange：死信交换机名称--> <entry key=\\\"x-dead-letter-exchange\\\" value=\\\"exchange_dlx\\\" /> <!--3.2 x-dead-letter-routing-key：发送给死信交换机的routingKey--> <entry key=\\\"x-dead-letter-routing-key\\\" value=\\\"dlx.hehe\\\" /> <!--4.1 设置队列的过期时间 ttl--> <entry key=\\\"x-message-ttl\\\" value=\\\"10000\\\" value-type=\\\"java.lang.Integer\\\" /> <!--4.2 设置队列的长度限制 max-length --> <entry key=\\\"x-max-length\\\" value=\\\"10\\\" value-type=\\\"java.lang.Integer\\\" /> </rabbit:queue-arguments> </rabbit:queue> <rabbit:topic-exchange name=\\\"test_exchange_dlx\\\"> <rabbit:bindings> <rabbit:binding pattern=\\\"test.dlx.#\\\" queue=\\\"test_queue_dlx\\\"> </rabbit:binding> </rabbit:bindings> </rabbit:topic-exchange> <!-- 2. 声明死信队列(queue_dlx)和死信交换机(exchange_dlx) --> <rabbit:queue name=\\\"queue_dlx\\\" id=\\\"queue_dlx\\\" /> <rabbit:topic-exchange name=\\\"exchange_dlx\\\"> <rabbit:bindings> <rabbit:binding pattern=\\\"dlx.#\\\" queue=\\\"queue_dlx\\\" /> </rabbit:bindings> </rabbit:topic-exchange>\",\"当消息被拒收时要设置为 requeue=false 不然不会进入死信队列\",\"@Component public class DlxListener implements ChannelAwareMessageListener { @Override public void onMessage(Message message, Channel channel) throws Exception { long deliveryTag = message.getMessageProperties().getDeliveryTag(); try { //1.接收转换消息 System.out.println(new String(message.getBody())); //2. 处理业务逻辑 System.out.println(\\\"处理业务逻辑...\\\"); int i = 3/0;//出现错误 //3. 手动签收 channel.basicAck(deliveryTag,true); } catch (Exception e) { //e.printStackTrace(); System.out.println(\\\"出现异常,拒绝接受\\\"); //4.拒绝签收,不重回队列 requeue=false channel.basicNack(deliveryTag,true,false); } } }\"]},\"111\":{\"h\":\"延迟队列\",\"t\":[\"简介\",\"延迟队列,即消息进入队列后不会立即被消费,只有到达指定时间后才会被消费 在RabbitMQ中并未提供延迟队列功能,但是可以使用 TTL+死信队列 组合实现延迟队列的效果\"]},\"112\":{\"h\":\"fastdfs\",\"t\":[\"简介\",\"FastDFS是一个开源的轻量级分布式文件系统,它对文件进行管理. 功能包括 文件存储 文件同步 文件访问(文件上传、文件下载)等. fastdft 解决了大容量存储和负载均衡的问题。 特别适合以文件为载体的在线服务,如相册网站、视频网站等等。 FastDFS为互联网量身定制,充分考虑了冗余备份、负载均衡、线性扩容等机制,并注重高可用、高性能等指标,使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。 FastDFS 架构包括 Tracker server 和 Storage server。 客户端请求 Tracker server 进行文件上传、下载,通过 Tracker server 调度最终由 Storage server 完成文件上传和下载。 Tracker server 作用是负载均衡和调度,通过 Tracker server 在文件上传时可以根据一些策略找到Storage server 提供文件上传服务。 可以将 tracker 称为追踪服务器或调度服务器。 Storage server 作用是文件存储,客户端上传的文件最终存储在 Storage 服务器上,Storageserver 没有实现自己的文件系统而是利用操作系统的文件系统来管理文件。 可以将storage称为存储服务器。\"]},\"113\":{\"h\":\"文件上传\",\"t\":[\"pom.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.6.1</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>com.black_fire</groupId> <artifactId>upload-service</artifactId> <version>0.0.1-SNAPSHOT</version> <name>upload-service</name> <description>Demo project for Spring Boot</description> <properties> <java.version>1.8</java.version> <spring-cloud.version>2021.0.0</spring-cloud.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId> </dependency> <!-- fsatdfs 依赖 --> <dependency> <groupId>com.github.tobato</groupId> <artifactId>fastdfs-client</artifactId> <version>1.26.7</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring-cloud.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>\",\"application.yml配置\",\"server: port: 9008 # 日志 #logging: # # file: demo.log # pattern: # console: \\\"%d -%msg%n # level: # org.springframework.web: debug # com.black_fire: debug spring: application: name: upload-service servlet: multipart: enabled: true max-file-size: 10MB # 单个文件上传大小 max-request-size: 20MB # 总文件上传大小 fdfs: # 链接超时 connect-timeout: 60 # 读取时间 so-timeout: 60 # 生成缩略图参数 thumb-image: width: 150 height: 150 tracker-list: 192.168.243.132:22122 eureka: client: service-url: defaultZone: http://127.0.0.1:9004/eureka instance: # 更倾向于使用ip地址,而部署主机名 prefer-ip-address: true # ip 地址 ip-address: 127.0.0.1 # 续约间隔,默认30秒 lease-renewal-interval-in-seconds: 5 # 服务的失效时间,默认90秒 lease-expiration-duration-in-seconds: 5\",\"添加配置类\",\"import com.github.tobato.fastdfs.FdfsClientConfig; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Import; @Configuration @Import(FdfsClientConfig.class) public class DfsConfig { }\",\"工具类\",\"import com.github.tobato.fastdfs.domain.fdfs.StorePath; import com.github.tobato.fastdfs.service.FastFileStorageClient; import org.apache.commons.io.FilenameUtils; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; import org.springframework.web.multipart.MultipartFile; @Component public class FileDfsUtil { @Autowired private FastFileStorageClient storageClient; /** * 上传文件 * @param multipartFile * @return * @throws Exception * multipartFile.getInputStream() 获取文件输入流 * multipartFile.getSize() 获取文件大小 * FilenameUtils.getExtension(multipartFile.getOriginalFilename()); 获得文件后缀名 */ public String upload(MultipartFile multipartFile) throws Exception{ String extName = FilenameUtils.getExtension(multipartFile.getOriginalFilename()); StorePath storePath = storageClient.uploadImageAndCrtThumbImage(multipartFile.getInputStream(), multipartFile.getSize(), extName, null); return storePath.getFullPath(); } /** * 删除文件 * @param fileUrl */ public void deleteFile(String fileUrl){ StorePath storePath = StorePath.parseFromUrl(fileUrl); storageClient.deleteFile(storePath.getGroup(),storePath.getPath()); } }\",\"上传文件控制器\",\"import com.black_fire.util.FileDfsUtil; import org.apache.commons.lang.StringUtils; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.multipart.MultipartFile; @RestController public class FileController { @Autowired private FileDfsUtil fileDfsUtil; /** * 上传 * @param file * @return */ @RequestMapping(value = \\\"/uploadFile\\\",method = RequestMethod.POST,headers = \\\"content-type=multipart/form-data\\\") public ResponseEntity<String> upload(@RequestParam(\\\"file\\\")MultipartFile file){ String result = \\\"\\\"; try { String path = fileDfsUtil.upload(file); if (StringUtils.isEmpty(path)){ result = \\\"上传失败\\\"; }else { result = path; } } catch (Exception e) { e.printStackTrace(); result = \\\"服务器异常\\\"; } return ResponseEntity.ok(result); } /** * 删除文件 * @param filePathName * @return */ @RequestMapping(value = \\\"/deleteByPath\\\" ,method = RequestMethod.GET) public ResponseEntity<String> deleteByPath(String filePathName){ fileDfsUtil.deleteFile(filePathName); return ResponseEntity.ok(\\\"success delete\\\"); } }\"]},\"114\":{\"c\":[\"后端开发\"]},\"115\":{\"h\":\"Maven\"},\"116\":{\"h\":\"maven镜像源配置\",\"t\":[\"maven 配置华为云镜像官方文档地址: https://www.huaweicloud.com/special/maven-jingxiang.html\",\"<mirror> <id>huaweicloud</id> <mirrorOf>*</mirrorOf> <url>https://repo.huaweicloud.com/repository/maven/</url> </mirror>\",\"maven 配置阿里云镜像官网指南: https://developer.aliyun.com/mvn/guide\",\"<mirror> <id>aliyunmaven</id> <mirrorOf>*</mirrorOf> <name>阿里云公共仓库</name> <url>https://maven.aliyun.com/repository/public</url> </mirror>\"]},\"117\":{\"c\":[\"后端开发\"]},\"118\":{\"h\":\"错误收集\"},\"119\":{\"h\":\"Lombok错误\"},\"120\":{\"h\":\"继承时出现警告解决\",\"t\":[\"springboot项目根下创建lombok.config文件(与启动类平级). 添加以下内容即可不再提示该警告.\",\"# lombok 配置类 config.stopbubbling=true lombok.equalsandhashcode.callsuper=call\"]},\"121\":{\"h\":\"swagger/knife4j\"},\"122\":{\"h\":\"请求接口文档地址失败解决\",\"t\":[\"原因: 我们使用拦截器后需要注册,注册后会将所有的请求都进行拦截,如果我们不将所有请求拦截就不会出现这些个情况,但是我们是不能放开所有请求的,所以我们需要在全局配置中进行配置.\",\"@Configuration @RequiredArgsConstructor public class WebConfig implements WebMvcConfigurer { private final AuthorityInterceptor authorityInterceptor; // 全局拦截器 // 需要放开的接口请求,因为我这边使用的是knife4j的4.3版本所以放开的有一些多. private static final List<String> exclude_path = Arrays.asList(\\\"/login/*\\\", \\\"/error\\\", \\\"/swagger-resources\\\", \\\"/swagger-resources/configuration/ui\\\", \\\"/doc.html\\\"); public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(authorityInterceptor) .addPathPatterns(\\\"/**\\\") .excludePathPatterns(exclude_path); } public void addResourceHandlers(ResourceHandlerRegistry registry) { // swagger配置 registry.addResourceHandler(\\\"/**\\\") .addResourceLocations(\\\"classpath:/static/\\\"); registry.addResourceHandler(\\\"swagger-ui.html\\\", \\\"doc.html\\\") .addResourceLocations(\\\"classpath:/META-INF/resources/\\\"); registry.addResourceHandler(\\\"/webjars/**\\\") .addResourceLocations(\\\"classpath:/META-INF/resources/webjars/\\\"); } }\"]},\"123\":{\"h\":\"knife4j使用html导出接口出现打不开问题解决\",\"t\":[\"导出html文件后页面怎么刷新都无法正常显示页面,f12打开devtools中网络请求时发现vue.js/antd.min.js两个文件找不到. 这里我们可以打开导出的html文件找多两个js引用,将其替换为字节公共库中的资源就可以打开. 这里示例展示我这边找到的文件替换的js 字节公共库地址: https://cdn.bytedance.com/\",\" <script src=\\\"https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue/2.6.9/vue.js\\\"></script> <script src=\\\"https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/ant-design-vue/1.5.0/antd.min.js\\\"></script>\"]},\"124\":{\"c\":[\"后端开发\"]},\"125\":{\"c\":[\"java\"]},\"126\":{\"h\":\"MySql\"},\"127\":{\"h\":\"find_in_set\",\"t\":[\"find_in_set 使用方式与 in 相似只不过参数变为了使用 ,分割的字符串,且写法也有一些区别.\",\"/* 示例 当在select时会如果搜索值在strlist中存在那么会返回查询的值,如下例就是会返回1 */ select find_in_set(1,'1,2,3,4'); /* 示例 当在where作为条件时则是会返回满足条件的数据 当查询的数据为2时则是查询name中包含2的数据就会返回 */ select * from ((select '1,2,3,4' as name) union (select '1,2,3' as name) union (select '1,2' as name) union (select '1' as name)) users where find_in_set(2,name)\"]},\"128\":{\"h\":\"递归查询\",\"t\":[\"父级递归查询子级\",\"WITH RECURSIVE cte as ( select id,name,parent_id from '要查询的表' where id = '父级id' union ALL select temp.id,temp.name,temp.parent_id from '要查询的表' temp,cte c where temp.parent_id = c.id ) select * from cte\",\"子id递归查询父级\",\"WITH RECURSIVE cte as ( select id,name,parent_id from org where id = '子集id' union ALL select temp.id,temp.name,temp.parent_id from org temp,cte c where temp.id = c.parent_id ) select * from cte\",\"输入父级获取子父级的组织拼接\",\"/* 输出示例: 测试顶级部门 测试顶级部门->测试部门1 测试顶级部门->测试部门1 -> 测试部门2 测试顶级部门->测试部门1 -> 测试部门2 -> 测试部门3 */ WITH RECURSIVE cte as ( select id,name,parent_id,name as path from '要查询的表' where id = '父级id' union ALL select temp.id,temp.name,temp.parent_id, concat(c.path ,'->',temp.name )as path from '要查询的表' temp,cte c where temp.parent_id = c.id ) select * from cte\",\"输入子集获取从父级到当前子集的组织拼接\",\"/* 输出示例: 测试顶级部门 测试顶级部门->测试部门1 测试顶级部门->测试部门1 -> 测试部门2 测试顶级部门->测试部门1 -> 测试部门2 -> 测试部门3 */ WITH RECURSIVE cte as ( select id,name,parent_id,name as path from '要查询的表' where id = '子集ID' union ALL select temp.id,temp.name,temp.parent_id, concat(temp.name ,'->', c.path )as path from '要查询的表' temp,cte c where temp. id = c.parent_id ) select * from cte\",\"ps: 前四个写法需要注意 MySql 版本为 8.0 以上,可以使用 select version(); 来查看版本号\"]},\"129\":{\"h\":\"ddl\",\"t\":[\"-- 创建数据库,数据库不存在时创建 create database if not exists `database_name` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\"]},\"130\":{\"c\":[\"后端开发\",\"数据库\"]},\"131\":{\"c\":[\"sql\"]},\"132\":{\"h\":\"PostgreSql\"},\"133\":{\"h\":\"不常用sql方法\"},\"134\":{\"h\":\"查询所有表中是否存在某个字段\",\"t\":[\"select * from information_schema.columns WHERE table_schema = 'public' and column_name = '要查询的字段名';\"]},\"135\":{\"h\":\"自增序列\",\"t\":[\"-- 生成自增序列 定义自增序列时一般使用 表名称_id_seq 来表示 CREATE SEQUENCE \\\"public\\\".\\\"xxx_id_seq\\\" INCREMENT 1 MINVALUE 1 NO MAXVALUE START 1 CACHE 1; -- 将自增序列以下面这种形式弄好后,放至ID 默认值即可 nextval('xxx_id_seq'::regclass) -- 查询序列最大值 select nextval('xxx_id_seq'::regclass) --将当前序列值设置为当前表最大ID值 SELECT setval( 'xxx_id_seq', (SELECT MAX(id) FROM `表名称` ) +1 );\"]},\"136\":{\"h\":\"递归查询\"},\"137\":{\"h\":\"父级递归查询子级\",\"t\":[\"WITH RECURSIVE cte as ( select id,name,parent_id from '要查询的表' where id = '父级ID' union all select temp.id,temp.name,temp.parent_id from '要查询的表' temp INNER JOIN cte c on temp.parent_id = c.id ) select * from cte\"]},\"138\":{\"h\":\"子级递归查询父级\",\"t\":[\"WITH RECURSIVE cte as ( select id,name,parent_id from '要查询的表' where id = '子集ID' union all select temp.id,temp.name,temp.parent_id from '要查询的表' temp INNER JOIN cte c on temp.id = c.parent_id ) select * from cte\"]},\"139\":{\"h\":\"根据父级获取子父级的组织拼接\",\"t\":[\"/* 输出示例: 测试顶级部门 测试顶级部门->测试部门1 测试顶级部门->测试部门1 -> 测试部门2 测试顶级部门->测试部门1 -> 测试部门2 -> 测试部门3 */ WITH RECURSIVE cte as ( select id,name,parent_id,cast(name as TEXT) as path from '要查询的表' where id = '父级ID' and is_delete = 0 union all select temp.id,temp.name,temp.parent_id,cast( c.path|| '->'|| temp.name as TEXT)path from '要查询的表' temp INNER JOIN cte c on temp.parent_id = c. id where temp.is_delete = 0 ) select * from cte\"]},\"140\":{\"h\":\"根据子集获取从父级到当前子集的组织拼接\",\"t\":[\"/* 输出示例: 测试顶级部门 测试顶级部门->测试部门1 测试顶级部门->测试部门1 -> 测试部门2 测试顶级部门->测试部门1 -> 测试部门2 -> 测试部门3 */ WITH RECURSIVE cte as ( select id,name,parent_id,cast(name as TEXT) as path from '要查询的表' where id = '子集ID' union all select temp.id,temp.name,temp.parent_id,cast( temp.name || '->'|| c.path as TEXT)path from '要查询的表' temp INNER JOIN cte c on temp.id = c. parent_id ) select * from cte\"]},\"141\":{\"h\":\"Json操作\",\"t\":[\"可以参考官网Json 字符串的解释\"]},\"142\":{\"h\":\"json和 jsonb操作符\",\"t\":[\"json&jsonb\"]},\"143\":{\"h\":\"额外jsonb操作符\",\"t\":[\"jsonb\"]},\"144\":{\"c\":[\"后端开发\",\"数据库\"]},\"145\":{\"c\":[\"sql\"]},\"146\":{\"h\":\"layerUI\",\"t\":[\"官网地址为: https://www.layui.com/v1/doc/modules/layer.html\",\"简单使用:\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> <script src=\\\"js/jquery2.1.4.js\\\"></script> <script src=\\\"layui/layui.js\\\"></script> </head> <body> <button onclick=\\\"msgTest()\\\">msg函数(重点)</button> <button onclick=\\\"loadTest()\\\">load函数(重点)</button> <button onclick=\\\"msg_loadTest()\\\">msg函数(load效果)</button> <button onclick=\\\"alertTest()\\\">alert函数</button> <button onclick=\\\"tipsTest()\\\">tips函数</button> <P> 锄禾日<span id=\\\"s1\\\">当午</span> </p> </body> </html> <script> function msgTest() { // layer.msg(\\\"提示的文字\\\") layer.msg(\\\"提示的文字\\\",function () { // 窗口关闭时执行 会有抖动效果 而上面没有 }); } function loadTest() { // 会有返回值 返回的是弹出层的id var windowId = layer.load(0) // 0-6 之间 推荐使用0 // 不写延时的话会直接执行,没有什么效果 layer.close(windowId) // setTimeout 超时 // setTimeout(function () { // // 通过窗口id ,关闭窗口 // layer.close(windowId) // },2000) } function msg_loadTest() { layer.msg(\\\"提示的文字\\\",{icon:16,shade:0.01}) } function alertTest() { layer.alert(\\\"文字内容\\\",{icon:10}) } function tipsTest() { layer.tips(\\\"文字内容\\\",\\\"#s1\\\",{tipsMore:true,tips:1}) } </script>\"]},\"147\":{\"c\":[\"web\"]},\"148\":{\"c\":[\"web\"]},\"149\":{\"h\":\"Vue框架\"},\"150\":{\"h\":\"安装vue框架\",\"t\":[\"直接下载源码然后通过路径引入 \",\"开发版本：https://vuejs.org/js/vue.js\",\"生产版本：https://vuejs.org/js/vue.min.js\",\"在线cdn引入的方式 \",\"<script src=\\\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\\\"></script>\",\"采用 npm 安装的方式 \",\"npm install vue\",\"现状: 都会采用npm的方式来进行正式项目开发\",\"注意: Vue.js 不支持 IE8 及其以下版本\",\"下载地址: https://cn.vuejs.org/v2/guide/installation.html\"]},\"151\":{\"h\":\"官方 api\",\"t\":[\"vue官方文档: https://cn.vuejs.org/\",\"vue开源项目: https://github.com/opendigg/awesome-github-vue\",\"vue.js 中文社区: https://www.vue-js.com/\"]},\"152\":{\"h\":\"Vue\"},\"153\":{\"h\":\"vue 实例选项 el\",\"t\":[\"作用:当前Vue实例所管理的html视图\",\"值:通常是id选择器(或者是一个dom对象)\",\"注意！！！！不要让el所管理的视图是html或者body!!!!\",\"new Vue({ // el: '#app' , id选择器 // el: '.app', class选择器 el: document.getElementById(\\\"#app\\\") // dom对象 })\"]},\"154\":{\"h\":\"实例选项-data\",\"t\":[\"Vue 实例的data(数据对象),是响应式数据(数据驱动视图)\",\"data中的值\",\"data中的数据msg/count 可以在视图中通过{{msg/count}}访问数据\",\"data中的数据也可以通过实例访问 vm.msg或者vm.$data.msg\",\"data中的数据特点:响应式的数据->data中的数据一旦发生变化->视图中使用该数据的位置就会发生变化\",\"let vm = new Vue({ el: \\\"#app\\\", data: { msg: 'abc', count: 100 list: [1, 2, 3] } }) vm.msg = 200 console.log(vm) console.log(vm.msg) console.log(vm.$data.msg)\"]},\"155\":{\"h\":\"实例选项-methods\",\"t\":[\"methods其值为一个对象\",\"可以直接通过 VM 实例访问这些方法,或者在指令表达式中使用。\",\"方法中的 this 自动绑定为 Vue 实例。\",\"methods中所有的方法 同样也被代理到了 Vue实例对象上,都可通过this访问\",\"注意,不应该使用箭头函数来定义 method 函数。理由是箭头函数绑定了父级作用域的上下文,所以\",\"this 将不会按照期望指向 Vue 实例\",\"let vm =new Vue({ el:\\\"#app\\\", data:{ name:\\\"Hello world\\\", name2:\\\"Hello world2\\\" }, methods:{ // 常规函数写法 fn1:function(){ console.log(this.name) this.fn2() }, // es6 函数简写法 fn2() { console.log(this.name2) } } })\"]},\"156\":{\"h\":\"术语解释-插值表达式(重要)\",\"t\":[\"作用: 会将绑定的数据实时的显示出来\",\"形式: 通过 {{ 插值表达式 }} 包裹的形式\",\"用法: {{js表达式、三元运算符、方法调用等}}\",\"{{ a }} {{a == 10 }} {{a > 10}} {{a + b + c}} {{a.split('').reverse().join('')}} {{a > 0 ? \\\"成功\\\" : \\\"失败\\\"}} // 错误写法 <!-- 这是语句,不是表达式 --> {{ var a = 1 }} <!-- 流控制也不会生效,请使用三元表达式 --> {{ if (ok) { return message } }} // 正确写法 <!-- js表达式 --> <p>{{ 1 + 2 + 3 }}</p> <p>{{ 1 > 2 }}</p> <!-- name为data中的数据 --> <p>{{ name + ':消息' }}</p> <!-- count 为data中的数据 --> <p>{{ count === 1 }}</p> <!-- count 为data中的数据 --> <p>{{ count === 1 ? \\\"成立\\\" : \\\"不成立\\\" }}</p> <!-- 方法调用 --> <!-- fn为methods中的方法 --> <p>{{ fn() }}</p>\"]},\"157\":{\"h\":\"系统指令-v-text和v-html\",\"t\":[\"很像innerText和innerHTML\",\"v-text:更新标签中的内容\",\"v-text和插值表达式的区别\",\"v-text 更新 整个 标签中的内容\",\"插值表达式: 更新标签中局部的内容\",\"v-html:更新标签中的内容/标签\",\"可以渲染内容中的html标签 注意:尽量避免使用,容易造成危险 (XSS跨站脚本攻击)\"]},\"158\":{\"h\":\"系统指令-v-if 和 v-show\",\"t\":[\"使用: v-if 和 v-show 后面跟着表达式的值是布尔值 ,布尔值来决定该元素显示隐藏\",\"注意 : v-if 是直接决定元素 的 添加 或者删除 而 v-show 只是根据样式来决定 显示隐藏\",\"v-if 有更高的切换开销\",\"v-show 有更高的初始渲染开销。\",\"如果需要非常频繁地切换,则使用 v-show 较好.\",\"如果在运行时条件很少改变,则使用 v-if 较好\"]},\"159\":{\"h\":\"系统指令-v-on绑定事件\",\"t\":[\"v-on:事件名=\\\"方法名\\\"\",\"@事件名=\\\"方法名\\\"的方式\",\"// v-on:xx事件名='当触发xx事件时执行的语句' <button v-on:click=\\\"fn\\\">按钮</button> // v-on的简写方法 <button @click=\\\"fn\\\">按钮</button>\",\"修饰符\",\"使用:@事件名.修饰符=\\\"方法名\\\"\",\".once - 只触发一次回调\",\".prevent - 调用 event.preventDefault() 阻止默认事件\",\"// v-on修饰符 如 once: 只执行一次 <button @click.once=\\\"fn\\\">只执行一次</button> // v-on修饰符 如 prevent: 阻止默认事件 <button @contextmenu.prevent=\\\"fn\\\">阻止默认事件</button>\",\"事件对象(扩展)\",\"第一种:方法名中采用$event的方式传形参\",\"第二种:直接写事件名 默认第一个参数为event事件参数\"]},\"160\":{\"h\":\"系统指令-v-for\"},\"161\":{\"h\":\"系统指令-v-for(数组)\",\"t\":[\"v-for 指令基于一个数组来渲染一个列表\",\"v-for 语法 item in items 或者 item of items\",\"其中 items 是源数据数组 而 item 则是被迭代的数组元素的别名\",\"<!-- 第一种方法 --> <ul> <li v-for=\\\"item in items\\\"> {{ item.name }} </li> </ul> // data中的数组 data: { items: [ { name: '大娃' }, { name: '二娃' } ] } <!-- 第二种用法 v-for 还支持一个可选的第二个参数,即当前项的索引 --> <ul> <li v-for=\\\"(item, index) in items\\\"> {{ index }} {{ item.name }} </li> </ul>\"]},\"162\":{\"h\":\"系统指令-v-for(对象)\",\"t\":[\"<!-- 第一种方法 items 为对象 item为当前遍历属性对象的值 --> v-for=\\\"item in items\\\" <!-- 第二种方法 item为当前遍历属性对象的值 key为当前属性名 index为当前索引的值 --> v-for=\\\"(item, key, index) in items\\\"\"]},\"163\":{\"h\":\"系统指令-v-for(key属性)(非常重要的面试题)\",\"t\":[\"列表数据变动会导致 视图列表重新更新 为了提升性能 方便更新 需要提供一个属性 key\",\"<!-- 使用v-for时 建议给每个元素设置一个key属性 (必须加上) key属性的值 要求是每个元素的唯一值 (唯一索引值) 好处:vue渲染页面标签 速度快 --> <!-- 数组--> <li v-for=\\\"(v,i) in arr\\\" :key=\\\"i\\\">{{v}}</li> <!-- 对象--> <li v-for=\\\"(v,k,i) in json\\\" :key=\\\"i\\\">{{v}}-{{k}}</li>\"]},\"164\":{\"h\":\"系统指令-v-bind\"},\"165\":{\"h\":\"系统指令-v-bind基本用法\",\"t\":[\"作用: 绑定标签上的任何属性\",\"场景: 当标签上的属性是变量/动态/需要改变的\",\"<!-- ID为数据对象中的变量值 --> <p v-bind:id=\\\"ID\\\"></p> <!-- 简写 --> <p :id=\\\"ID\\\"></p>\"]},\"166\":{\"h\":\"系统指令-v-bind绑定class(对象)\",\"t\":[\"绑定class对象语法 :class=\\\"{ class名称: 布尔值} <p class=\\\"obox\\\" :class=\\\"{obox:isBn}\\\">内容</p> // isBn为 data选项中的属性\",\"注意 : 绑定class和原生class会进行合并(但是不会合并重复的)\"]},\"167\":{\"h\":\"系统指令-v-bind-绑定class(数组)\",\"t\":[\"绑定class数组语法 :class=\\\"[a,b]\\\"\",\"a、b为data属性的key\",\"data中key对应的value 为class名字\",\"<p :class=\\\"[a,b]\\\">内容</p> data:{ a:'obox', b:'left' }\"]},\"168\":{\"h\":\"系统指令-v-bind-绑定style(对象)\",\"t\":[\"语法 :style=\\\"{css属性名:属性值}\\\"\",\"<p :style=\\\"{color:a,fontSize:b}\\\"></p> //a、b为data属性的key data: { a: 'red', b: '30px' } <!-- 注意 css属性名 例如 font-size要写成 fontSize 以此类推 原有的style会覆盖 -->\"]},\"169\":{\"h\":\"系统指令-v-bind-绑定style(数组)\",\"t\":[\"<!-- 语法: --> <div :style=\\\"[a,b]\\\"></div> <!-- a,b 为data的属性 --> data: { a: { color: \\\"red\\\" }, b: { fontSize: \\\"30px\\\" } }\"]},\"170\":{\"h\":\"系统指令-v-model-基础用法\",\"t\":[\"作用: 表单元素的绑定\",\"特点: 双向数据绑定\",\"数据发生变化可以更新到界面\",\"通过界面可以更改数据\",\"v-model 绑定表单元素,会忽略所有表单元素的 value 、 checked 、 selected 特性的初始值\",\"表单元素会将 Vue 实例的data中的数据作为数据来源,所以应该在 data 选项中声明初始值。\",\"<!-- 表单中设置value值没用 v-model会忽略 --> <input type=\\\"text\\\" v-model=\\\"msg\\\" value=\\\"zhang\\\"> <p>{{msg}}</p> <!-- 在data中设置msg --> data: { msg: 'zhangsan' }\"]},\"171\":{\"h\":\"系统指令-v-model-原理及实现\",\"t\":[\"表单元素绑定的数据改变 => data数据发生改变=> 页面数据变化\",\"<p>{{msg}}</p> <input type=\\\"text\\\" :value=\\\"msg\\\" @input=\\\"fn($event)\\\"> data: { msg: 'abc' }, methods: { fn(e) { //msg=最新的value this.msg = e.target.value } }\"]},\"172\":{\"h\":\"系统指令-v-model-绑定其他表单元素\",\"t\":[\"文档地址: https://cn.vuejs.org/v2/guide/forms.html\"]},\"173\":{\"h\":\"系统指令-v-cloak\",\"t\":[\"场景: 解决页面初次渲染时 页面模板闪屏现象\",\"写入v-cloak指令\",\"在style里面加给v-cloak加上display: none;\",\"注意: 避免多次写入标签 可以一次性 将v-cloak引用在实例视图上\",\"<style> [v-cloak] { display: none; } </style> <div id=\\\"app\\\" v-cloak> {{msg}} </div>\"]},\"174\":{\"h\":\"系统指令-v-once\",\"t\":[\"作用: 指令所在元素只渲染一次\",\"<p v-once>{{msg}}</p> <input type=\\\"text\\\" v-model=\\\"msg\\\">\"]},\"175\":{\"h\":\"过滤器-过滤器的分析\",\"t\":[\"看过滤器API的用法 https://cn.vuejs.org/v2/guide/filters.html\",\"本地\",\"// 组件的选项中定义本地的过滤器 filters: { 过滤器名字:function (value) { return .... } }\",\"全局\",\"// 如何注册一个全局过滤器 Vue.filter(\\\"过滤器名字\\\", function(value) { return ...... });\",\"使用\",\"// 过滤器应该被添加在尾部 每个过滤器用管道符分隔 // 第一种用法在双花括号中 {{ 数据 | 过滤器名字 }} // 第二种用法在 v-bind 中 <div v-bind:id=\\\"数据 |过滤器名字 \\\"></div>\"]},\"176\":{\"h\":\"过滤器-过滤器的基本用法\",\"t\":[\"在创建 Vue 实例 之前 定义全局过滤器Vue.filter()\",\"在实例的filter选项中定义局部过滤器\",\"在视图中通过{{数据 | 过滤器名字}}或者v-bind使用过滤器\",\"// 如何注册一个全局过滤器 Vue.filter(\\\"过滤器名字\\\", function(value) { return value.charAt(0).toUpperCase() + value.substr(1); }); // 如果注册一个局部过滤器 filters: { 过滤器名字:function (value) { return value.charAt(0).toUpperCase() + value.substr(1); } }\"]},\"177\":{\"h\":\"过滤器-传参数和串联使用\",\"t\":[\"过滤器可以传递参数,接收的第一个参数永远是前面传递过来的过滤值\",\"过滤器也可以多个串行起来并排使用\",\"// 多个过滤器用 | 分割 <p>{{count|a('元')|b}}</p> // 定义过滤器 filters：{ // 第一个参数永远是前面传递过来的过滤值 a:function(val,y){ // val 是count值 // y 是‘元’ } }\"]},\"178\":{\"h\":\"表格案例-使用过滤器完成日期格式处理\",\"t\":[\"路径 : 格式化需要借助第三方插件\",\"引入第三方格式化日期插件 moment.js\",\"定义格式化日期过滤器\",\"实现其格式化功能\",\"使用过滤器\",\"// 全局过滤器代码 Vue.filter(\\\"fmtDate\\\", function (v) { return moment(v).format('YYYY-MM-DD h:mm:ss a') })\"]},\"179\":{\"h\":\"ref属性-获取DOM\",\"t\":[\"给元素定义ref属性, 然后通过$refs.名称 来获取dom对象\",\"<input type=\\\"text\\\" ref=\\\"txt\\\">// 定义ref // 获取DOM的value值 methods: { getVal() { //获取dom console.log(this.$refs.txt) } }\"]},\"180\":{\"h\":\"自定义指令\"},\"181\":{\"h\":\"全局自定义指令\",\"t\":[\"使用场景:需要对普通 DOM 元素进行底层操作,这时候就会用到自定义指令\",\"分类:全局和局部\",\"全局自定义指令:\",\"在创建 Vue 实例之前定义全局自定义指令Vue.directive(参数1,参数2) 第一参数是指令名称 第二参数是一个对象 对象中要实现inserted方法 inserted方法中的参数为当前指令 所在元素的DOM对象\",\"// 1.注册一个自定义指令 Vue.directive( '指令名称' , { inserted(参数){ //参数为使用指令的DOM //操作 } }) // 2.使用自定义指令 <input type=\\\"text\\\" v-指令名称> // 示例(全局自动聚焦的自定义指令) Vue.directive(\\\"focus\\\", { inserted(dom) { dom.focus(); } }); // 使用自定义指令 <input type=\\\"text\\\" v-focus>\"]},\"182\":{\"h\":\"局部自定义指令\",\"t\":[\"//局部指令在vue实例内部定义 directives: { \\\"focus\\\": { inserted(dom) { dom.focus(); } } } // 调用 <input type=\\\"text\\\" v-focus>\"]},\"183\":{\"h\":\"实例选项-计算属性-文档分析\",\"t\":[\"使用: 在Vue实例选项中 定义 computed:\",\"示例: 通过计算属性实现字符串的翻转\",\"定义数据对象\",\"实现计算属性方法\",\"使用计算属性\",\"data: { message: 'hello' }, computed: { reverseMessage: function () { // this指向 vm 实例 return this.message.split('').reverse().join('') } } // computed里的函数直接用 不加() 但是必须得return {{ message }} {{ reversedMessage }}\",\"计算属性 和 methods方法的区别:\",\"计算属性不需要调用形式的写法 而methods方法必须采用 方法() 调用的形式\",\"计算属性依赖data中的数据变化,如果data并没有发生变化,则计算属性则会取缓存的结果,\",\"methods不论data变化与否 只要调用 都会重新计算\",\"注意:当数据对象中 message发生变化时 计算属性也会重新计算计算=> 改变页面视图\"]},\"184\":{\"h\":\"在Vue中实现发送网络请求\",\"t\":[\"Vue.js中发送网络请求本质还是ajax,我们可以使用插件方便操作。\",\"vue-resource: Vue.js的插件,已经不维护,不推荐使用\",\"axios : 不是vue的插件 ,可以在任何地方使用,推荐\",\"说明 : 既可以在 浏览器端 又可以在 node.js 中使用的发送http请求的库,支持Promise ,不支持jsonp\",\"如果遇到jsonp请求, 可以使用插件 jsonp 实现\"]},\"185\":{\"h\":\"axios-介绍-及基本使用\",\"t\":[\"// 基本用法 axios.get(url).then((res) => { // 请求成功 会来到这 res响应体 }).catch((err) => { // 请求失败 会来到这 处理err对象 }) // 获取 axios.get('http://localhost:3000/brands').then().catch() // 删除 axios.delete('http://localhost:3000/brands/1').then().catch() // 添加 axios.post('http://localhost:3000/brands', {name: '小米', date: new Date()}).then().catch() // 修改 axios.put('http://localhost:3000/brands/1', {name: '小米', date: new Date()}).then().catch() // get模糊搜索 axios.get(\\\"http://localhost:3000/brands?name_like=\\\" + \\\"aaa\\\").then().catch()\"]},\"186\":{\"h\":\"表格案例-axios-列表\",\"t\":[\"引入axios\",\"在mounted(相当于window.onload)函数中 发送请求获取数据\",\"获取的数据赋值给list列表\",\"// mounted函数 加载完DOM再执行的函数 相当于window.onload mounted() { axios.get(\\\"http://localhost:3000/brands\\\").then(result => { this.list = result.data; }); }\"]},\"187\":{\"h\":\"表格案例-axios-删除商品\",\"t\":[\"删除方法中传入ID\",\"删除方法中调用删除接口\",\"删除完成后重新调用获取数据\",\"delItem(id) { if (confirm(\\\"确定删除此条记录\\\")) { axios .delete(\\\"http://localhost:3000/brands/\\\" + id) .then(result => { this.getList(); // 重新调用拉取数据 }); } }\"]},\"188\":{\"h\":\"表格案例-axios-添加商品\",\"t\":[\"添加方法中调用新增接口\",\"添加成功后重新拉取数据\",\"清空输入框\",\"addItem() { // 添加商品 axios.post(\\\"http://localhost:3000/brands\\\", { name: this.name, date: new Date() }) .then(res => { if (res.status == 201) { this.getList(); // 重新拉取数据 this.name = \\\"\\\"; // 清空文本框 } }); }\"]},\"189\":{\"h\":\"表格案例-axios-搜索功能-实现\",\"t\":[\"监听搜索内容\",\"在监听函数中 发送axios请求实现模糊搜索\",\"把返回值赋值给list列表\",\"// 实例代码 watch: { searchval(newV, oldV) { axios.get(\\\"http://localhost:3000/brands?name_like=\\\" + newV) .then((res) => { this.list = res.data }).catch(err => { console.log(err) }) } }\"]},\"190\":{\"h\":\"实例选项-watch-基本使用\",\"t\":[\"监听data数据变化时 自动触发函数\",\"计算属性和watch区别：\",\"计算属性 必须要有返回值 所以说不能写异步请求 因为有人用它的返回值(插值表达式)\",\"watch选项中可以写很多逻辑 不需要返回值 因为没有人用它的返回值\",\"// 基本用法 data: { msg: 'abc' }, watch: { // data中的属性msg发生改变时 自动触发该函数 msg(newV, oldV) { console.log(newV, oldV) } }\"]},\"191\":{\"h\":\"组件\"},\"192\":{\"h\":\"组件特点\",\"t\":[\"组件和实例相似之处: data/methods/computed/watch 等一应俱全 注意：\",\"data和Vue实例的区别为\",\"组件中data为一个函数且需要返回一个对象\",\"组件没有el选项\",\"template 代表其 页面结构 (有且只要一个根元素)\",\"每个组件都是 独立 的 运行作用域、数据、逻辑没有任何关联\"]},\"193\":{\"h\":\"全局组件\",\"t\":[\"全局和局部: 注册方式不同 应用范围不同\",\"注意: 注意命名规范\",\"路径: 实现一个全局组件\",\"定义一个全局组件\",\"写入组件选项\",\"使用组件\",\"// 注册组件名称 推荐 小写字母 加横向的结构 Vue.component(\\\"content-a\\\", { template: `<div> {{count}} </div>`, data() { return { count: 1 }; } }); <content-a></content-a> // 注意 data中必须为一个返回对象的函数 // template必须有且只有一个根元素\"]},\"194\":{\"h\":\"局部组件\",\"t\":[\"在实例选项compoents中定义局部组件名字\",\"在组件名字相对应的对象中定义选项(template、data()、.....)\",\"在实例视图中使用组件\",\"// 1.实例选项compoents中定义局部组件名字 components: { // 2.在组件名字相对应的对象中定义选项(template、data()、.....) \\\"z-j\\\": { template: `<div>我是z-j组件--{{msg}}</div>`, data() { return { msg: \\\"abc\\\" } } } } // 3.在实例视图中使用组件 <div id=\\\"app\\\"> <z-j></z-j> </div>\"]},\"195\":{\"h\":\"组件嵌套\",\"t\":[\"全局组件 嵌套 全局组件\",\"局部组件 嵌套 全局组件\",\"// 全局组件 Vue.component('child-a', { template: \\\"<div>我是child-a组件</div>\\\" }) Vue.component('child-b', { template: \\\"<div>我是child-b组件</div>\\\" }) // 全局嵌套全局(此时 child-a和child-b 是parent-a的子组件) Vue.component('parent-a', { template: `<div> <child-a></child-a> <child-b></child-b> </div>` }) // 局部嵌套全局 (此时 child-a和child-b 是com-a的子组件) components: { \\\"com-a\\\": { template: ` <div> <child-a></child-a> <child-b><child-b> </div> ` }}\"]},\"196\":{\"h\":\"组件通信的几种情况\",\"t\":[\"组件嵌套 => 父子组件 => 父组件传递数据给子组件使用 => 组件之间的传值 => 也叫组件之间的通信\",\"组件之间的通信根据关系的可以分为:\",\"父子组件通信 \",\"父组件到子组件\",\"子组件到父组件\",\"兄弟组件通信\"]},\"197\":{\"h\":\"父子组件传值-props属性\",\"t\":[\"父子组件的传值有多种方法, 兄弟组件的通信也有自己的写法\",\"子组件的 props 属性值是一个数组\",\"数组中的值 绑定为子组件上的属性 用来接受父组件的传值\",\"在子组件的template中就可以使用 绑定的属性(msg)拿到父组件传递的值\",\"// 调用组件 <div id=\\\"app\\\"> <child-a :msg=\\\"msgParent\\\"></child-a> </div> // 子组件 Vue.component(\\\"child-a\\\", { template: ` <div> 我是子组件 {{count}}是自己的data中的数据count {{msg}}是来源于外部组件的数据</div> </div>`, data() { return { count: 100 } }, props: [\\\"msg\\\"] }) // 父组件(根组件) new Vue({ el：'#app' data: { msgParent: \\\"我是父组件\\\" } })\"]},\"198\":{\"h\":\"组件和模块的区别\",\"t\":[\"模块：侧重于功能或者数据的封装\",\"组件：包含了 template、style 和 script,而它的 script 可以由各种模块组成\"]},\"199\":{\"h\":\"单页应用(简称SPA)\",\"t\":[\"传统模式 每个页面及其内容都需要从服务器一次次请求 如果网络差, 体验则会感觉很慢\",\"SPA模式, 第一次 加载 会将所有的资源都请求到页面 模块之间切换 不会再请求服务器\",\"SPA优点：\",\"用户体验好,因为前端操作几乎感受不到网络的延迟\",\"完全组件化开发 ,由于只有一个页面,所以原来属于一个个页面的工作被归类为一个个 组件 .\",\"SPA缺点:\",\"首屏 加载慢(可以只加载所需部分)\",\"不利于 SEO ( 服务端渲染 可以解决)\",\"开发难度高 (框架)\"]},\"200\":{\"h\":\"单页应用 SPA-实现原理\",\"t\":[\"可以通过页面地址的锚链接来实现spa\",\"hash(锚链接)位于链接地址 # 之后\",\"hash值的改变 不会触发 页面刷新\",\"hash值是url地址的一部分,会存储在页面地址上 我们可以获取到\",\"可以通过 事件监听 hash值得改变\",\"拿到了hash值,就可以根据不同的hash值进行不同的 内容切换\"]},\"201\":{\"h\":\"路由-js 实现路由\",\"t\":[\"通过上一个小节内容可以得出 采用 hash值改变 的特性来进行前端路由切换\",\"路径 :\",\"实现导航结构('#/aaa')\",\"onhashchange事件监听hash值的改变\",\"获取hash值 根据值的不同 改变视图内容\"]},\"202\":{\"h\":\"路由-vue-router-文档\",\"t\":[\"Vue-Router 是 Vue.js 官方的路由管理器。\",\"它和 Vue.js 的核心深度集成,让构建单页面应用变得简单\",\"实现根据不同的请求地址 而 显示不同的内容\",\"如果要使用 vue开发项目,前端路由功能 必须使用 vue-router来实现\",\"用法:\",\"CDN\",\"本地文件\",\"npm\",\"注意: 本地文件引入vue-router ,一定要先引入vue.js,再引入vue-router\"]},\"203\":{\"h\":\"路由-vue-router的基本用法\",\"t\":[\"导入vue和vue-router\",\"设置HTML中的内容\",\"实例化路由对象,配置路由规则\",\"创建路由对应的组件\",\"把router实例挂载到vue实例上\",\"<!-- 2.设置HTML中的内容 router-link 最终会被渲染成a标签,to指定路由的跳转地址 --> <router-link to=\\\"/users\\\">用户管理</router-link> <router-link to=\\\"/home\\\">首页展示</router-link> <!-- 路由匹配到的组件将渲染在这里 --> <router-view></router-view>\",\"// 3.配置路由规则 var router = new VueRouter({ routes: [ { path: '/users', component: Users } { path: '/home', component: Home } ] }); // 4.创建组件 let Home = { template: '<div>这是Home内容</div>' }; let Users = { template: '<div>这是用户管理内容</div>' }; // 5.把router实例挂载到vue实例上 var vm = new Vue({ el: '#app', router });\"]},\"204\":{\"h\":\"路由-vue-router-动态路由\",\"t\":[\"点击 列表页 跳转到 详情页 时,跳转的链接需要携带参数,会导致 path 不同\",\"当path不同却需要对应同一个组件时,需要用到动态路由这一概念\",\"标签上传入不同的值\",\"<router-link to=\\\"/item/8\\\">小米电视</router-link> <router-link to=\\\"/item/9\\\">华为电视</router-link> <router-view> </router-view>\",\"路由规则中 尾部 添加动态参数 id\",\"{ path: '/item/:id', component: Items }\",\"在组件内部可以使用$route.params 获取当前路由对象的动态参数\",\"let Items = { template: '<div>我是商品详情页 {{ $route.params.id }}</div>', mounted： { console.log(this.$route.params.id); } }\"]},\"205\":{\"h\":\"路由-vue-router-to 属性赋值\",\"t\":[\"<!-- 常规跳转 --> <!-- <router-link to=\\\"/aaa\\\">aaa</router-link> --> <!-- 变量 --> <!-- <router-link :to=\\\"bbb\\\">bbb</router-link> --> <!-- 根据对象name跳转 --> (注意:name值是字符串) <!-- <router-link :to=\\\"{name:'ccc'}\\\">ccc</router-link> --> <!-- 根据对象path跳转 -->(注意：必须得加上/ 不然容易错乱) <!-- <router-link :to=\\\"{path:'/ddd'}\\\">ddd</router-link> --> <!-- 带参数的跳转 --> (注意获取参数route 不要写成router) <!--<router-link :to=\\\"{name:'eee',params:{id:1}}\\\">体育</router-link> --> <router-view></router-view>\"]},\"206\":{\"h\":\"路由-vue-router-重定向\",\"t\":[\"path: \\\"/bj\\\", redirect: \\\"/sh\\\", // 强制跳转上海 component: { template: `<div>体育</div>` }\"]},\"207\":{\"h\":\"路由-vue-router-编程式导航\",\"t\":[\"methods: { goPage() { // 跳转到新闻页面 this.$router.push({ path: \\\"/news\\\" }); }}\"]},\"208\":{\"h\":\"路由的激活样式\",\"t\":[\"当前路由在导航中是拥有激活class样式的\",\"审查导航元素,可以发现 激活样式 <a href=\\\"#/bj\\\" class=\\\"router-link-exact-active router-link-active\\\">北京</a>\"]},\"209\":{\"h\":\"路由-vue-router-嵌套路由\",\"t\":[\"如果存在 组件嵌套 ,就需要提供多个视图容器\",\"同时,router-link和router-view 都可以添加类名、设定样式\",\"路径:\",\"在原有的一级导航的template里面 配置 二级导航的router-link和router-view\",\"在相对应的一级导航路由配置选项children里面 配置 二级导航的路由和模板\",\"path: '/music', component: Music, //子路由配置 在children选项 children: [{ path: 'lx', component: Lx },...]\"]},\"210\":{\"h\":\"过度动画\",\"t\":[\"基本用法就是给我们需要动画的标签外面嵌套 transition 标签 ,并且设置name属性\",\"Vue 提供了 transition 的封装组件,列表中更新,移除,新增 情形中,可以给任何元素和组件添加进入/离开过渡\",\"<transition name=\\\"fade\\\"> <div v-show=\\\"isShow\\\" class=\\\"box\\\"></div> </transition>\",\"进入:\",\"fade-enter：进入的 初始状态\",\"fade-enter-to: 进入的 过渡结束状态(2.1.8版及以上)\",\"fade-enter-active：进入的 过渡效果 离开:\",\"fade-leave: 离开的 初始状态\",\"fade-leave-to: 离开的 过渡结束状态(2.1.8版及以上)\",\"fade-leave-active：离开的 过渡效果\"]},\"211\":{\"h\":\"vue-cli 工具-介绍\",\"t\":[\"介绍: vue-cli 是一个 辅助开发工具 => 代码编译 + 样式 + 语法校验 + 输出设置 + 其他 ...\",\"作用: 可以为开发者提供一个 标准的项目开发结构 和配置 开发者不需要再关注其他 vue-cli 一个 命令行 工具,最新版本也支持 图形化 操作,可快速搭建大型网页应用\"]},\"212\":{\"h\":\"vue-cli-安装\",\"t\":[\"# 说明: vue-cli本质上是一个npm包,也需要通过npm去安装下载 # 全局安装脚手架 默认安装的最新版本 4.0+ npm i -g @vue/cli # 安装完成后 可通过 vue命令 来进行检查 脚手架是否安装成功 查看版本 # 查看脚手架版本号 vue -V # 和上面等价 vue --version\",\"问题 : 默认安装的4.0+ 版本,但是企业很多还在用2.0+版本 怎么破? 执行以下命令就可以 2.0 和 4.0 兼得\",\"2.0和4.0创建项目的命令是不一样的\",\"npm install -g @vue/cli-init // 安装桥接工具 将2.0的功能补齐到目前的脚手架\",\"vue生成的模板的有难有易\",\"简单业务 => 简易模板\",\"复杂业务 => 内容丰富模板\"]},\"213\":{\"h\":\"vue-cli-创建项目\",\"t\":[\"文件目路径不能有中文 创建: 采用 cli 2.0的特性 (生成简易模板)\",\"# 1.heroes 创建的项目名称 $ vue init webpack-simple heroes // webpack-simple 为模板名称 固定写法 # 2.切换到当前目录 $ cd heroes # 3.安装依赖 $ npm install # 4.启动运行项目 $ npm run dev\",\"创建： 采用 cli 4.0 特性 (两种 默认 /选填)\",\"# 4.0下创建项目 $ vue create heroes // create(创建) 为关键字 # 切换到当前目录 $ cd heroes # 在开发模式下 启动运行项目 $ npm run serve\",\"注意 4.0 +创建项目时 有两种模式, 一种 默认模式 , 一种选择模式,\",\"默认模式:一种标准的模板\",\"选择模式: 可以根据自己的需求选择需要的工具和模式\",\"配置:\",\"在vue.config.js中直接配置,例如\",\"module.exports = { lintOnSave: true, // 在保存代码的时候开启eslint代码检查机制 devServer: { // 实时保存、编译的配置段 open:true, // 自动开启浏览器 port: 12306 // 服务运行端口 } }\"]},\"214\":{\"h\":\"vue-cli-项目目录解释\",\"t\":[\"|-- node_modules // 项目需要的依赖包 |-- public // 静态资源存储目录 | |-- index.html // 项目主容器文件 | |-- favicon.ico // 项目默认索引图片 |-- src | |-- assets // 放置一些静态资源文件,例如图片、图标、字体 | |-- components // 公共组件目录 | |-- views // 业务组件目录 | |-- App.vue // 顶层根基路由组件 | |-- main.js // 主入口文件 | |-- router.js // 路由配置文件 |-- .editorconfig // 代码规范配置文件 |-- .eslintrc.js // eslint代码规范检查配置文件 |-- .gitignore // git上传需要忽略的文件格式 |-- babel.config.js // babel配置文件 |-- package-lock.json // 依赖包版本锁定文件 |-- package.json // 项目基本信息配置文件 |-- postcss.config.js // css预处理器配置文件 |-- vue.config.js // webpack 配置文件(与webpack.config.js作用一致)\"]},\"215\":{\"h\":\"vue-cli-简化模板代码\",\"t\":[\"介绍: 在cli开发模式下, 一个*.vue文件就是一个组件\",\"template 组件的页面结构 代表它的 html 结构\",\"必须在里面放置一个 html 标签来包裹所有的代码\",\"我们在其他地方写好了一个组件,然后就可以在当前template中引入\",\"script 组件的逻辑结构及数据对象\",\"style 组件的样式\",\"就是针对我们的 template 里内容出现的 html 元素写一些样式\",\"注意 : vue-cli的作用就是让我们把精力放在业务编码上,一切准备的工作交给vue-cli去做\"]},\"216\":{\"h\":\"案例-效果演示\"},\"217\":{\"h\":\"案例-导入素材\",\"t\":[\"将项目所需样式导入到项目中\",\"安装 bootstrap固定版本 npm i bootstrap@3.3.7\",\"安装完成之后 ,在入口处引入js文件\",\"import \\\"./../node_modules/bootstrap/dist/css/bootstrap.css\\\"; // 引入 import \\\"./assets/index.css\\\"; // 引入index.css\"]},\"218\":{\"h\":\"案例-提取公共组件-头部-侧边栏-列表\",\"t\":[\"新建vue文件\",\"拷贝html静态内容到 template中\",\"在app.vue中引入组件\",\"注册在app.vue的组件中\",\"在app.vue的模板中使用注册组件\"]},\"219\":{\"h\":\"案例-路由功能\",\"t\":[\"步骤:\",\"安装路由\",\"在main.js中引入 路由模块\",\"在vue-cli中使用router\",\"配置router-link \",\"router-link上的tag属性 可以指定渲染成什么html元素\",\"实例化router 完善路由表 \",\"路由表需要的组件从外部引入\",\"在App.vue中加入路由承载视图(router-view)\",\"1. npm i vue-router // 安装路由模块 2. import VueRouter from 'vue-router' // 引用router 3. Vue.use(VueRouter) // 使用router 4. <router-link tag=\\\"li\\\" to=\\\"/heroes\\\"> <a href=\\\"#\\\">英雄列表</a> </router-link> .... 5. import AppList from \\\"./app-list.vue\\\"; import Foo from \\\"./foo.vue\\\"; import Bar from \\\"./bar.vue\\\"; const router = new VueRouter({ // 路由表 routes: [ { path: \\\"/heroes\\\", component: AppList }, { path: \\\"/foo\\\", component: Foo }, { path: \\\"/bar\\\", component: Bar } ] }); // router加入实例 new Vue({ el: '#app', render: h => h(App), router }) 6. <div> <AppHeader></AppHeader> <div class=\\\"row\\\"> <AppSilder></AppSilder> <div class=\\\"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main\\\"> <!--加入承载视图--> <router-view></router-view> </div> </div> </div>\"]},\"220\":{\"h\":\"案例-提取路由模块\",\"t\":[\"把路由业务抽取到router.js 注意要引入vue\",\"在最后一行把router对象暴露出去 export default router\",\"在main.js中引入router.js\"]},\"221\":{\"h\":\"案例-列表渲染\",\"t\":[\"安装axios 插件\",\"人物列表组件中引入 axios ,\",\"定义data选项定义list列表数据\",\"请求列表的方法封装 获取数据赋值list列表\",\"在mounted事件(相当于window.onload)中调用获取数据方法\",\"根据数据渲染列表\",\"// 1.安装axios 插件 npm i axios // 2.引入axios // 3.定义数据 data() { return { list: [] }; } // 4.请求人物列表的方法封装 loadData() { //restful规则 axios.get(\\\"http://localhost:3000/heroes\\\").then(result => { this.list = result.data; }) } // 5.实例完成事件 mounted() { this.loadData(); }, // 6.根据数据渲染列表 <tr v-for=\\\"item in list\\\" :key=\\\"item.id\\\"> <td>{{item.id}}</td> <td>{{item.name}}</td> <td>{{item.gender}}</td> <td> <a href=\\\"javascript:;\\\">edit</a> &nbsp;&nbsp; <a href=\\\"javascript:;\\\">delete</a> </td> </tr\"]},\"222\":{\"h\":\"案例-删除功能\",\"t\":[\"注册删除事件 因为删除需要id 所以定义删除方法的时候 把id传进去\",\"定义删除方法 实现删除逻辑\",\"判断删除成功 刷新数据\",\"// 1.注册删除事件 <a href=\\\"javascript:；\\\" @click=\\\"delItem(item.id)\\\">删除</a> // 2.定义删除方法 // id为要删除id的方法 delItem(id) { if (confirm(\\\"确认删除此条数据\\\")) { axios.delete(\\\"http://localhost:3000/heroes/\\\" + id).then(result => { // 3. 判断删除状态 是否成功 if (result.status === 200) { this.getData(); // 刷新数据 } }); } }\"]},\"223\":{\"h\":\"案例-渲染新增组件\",\"t\":[\"新建add.vue组件 写入静态内容(拷贝静态资源)\",\"在路由表中配置添加功能的路由\",\"给列表组件的添加按钮 添加hash 以对应路由表\",\"根据业务场景调整页面模板\",\"// 2.在路由表中配置添加功能的路由 { path: \\\"/add\\\", component: Add } // 引入组件 配置路由 // 3.给列表组件的添加按钮 添加hash 以对应路由表 <a class=\\\"btn btn-success\\\" href=\\\"#/add\\\">添加</a> // 4.根据业务场景调整页面模板 <div> <h2 class=\\\"sub-header\\\">添加人物</h2> <form> <div class=\\\"form-group\\\"> <label for=\\\"exampleInputEmail1\\\">用户名</label> <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"exampleInputEmail1\\\" placeholder=\\\"请输入姓名\\\" /> </div> <div class=\\\"form-group\\\"> <label for=\\\"exampleInputPassword1\\\">性别</label> <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"exampleInputPassword1\\\" placeholder=\\\"请输入 性别\\\" /> </div> <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">添加人物</button> </form> </div>\"]},\"224\":{\"h\":\"案例-新增功能完善\",\"t\":[\"步骤: 添加功能的实现\",\"定义表单数据 和 表单进行绑定\",\"给确定按钮 添加点击事件和方法\",\"实现添加方法的逻辑\",\"判断填报信息是否为空\",\"发送axios请求以post方式 调用 添加的接口地址 成功返回状态码是201\",\"成功以后 利用编程式导航 跳转到 ’/heroes‘\",\"//1.添加数据 data() { return { // 定义一个数据对象 存储 姓名和性别 formData: { name: \\\"\\\", // 姓名 gender: \\\"\\\" // 性别 } }; } <!-- 2.给添加确定注册一个事件 --> <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" @click=\\\"addHero\\\">确定</button> // 3.确定按钮方法 addHero() { // 4.判断填报信息是否为空 if (this.formData.name && this.formData.gender) { // 5.发送请求 添加人物信息 axios.post(\\\"http://localhost:3000/heroes\\\", this.formData) .then(result => { // 注意这里添加成功的状态码 是 201 if (result.status === 201) { // 6. 添加成功之后 要跳转回列表页 // 编程式导航 this.$router.push({ path: \\\"/heroes\\\" }); } else { alert(\\\"添加失败\\\"); } }); } else { alert(\\\"提交信息不能为空\\\"); } }\"]},\"225\":{\"h\":\"案例-显示编辑数据\",\"t\":[\"添加编辑路由 注意 由于需要拿到编辑数据的标识 所以需要动态路由\",\"给 编辑按钮 添加 跳转路由的属性\",\"定义获取英雄数据方法 \",\"通过$router.params来获取动态id\",\"根据id发送axios请求 获取英雄数据\",\"在mounted事件中 调用加载英雄方法\",\"// 1.添加动态路由 { path: \\\"/edit/:id\\\", component: Edit } // 编辑组件 动态路由 // 2.编辑按钮添加跳转的属性 <router-link :to=\\\"{path:'/edit/'+item.id }\\\">编辑</router-link> // 3.通过id获取英雄数据 loadHero() { const { id } = this.$route.params; // 通过参数获取id if (id) { //判断id axios.get(\\\"http://localhost:3000/heroes/\\\" + id).then(result => { this.formData = result.data; // 获取数据并赋值给表单对象 }); } } // 4.调用获取英雄数据的方法 mounted() { this.loadHero(); }\"]},\"226\":{\"h\":\"案例-编辑-提交功能\",\"t\":[\"定义提交方法\",\"实现提交方法的逻辑 \",\"判断提交内容非空\",\"获取动态参数id\",\"发送aixos请求put方式 拼接id 把修改的数据带上\",\"成功以后 利用编程式导航回到 \\\"/heroes\\\"\",\"// 编辑英雄 editHero() { if (this.formData.name && this.formData.gender) { const { id } = this.$route.params; axios .put(\\\"http://localhost:3000/heroes/\\\" + id, this.formData) .then(result => { if (result.status === 200) { this.$router.push({ path: \\\"/heroes\\\" }); } else { alert(\\\"编辑失败\\\"); } }); } else { alert(\\\"提交内容不能为空\\\"); } }\"]},\"227\":{\"h\":\"案例优化-axios 统一导入\",\"t\":[\"在入口main.js文件中引入axios,并赋值给全局Vue对象的原型 Vue.prototype.$http = Axios; \",\"//所有的实例都直接共享拥有了 这个方法\",\"调用接口时 采用 实例.属性的方式即可调用\",\"// 把以前用到axios的地方 换成 this.$http\"]},\"228\":{\"h\":\"案例优化-设置baseUrl\",\"t\":[\"给axios中的baseUrl设置常态值\",\"Axios.defaults.baseURL = \\\"http://localhost:3000\\\"; // 设置共享的方法\",\"改造所有的的请求\",\"// 没改造之前 'http://localhost:3000/heroes/' // 设置完常态值 '/heroes/'\"]},\"229\":{\"h\":\"案例优化-统一设置激活样式\",\"t\":[\"router.js 的路由表上面加上 linkActiveClass: \\\"active\\\",\",\"active为bootstrap中的 一个class样式\"]},\"230\":{\"c\":[\"web\"]},\"231\":{\"c\":[\"web\"]},\"232\":{\"h\":\"centos7 安装 Rabbitmq-3.6.5\",\"t\":[\"蓝奏云下载地址:\",\"蓝奏云地址: https://wwm.lanzoub.com/b02770z0h 密码:0000\",\"安装依赖环境\",\"yum install build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel m4 ncurses-devel tk tc xz\"]},\"233\":{\"h\":\"安装\",\"t\":[\"# 进入上传的地址 运行下面命令 安装 erlang rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm # 如果 gblic 版本低于2.15 需要使用下面命令进行升级 sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make -y # 安装 socat sudo rpm -Uvh socat-1.7.3.2-1.1.el7.x86_64.rpm --force --nodeps # 安装 rabbitmq rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm\",\"开启配置\",\"# 开启管理界⾯ rabbitmq-plugins enable rabbitmq_management # 修改默认配置信息 vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app # ⽐如修改密码、配置等等,例如：loopback_users 中的 <<\\\"guest\\\">>,只保留guest\"]},\"234\":{\"h\":\"启动\",\"t\":[\"service rabbitmq-server start # 启动服务 service rabbitmq-server stop # 停⽌服务 service rabbitmq-server restart # 重启服务\",\"设置配置文件\",\"cd /usr/share/doc/rabbitmq-server-3.6.5/ cp rabbitmq.config.example /etc/rabbitmq/rabbitmq.config\",\"访问 web 页面是: http://ip:15672 我们配置的默认使用的用户是 guest ,登录时用户和密码都是 guest.\"]},\"235\":{\"c\":[\"linux\"]},\"236\":{\"h\":\"Centos7安装emqx\",\"t\":[\"我们可以去 emqx 中下载对应的版本,当然你也可以去看 emqx 官方文档.\",\"下载对应的安装包可以去 emqx官网下载\",\"wget https://www.emqx.com/zh/downloads/broker/5.0.9/emqx-5.0.9-el7-amd64.rpm sudo yum install emqx-5.0.9-el7-amd64.rpm emqx start # 或者执行: sudo systemctl start emqx\"]},\"237\":{\"h\":\"错误解决\"},\"238\":{\"h\":\"中给的解决方法\",\"t\":[\"wget https://www.openssl.org/source/openssl-1.1.1c.tar.gz tar zxf openssl-1.1.1c.tar.gz cd openssl-1.1.1c ./config make test # 执行测试；如果输出 PASS 则继续 # 如果这一步报 Parse errors: No plan found in TAP output 那么执行 yum install perl-Test-Simple 后消失 make install # 为了确保库的引用可以之心下面两行,当然可以选择不执行 ln -s /usr/local/lib64/libssl.so.1.1 /usr/lib64/libssl.so.1.1 ln -s /usr/local/lib64/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1\"]},\"239\":{\"h\":\"如果Centos8使用tar包进行安装可能会遇到下面的错误 解决此错误有两个方法我个人是用第二个方法解决的\",\"t\":[\"运行 yum install libtinfo.so.5\",\"在 tar 解压的包中找到 dynlibs 将这个目录下的 libtinfo.so.5 复制到 /usr/lib64 下即可解决\"]},\"240\":{\"c\":[\"linux\"]},\"241\":{\"h\":\"Centos7安装Mysql8\"},\"242\":{\"h\":\"下载所需要的安装包\",\"t\":[\"本次下载包所用的是清华大学镜像站中提供的mysql包. 下载包时需要下载四个类型的Rpm文件\",\"mysql-community-libs-8.0.33-1.el7.x86_64.rpm\",\"mysql-community-common-8.0.33-1.el7.x86_64.rpm\",\"mysql-community-server-8.0.33-1.el7.x86_64.rpm\",\"mysql-community-client-8.0.33-1.el7.x86_64.rpm\"]},\"243\":{\"h\":\"安装流程\",\"t\":[\"查看与卸载原有的包\",\"# 查看是否存在安装包 rpm -qa|grep mariadb # 存在的话卸载当前已安装的包 rpm -e --nodeps mariadb-libs\",\"安装RPM包\",\"sudo rpm -ivh mysql*.rpm --nodeps --force\",\"启动Mysql和查看是否启动成功\",\"systemctl start mysqld systemctl status mysqld\",\"获取临时密码\",\"grep 'temporary password' /var/log/mysqld.log # 执行后 # [root@VM-24-10-centos temp]# grep 'temporary password' /var/log/mysqld.log # 2023-06-30T01:28:56.524220Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: tXdMBrtik2<d\",\"修改Root密码\",\"-- 目前Mysql8 不支持简单密码了,需要使用简单密码时需要另做修改 ALTER USER 'root'@'localhost' IDENTIFIED BY 'mysql密码';\",\"授权远程链接\",\"SHOW databases; USE mysql; UPDATE user SET host = \\\"%\\\" WHERE user='root'; SELECT host, user, authentication_string, plugin FROM user; FLUSH privileges;\",\"Mysql8 设置简单密码\",\"SHOW VARIABLES LIKE 'validate_password%'; set global validate_password.policy=0; set global validate_password.length=1; ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';\"]},\"244\":{\"h\":\"定时运行备份脚本\",\"t\":[\"写shell脚本时不要再win下写好再放进去.不然会出现奇怪的问题\",\"#!/bin.sh # mysql备份使用的shell脚本 #includ <studio.h> #includ <time.h> #includ <stdlib.h> #includ <sys/time.h> log=\\\"/usr/local/mysql-back/mysql-echo.log\\\" echo $(date +\\\"%Y-%m-%d %H:%M:%S\\\")\\\"脚本执行开始\\\">> $log; data_time=$(date '+%Y%m%d') path=\\\"/usr/local/mysql-back/${data_time}\\\" if [ ! -d $path ]; then echo \\\"文件不存在! 创建文件夹\\\" >> $log sudo mkdir $path fi mysqldump -uroot -p`Mysql密码` 导出的数据库名称 > /usr/local/mysql-back/${data_time}/导出的数据库名称.sql echo \\\"执行结束\\\" >> $log echo \\\"开始移除7天之前的备份数据\\\" >> $log # 移除几天前就将 7 改为几天 daysAgo=$(date -d \\\"7 day ago \\\"$date '+%Y%m%d'); function del_directory(){ if [ $(($1)) -lt $(($daysAgo)) ]; then echo \\\"移除 ${1} 目录\\\" >> $log `rm -rf $1` fi } function read_dir() { #注意此处这是两个反引号，表示运行系统命令 for file in `ls $1` do if [ -d $file ];then del_directory $file fi done } #读取第一个参数 read_dir $1 echo \\\"结束删除之前备份数据\\\" >> $log echo $(date +\\\"%Y-%m-%d %H:%M:%S\\\")\\\"脚本执行结束\\\">> $log;\",\"# 输入下面命令可以进到编辑页面 crontab -e # 将下面这个定时任务写进去 00 1 * * * '/usr/local/mysql-back/mysql-back.sh' > /usr/local/mysql-back/back-err.log & # 下面命令可以查看当前有的定时任务 crontab -l\",\"# 还原命令 mysql -uroot -p`Mysql密码` < db_202306301501.sql # 指定库还原 mysql -uroot -p`Mysql密码` databaseName < db_202306301501.sql\"]},\"245\":{\"c\":[\"linux\"]},\"246\":{\"h\":\"nginx 安装\",\"t\":[\"nginx 下载地址: https://nginx.org/en/download.html 这里附带上我下载好的所有安装包\",\"蓝奏云: https://wwm.lanzoub.com/b02770yri 密码:0000\",\"需要安装 gcc环境\",\"# 安装 make yum -y install gcc automake autoconf libtool make # 安装 gcc yum install gcc gcc-c++\"]},\"247\":{\"h\":\"PCRE安装\",\"t\":[\"PCRE 下载地址 https://sourceforge.net/projects/pcre/files/pcre/\",\"安装PCRE库\",\"# 解压 pcre tar -zxvf pcre-8.45.tar.gz -C /root/app # 运行下面命令安装 ./configure make make install\"]},\"248\":{\"h\":\"zlib库\",\"t\":[\"下载地址: http://www.zlib.net/fossils/\",\"安装zlib库\",\"# 将下载好的 zlib上传到 Linux tar -zxvf zlib-1.2.12.tar.gz -C /root/app # 运行以下命令安装 zlib ./configure make make install\",\"下载地址: https://www.openssl.org/source/\",\"# 直接解压就可以 tar -zxvf openssl-1.0.1c.tar.gz -c /root/app\",\"下载好 nginx 的包上传到 Linux 上,解压至指定位置\",\"# 解压 nginx 包 tar -zxvf nginx-1.21.6.tar.gz -C /root/app/nginx # 安装 ./configure --sbin-path=/root/app/nginx-1.21.6 \\\\ --conf-path=/root/app/nginx-1.21.6/nginx.conf \\\\ --pid-path=/root/app/nginx-1.21.6/nginx.pid \\\\ --with-http_ssl_module \\\\ --with-pcre=/root/app/pcre-8.45 \\\\ --with-zlib=/root/app/zlib-1.2.12 \\\\ --with-openssl=/root/app/openssl-1.1.1n make make install # --with-pcre=/usr/src/pcre-8.34 指的是pcre-8.34 的源码路径。 # --with-zlib=/usr/src/zlib-1.2.7 指的是zlib-1.2.7 的源码路径。\",\"查看端口是否被占用\",\"netstat -ano|grep 80\",\"运行 nginx\",\"# 如果查不到结果后执行,有结果则忽略此步骤(ubuntu下必须用sudo启动,不然只能在前台运行) sudo /root/app/nginx-1.21.6\",\"停止 nginx\",\"# 找到 nginx 服务 ps -ef|grep nginx # 直接杀死进程 kill -QUIT 进程id netstat -tnulp | grep nginx # 参看端口是否关闭 systemctl status nginx # 查看服务是否关闭\"]},\"249\":{\"c\":[\"linux\"]},\"250\":{\"h\":\"Win安装Mysql8\"},\"251\":{\"h\":\"下载安装包\",\"t\":[\"官网下载地址为: https://dev.mysql.com/downloads/mysql/\",\"mysql下载\"]},\"252\":{\"h\":\"配置Mysql\",\"t\":[\"MySQL根目录下创建my.ini文件\",\"[mysql] ; 配置MySQL默认编码 default-character-set=utf8mb4 [mysqld] port=3306 ; 设置mysql的安装目录 basedir=D:/devTools/mysql/mysql-8.3.0/ ; mysql 库数据存储地址 datadir=D:/devTools/mysql/data ; 默认数据库引擎 default-storage-engine=InnoDB ; 错误日志收集地址 log-error=\\\"D:\\\\devTools\\\\mysql\\\\logs.err\\\" innodb_fast_shutdown = 0 init_connect='SET collation_connection = utf8mb4_unicode_ci' init_connect='SET collation_database = utf8mb4_unicode_ci' ; 超时设置 wait_timeout=2147483 interactive_timeout=2147483\"]},\"253\":{\"h\":\"启动Mysql服务\"},\"254\":{\"h\":\"初始化Mysql实例\",\"t\":[\"mysqld --initialize --user=mysql --console\"]},\"255\":{\"h\":\"安装Mysql服务\",\"t\":[\"# 如果之前已经存在过mysql服务需要先删除掉 sc declete mysql # 安装mysql服务 mysqld install # 启动mysql服务 net start mysql\",\"安装成功示例: \"]},\"256\":{\"h\":\"修改Root密码\",\"t\":[\"-- 目前Mysql8 不支持简单密码了,需要使用简单密码时需要另做修改 ALTER USER 'root'@'localhost' IDENTIFIED BY 'mysql密码'; -- 下面是设置简单密码 SHOW VARIABLES LIKE 'validate_password%'; set global validate_password.policy=0; set global validate_password.length=1; ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';\"]},\"257\":{\"c\":[\"win\"]},\"258\":{\"h\":\"nvm\"},\"259\":{\"h\":\"安装NVM\",\"t\":[\"如果已经安装了node请先卸载.\",\"从github中找到nvm所在仓库进行下载.\",\"nvm下载地址:https://github.com/coreybutler/nvm-windows/releases\",\"nvm下载时请选择下图所框选的包\",\"Snipaste 2024 07 22 19 02 59\"]},\"260\":{\"h\":\"配置下载源\",\"t\":[\"在nvm安装根目录[也就是安装时配置的目录]下找到配置文件(settings.txt)\",\"配置nvm下载源\",\"node_mirror: https://npmmirror.com/mirrors/node/ npm_mirror: https://npmmirror.com/mirrors/npm/\",\"配置完成后如下图所示:\",\"Snipaste 2024 07 22 19 00 07\"]},\"261\":{\"h\":\"nvm使用\",\"t\":[\"查看nvm版本号: nvm version\",\"查看网络可以安装的版本: nvm list available\",\"Snipaste 2024 07 22 18 51 40\",\"指定一个版本进行安装: nvm install 18.20.2\",\"查看已安装的node版本: nvm list\",\"选择一个版本进行使用: nvm use 18.20.2\"]},\"262\":{\"h\":\"nvm常用命令\",\"t\":[\"命令\",\"说明\",\"nvm list\",\"查看已经安装的版本\",\"nvm list installed\",\"查看已经安装的版本\",\"nvm list available\",\"查看网络可以安装的版本\",\"nvm arch\",\"查看当前系统的位数和当前nodejs的位数\",\"nvm install [arch]\",\"安装制定版本的node 并且可以指定平台 version 版本号 arch 平台\",\"nvm on\",\"打开nodejs版本控制\",\"nvm off\",\"关闭nodejs版本控制\",\"nvm proxy [url]\",\"查看和设置代理\",\"nvm node_mirror [url]\",\"设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/\",\"nvm npm_mirror [url]\",\"设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是：https://github.com/npm/npm/archive/.\",\"nvm uninstall\",\"卸载指定的版本\",\"nvm use [version] [arch]\",\"切换指定的node版本和位数\",\"nvm root [path]\",\"设置和查看root路径\",\"nvm version\",\"查看当前的版本\"]},\"263\":{\"h\":\"配置全局NPM\",\"t\":[\"npm config set prefix \\\"D:\\\\devTools\\\\nvm\\\\npm-repository\\\" 配置npm下载包时的全局包路径\",\"npm config set registry https://registry.npmmirror.com 安装全局npm，不同的node都使用这个npm。想更新全局的npm的话首先删除全局路径(就是上一行命令的地址，可以使用npm config ls查看)下的npm，再执行一次这个命令即可。\",\"在用户变量中添加 NPM_HOME = E:\\\\nvm\\\\npm，path中添加%NPM_HOME%。这里需要注意的是，%NPM_HOME%要添加在%NVM_SYMLINK%之前，避免npm访问到的是nodejs中自带的npm包管理工具。\",\"ps: npmmirror 镜像站 https://www.npmmirror.com/\"]},\"264\":{\"c\":[\"win\"]},\"265\":{\"h\":\"Servlet\",\"t\":[\"Servlet(Server Applet),全称Java Servlet。是⽤Java编写的服务器端程序,其主要功能在于交互式地浏览和修改数据,生成动态Web内容。\",\"狭义的Servlet是指Java语言实现的一个接口,广义的Servlet是指任何实现了这个Servlet接口的类,一般情况下,人们将Servlet理解为后者。\",\"Servlet运行于支持Java的应用服务器中。从实现上讲,Servlet可以响应任何类型的请求,但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。\",\"Servlet工作作模式:\",\"客户端发送请求至服务器\",\"服务器启动并调用Servlet,Servlet根据客户端请求生成响应内容并将其传给服务器\",\"服务器将响应返回客户端\"]},\"266\":{\"h\":\"HttpServlet\",\"t\":[\"常用方法\",\"void doGet(HttpServletRequest req, HttpServletResponse resp): 接收 get 请求并处理\",\"void doPost(HttpServletRequest req, HttpServletResponse resp): 接收 post 请求并处理\",\"void service(HttpServletRequest req, HttpServletResponse resp): 接收所有请求并处理\",\"Servlet 3.0后支持注解,下面是常用注解\",\"@WebServlet( name = \\\"myUserServlet\\\", urlPatterns = \\\"/user/test\\\", loadOnStartup = 1, initParams = { @WebInitParam(name=\\\"name\\\", value=\\\"⼩明\\\"), @WebInitParam(name=\\\"pwd\\\", value=\\\"123456\\\") } ) /* 解释: name: 表示当前 servlet 在运行时的名称 urlPatterns: 请求的链接地址 String[]类型,可以配置多个映射,如: urlPatterns={\\\"/user/test\\\",\\\"/user/example\\\"} loadOnStartup: 标记当前 Servlet 是否在服务启动时就加载此 Servlet. 默认不配置或数值为负数时表示客户端第一次请求Servlet时再加载； 0或正数表示启动应用就加载,正数情况下,数值越小,加载该Servlet的优先级越高； initParams: 配置初始化参数 */\",\"在 Servlet 中处理接收的请求时都需要 HttpServletRequest/ HttpServletResponse 两个对象.\",\"下面时这俩个对象的常用方法\",\"HttpServletRequest常用方法\",\"public class TestServlet extends HttpServlet { // 无论前台使用的是什么格式传输的 后台全部使用的是String 接收 @Override // 处理get请求 protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String uage = req.getParameter(\\\"uage\\\"); System.out.println(\\\"uage->\\\"+uage); } @Override // 处理post请求 protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 设置字符集编码 --> post请求需要 get在jdk1.8版本之前的也需要设置 req.setCharacterEncoding(\\\"utf-8\\\"); // 页面跳转方式 [ forward(req,resp); ] 这是固定格式 注意这条代码所在位置会影响下面获取后的页面反馈 req.getRequestDispatcher(\\\"/se.html\\\").forward(req,resp); // 通过 标签的name属性获取传过来的值 String username = req.getParameter(\\\"username\\\"); // 获取一组数据 这里获取的是复选框中的数据 String[] aihaos = req.getParameterValues(\\\"aihao\\\"); for (String s : aihaos) { System.out.println(s); } System.out.println(\\\"username-->\\\"+username); // 前台向后台传输数据 获取方法是 : req.getParameter // 后台向前台传输数据 传输方法是 : req.setAttribute(\\\"key\\\",value); // 后前向前台传输数据取值 使用的是: req.getAttribute(\\\"key\\\"); } }\",\"HttpServletResponse 常用方法\",\"resp.addCookie(); // 设置cookie存值\",\"resp.setContentType(\\\"text/html\\\"); // 设置响应内容\",\"resp.sendRedirect(\\\"\\\"); // 等同于 req.getRequestDispatcher(\\\"/se.html\\\").forward(req,resp);\",\"PrintWriter writer = resp.getWriter(); // 得到一个可以给前端输出信息的输出流对象\",\"使用 HttpServlet 写一个示例\",\"@WebServlet( urlPatterns = \\\"/user\\\" ) public class UsersController extends HttpServlet { private final UserService usersService = new UsersServiceImpl(); @Override public void service(HttpServletRequest req, HttpServletResponse resp) throws IOException { String method = req.getParameter(\\\"method\\\"); if (Manager.SELECT.equals(method)) { isLogin(req,resp); } } protected void isLogin(HttpServletRequest req,HttpServletResponse resp) throws IOException { Users users = new Users(); users.setLoginName(req.getParameter(\\\"loginName\\\")); users.setPassWord(req.getParameter(\\\"passWord\\\")); PrintWriter writer = resp.getWriter(); writer.println(usersService.isLogin(users)); } }\"]},\"267\":{\"c\":[\"后端开发\",\"java\"]},\"268\":{\"c\":[\"java\"]},\"269\":{\"h\":\"注解\",\"t\":[\"可以把注释注释到jvm的机制.\",\"在JDK1.5引入的机制,注解可用范围: java语言中类 方法 变量 参数 包 等的标注\",\"主要用于:\",\"编译格式检查\",\"反射中解析\",\"生成帮助文档\",\"跟踪代码依赖\",\"等\"]},\"270\":{\"h\":\"内置注解\",\"t\":[\"@Override: 重写 [ 编译格式检查,用在 ] -- 定义在java.lang.Override\",\"@Deprecated: 废弃 -- 定义在 java.lang.Deprecated\",\"@SafeVarargs: java7开始支持,忽略任何使用参数位泛型变量的方法或构造函数调用时产生的警告\",\"@Functionallnterface 函数式接口: java8开始支持, 标识一个匿名函数或函数式接口\",\"@Repeatable: 标识某注解可以在同一个声明上使用多次,java8开始支持 标识某注解可以在同一个声明上使用多次\"]},\"271\":{\"h\":\"元注解\",\"t\":[\"@Retention - 标识这个注解怎么保存,是只在代码中,还是编入class文件中,或者是在运行时可以通过反射访问。\",\"@Documented - 标记这些注解是否包含在用户文档中 javadoc。\",\"@Target - 标记这个注解应该是哪种 Java 成员。\",\"@Inherited - 标记这个注解是自动继承的\",\"子类会继承父类使用的注解中被@Inherited修饰的注解\",\"接口继承关系中,子接口不会继承父接口中的任何注解,不管父接口中使用的注解有没有被@Inherited修饰\",\"类实现接口时不会继承任何接口中定义的注解\"]},\"272\":{\"h\":\"自定义注解\",\"t\":[\"import java.lang.annotation.*; /** * @author blackFire * 自定义注解示例 */ /* @Documented [ 注解是否包含在文档中 ] @Target参数 [ 用途类型 ] ElementType.TYPE 表示自定义注解可以使用在类上 ElementType.METHOD 表示自定义注解可以使用在方法上 @Retention参数 [ 保存策略 ] RetentionPolicy.RUNTIME 注解会被编译器记录在类文件中,并且在运行时由 VM 保留,因此可以反射性地读取它们。 @Inherited [ 可以继承 ] */ @Inherited @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE, ElementType.METHOD}) public @interface MyInterface { // 只有value可以不用指定属性名传参 String value(); // 给默认值后,就不必非要传参 int[] num() default 10; }\"]},\"273\":{\"c\":[\"后端开发\",\"java\"]},\"274\":{\"c\":[\"java\"]},\"275\":{\"h\":\"网络编程\"},\"276\":{\"h\":\"网络编程 程序的分类\",\"t\":[\"B/S 程序 : 浏览器与服务器程序\",\"C/S 程序 : 客户端与服务器程序\"]},\"277\":{\"h\":\"TCP协议 - OSI网络模型\",\"t\":[\"指的是 从一台计算机的软件中,将数据发送刀另一台计算机的软件中的过程\",\"七层网络模型: 应用层/ 表现层/ 会话层/ 传输层/ 网络层/ 数据链路层/ 物理层\"]},\"278\":{\"h\":\"三次握手 和 四次挥手\",\"t\":[\"tcp协议客户端与服务器链接时,存在三次握手操作,确保消息能准确无误的发送.\",\"断开连接时,存在四次挥手操作\"]},\"279\":{\"h\":\"套接字[ ServerSocket ]\"},\"280\":{\"h\":\"构造器\",\"t\":[\"变量\",\"构造器\",\"描述\",\"Socket()\",\"创建一个未连接的套接字,系统默认类型为SocketImpl。\",\"Socket(String host, int port)\",\"创建流套接字并将其连接到指定主机上的指定端口号。\",\"Socket(String host, int port, boolean stream)\",\"已过时。 使用DatagramSocket代替UDP传输。\",\"Socket(String host, int port, InetAddress localAddr, int localPort)\",\"创建套接字并将其连接到指定远程端口上的指定远程主机。\",\"Socket(InetAddress address, int port)\",\"创建流套接字并将其连接到指定IP地址处的指定端口号。\",\"Socket(InetAddress host, int port, boolean stream)\",\"已过时。 使用DatagramSocket代替UDP传输。\",\"Socket(InetAddress address, int port, InetAddress localAddr, int localPort)\",\"创建套接字并将其连接到指定远程端口上的指定远程地址。\",\"Socket(Proxy proxy)\",\"创建一个未连接的套接字,指定应该使用的代理类型(如果有),而不管其他任何设置。\",\"protected \",\"Socket(SocketImpl impl)\",\"使用用户指定的SocketImpl创建未连接的Socket。\"]},\"281\":{\"h\":\"方法\",\"t\":[\"变量和类型\",\"方法\",\"描述\",\"void\",\"bind(SocketAddress bindpoint)\",\"将套接字绑定到本地地址。\",\"void\",\"close()\",\"关闭此套接字。\",\"void\",\"connect(SocketAddress endpoint)\",\"将此套接字连接到服务器。\",\"void\",\"connect(SocketAddress endpoint, int timeout)\",\"使用指定的超时值将此套接字连接到服务器。\",\"SocketChannel\",\"getChannel()\",\"返回与此套接字关联的唯一SocketChannel对象(如果有)。\",\"InetAddress\",\"getInetAddress()\",\"返回套接字连接的地址。\",\"InputStream\",\"getInputStream()\",\"返回此套接字的输入流。\",\"boolean\",\"getKeepAlive()\",\"测试是否启用了 SO_KEEPALIVE 。\",\"InetAddress\",\"getLocalAddress()\",\"获取套接字绑定的本地地址。\",\"int\",\"getLocalPort()\",\"返回此套接字绑定的本地端口号。\",\"SocketAddress\",\"getLocalSocketAddress()\",\"返回此套接字绑定的端点的地址。\",\"boolean\",\"getOOBInline()\",\"测试是否启用了 SO_OOBINLINE 。\",\" T\",\"getOption(SocketOption name)\",\"返回套接字选项的值。\",\"OutputStream\",\"getOutputStream()\",\"返回此套接字的输出流。\",\"int\",\"getPort()\",\"返回此套接字连接的远程端口号。\",\"int\",\"getReceiveBufferSize()\",\"获取此 Socket的 SO_RCVBUF选项的值,该值是平台在此 Socket上用于输入的缓冲区大小。\",\"SocketAddress\",\"getRemoteSocketAddress()\",\"返回此套接字连接到的端点的地址,如果未连接则返回 null 。\",\"boolean\",\"getReuseAddress()\",\"测试是否启用了 SO_REUSEADDR 。\",\"int\",\"getSendBufferSize()\",\"获取此 Socket的 SO_SNDBUF选项的值,即此平台在此 Socket上用于输出的缓冲区大小。\",\"int\",\"getSoLinger()\",\"返回 SO_LINGER的设置。\",\"int\",\"getSoTimeout()\",\"返回SO_TIMEOUT的设置。 0返回意味着该选项被禁用(即无穷大的超时)。\",\"boolean\",\"getTcpNoDelay()\",\"测试是否启用了 TCP_NODELAY 。\",\"int\",\"getTrafficClass()\",\"获取从此Socket发送的数据包的IP头中的流量类或服务类型\",\"boolean\",\"isBound()\",\"返回套接字的绑定状态。\",\"boolean\",\"isClosed()\",\"返回套接字的关闭状态。\",\"boolean\",\"isConnected()\",\"返回套接字的连接状态。\",\"boolean\",\"isInputShutdown()\",\"返回套接字连接的读半部分是否已关闭。\",\"boolean\",\"isOutputShutdown()\",\"返回套接字连接的写半部分是否已关闭。\",\"void\",\"sendUrgentData(int data)\",\"在套接字上发送一个字节的紧急数据。\",\"void\",\"setKeepAlive(boolean on)\",\"启用/禁用 SO_KEEPALIVE 。\",\"void\",\"setOOBInline(boolean on)\",\"启用/禁用 SO_OOBINLINE (接收TCP紧急数据)默认情况下,此选项被禁用,并且套接字上收到的TCP紧急数据将被静默丢弃。\",\" Socket\",\"setOption(SocketOption name, T value)\",\"设置套接字选项的值。\",\"void\",\"setPerformancePreferences(int connectionTime, int latency, int bandwidth)\",\"设置此套接字的性能首选项。\",\"void\",\"setReceiveBufferSize(int size)\",\"设置 SO_RCVBUF选项,此规定值 Socket 。\",\"void\",\"setReuseAddress(boolean on)\",\"启用/禁用 SO_REUSEADDR套接字选项。\",\"void\",\"setSendBufferSize(int size)\",\"设置 SO_SNDBUF选项,此规定值 Socket 。\",\"static void\",\"setSocketImplFactory(SocketImplFactory fac)\",\"设置应用程序的客户端套接字实现工厂。\",\"void\",\"setSoLinger(boolean on, int linger)\",\"使用指定的延迟时间(以秒为单位)启用/禁用 SO_LINGER 。\",\"void\",\"setSoTimeout(int timeout)\",\"使用指定的超时启用/禁用 SO_TIMEOUT ,以毫秒为单位。\",\"void\",\"setTcpNoDelay(boolean on)\",\"启用/禁用 TCP_NODELAY (禁用/启用Nagle的算法)。\",\"void\",\"setTrafficClass(int tc)\",\"为从此Socket发送的数据包的IP标头设置流量类或服务类型八位字节。\",\"void\",\"shutdownInput()\",\"将此套接字的输入流放在“流结束”。\",\"void\",\"shutdownOutput()\",\"禁用此套接字的输出流。\",\"Set>\",\"supportedOptions()\",\"返回此套接字支持的一组套接字选项。\",\"String\",\"toString()\",\"将此套接字转换为 String 。\"]},\"282\":{\"h\":\"多线程的客户端与服务器之间的交互\"},\"283\":{\"h\":\"服务器端\",\"t\":[\"import java.io.IOException; import java.io.OutputStream; import java.io.PrintStream; import java.net.ServerSocket; import java.net.Socket; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; /** * @author black fire */ public class SocketService { /** * 线程池 */ private final ExecutorService executor; /** * 端口号 */ private final Integer port; /** * 套接字总服务 */ private ServerSocket server; /** * 推出 */ private Boolean quit = false; /** * 当创建对象时需要出入 端口号 * @param port 端口号 */ public SocketService(Integer port) { this.port = port; // 创建线程池 [10] executor = Executors.newFixedThreadPool(10); } /** * 退出方法 */ public void quit(){ this.quit = true; try { server.close(); } catch (IOException e) { e.printStackTrace(); } } /** * @author black fire * 以多线程形式运行服务中的 socket */ private final static class SocketTask implements Runnable{ // 套接字中的 socket private final Socket socket; public SocketTask(Socket socket) { this.socket = socket; } @Override public void run() { try { System.out.println(\\\"\\\".concat(socket.getInetAddress().toString()).concat(String.valueOf(socket.getPort())).concat(\\\"请求链接\\\") ); // 从套接字中获取输出流 OutputStream outputStream = socket.getOutputStream(); // 将 outputStream 输出流转换为 PrintStream 打印流 PrintStream ps = new PrintStream(outputStream); ps.println(\\\"欢迎链接服务器\\\".concat(Thread.currentThread().getName()).concat(\\\"线程为您服务\\\")); } catch (IOException e) { e.printStackTrace(); } } } /** * 多线程启动方法 */ public void start(){ try { // 创建一个 套接字对象 server = new ServerSocket(port); while (!quit){ // 监听 ServerSocket 并接受它 Socket accept = server.accept(); // 向线程池中添加一个线程 executor.execute(new SocketTask(accept)); } quit(); } catch (IOException e) { e.printStackTrace(); } } /** * 启动多线程 */ public static void main(String[] args) { new SocketService(55655).start(); } }\"]},\"284\":{\"h\":\"客户端\",\"t\":[\"import java.io.*; import java.net.Socket; /** * @author black fire */ public class SocketClient { public void client(String host,Integer port){ // 向指定服务器端口, 进行链接获取 套接字 Socket socket; try { socket = new Socket(host,port); // 从套接字中获取输入流 InputStream inputStream = socket.getInputStream(); // 将 inputStream 输入流 转换为 BufferedReader 读取流 BufferedReader br = new BufferedReader(new InputStreamReader(inputStream)); String s = br.readLine(); System.out.println(\\\"客户端接收到了:\\\".concat(s)); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { // 链接 localhost 上 55655 端口的服务 new SocketClient().client(\\\"localhost\\\",55655); } }\"]},\"285\":{\"c\":[\"后端开发\",\"java\"]},\"286\":{\"c\":[\"java\"]},\"287\":{\"h\":\"反射\"},\"288\":{\"h\":\"简介\",\"t\":[\"Java反射机制是在运行状态中,获取任意一个类的结构,创建对象,得到方法,执行方法,得到属性. 这种在运行状态获取信息以及动态调用对象方法的功能被称为Java语言的反射机制\"]},\"289\":{\"h\":\"类加载器\",\"t\":[\"Java类加载器(Java Classloader)是Java运行时环境(Java Runtime Environment)的一部分,负责动态加载Java类到Java虚拟机的内存空间中.\",\"java默认有三种类加载器\",\"BootstrapClassLoader(引导启动类加载器): \",\"嵌在JVM内核中的加载器,该加载器是用C++语言写的,主要负载加载JAVA_HOME/lib下的类库,引导启动类加载器无法被应用程序直接使用\",\"ExtensionClassLoader(扩展类加载器): \",\"ExtensionClassLoader是用JAVA编写,且它的父类加载器是Bootstrap.\",\"是由sun.misc.Launcher$ExtClassLoader实现的,主要加载JAVA_HOME/lib/ext目录中的类库。\",\"它的父加载器是BootstrapClassLoader\",\"App ClassLoader(应用类加载器): \",\"App ClassLoader是应用程序类加载器,负责加载应用程序classpath目录下的所有jar和class文件。它的父加载器为Ext ClassLoader\",\"类通常是按需加载,即第一次使用该类时才加载。由于有了类加载器,Java运行时系统不需要知道文件与文件系统。\",\"双亲委派模型:如果一个类加载器收到了一个类加载请求,它不会自己去尝试加载这个类,而是把这个请求转交给父类加载器去完成。\",\"每一个层次的类加载器都是如此。因此所有的类加载请求都应该传递到最顶层的\",\"启动类加载器中,只有到父类加载器反馈自己无法完成这个加载请求(在它的搜索范围没有找到这个类)时,子类加载器才会尝试自己去加载。委派的好处就是避免有些类被重复加载\"]},\"290\":{\"h\":\"如何使用反射\",\"t\":[\"反射使用的演示对象\",\"/** * @author blackFire */ public class Person { private String name; private int age; public Person() { } public Person(String name) { this.name = name; } public Person(String name, int age) { this.name = name; this.age = age; } // 省略 get/set 方法 }\"]},\"291\":{\"h\":\"获取 Class 方式\",\"t\":[\"public class ClassTest(){ static class Student{ } /** * 演示 反射获取 Class * 1. 使用 类名.class; * 2. 使用 对象.getClass; * 3. 使用 Class.forName(\\\"类全路径\\\"); */ public static void getClassTest(){ // 第一种获取方式 Class<Student> cla = Student.class; // 第二种 Student student = new Student(); Class<Student> cla1 = (Class<Student>) student.getClass(); // 第三种 try { Class<?> aClass = Class.forName(\\\"com.blackfire.day03.ReflectionTest$Student\\\"); } catch (ClassNotFoundException e) { e.printStackTrace(); } } }\"]},\"292\":{\"h\":\"使用返回获取构造器\"},\"293\":{\"h\":\"获取并使用无参构造器创建对象\",\"t\":[\"public static void getConstructor() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException { // 获取到 Person 的 class Class<Person> personClass = Person.class; // 通过 Person 的 class 获取它的构造器 Constructor<Person> constructor = personClass.getConstructor(); // 使用 无参构造器创建 Person 对象 Person person = constructor.newInstance(); // 输出 Person{name='null', age=0} System.out.println(person); }\"]},\"294\":{\"h\":\"获取并使用带参构造器创建对象\",\"t\":[\"/** * 获取并使用带参构造器 */ public static void getConstructor1() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException { // 获取到 Person 的 class Class<Person> personClass = Person.class; // 通过 Person 的 class 获取它的构造器 Constructor<Person> constructor = personClass.getConstructor(String.class, int.class); // 使用 带参构造器创建方法 Person person = constructor.newInstance(\\\"张三\\\", 15); System.out.println(person); }\",\"获取并使用 private 修饰的构造器\",\"public static void getConstructor2() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException { // 获取到 Person 的 class Class<Person> personClass = Person.class; // 通过 Person 的 class 获取它的构造器 getDeclaredConstructor 获取所有权限的构造器, 当有 private 修饰的构造器时需要使用这个 Constructor<Person> constructor = personClass.getDeclaredConstructor(String.class); // 当使用 private 修饰的构造器时 需要 对其加上忽略权限 constructor.setAccessible(true); // 使用 带参构造器创建方法 Person person = constructor.newInstance(\\\"张三\\\"); System.out.println(person); }\"]},\"295\":{\"h\":\"使用反射获取并使用方法\",\"t\":[\" /** * 获取 public 修饰的方法 * 使用 Class.getMethod(String name, Class<?>... parameterTypes) 获取方法 * Method method = personClass.getMethod(methodName , typeClass); * 设置数据即可 * method.invoke(obj,value); * 获取 private 修饰的方法时 * 使用 Class.getDeclaredMethod(String name, Class<?>... parameterTypes) 获取所有权限的方法 * Method method = personClass.getDeclaredMethod(methodName , typeClass); * 并为 method 设置忽略检查 * method.setAccessible(true); * 设置数据 * method.invoke(obj,value); */ public static void getMethod() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException { // 使用 反射获取一个对象 Person person = Person.class.getConstructor().newInstance(); // 获取到 Person 的 class Class<Person> personClass = Person.class; // 获取 setAge 方法 Method setAge = personClass.getMethod(\\\"setAge\\\", int.class); setAge.invoke(person,10); System.out.println(person); }\"]},\"296\":{\"h\":\"使用反射获取并使用属性\",\"t\":[\"/** * 获取 public 修饰的属性时 * 使用 Class.getField(String name) 获取属性 * Field field = Class.getField(String name) * 设置数据 * field.set(obj,value); * 获取 private 修饰的属性时 * 使用 Class.getDeclaredField(String name) 获取所有权限的属性 * Field field = Class.getDeclaredField(String name) * 并为其设置忽略权限 * field.setAccessible(true); * 最后设置数据即可 * field.set(obj,value); */ public static void getProperty() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException { // 使用 反射获取一个对象 Person person = Person.class.getConstructor().newInstance(); // 获取到 Person 的 class Class<Person> personClass = Person.class; // 通过类获取 \\\"name\\\" 属性 Field name = personClass.getDeclaredField(\\\"name\\\"); name.setAccessible(true); name.set(person,\\\"张三\\\"); System.out.println(person); }\"]},\"297\":{\"h\":\"内省\"},\"298\":{\"h\":\"简介\",\"t\":[\"基于反射 , java所提供的一套应用到JavaBean的API\",\"拥有无参构造器,所有属性私有,所有属性提供get/set方法,实现了序列化接口的这种类, 我们称其为 bean类.\",\"Java提供了一套java.beans包的api , 对于反射的操作, 进行了封装!\",\"使用内省获取 get/set 方法\",\"/** * 通过内省获取 get/set 方法 * 使用 java.beans 下的 Introspector * .getBeanInfo(Class); * 获取到一个 BeanInfo * 使用 BeanInfo 中的 getPropertyDescriptors 方法获取到所有的属性 * beanInfo.getPropertyDescriptors(); * 循环拿到的所有属性,获取它的 get / set方法 * 获取所有的 set 方法 * pd.getReadMethod(); * 获取到所有的 get 方法 * pd.getWriteMethod(); */ public static void get() throws IntrospectionException { Class<Person> personClass = Person.class; BeanInfo beanInfo = Introspector.getBeanInfo(personClass); PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors(); for (PropertyDescriptor pd : propertyDescriptors) { Method writeMethod = pd.getWriteMethod(); System.out.println(writeMethod); } }\"]},\"299\":{\"c\":[\"后端开发\",\"java\"]},\"300\":{\"c\":[\"java\"]},\"301\":{\"h\":\"JDBC 链接 Mysql\",\"t\":[\"<!-- 下载好jar导入或者使用 maven 从 pom 进行导入 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency>\"]},\"302\":{\"h\":\"为了方便使用我们将jdbc封装成一个工具类\"},\"303\":{\"h\":\"version 1.0.1\",\"t\":[\"import java.beans.IntrospectionException; import java.beans.PropertyDescriptor; import java.lang.reflect.Field; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import java.sql.*; import java.util.ArrayList; import java.util.List; /** * @author blackFire * @version 1.01 * 去除 getMap(); */ public class JdbcUtil { private Connection connection; private PreparedStatement pps; private ResultSet resultSet; private final static String USERNAME = \\\"root\\\"; private final static String PASSWORD = \\\"root\\\"; private final static String JDBC_URL = \\\"jdbc:mysql://127.0.0.1:3306/school?serverTimezone=UTC\\\"; // 只加载一次驱动 static { try { Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\"); } catch (ClassNotFoundException e) { e.printStackTrace(); } } /** * 获取 jdbc 链接 * * @return 当前对象的 Connection 对象 * @throws SQLException sql异常 */ private Connection getConnection() throws SQLException { this.connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD); return this.connection; } /** * 对 sql 语句进行赋值处理 * * @param sql 要执行的 sql * @param list 要填充的字符按 * @throws SQLException sql 异常 */ private PreparedStatement getExecutePps(String sql, List<?> list) throws SQLException { this.pps = getConnection().prepareStatement(sql); if (!list.isEmpty()) { for (int item = 0; item < list.size(); item++) { this.pps.setObject(item + 1, list.get(item)); } } return this.pps; } /** * 增删改使用 * * @param sql sql语句 * @param list 填充字段 * @return 是否成功 */ public Boolean executeSql(String sql, List<?> list) { int row = 0; try { row = getExecutePps(sql, list).executeUpdate(); } catch (SQLException e) { e.printStackTrace(); } return row > 0; } /** * 条件查询使用 * * @param sql sql语句 * @param list 填充的字段 * @param tClass 返回类型 * @param <T> 泛型 * @return 查询结果 */ public <T> List<T> query(String sql, List<?> list, Class<T> tClass) { try { this.resultSet = getExecutePps(sql, list).executeQuery(); } catch (SQLException e) { e.printStackTrace(); } return getList(this.resultSet, tClass); } /** * 无条件时使用 * * @param sql sql语句 * @param tClass 返回类型 * @param <T> 泛型 * @return 查询结果 */ public <T> List<T> query(String sql, Class<T> tClass) { try { this.pps = getConnection().prepareStatement(sql); this.resultSet = this.pps.executeQuery(); } catch (SQLException e) { e.printStackTrace(); } return getList(this.resultSet, tClass); } /** * 将 resultSet 中的数据取出并存储与 List 中返回 * @param resultSet 查询结果集 * @param tClass 返回类型的 class * @param <T> 泛型 * @return List<object> */ public <T> List<T> getList(ResultSet resultSet, Class<T> tClass) { List<T> tList = new ArrayList<>(); // 获取所有属性 Field[] fields = tClass.getDeclaredFields(); while (true) { try { if (!resultSet.next()) { break; } List<Object> list = new ArrayList<>(); for (Field field : fields) { list.add(resultSet.getObject(field.getName())); } T t = tClass.getConstructor().newInstance(); for (int index = 0; index < fields.length; index++) { PropertyDescriptor pd = new PropertyDescriptor(fields[index].getName(), tClass); Method writeMethod = pd.getWriteMethod(); writeMethod.invoke(t, list.get(index)); } tList.add(t); } catch (SQLException | InstantiationException | InvocationTargetException | NoSuchMethodException | IllegalAccessException | IntrospectionException e) { e.printStackTrace(); } } closeAll(); return tList; } /** * 关闭流, 秉持着先开后关原则 */ public void closeAll() { try { if (this.resultSet != null) { this.resultSet.close(); } if (this.pps != null) { this.pps.close(); } if (this.connection != null) { this.connection.close(); } } catch (SQLException e) { e.printStackTrace(); } } }\"]},\"304\":{\"h\":\"version 1.0.0\",\"t\":[\"import java.lang.reflect.InvocationTargetException; import java.sql.*; import java.util.ArrayList; import java.util.List; import java.util.Map; /** * @author blackFire */ public class JdbcUtil { private Connection connection; private PreparedStatement pps; private ResultSet resultSet; private final static String USERNAME = \\\"root\\\"; private final static String PASSWORD = \\\"root\\\"; private final static String JDBC_URL = \\\"jdbc:mysql://127.0.0.1:3306/school?serverTimezone=UTC\\\"; // 只加载一次驱动 static { try { Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\"); } catch (ClassNotFoundException e) { e.printStackTrace(); } } /** * 获取 jdbc 链接 * * @return 当前对象的 Connection 对象 * @throws SQLException sql异常 */ private Connection getConnection() throws SQLException { this.connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD); return this.connection; } /** * 对 sql 语句进行赋值处理 * * @param sql 要执行的 sql * @param list 要填充的字符按 * @throws SQLException sql 异常 */ private PreparedStatement getExecutePps(String sql, List<?> list) throws SQLException { this.pps = getConnection().prepareStatement(sql); if (!list.isEmpty()) { for (int item = 0; item < list.size(); item++) { this.pps.setObject(item + 1, list.get(item)); } } return this.pps; } /** * 增删改使用 * * @param sql sql语句 * @param list 填充字段 * @return 是否成功 */ public Boolean executeSql(String sql, List<?> list) { int row = 0; try { row = getExecutePps(sql, list).executeUpdate(); } catch (SQLException e) { e.printStackTrace(); } return row > 0; } /** * 条件查询使用 * @param sql sql语句 * @param list 填充的字段 * @param map 取出参数 {\\\"sqlColName\\\": [\\\"setMethodName\\\", Class]} 示例 {数据库字段名 : [对应的set方法名, java属性类型 ] } * @param tClass 返回类型 * @param <T> 泛型 * @return 查询结果 */ public <T> List<T> query(String sql, List<?> list,Map<String,List<?>> map, Class<T> tClass) { try { this.resultSet = getExecutePps(sql, list).executeQuery(); } catch (SQLException e) { e.printStackTrace(); } return getList(this.resultSet,map,tClass); } /** * 无条件时使用 * @param sql sql语句 * @param map 取出参数 {\\\"sqlColName\\\": [\\\"setMethodName\\\", Class]} 示例 {数据库字段名 : [对应的set方法名, java属性类型 ] } * @param tClass 返回类型 * @param <T> 泛型 * @return 查询结果 */ public <T> List<T> query(String sql,Map<String,List<?>> map, Class<T> tClass) { try { this.pps = getConnection().prepareStatement(sql); this.resultSet = this.pps.executeQuery(); } catch (SQLException e) { e.printStackTrace(); } return getList(this.resultSet,map,tClass); } /** * 在 resultSet 中获取相应参数 * * @param resultSet resultSet * @param map 取出参数 {\\\"sqlColName\\\": [\\\"setMethodName\\\", Class]} 示例 {数据库字段名 : [对应的set方法名, java属性类型 ] } * @param tClass 要返回对象的 class * @param <T> 泛型 * @return 结果集取出后以 List 形式返回 */ public static <T> List<T> getList(ResultSet resultSet, Map<String,List<?>> map, Class<T> tClass) { List<T> tList = new ArrayList<T>(); while (true) { try { if (!resultSet.next()) { break; } T t = tClass.cast(tClass.getConstructor().newInstance()); for (String col : map.keySet()) { List<?> objects = map.get(col); tClass.getMethod((String) objects.get(0), (Class<?>) objects.get(1)).invoke(t,resultSet.getObject(col)); } tList.add(t); } catch (SQLException | InstantiationException | InvocationTargetException | NoSuchMethodException | IllegalAccessException e) { e.printStackTrace(); } } return tList; } public void closeAll() { try { if (this.resultSet != null) { this.resultSet.close(); } if (this.pps != null) { this.pps.close(); } if (this.connection != null) { this.connection.close(); } } catch (SQLException e) { e.printStackTrace(); } } }\",\"如果使用此 jdbcUtil 请在实现实体类时,自定义一个 getMap(); 示例如下\",\"import lombok.Data; import java.util.*; /** * @author black fire */ @Data public class Student { /** * 学生id */ private Integer stuId; /** * 学生姓名 */ private String stuName; /** * 学生学号 */ private String stuNo; /** * 性别 */ private Integer sex; /** * 手机号 */ private String phone; /** * 邮箱 */ private String email; /** * 所在地址 */ private String address; /** * 专业 */ private String profession; /** * 政治面貌 */ private String politics; /** * 创建时间 */ private Date regDate; private Integer state; /** * 简介 */ private String introduction; /** * 班级 */ private Integer gId; public static Map<String,List<?>> getMap(){ Map<String, List<?>> map = new HashMap<>(1); map.put(\\\"stuid\\\", new ArrayList<>(Arrays.asList(\\\"set\\\".concat(\\\"StuId\\\"),Integer.class))); map.put(\\\"stuname\\\", new ArrayList<>(Arrays.asList(\\\"set\\\".concat(\\\"StuName\\\"),String.class))); map.put(\\\"stuno\\\", new ArrayList<>(Arrays.asList(\\\"set\\\".concat(\\\"StuNo\\\"),String.class))); map.put(\\\"sex\\\", new ArrayList<>(Arrays.asList(\\\"set\\\".concat(\\\"Sex\\\"),Integer.class))); map.put(\\\"phone\\\", new ArrayList<>(Arrays.asList(\\\"set\\\".concat(\\\"Phone\\\"),String.class))); map.put(\\\"email\\\", new ArrayList<>(Arrays.asList(\\\"set\\\".concat(\\\"Email\\\"),String.class))); map.put(\\\"address\\\", new ArrayList<>(Arrays.asList(\\\"set\\\".concat(\\\"Address\\\"),String.class))); map.put(\\\"profession\\\", new ArrayList<>(Arrays.asList(\\\"set\\\".concat(\\\"Profession\\\"),String.class))); map.put(\\\"politics\\\", new ArrayList<>(Arrays.asList(\\\"set\\\".concat(\\\"Politics\\\"),String.class))); map.put(\\\"regdate\\\", new ArrayList<>(Arrays.asList(\\\"set\\\".concat(\\\"RegDate\\\"),Date.class))); map.put(\\\"state\\\", new ArrayList<>(Arrays.asList(\\\"set\\\".concat(\\\"State\\\"),Integer.class))); map.put(\\\"introduction\\\", new ArrayList<>(Arrays.asList(\\\"set\\\".concat(\\\"Introduction\\\"),String.class))); map.put(\\\"gid\\\", new ArrayList<>(Arrays.asList(\\\"set\\\".concat(\\\"GId\\\"),Integer.class))); return map; } }\"]},\"305\":{\"c\":[\"后端开发\",\"java\"]},\"306\":{\"c\":[\"java\"]},\"307\":{\"h\":\"数据结构\"},\"308\":{\"h\":\"栈\",\"t\":[\"stack,又称为堆栈.\",\"栈是限定仅在表尾进行插入和删除操作的线性表.\",\"把允许插入和删除的一端称为栈顶,另一端称为栈底,不包含任何数据元素的栈称为空栈.\",\"栈又称为先进后厨的线性表.\",\"特点: 先进后出\",\"即存进去的元素,要将后面的元素取出后才能取出该元素.\",\"栈的出入口都是栈的顶部位置.\",\"名词解释\",\"压栈: 存元素\",\"弹栈: 取元素\"]},\"309\":{\"h\":\"队列\",\"t\":[\"简称队, 队列是一种特殊的线性表,是运算受到限制的一种线性表,只允许在表的一端进行插入,另一端进行删除元素的线性表.\",\"队尾(rear) 是允许插入的一端.\",\"队头(front) 是允许删除的一端.\",\"空队列是不包含元素的空表.\",\"特点: 先进先出\",\"存入的元素,要将它前面的元素取出后才能去除该元素.\",\"队列的出入口各占一侧.\"]},\"310\":{\"h\":\"数组\",\"t\":[\"Array是有序元素序列,数组是在内存中开辟一段连续的空间,并在此空间中存放元素.\",\"特点:\",\"查找元素快 \",\"通过索引快速访问指定位置的元素\",\"增删改查慢 \",\"指定索引位置增加元素: 需要新建一个新数组,将指定新元素存储在指定索引位置,再把原数组元素根据索引,复制到新数组对应的索引位置.\",\"指定索引位置删除袁术: 需要创建一个新数组,把原数组元素根据索引,复制到新数组对应索引的位置,原数组中指定索引位置元素不复制到新数组中.\"]},\"311\":{\"h\":\"链表\",\"t\":[\"linked list由一系列结点node(链表中每一个元素称为结点)组成结点可以在运行时动态生成。\",\"每个结点包括两个部分:\",\"存储数据元素的数据域\",\"存储下一个结点的地址指针域\",\"特点\",\"多个结点之间,通过地址进行连接。\",\"查找元素慢: 想查找某个元素,需要通过连接的节点,依次向后查找指定元素\",\"增删元素快: \",\"增加元素: 只需要修改连接下个元素的地址即可\",\"删除元素: 只需要修改连接下个元素的地址即可。\",\"链表有三类\",\"单向链表 \",\"在单向链表中, 右链表不知 左边数据时谁\",\"如果要查询数据,那么需要从开始一直查到数据所在\",\"双向链表 \",\"双向链表 左边知道右边的数据是什么\",\"循环链表 \",\"开始链表的上一位时链表的最后一位, 而结束链表的下一位是开始链表的下一位\"]},\"312\":{\"h\":\"红黑树\",\"t\":[\"二叉树:binary tree 是每个结点不超过2的有序树(tree) 。\",\"简单的理解,就是一种类似于我们生活中树的结构,只不过每个结点上都最多只能有两个子结点.\",\"二叉树是每个节点最多有两个子树的树结构。\",\"顶上的叫根结点,两边被称作\\\"左子树\\\"和\\\"右子树\\\"。\",\"红黑树本身就是一颗二叉查找树,将节点插入后,该树仍然是一颗二叉查找树.\",\"也就意味着,树的键值仍然是有序的。\",\"红黑树的约束:\",\"节点可以是红色的或者黑色的\",\"根节点是黑色的\",\"叶子节点(特指空节点)是黑色的\",\"每个红色节点的子节点都是黑色的\",\"任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同\",\"特点: 速度特别快,趋近平衡树,查找叶子元素最少和最多次数不多于二倍\",\"集合是java中提供的一种容器,可以用来存储多个数据,java 中集合都属于 java.util 包.\",\"集合中顶级父接口有哪些?\",\"单列集合的顶级父接口 [ 单列集合同时会继承 Iterable(迭代器) ]: java.util.Collection\",\"双列集合的顶级父接口: java.util.Map\"]},\"313\":{\"h\":\"单列集合\"},\"314\":{\"h\":\"Collection接口\",\"t\":[\"Collection 所有单列集合的顶级父接口.\",\"collection 中一些常见方法\",\"boolean add(E e): 把给定的对象添加到当前集合中 。\",\"void clear(): 清空集合中所有的元素。\",\"boolean remove(E e): 把给定的对象在当前集合中删除。\",\"boolean contains(E e): 判断当前集合中是否包含给定的对象。\",\"boolean isEmpty(): 判断当前集合是否为空。\",\"int size(): 返回集合中元素的个数。\",\"Object[] toArray(): 把集合中的元素,存储到数组中。\"]},\"315\":{\"h\":\"List接口\",\"t\":[\"特点\",\"它是一个元素存取有序的集合\",\"它是一个带有索引的集合,通过索引就可以精确的操作集合中的元素(与数组的索引是一个道理)\",\"集合中可以有重复的元素,通过元素的equals方法,来比较是否为重复的元素.\",\"常用方法\",\"boolean add(E e): 将指定的元素追加到此列表的末尾(可选操作)\",\"void add(int index, E element): 将指定的元素,添加到该集合中的指定位置上。\",\"E get(int index): 返回集合中指定位置的元素。\",\"E remove(int index): 移除列表中指定位置的元素, 返回的是被移除的元素。\",\"E set(int index, E element): 用指定元素替换集合中指定位置的元素,返回值的更新前的元素。\",\"boolean contains​(Object o) 不管此列表中包含几个指定的元素都会返回 true;\",\"boolean isEmpty(): 此列表中不包含任何元素时返回 true;\",\"List的实现类\",\"AbstractList\",\"AbstractSequentialList\",\"ArrayList (必须知道)\",\"AttributeList\",\"CopyOnWriteArrayList\",\"LinkedList\",\"RoleList\",\"RoleUnresolvedList\",\"Stack\",\"Vector\"]},\"316\":{\"h\":\"LinkedList集合\",\"t\":[\"LinkedList 是 List 的实现类之一 class LinkedList<E> extends AbstractSequentialList<E> implements List<E>, Deque<E>, Cloneable, java.io.Serializable\",\"继承 AbstractSequentialList,实现 List,Deque,Cloneable,Serializable\",\"LinkedList 提供了很多首尾操作的方法,所以也可以作为堆栈或队列使用.\",\"特有的方法\",\"void addFirst​(E e): 在此列表的开头插入指定的元素\",\"void addLast​(E e): 将指定的元素追加到此列表的末尾。\",\"E getFirst(): 返回此列表中的第一个元素。\",\"E getLast(): 返回此列表中的最后一个元素。\",\"E removeFirst(): 移除并返回此列表的第一个元素。\",\"E removeLast(): 移除并返回此列表的最后一个元素。\",\"E pop(): 从此列表所表示的堆栈处弹出一个元素。\",\"void push(E e): 将元素推入此列表所表示的堆栈。\",\"boolean isEmpty(): 如果列表不包含元素,则返回true。\"]},\"317\":{\"h\":\"Set接口\",\"t\":[\"它与Collection 接口中的方法基本一致,并没有对 Collection 接口进行功能上的扩充,只是比Collection 接口更加严格了.\",\"与 List 接口不同的是, Set 接口中元素无序,并且都会以某种规则保证存入的元素不出现重复。\",\"Set实现类\",\"AbstractSet\",\"ConcurrentHashMap.KeySetVie\",\"ConcurrentSkipListSet\",\"CopyOnWriteArraySet\",\"EnumSet\",\"HashSet\",\"JobStateReasons\",\"LinkedHashSet\",\"TreeSet\"]},\"318\":{\"h\":\"HashSet实现类\",\"t\":[\"class HashSet<E> extends AbstractSet<E> implements Set<E>, Cloneable, java.io.Serializable\",\"继承 AbstractSet,实现 Set,Cloneable,Serializable\",\"HashSet 是根据对象的哈希值来确定元素在集合中的存储位置,因此具有良好的存取和查找性能,保证元素唯一性的方式依赖于: hashCode 与 equals 方法。\",\"HashSet集合存储数据的结构(哈希表)\",\"在JDK1.8之前,哈希表底层采用 数组+链表实现,即使用链表处理冲突,同一hash值的链表都存储在一个链表里。但是当位于一个桶中的元素较多,即hash值相等的元素较多时,通过key值依次查找的效率较低。而JDK1.8中,哈希表存储采用数组+链表+红黑树实现,当链表长度超过阈值(8)时,将链表转换为红黑树,这样大大减少了查找时间。\",\"JDK1.8引入红黑树大程度优化了HashMap的性能,那么对于我们来讲保证HashSet集合元素的唯一,其实就是根据对象的hashCode和equals方法来决定的。如果我们往集合中存放自定义的对象,那么保证其唯一,就必须复写hashCode和equals方法建立属于当前对象的比较方式。\",\"HashSet存储自定义类型元素\",\"给HashSet中存放自定义类型元素时,需要重写对象中的hashCode和equals方法,建立自己的比较方式,才能保证HashSet集合中的对象唯一\"]},\"319\":{\"h\":\"双列集合\"},\"320\":{\"h\":\"Map 接口\",\"t\":[\"双列集合的顶级父接口\",\"Map集合是以键值对的形式存在, 而Map集合的键是不允许重复的!\",\"哈希表[Map的工作原理]\",\"初始桶数量为 16 散列因子 0.75 当桶的数据存到75%后会对桶进行扩容一倍处理\",\"两种特殊情况 \",\"哈希桶中的数据量大于8时,会从链表转换为红黑二叉树\",\"哈希桶中的数据量小于6时,会从红黑二叉树转换为链表\",\"实现类\",\"AbstractMap\",\"Attributes\",\"AuthProvider\",\"ConcurrentHashMap\",\"ConcurrentSkipListMap\",\"EnumMap\",\"HashMap\",\"Hashtable\",\"Headers\",\"IdentityHashMap\",\"LinkedHashMap\",\"PrinterStateReasons\",\"Properties\",\"Provider\",\"RenderingHints\",\"ScriptObjectMirror\",\"SimpleBindings\",\"TabularDataSupport\",\"TreeMap\",\"UIDefaults\",\"WeakHashMap\",\"HashMap/Hashtable/ConcurrentHashMap之间的区别\",\"HashMap: 线程不安全 效率高\",\"Hashtable: 线程安全 效率低\",\"ConcurrentHashMap: 线程安全 采用分段锁机制,保证线程安全,效率比较高\",\"TreeMap: 顺序存储 是一个有序Map集合 是二叉树存储 LinkedHashMap,在HashMap和linkedSet中分别存储一份 有序存储\"]},\"321\":{\"c\":[\"后端开发\",\"java\"]},\"322\":{\"c\":[\"java\"]},\"323\":{\"h\":\"redis设计实时排行榜\"},\"324\":{\"h\":\"使用redis先试思路可行性\",\"t\":[\"思路:\",\"由于redis的sort排序仅支持一个字段进行升序或降序,那么可以考虑将一个字段变更为升序排序且由于我们这边是以考试为思路来设计所以可以考虑使用考试的最高分减去当前人的考试分数获取一个新的升序分数.\",\"同分数时我们需要按照考试是时长进行升序,由此我们可以思考将两个分数组装为一个double类型的分数来进行排序,由此我们可以进行尝试是否可行\",\"准备测试数据\",\"# 我们使用hash来将各个数据进行存储 hmset exam_1_user:2001 examId 1 userId 2001 score 80 examTime 81 sortScore 20.81 hmset exam_1_user:2002 examId 1 userId 2002 score 82 examTime 83 sortScore 18.83 hmset exam_1_user:2003 examId 1 userId 2003 score 81 examTime 90 sortScore 19.90 hmset exam_1_user:2004 examId 1 userId 2004 score 90 examTime 80 sortScore 10.80 hmset exam_1_user:2005 examId 1 userId 2005 score 90 examTime 70 sortScore 10.70 hmset exam_1_user:2006 examId 1 userId 2006 score 90 examTime 90 sortScore 10.90 # 将其唯一值设置为外部列表进行存储且使用这个来进行存储 rpush exam_1_user_sort 2001 2002 2003 2004 2005 2006\",\"我们使用sort将其进行排序后输出key\",\"sort exam_1_user_sort by exam_1_user:*->sortScore asc get # # 输出结果为: 2005 2004 2006 2002 2003 2001 # 和我们预期结果一致.\"]},\"325\":{\"h\":\"使用java来实现排行榜\",\"t\":[\"redis工具类不会写的可以去看redisUtil工具类\"]},\"326\":{\"h\":\"接收数据实体类\",\"t\":[\"package cn.moonlight.common.dto; import cn.moonlight.common.util.ExamRankUtil; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.experimental.Accessors; import java.util.HashMap; import java.util.Map; @Data @Accessors(chain = true) @NoArgsConstructor @AllArgsConstructor public class RedisRankDto { private Integer examId; private Integer userId; private Double score; private Integer examTime; private Double maxScore; public String getSortScore() { return String.valueOf((maxScore - score) + ((double) examTime / 100000)); } public Map<String, String> toMap() { return new HashMap<String, String>() {{ put(\\\"examId\\\", String.valueOf(examId)); put(\\\"userId\\\", String.valueOf(userId)); put(\\\"score\\\", String.valueOf(score)); put(\\\"examTime\\\", String.valueOf(examTime)); put(ExamRankUtil.SORT_SCORE, getSortScore()); }}; } }\"]},\"327\":{\"h\":\"排行榜工具类\",\"t\":[\"package cn.moonlight.common.util; import cn.moonlight.common.dto.RedisRankDto; import org.springframework.data.redis.connection.SortParameters; import org.springframework.data.redis.core.query.SortQuery; import org.springframework.data.redis.core.query.SortQueryBuilder; import java.util.ArrayList; import java.util.List; import java.util.Map; /** * 考试排行榜工具类 */ public class ExamRankUtil { /** * 过期时长 默认为一年,测试时请不要使用该参数 */ public static final long EXPIRE = 31536000; /** * 排行榜最大人数 -- 默认限制为50 */ public static final int MAX_RANK_NUMBER = 50; /** * 排行榜所存key,该字符串需要进行拼接 * <p> * 1. 需要使用 String.format(RANK_KEY, examId); 拼接为本场考试使用的key * <p> * 2. 需要再后面拼接本场考试是谁的数据也就是 String.format(RANK_KEY, examId) + userId; 来区分是谁的数据 */ private static final String RANK_KEY = \\\"exam_%d_user:\\\"; /** * 排序所用的key 同样需要使用 String.format(RANK_SOFT_KEY, examId); 来拼接为本场的数据 */ private static final String RANK_SORT_KEY = \\\"exam_%d_user_sort\\\"; public static final String SORT_SCORE = \\\"sortScore\\\"; private static final String RANK_SOFT_BY = RANK_KEY + \\\"*->\\\" + SORT_SCORE; /** * 根据考试ID获取对应的排行版数据 * * @param examId 考试ID * @return List<Map < String, String>> */ public static List<Map<String, String>> findRankByExamId(Integer examId) { String rankKey = String.format(RANK_KEY, examId); SortQuery<String> sortQuery = SortQueryBuilder.sort(String.format(RANK_SORT_KEY, examId)) .by(String.format(RANK_SOFT_BY, examId)) .order(SortParameters.Order.ASC) .build(); List<String> sort = RedisUtil.sort(sortQuery); List<Map<String, String>> list = new ArrayList<>(MAX_RANK_NUMBER); for (int i = 0; i < sort.size(); i++) { Map<String, String> map = RedisUtil.hashEntries(rankKey + sort.get(i)); map.put(\\\"rank\\\", String.valueOf(i + 1)); list.add(map); } return list; } /** * 给排行榜添加一个人员内部自动判断是否可以存在于排行榜中 * * @param dto 排行榜数据 */ public static void addRank(RedisRankDto dto) { // 设置变量 String SCORE = \\\"score\\\"; String EXAM_TIME = \\\"examTime\\\"; // 组装key String rankKey = String.format(RANK_KEY, dto.getExamId()); // 使用模糊查询获取当前场考试所有用户的key List<String> matchingKeys = RedisUtil.findMatchingKeys(rankKey + \\\"*\\\"); // 如果当前为空那么直接将本次数据添加进去即可 if (matchingKeys.isEmpty()) { rankPutData(dto); return; } // 组装key String examUserRedisKey = String.format(RANK_KEY, dto.getExamId()) + dto.getUserId(); // 如果exam_user在redis的hash表数据存在 if (RedisUtil.hasKey(examUserRedisKey)) { // 获取hash表中所有数据 Map<String, String> redisExamUser = RedisUtil.hashEntries(examUserRedisKey); // 只有当前分数大于redis中存储的分数或分数一直且时长更短时才更新数据 if (dto.getScore() > Double.parseDouble(redisExamUser.get(SCORE)) || (Double.valueOf(redisExamUser.get(SCORE)).equals(dto.getScore()) && Double.parseDouble(redisExamUser.get(EXAM_TIME)) > dto.getExamTime())) { RedisUtil.hmSet(examUserRedisKey, SCORE, String.valueOf(dto.getScore())); RedisUtil.hmSet(examUserRedisKey, EXAM_TIME, String.valueOf(dto.getExamTime())); RedisUtil.hmSet(examUserRedisKey, SORT_SCORE, String.valueOf(dto.getSortScore())); } return; } // 如果当前redis不存在相同key且未超过排行榜最大人数时直接放入redis即可 if (matchingKeys.size() < MAX_RANK_NUMBER) { rankPutData(dto); return; } // 排序key String rankSortKey = String.format(RANK_SORT_KEY, dto.getExamId()); // 排序条件组装 SortQuery<String> sortQuery = SortQueryBuilder.sort(rankSortKey) .by(String.format(RANK_SOFT_BY, dto.getExamId())) .order(SortParameters.Order.DESC) .build(); // 获取排序后所有的key List<String> sort = RedisUtil.sort(sortQuery); for (String userId : sort) { String examUserRedisTempKey = rankKey + userId; Map<String, String> redisExamUser = RedisUtil.hashEntries(examUserRedisTempKey); double redisScore = Double.parseDouble(redisExamUser.get(SCORE)); int examTime = Integer.parseInt(redisExamUser.get(EXAM_TIME)); // 如果当前分数大于redis中存储的分数或分数一致且时长更短时移除当前redis中的数据且将当前数据存入redis中 if (dto.getScore() > redisScore || (dto.getScore() == redisScore && examTime > dto.getExamTime())) { RedisUtil.del(examUserRedisTempKey); RedisUtil.lRemove(rankSortKey, userId); rankPutData(dto); break; } } } /** * 给Redis中push一条排行榜数据 * * @param dto redis中需要push的数据 */ public static void rankPutData(RedisRankDto dto) { // 组装key String key = String.format(RANK_KEY, dto.getExamId()) + dto.getUserId(); // 设置一张hash表数据 RedisUtil.hmSet(key, dto.toMap()); // 给定一个过期时间 RedisUtil.expire(key, EXPIRE); // 给排序的列表添加当前的为一值 RedisUtil.rightPush(String.format(RANK_SORT_KEY, dto.getExamId()), String.valueOf(dto.getUserId()), EXPIRE); } }\"]},\"328\":{\"c\":[\"后端开发\",\"redis\"]},\"329\":{\"c\":[\"java\"]},\"330\":{\"h\":\"redis\"},\"331\":{\"h\":\"概述\",\"t\":[\"redis 是什么?\",\"Redis（Remote Dictionary Server ），即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。\",\"免费开源! 是当下最热门的NoSQL技术之一! 也被人称之为结构化数据库!\",\"redis 能做什么?\",\"内存存储,持久化,内存中是断电即失,所以说持久化很重要(rdb,aof)\",\"效率高,可用用于高速缓存\",\"发布订阅系统\",\"地图信息分析\",\"计时器,计数器(浏览量!)\",\"...\",\"特性\",\"多样的数据类型\",\"持久化\",\"集群\",\"事务\",\"....\",\"学习中需要用到的东西\",\"狂神的公众号: 狂神说 (本文学习狂神说来的)\",\"官网: https://redis.io/downloads/\",\"英文官网命令查询: https://redis.io/docs/latest/commands/\",\"注意: Windows再Github上下载(停止更新很久了)\",\"Redis推荐都是再linux服务器上搭建的, 我们是基于Linux学习\"]},\"332\":{\"h\":\"Linux安装\",\"t\":[\"下载安装包! 最新稳定版本: 最新的稳定版本始终可在固定 https://download.redis.io/redis-stable.tar.gz URL 及其 SHA-256 总和中找到\",\"找下载示例\",\"将安装包上传到linux服务器上并解压[ 上传目录为 /opt]\",\"安装gcc,执行 yum install gcc-c++命令即可\",\"在reids根目录执行\",\"make make install\",\"redis的默认安装路径 /usr/local/bin\",\"将redis配置文件复制到 /usr/local/bin 目录下\",\"mkdir my-config cp /opt/redis/redis.conf my-config\",\"redis默认不是后台启动的,需修改配置文件.\",\"# redis.conf # 找到dameonize 将参数修改为yes dameonize yes\",\"启动redis服务\",\"# 通过指定的配置文件启动服务 redis-server /usr/local/bin/my-config/redis.conf\",\"使用redis客户端进行链接测试\",\"# 使用redis客户端进行链接 reids-cli -p 6379\",\"查看redis进程是否开启命令 ps -ef|grep redis\",\"关闭redis服务命令 shutdown\"]},\"333\":{\"h\":\"测试性能\",\"t\":[\"redis-benchmark 是一个压力测试工具.\",\"官方自带的性能测试工具!\",\"使用: redis-benchmark 命令参数!\",\"命令参数[图片来自菜鸟教程]:\",\"redis命令参数\",\"简单测试下\",\"# 测试: 100个并发链接 100000请求 redis-benchmark -h localhost -p 6379 -c 100 -n 100000\",\"Snipaste 2024 06 26 17 58 26\"]},\"334\":{\"h\":\"基础知识\",\"t\":[\"redis默认存在16个数据库\",\"切换数据库命令: select index index为几号数据库.\",\"查看库数据大小命令: dbsize\",\"查看所有的key命令: keys *\",\"清空当前数据库命令: flushdb\",\"清空全部数据库内容命令: flushall\",\"redis 是单线程的.\",\"Redis为什么单线程还很快?\",\"误区1: 高性能服务器一定是多线程的?\",\"误区2: 多线程(CPU上下文会切换)一定比单线程效率高!\",\"核心:\",\"redis是将所有的数据全部放在内存中的,所以说使用单线程去操作效率就是最高的.\",\"多线程的上下文切换本身就是耗时操作,但对于内存系统来说没有上下文切换效率就是最高的.\",\"多次读写都是在一个CPU上的,在内存情况下,这个就是最佳的方案.\"]},\"335\":{\"h\":\"五大数据类型\"},\"336\":{\"h\":\"Redis-key\",\"t\":[\"# 更换数据库 select index # 查看数据库现在有多少key dbsize # 查看库内所有的key keys * # 将当前数据库清空 flushdb # 清空所有数据库 flushall # expire 过期命令 key 要被过期的名称 seconds 多少秒后过期 expire key seconds # ttl 查看过期时间命令 查看key还有多长时间过期 # 注意: -2 表示已经过期 ttl key # del 删除命令 将key从redis中删除 del key # move 移动命令 将key从当前数据库移动至指定数据库中 move key db # type 查看key所存储的类型 type key # exists 查看key是否存在的命令 exists key\"]},\"337\":{\"h\":\"String(字符串)\",\"t\":[\"# set 设置一个key, key 存储的键名 value 存储的值 set key value # 将value关联到key,并将key的过期时间设置为seconds(以秒为单位) setex key seconds value # 当key不存在时设置key的值,当key存在时不会设置. setnx key value # 给key设置一个新的value值并将旧值返回回去 getset key value # append 追加命令 在key的后面追加上value的值 append key value # get 获取命令,获取key的value值返回 get key # strlen 查看key的长度 strlen key\"]},\"338\":{\"h\":\"同时设置或获取多个属性值\",\"t\":[\"# 同时设置一个或多个key-value,且所有给定的key都不存在 # 如果key存在时新值会覆盖旧值 mset key value[key1 value1 ...] # 同时设置一个或多个key-value,当所有key都不存在时成功 # 这是一个原子性的操作,要么一起成功,要么一起失败 msetnx key vlaue[key1 value1] # 获取所有给定的key的值,value值返回的索引位置与key的顺序一致 mget key1[key2..]\"]},\"339\":{\"h\":\"字符串范围获取或替换\",\"t\":[\"# 获取key关联的value,且获取value从start位置到end位置的字符进行返回 getrange key start end # 将key的value进行覆写,从偏移量(offset)开始 setrange key offset value\"]},\"340\":{\"h\":\"自增或自减\",\"t\":[\"# 将key中存储的数字值增1 incr key # 对key的值加上指定的增值量(increment) incrby key increment # 对key的值加上指定的浮点增值量(increment) incrbyfloat key increment # 对key中存储的数字值减一 decr key # 对key所存储的值减去指定的减量值(decrement) decrby key decrement\"]},\"341\":{\"h\":\"List(列表)\",\"t\":[\"可以当成栈,队列,阻塞队列使用.\",\"本质上是一个链表, before node after, left right 都可以插入值\",\"当key不存在,创建新的链表,key存在新增内容\",\"如果移除了所有值,空链表,也代表不存在\",\"两个插入或改动值,效率最高! 中间元素,相对来说效率会低一点.\",\"消息队列: lpush rpop 栈: lpush lpop\",\"# 获取key的长度. llen key # lpush 向list添加一个或多个值添加到列表头部 # 当添加多个值的时候,value2会在value1前面,因为这个命令是向列表头部添加一个值 # 也就是多个值时,先进入的反而在最后,最后进入的反而在最前面 lpush key value1[value2...] # lpushx 向已存在的列表的头部添加一个值,列表不存在时不执行且返回0 lpushx key value # rpush 向列表尾部添加一个或多个值 rpush key value1[value2...] # rpushx 为已存在的列表的尾部添加值,列表不存在时不执行且返回0 rpushx key value # 通过索引设置列表指定位置的值,当key不存在时会报错,当索引不存在时也不执行 # 例如key中长度为3但是向索引为10的位置设置值时就是失败的. lset key index value # 在列表的元素前或后插入元素 # 向pivot[元素名]前或后插入value LINSERT key BEFORE|AFTER pivot value\"]},\"342\":{\"h\":\"获取列表中的元素\",\"t\":[\" # 取出指定范围内的元素,当 start=0 stop=-1时会取出全部 lrange key start stop # 通过索引获取列表中的元素 lindex key index\"]},\"343\":{\"h\":\"移除或弹出一个元素\",\"t\":[\"# lpop 移除并获取列表的第一位元素 lpop key # rpop 移除并获取列表的最后一位元素 rpop key # 移除key中指定个数的value, count 代表要移除的个数 # 移除时是从头部开始找要移除的元素 lrem key count value # 移除key中指定个数的value,conunt 代表要移除的个数 # 移除时是从尾部开始找要移除的元素 rrem key cont value # 移除source列表的最后一位元素,并将该元素添加到destination列表的头部,最后将source移除的元素返回 # destination不存在时会创建 rpoplpush source destination\"]},\"344\":{\"h\":\"阻塞命令\",\"t\":[\"# 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 # 当列表中存在元素时会直接从头部移除一位,若列表中没有任何元素时也就是这个key都不存在的情况下,会阻塞指定的秒数[timeout] blpop key1[key2] timeout # 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 # 当列表中存在元素时会直接从尾部移除一位元素,若列表中没有任何元素时也就是这个key都不存在的情况下,会阻塞指定的秒数[timeout] brpop key1[key2] timeout # 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； # 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 # 将source尾部移除一个值,追加到destination的头部,当source不存在元素时,阻塞指定的秒数[timeout]或发现一个元素可以弹出 brpoplpush source destination timeout\"]},\"345\":{\"h\":\"保留区间内的元素\",\"t\":[\"# 对一个列表进行修建,仅保留指定区间内的元素,不存在区间内的元素都被删除 # 这个区间是个闭区间,也就是指定的索引位也包含在内 ltrim key start stop\"]},\"346\":{\"h\":\"Set(集合)\",\"t\":[\"set中的值是不能重复的.\",\"# 向集合中添加一个或多个成员,成员不能重复 sadd key member1 [member2] # 判断 member 元素是否是集合 key 的成员 SISMEMBER key member # 返回集合中的所有成员 SMEMBERS key # 将 member 元素从 source 集合移动到 destination 集合 SMOVE source destination member # 移除并返回集合中的一个随机元素 SPOP key # 返回集合中一个或多个随机数 SRANDMEMBER key [count] # 移除集合中一个或多个成员 SREM key member1 [member2] # 迭代集合中的元素 SSCAN key cursor [MATCH pattern] [COUNT count] # 返回第一个集合与其他集合之间的差异。 SDIFF key1 [key2] # 获取集合的成员数 SCARD key\"]},\"347\":{\"h\":\"交集\",\"t\":[\"# 返回给定所有集合的交集 SINTER key1 [key2] # 返回给定所有集合的差集并存储在 destination 中 SDIFFSTORE destination key1 [key2]\"]},\"348\":{\"h\":\"并集\",\"t\":[\"#返回所有给定集合的并集 SUNION key1 [key2] # 所有给定集合的并集存储在 destination 集合中 SUNIONSTORE destination key1 [key2]\"]},\"349\":{\"h\":\"Hash\",\"t\":[\"Map集合,key-map这时候值是map集合\",\"# 将哈希表key中的字段field的值设置为value.redis4.0后该命令支持设置多个field hset key field value # 将哈希表key中的字段field的值不存在时,设置值为value HSETNX key field value # 同时将多个field-value设置到hash表的key中,该命令后续已经移除 hmset key field1 value1 [field2 value2] # 获取存储在哈希表中指定字段的值。 HGET key field # 获取所有给定字段的值 hmget key field1 [field2] # 获取在哈希表中指定 key 的所有字段和值 hgetAll key # 查看哈希表 key 中，指定的字段是否存在。 HEXISTS key field # 删除一个或多个哈希表字段 HDEL key field1 [field2] #获取哈希表中的所有字段 HKEYS key # 获取哈希表中所有的值 hvals key # 获取哈希表中字段的数量 HLEN key # 迭代hash表中的键值对 HSCAN key cursor [MATCH pattern] [COUNT count]\"]},\"350\":{\"h\":\"字段添加指定增量\",\"t\":[\" # 为哈希表 key 中的指定字段的整数值加上增量 increment 。 HINCRBY key field increment # 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。 HINCRBYFLOAT key field increment\"]},\"351\":{\"h\":\"Zset(有序集合)\",\"t\":[\"# 获取有序集合的成员数 ZCARD key # 向有序集合添加一个或多个成员，或者更新已存在成员的分数 # 新成员会从头部进行插入,而不是从尾部插入. ZADD key score1 member1 [score2 member2] # 返回有序集合中指定成员的索引 ZRANK key member # 返回有序集中，成员的分数值 ZSCORE key member # 通过索引区间返回有序集合指定区间内的成员 ZRANGE key start stop [WITHSCORES] # 返回有序集中指定区间内的成员，通过索引，分数从高到低 ZREVRANGE key start stop [WITHSCORES] # 返回有序集中指定分数区间内的成员，分数从高到低排序 # -inf 代表负无穷 +inf 代表正无穷 ZREVRANGEBYSCORE key max min [WITHSCORES] # 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序 ZREVRANK key member # 通过字典区间返回有序集合的成员 ZRANGEBYLEX key min max [LIMIT offset count] # 通过分数返回有序集合指定区间内的成员 ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] #移除有序集合中的一个或多个成员 ZREM key member [member ...] # 移除有序集合中给定的字典区间的所有成员 ZREMRANGEBYLEX key min max # 移除有序集合中给定的排名区间的所有成员 ZREMRANGEBYRANK key start stop # 移除有序集合中给定的分数区间的所有成员 ZREMRANGEBYSCORE key min max # 计算在有序集合中指定区间分数的成员数 ZCOUNT key min max # 在有序集合中计算指定字典区间内成员数量 ZLEXCOUNT key min max # 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中 ZINTERSTORE destination numkeys key [key ...] # 计算给定的一个或多个有序集的并集，并存储在新的 key 中 ZUNIONSTORE destination numkeys key [key ...] # 迭代有序集合中的元素（包括元素成员和元素分值） ZSCAN key cursor [MATCH pattern] [COUNT count]\"]},\"352\":{\"h\":\"对分数进行指定增量\",\"t\":[\"# 有序集合中对指定成员的分数加上增量 increment ZINCRBY key increment member\"]},\"353\":{\"h\":\"Geo(地理位置)\",\"t\":[\"Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，该功能在 Redis 3.2 版本新增。\",\"# 添加地理位置的坐标。 GEOADD key longitude latitude member [longitude latitude member ...] # 获取地理位置的坐标。 GEOPOS key member [member ...] # 计算两个位置之间的距离。 GEODIST key member1 member2 [m|km|ft|mi] # 根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。 GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key] # 根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。 GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key] # 返回一个或多个位置对象的 geohash 值 GEOHASH key member [member ...]\"]},\"354\":{\"h\":\"hyperLogLog(基数统计)\",\"t\":[\"Redis 在 2.8.9 版本添加了 HyperLogLog 结构。\",\"Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。\",\"# 添加指定元素到 HyperLogLog 中。 PFADD key element [element ...] # 返回给定 HyperLogLog 的基数估算值。 PFCOUNT key [key ...] # 将多个 HyperLogLog 合并为一个 HyperLogLog PFMERGE destkey sourcekey [sourcekey ...]\"]},\"355\":{\"h\":\"stream\",\"t\":[\"Redis Stream 是 Redis 5.0 版本新增加的数据结构。\",\"Redis Stream 主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能， 但它有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。\"]},\"356\":{\"h\":\"消息队列相关命令\",\"t\":[\"# XADD - 添加消息到末尾 key 队列名称 id 消息id field value记录 XADD key ID field value [field value ...] # XTRIM - 对流进行修剪，限制长度 key队列名称 maxlen 长度 count 数量 XTRIM key MAXLEN [~] count # XDEL - 删除消息 XDEL key ID [ID ...] # XLEN - 获取流包含的元素数量，即消息长度 XLEN key # XRANGE - 获取消息列表，会自动过滤已经删除的消息 # start ：开始值， - 表示最小值 end ：结束值， + 表示最大值 count ：数量 XRANGE key start end [COUNT count] # XREVRANGE - 反向获取消息列表，ID 从大到小 # start ：开始值， - 表示最小值 end ：结束值， + 表示最大值 count ：数量 XREVRANGE key end start [COUNT count] # XREAD - 以阻塞或非阻塞方式获取消息列表 # count ：数量 milliseconds ：可选，阻塞毫秒数，没有设置就是非阻塞模式 # key ：队列名 id ：消息 ID XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id [id ...]\"]},\"357\":{\"h\":\"消费者组相关命令\",\"t\":[\"# XGROUP CREATE - 创建消费者组 # key ：队列名称，如果不存在就创建 # groupname ：组名。 # $ ： 表示从尾部开始消费，只接受新消息，当前 Stream 消息会全部忽略。 # 0-0: 表示从头消费 XGROUP [CREATE key groupname id-or-$] [SETID key groupname id-or-$] [DESTROY key groupname] [DELCONSUMER key groupname consumername] # XREADGROUP GROUP - 读取消费者组中的消息 # group ：消费组名 # consumer ：消费者名。 # count ： 读取数量。 # milliseconds ： 阻塞毫秒数。 # key ： 队列名。 # ID ： 消息 ID。 XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...] XACK - 将消息标记为\\\"已处理\\\" XGROUP SETID - 为消费者组设置新的最后递送消息ID XGROUP DELCONSUMER - 删除消费者 XGROUP DESTROY - 删除消费者组 XPENDING - 显示待处理消息的相关信息 XCLAIM - 转移消息的归属权 XINFO - 查看流和消费者组的相关信息； XINFO GROUPS - 打印消费者组的信息； XINFO STREAM - 打印流信息\"]},\"358\":{\"h\":\"事务\",\"t\":[\"Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：\",\"批量操作在发送 EXEC 命令前被放入队列缓存。\",\"收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。\",\"在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。\",\"# 标记一个事务块的开始。 multi # 执行所有事务块内的命令 EXEC # 取消事务，放弃执行事务块内的所有命令。 DISCARD # 取消 WATCH 命令对所有 key 的监视。 UNWATCH # 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。 WATCH key [key ...]\"]},\"359\":{\"c\":[\"redis\"]},\"360\":{\"c\":[\"redis\"]},\"361\":{\"h\":\"redis工具类\"},\"362\":{\"h\":\"RedisConfigBean配置\",\"t\":[\"import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.data.redis.connection.RedisConnectionFactory; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.data.redis.serializer.RedisSerializer; import org.springframework.data.redis.serializer.StringRedisSerializer; @Configuration public class RedisConfig { @Bean public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) { RedisTemplate<String, String> template = new RedisTemplate<>(); RedisSerializer<String> redisSerializer = new StringRedisSerializer(); template.setConnectionFactory(factory); //key序列化方式 template.setKeySerializer(redisSerializer); //value序列化 template.setValueSerializer(redisSerializer); //key haspMap序列化 template.setHashKeySerializer(redisSerializer); //value hashmap序列化 template.setHashValueSerializer(redisSerializer); return template; } }\"]},\"363\":{\"h\":\"RedisUtil工具类\",\"t\":[\"import org.springframework.data.redis.connection.RedisConnectionFactory; import org.springframework.data.redis.core.*; import org.springframework.data.redis.core.query.SortQuery; import org.springframework.stereotype.Component; import java.nio.charset.StandardCharsets; import java.util.ArrayList; import java.util.List; import java.util.Map; import java.util.Set; import java.util.concurrent.TimeUnit; @Component public class RedisUtil { public static RedisTemplate<String, String> redisTemplate; public static HashOperations<String, String, String> hashOperations; public static ValueOperations<String, String> valueOperations; public static ListOperations<String, String> listOperations; public static SetOperations<String, String> setOperations; public RedisUtil(RedisTemplate<String, String> redisTemplate) { RedisUtil.redisTemplate = redisTemplate; RedisUtil.hashOperations = redisTemplate.opsForHash(); RedisUtil.valueOperations = redisTemplate.opsForValue(); RedisUtil.listOperations = redisTemplate.opsForList(); RedisUtil.setOperations = redisTemplate.opsForSet(); } /** * 根据正则匹配key获取所有对应的key * * @param pattern 正则匹配路径 例如examUserId:* 获取 examUserId:101,examUserId:102,examUserId:103... * @return List<String> */ public static List<String> findMatchingKeys(String pattern) { List<String> matchedKeys = new ArrayList<>(); ScanOptions scanOptions = ScanOptions.scanOptions().match(pattern).count(100).build(); RedisConnectionFactory connectionFactory = redisTemplate.getConnectionFactory(); if (null == connectionFactory) { throw new RuntimeException(\\\"使用 ScanOptions 获取 keys 时 connectionFactory 获取为空\\\"); } try (Cursor<byte[]> cursor = connectionFactory.getConnection().scan(scanOptions)) { while (cursor.hasNext()) { byte[] rawKey = cursor.next(); String key = new String(rawKey, StandardCharsets.UTF_8); matchedKeys.add(key); } } return matchedKeys; } /** * 排序 * * @param sortQuery 排序条件 * @return List<String> */ public static List<String> sort(SortQuery<String> sortQuery) { return redisTemplate.sort(sortQuery); } /** * 给一个指定的 key 值附加过期时间 */ public static void expire(String key, long time) { redisTemplate.expire(key, time, TimeUnit.SECONDS); } /** * 根据key 获取过期时间 * * @param key 键 不能为null * @return 时间(秒) 返回 0 代表为永久有效 */ public static long getTime(String key) { Long expire = redisTemplate.getExpire(key, TimeUnit.SECONDS); return null == expire ? -1 : expire; } /** * 根据key 判断该key是否已过期 */ public static boolean hasKey(String key) { return Boolean.TRUE.equals(redisTemplate.hasKey(key)); } /** * 移除指定key 的过期时间 */ public static boolean persist(String key) { return Boolean.TRUE.equals(redisTemplate.boundValueOps(key).persist()); } /** * 从redis中删除指定的一个key * * @param key redisKey */ public static void del(String key) { redisTemplate.delete(key); } //region String类型 //- - - - - - - - - - - - - - - - - - - - - String类型 - - - - - - - - - - - - - - - - - - - - /** * 根据key获取值 * * @param key 键 * @return 值 */ public static Object get(String key) { return key == null ? null : valueOperations.get(key); } /** * 将值放入缓存 * * @param key 键 * @param value 值 */ public static void set(String key, String value) { valueOperations.set(key, value); } /** * 将值放入缓存并设置时间 * * @param key 键 * @param value 值 * @param time 时间(秒) -1为无期限 */ public static void set(String key, String value, long time) { valueOperations.set(key, value, time, TimeUnit.SECONDS); } /** * 批量添加 key (重复的键会覆盖) */ public static void batchSet(Map<String, String> keyAndValue) { valueOperations.multiSet(keyAndValue); } /** * 批量添加 key-value 只有在键不存在时,才添加 * map 中只要有一个key存在,则全部不添加 */ public static void batchSetIfAbsent(Map<String, String> keyAndValue) { valueOperations.multiSetIfAbsent(keyAndValue); } /** * 对一个 key-value 的值进行加减操作, * 如果该 key 不存在 将创建一个key 并赋值该 number * 如果 key 存在,但 value 不是长整型 ,将报错 */ public static Long increment(String key, long number) { return valueOperations.increment(key, number); } /** * 对一个 key-value 的值进行加减操作, * 如果该 key 不存在 将创建一个key 并赋值该 number * 如果 key 存在,但 value 不是 纯数字 ,将报错 */ public static Double increment(String key, double number) { return valueOperations.increment(key, number); } //endregion //region set类型 //- - - - - - - - - - - - - - - - - - - - - set类型 - - - - - - - - - - - - - - - - - - - - /** * 将数据放入set缓存 */ public static void sSet(String key, String value) { setOperations.add(key, value); } /** * 获取变量中的值 */ public static Set<String> members(String key) { return setOperations.members(key); } /** * 随机获取变量中指定个数的元素 */ public static void randomMembers(String key, long count) { setOperations.randomMembers(key, count); } /** * 随机获取变量中的元素 */ public static String randomMember(String key) { return setOperations.randomMember(key); } /** * 弹出变量中的元素 */ public static Object pop(String key) { return setOperations.pop(\\\"key\\\"); } /** * 获取变量中值的长度 */ public static long size(String key) { Long size = setOperations.size(key); return null == size ? -1 : size; } /** * 根据value从一个set中查询,是否存在 * * @param key 键 * @param value 值 * @return true 存在 false不存在 */ public static boolean sHasKey(String key, Object value) { return Boolean.TRUE.equals(setOperations.isMember(key, value)); } /** * 检查给定的元素是否在变量中。 */ public static boolean isMember(String key, Object obj) { return Boolean.TRUE.equals(setOperations.isMember(key, obj)); } /** * 转移变量的元素值到目的变量。 */ public static boolean move(String key, String value, String destKey) { return Boolean.TRUE.equals(setOperations.move(key, value, destKey)); } /** * 批量移除set缓存中元素 * * @param key set集合Key * @param values set集合中需要移除的元素值 */ public static void remove(String key, Object... values) { redisTemplate.opsForSet().remove(key, values); } /** * 通过给定的key求2个set变量的差值 * * @param key set集合Key * @param destKey set集合Key * @return Set<String> 两个set集合的差值 */ public static Set<String> difference(String key, String destKey) { return setOperations.difference(key, destKey); } /** * 弹出元素并删除 * * @param key 要弹出的key */ public static String popValue(String key) { return setOperations.pop(key); } //endregion //region hash类型 //- - - - - - - - - - - - - - - - - - - - - hash类型 - - - - - - - - - - - - - - - - - - - - /** * hash 添加一个hash类型的数据进行存储 * <p> * 给一个key设置所有相应的属性 */ public static void hmSet(String key, Map<String, String> map) { hashOperations.putAll(key, map); } /** * hash表设置一个值 * * @param key hash表Key * @param hashKey hash表字段Key * @param value hash表字段Key所对应的值 */ public static void hmSet(String key, String hashKey, String value) { hashOperations.put(key, hashKey, value); } /** * hash 获取某个key下所有的value */ public static List<String> hashValues(String key) { return hashOperations.values(key); } /** * 获取当前key下所有的键值对 * * @param key 要取的key值 * @return 返回所有键值对 */ public static Map<String, String> hashEntries(String key) { return hashOperations.entries(key); } /** * 获取某个 hash key 下指定hashKey的值 * * @param key key * @param hashKeys hashKeys * @return hashKey的value值 */ public static List<String> hashMultiGet(String key, List<String> hashKeys) { return hashOperations.multiGet(key, hashKeys); } /** * 验证指定 key 下 有没有指定的 hash key * * @param key hash表Key * @param hashKey hash表字段key * @return 存在为true, 不存在为false */ public static boolean hashKey(String key, String hashKey) { return redisTemplate.opsForHash().hasKey(key, hashKey); } /** * 获取指定key的值string * * @param key hash表Key * @param hashKey hash表字段key * @return String */ public static String hGet(String key, String hashKey) { return hashOperations.get(key, hashKey); } /** * 删除指定 hash 的 HashKey * * @param key hash表Key * @param hashKeys hash表字段Key(多个) * @return 删除成功的 数量 */ public static Long delete(String key, String... hashKeys) { return hashOperations.delete(key, (Object) hashKeys); } /** * 给指定 hash 的 hash key 做增减操作 * * @param key hash表Key * @param hashKey hash表字段Key,一般称为hashKey * @param number 增减值 * @return Double */ public static Double increment(String key, String hashKey, Double number) { return hashOperations.increment(key, hashKey, number); } /** * 获取 key 下的 所有 hash key 字段 * * @param key hash表Key * @return Set<String> */ public static Set<String> hashKeys(String key) { return hashOperations.keys(key); } /** * 获取指定 hash 下面的 键值对 数量 * * @param key hash表Key */ public static Long hashSize(String key) { return hashOperations.size(key); } //endregion //region list类型 //- - - - - - - - - - - - - - - - - - - - - list类型 - - - - - - - - - - - - - - - - - - - - /** * 在变量左边添加元素值 * * @param key listKey * @param value 元素值 */ public static void leftPush(String key, String value) { listOperations.leftPush(key, value); } /** * 获取集合指定位置的值。 * * @param key listKey * @param index 索引位置 * @return String */ public static String index(String key, long index) { return listOperations.index(key, index); } /** * 获取指定区间的值。 * * @param key listKey * @param start 起始区间 * @param end 结束区间 * @return List<String> */ public static List<String> range(String key, long start, long end) { return redisTemplate.opsForList().range(key, start, end); } /** * 把最后一个参数值放到指定集合的第一个出现中间参数的前面，如果中间参数值存在的话。 * * @param key listKey * @param pivot 某个值,将value放置于第一个该值前 * @param value 元素值 */ public static void leftPush(String key, String pivot, String value) { redisTemplate.opsForList().leftPush(key, pivot, value); } /** * 向左边批量添加参数元素。 * * @param key listKey * @param values 多个元素数组 */ public static void leftPushAll(String key, String... values) { redisTemplate.opsForList().leftPushAll(key, values); } /** * 向集合最右边添加元素。 * * @param key listKey * @param value 元素值 */ public static void rightPush(String key, String value) { listOperations.rightPush(key, value); } /** * 向集合最右边添加元素。 * * @param key listKey * @param value 元素值 * @param expireTime 过期时间 */ public static void rightPush(String key, String value, long expireTime) { listOperations.rightPush(key, value); expire(key, expireTime); } /** * 向左边批量添加参数元素。 * * @param key listKey * @param values 多个元素数组 */ public static void rightPushAll(String key, String... values) { listOperations.rightPushAll(key, values); } /** * 向已存在的集合中添加元素。 * * @param key listKey * @param value 元素值 */ public static void rightPushIfPresent(String key, String value) { listOperations.rightPushIfPresent(key, value); } /** * 向已存在的集合中添加元素。 */ public static long listLength(String key) { Long size = listOperations.size(key); return null == size ? -1 : size; } /** * 移除集合中的左边第一个元素。 * * @param key listKey */ public static void leftPop(String key) { listOperations.leftPop(key); } /** * 移除集合中左边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。 * * @param key redisKey * @param timeout 等待时间 * @param unit 时间类型 */ public static void leftPop(String key, long timeout, TimeUnit unit) { listOperations.leftPop(key, timeout, unit); } /** * 移除集合中右边的元素。 * * @param key 删除listKey中最右侧的元素 */ public static void rightPop(String key) { listOperations.rightPop(key); } /** * 移除集合中右边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。 * * @param key redisKey * @param timeout 等待时间 * @param unit 时间类型 */ public static void rightPop(String key, long timeout, TimeUnit unit) { listOperations.rightPop(key, timeout, unit); } //endregion }\"]},\"364\":{\"c\":[\"后端开发\",\"redis\"]},\"365\":{\"c\":[\"java\"]},\"366\":{\"h\":\"Eureka(服务注册与发现)\",\"t\":[\"简介\",\"Eureka 来源于古希腊词汇,意为\\\"发现了\\\"。 在软件领域,Eureka是Netflix在线影⽚公司开源的⼀个服务注册和发现组件,和其他的Netflix公司的服务组件(例如负载均衡,熔断器,⽹关等)⼀起,被Spring Cloud社区整合为Spring Cloud Netflix模块。 和Zookeeper类似,Eureka是⼀个⽤于服务注册和发现的组件,最开始主要应⽤与亚⻢逊公司的云计算服务平台AWS,Eureka分为Eureka Server和Eureka Client,Eureka Server为Eureka服务注册中⼼,Eureka Client为Eureka客户端。 Eureka主要涉及到三⼤⻆⾊ 服务提供者、服务消费者、注册中⼼. 服务注册是指各个微服务在启动时,将⾃⼰的⽹络地址等信息注册到Eureka,服务提供者将⾃⼰的服务信息,如服务名、IP等告知服务注册中⼼。 服务发现是指当⼀个服务消费者需要调⽤另外⼀个服务时,服务消费者从Eureka查询服务提供者的地址,并通过该地址调⽤服务提供者的接⼝。⼀个服务既可以是服务消费者,也可以是服务发现者。 各个微服务与注册中⼼使⽤⼀定机制(例如⼼跳)通信。如果Eureka与某微服务⻓时间⽆法通信,Eureka会将该服务实例从服务注册中⼼中剔除,如果剔除掉这个服务实例过了⼀段时间,此服务恢复⼼跳,那么服务注册中⼼将该实例重新纳⼊到服务列表中. Eureka2.x已经停更,解决⽅案推荐使⽤Nacos作为替换⽅案\"]},\"367\":{\"h\":\"eureka 集群示例\",\"t\":[\"注意\",\"在yaml单⼀配置⽂件中,可⽤连续三个连字号(---)区分多个⽂件。\",\"Spring Boot2.4.x使⽤spring.config.activate.on-profile代替原来的spring.profiles 因为本地搭建Eureka Server集群,所以需要修改本地的host⽂件\",\"修改本地 host 文件\",\"127.0.0.1 peer1 127.0.0.1 peer2 127.0.0.1 peer3\",\"在 eureka 服务的 application.yml 中配置如下\",\"server: port: 9004 spring: application: name: eureka-server eureka: client: service-url: defaultZone: http://peer1:9003/eureka,http://peer2:9004/eureka,http://peer3:9005/eureka register-with-eureka: false fetch-registry: false instance: lease-renewal-interval-in-seconds: 30 lease-expiration-duration-in-seconds: 90 server: enable-self-preservation: false eviction-interval-timer-in-ms: 1000 --- spring: config: activate: on-profile: peer1 server: port: 9003 eureka: instance: hostname: peer1 client: service-url: defaultZone: http://peer2:9004/eureka/,http://peer3:9005/eureka/ --- spring: config: activate: on-profile: peer2 server: port: 9004 eureka: instance: hostname: peer2 client: service-url: defaultZone: http://peer1:9003/eureka/,http://peer3:9005/eureka/ --- spring: config: activate: on-profile: peer3 server: port: 9005 eureka: instance: hostname: peer3 client: service-url: defaultZone: http://peer1:9003/eureka/,http://peer2:9004/eureka/\"]},\"368\":{\"h\":\"eureka 使用\",\"t\":[\"在 idea 新建此 module 时使用 spring lnitializr方式创建\",\"在 spring boot 的启动器添加当前服务是 eureka 服务的注解\",\"import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer; /** * @author blackFire * @EnableEurekaServer 这个注解表示当前服务为 eureka 的服务 */ @SpringBootApplication @EnableEurekaServer public class EurekaApplication { public static void main(String[] args) { SpringApplication.run(EurekaApplication.class, args); } }\",\"修改配置文件 application.yml\",\"server: # 端口号 port: 9004 spring: application: # 服务运行是的服务名 name: eureka-server eureka: client: service-url: # 提供服务的地址 defaultZone: http://127.0.0.1:9004/eureka register-with-eureka: false fetch-registry: false server: # 关闭 eureka ⾃我保护模式(缺省为打开) enable-self-preservation: false # 扫描失效服务的间隔时间(缺省为60*1000ms) eviction-interval-timer-in-ms: 1000\"]},\"369\":{\"h\":\"eureka 注册服务\",\"t\":[\"当其他服务想要向 eureka 服务进行注册时需要以下配置\",\"pom.xml 中导入 eureka 的依赖\",\"<properties> <java.version>1.8</java.version> <spring-cloud.version>2020.0.3</spring-cloud.version> </properties> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring-cloud.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement>\",\"在当前服务的 application.yml 文件中添加一下内容\",\"eureka: client: service-url: defaultZone: http://127.0.0.1:9004/eureka/ # 可以不写 默认为 true fetch-registry: true # 可以不写 默认为 true register-with-eureka: true\",\"并且需要在当前服务的启动器上添加注解,示例如下\",\"@SpringBootApplication @EnableDiscoveryClient public class application { public static void main(String[] args) { SpringApplication.run(application.class, args); } }\"]},\"370\":{\"c\":[\"后端开发\",\"spring系列\"]},\"371\":{\"c\":[\"java\"]},\"372\":{\"h\":\"Spirng Cloud OpenFeign\",\"t\":[\"简介\",\"Feign是⼀个声明式的HTTP客户端组件,它旨在是编写Http客户端变得更加容易。 OpenFeign添加了对于Spring MVC注解的⽀持,同时集成了Spring Cloud LoadBalancer和Spring CloudCircuitBreaker,在使⽤Feign时提供负载均衡和熔断降级的功能。\",\"使用 OpenFeign 需要导入依赖\",\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency>\",\"开启 openFeign 需要在 springboot 启动器上添加 @EnableFeignClients 注解示例如下\",\"@SpringBootApplication // eureka 注册注解 @EnableDiscoveryClient // openfeign 开启注解 @EnableFeignClients public class OrderApplication { public static void main(String[] args) { SpringApplication.run(OrderApplication.class, args); } @Bean @LoadBalanced public RestTemplate restTemplate(){ return new RestTemplate(); } }\"]},\"373\":{\"h\":\"OpenFeign 使用示例\",\"t\":[\"向外提供的服务的 feign 客户端\",\"/** * \\\"cloud-payment-service\\\"是服务名 * 使⽤这个名字来从Eureka服务列表中得到相应的服务,来创建LoadBalancer客户端,也可以使⽤url属性指定服务的URL。 */ @FeignClient(value = \\\"cloud-payment-service\\\") public interface PaymentClient { @GetMapping(\\\"/payment/{id}\\\") public Payment payment(@PathVariable(\\\"id\\\") Integer id); }\",\"使用上面的 feign 的客户端\",\"@Autowired private PaymentClient paymentClient; @GetMapping(\\\"/feign/payment/{id}\\\") public ResponseEntity<Payment> getPaymentByFeign(@PathVariable(\\\"id\\\") Integer id) { Payment payment = paymentClient.payment(id); return ResponseEntity.ok(payment); }\"]},\"374\":{\"h\":\"feign 超时配置\",\"t\":[\"OpenFeign提供了2个超时参数\",\"connectTimeout防⽌由于服务器处理时间⻓⽽阻塞调⽤者。\",\"readTimeout 从连接建⽴时开始应⽤,在返回响应时间过⻓时触发。 对所有 feignClient 进行配置时\",\"feign: client: config: default: # 防止由于服务器处理时间长而阻塞调用者 connectTimeout: 5000 # 从连接建立时开始应用,在返回响应时间过长时触发 readTimeout: 5000\",\"如果只对于具体FeignClient配置,可以把default换成具体的FeignClient的名字\",\"feign: client: config: feignName: connectTimeout: 5000 readTimeout: 5000\"]},\"375\":{\"h\":\"feign 继承熔断器\",\"t\":[\"导入 Spring Cloud CircuitBreaker熔断器依赖\",\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId> </dependency>\",\"开启熔断配置需要在 application.yml 中添加以下内容\",\"feign: circuitbreaker: enabled: true\"]},\"376\":{\"h\":\"熔断降级示例\",\"t\":[\"Feign熔断降级类 Spring Cloud CircuitBreaker⽀持降级概念,当熔断器打开,或者调⽤是出现错误,则执⾏降级⽅法。\",\"// @FeignClient的fallback属性指定讲解的类 // 注意服务降级类需要在spring容器中注册 @FeignClient(value = \\\"cloud-payment-service\\\",fallback = PaymentClient.MyFallback.class) public interface PaymentClient { @GetMapping(\\\"/payment/{id}\\\") public Payment payment(@PathVariable(\\\"id\\\") Integer id); @Component static class MyFallback implements PaymentClient{ @Override public Payment payment(Integer id) { Payment payment = new Payment(id , \\\"熔断降级返回的结果\\\"); return payment; } } }\",\"如果想要获得熔断降级的异常信息,⽐如打印异常⽇志,则可以使⽤fallbackFactory属性指定.\",\"//@FeignClient(value = \\\"cloud-payment-service\\\",fallback = PaymentClient.MyFallback.class) @FeignClient(value = \\\"cloud-payment-service\\\",fallbackFactory = PaymentClient.MyFallbackFactory.class) public interface PaymentClient { @GetMapping(\\\"/payment/{id}\\\") public Payment payment(@PathVariable(\\\"id\\\") Integer id); @Component static class MyFallback implements PaymentClient{ @Override public Payment payment(Integer id) { Payment payment = new Payment(id , \\\"熔断降级返回的结果\\\"); return payment; } } @Component static class MyFallbackFactory implements FallbackFactory<MyFallback>{ @Override public MyFallback create(Throwable cause) { cause.printStackTrace(); return new MyFallback(); } } }\"]},\"377\":{\"h\":\"feign 请求与相应压缩\",\"t\":[\"feign: compression: request: # 请求压缩 enabled: true # 压缩的类型 mime-types: text/xml,application/xml,application/json # 请求最小压缩的阈值 min-request-size: 2048 response: # 响应压缩 enabled: true # 使用gzip解码器解码响应数据 useGzipDecoder: true\"]},\"378\":{\"h\":\"feign 日志\",\"t\":[\"在 application.yml 中配置 feign 日志\",\"logging: level: com.blackFire: debug\",\"配置FeignLoggerLevel 在配置类中配置Logger.Level\",\"告诉配置类Feign需要打印的内容,具体代码如下\",\"import feign.Logger; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class FooConfiguration { /** * Logger.Level取值 * NONE: ⽆⽇志记录(默认)。 * BASIC: 只记录请求⽅法和 URL 以及响应状态码和执⾏时间。 * HEADERS: 记录基本信息以及请求和响应标头。 * FULL: 记录请求和响应的标头、正⽂和元数据 */ @Bean Logger.Level feignLoggerLevel(){ return Logger.Level.FULL; } }\"]},\"379\":{\"c\":[\"后端开发\",\"spring系列\"]},\"380\":{\"c\":[\"java\"]},\"381\":{\"h\":\"Resilience4j\",\"t\":[\"简介\",\"Netflix的Hystrix微服务容错库已经停⽌更新,官⽅推荐使⽤Resilience4j代替Hystrix,或者使⽤Spring Cloud Alibaba的Sentinel组件。 Resilience4j是受到Netflix Hystrix的启发,为Java8和函数式编程所设计的轻量级容错框架。整个框架只是使⽤了Varr的库,不需要引⼊其他的外部依赖。与此相⽐,Netflix Hystrix对Archaius具有编译依赖,⽽Archaius需要更多的外部依赖,例如Guava和Apache Commons Configuration。 Resilience4j提供了提供了⼀组⾼阶函数(装饰器),包括断路器,限流器,重试机制,隔离机制。 你可以使⽤其中的⼀个或多个装饰器对函数式接⼝,lambda表达式或⽅法引⽤进⾏装饰。 这么做的优点是你可以选择所需要的装饰器进⾏装饰。 在使⽤Resilience4j的过程中,不需要引⼊所有的依赖,只引⼊需要的依赖即可。\",\"核心模块\",\"esilience4j-circuitbreaker: 熔断 resilience4j-ratelimiter: 限流 resilience4j-bulkhead: 隔离 resilience4j-retry: ⾃动重试 resilience4j-cache: 结果缓存 resilience4j-timelimiter: 超时处理\",\"Resilience4j和Hystrix的异同\",\"Hystrix使⽤HystrixCommand来调⽤外部的系统,⽽R4j提供了⼀些⾼阶函数,例如断路器、限流器、隔离机制等,这些函数作为装饰器对函数式接⼝、lambda表达式、函数引⽤进⾏装饰。 此外,R4j库还提供了失败重试和缓存调⽤结果的装饰器。 你可以在函数式接⼝、lambda表达式、函数引⽤上叠加地使⽤⼀个或多个装饰器,这意味着隔离机制、限流器、重试机制等能够进⾏组合使⽤。这么做的优点在于,你可以根据需要选择特定的装饰器。 任何被装饰的⽅法都可以同步或异步执⾏,异步执⾏可以采⽤ CompletableFuture 或RxJava。 当有很多超过规定响应时间的请求时,在远程系统没有响应和引发异常之前,断路器将会开启。 当Hystrix处于半开状态时,Hystrix根据只执⾏⼀次请求的结果来决定是否关闭断路器。⽽R4j允许执⾏可配置次数的请求,将请求的结果和配置的阈值进⾏⽐较来决定是否关闭断路器。 R4j提供了⾃定义的Reactor和Rx Java操作符对断路器、隔离机制、限流器中任何的反应式类型进⾏装饰。 Hystrix和R4j都发出⼀个事件流,系统可以对发出的事件进⾏监听,得到相关的执⾏结果和延迟的时间统计数据都是⼗分有⽤的。\"]},\"382\":{\"h\":\"断路器(CircuitBreaker)\",\"t\":[\"简介\",\"断路器通过有限状态机实现 有三个普通状态 关闭(CLOSED) 开启(OPEN) 半开(HALF_OPEN) 还有两个特殊状态 禁⽤(DISABLED) 强制开启(FORCED_OPEN) 当熔断器关闭时,所有的请求都会通过熔断器。 如果失败率超过设定的阈值,熔断器就会从关闭状态转换到打开状态,这时所有的请求都会被拒绝。 当经过⼀段时间后,熔断器会从打开状态转换到半开状态,这时仅有⼀定数量的请求会被放⼊,并重新计算失败率,如果失败率超过阈值,则变为打开状态,如果失败率低于阈值,则变为关闭状态。 断路器使⽤滑动窗⼝来存储和统计调⽤的结果。 你可以选择基于调⽤数量的滑动窗⼝或者基于时间的滑动窗⼝。 基于访问数量的滑动窗⼝统计了最近N次调⽤的返回结果。 居于时间的滑动窗⼝统计了最近N秒的调⽤返回结果。 除此以外熔断器还会有两种特殊状态 DISABLED(始终允许访问) FORCED_OPEN(始终拒绝访问) 这两个状态不会⽣成熔断器事件(除状态装换外),并且不会记录事件的成功或者失败。 退出这两个状态的唯⼀⽅法是触发状态转换或者重置熔断器\",\"pom导入依赖\",\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId> </dependency>\",\"CircuitBreaker配置\",\"配置属性\",\"默认值\",\"描述\",\"failureRateThreshold\",\"50\",\"以百分比配置失败率阈值。当失败率等于或大于阈值时,断路器状态并关闭变为开启,并进行服务降级。\",\"slowCallRateThreshold\",\"100\",\"以百分比的方式配置,断路器把调用时间用于slowCallDurationThreshold的调用视为慢调用,当慢调用比例大于等于阈值时,断路器开启,并进行服务降级\",\"slowCallDurationThreshold 60000\",\"[ms]\",\"配置调用时间的阈值,用于该阈值的呼叫视为慢调用,并增加慢调用比例。\",\"permittedNumberOfCallsInHalfOpenState\",\"10\",\"断路器在半开状态下允许通过的调用次数\",\"maxWaitDurationInHalfOpenState\",\"0\",\"断路器在半开状态下的最长等待时间,超过该配置值的话,断路器会从半开状态恢复为开启状态。配置是0时表示断路器会一直处于半开状态,直到所有允许通过的访问结束。\",\"slidingWindowType\",\"COUNT_BASED\",\"配置滑动窗口的类型,当断路器关闭时,将调用的结果记录在滑动窗口中。滑动窗口的类型可以是count-based或time\\u0002based。如果滑动窗口类型是COUNT_BASED,将会统计记录最近slidingWindowSize次调用的结果。如果是TIME_BASED,将会统计记录最近slidingWindowSize秒的调用结果。\",\"slidingWindowSize\",\"100\",\"配置滑动窗口的大小。\",\"minimumNumberOfCalls\",\"100\",\"断路器计算失败率或慢调用率之前所需的最小调用数(每个滑动窗口周期)。例如,如果minimumNumberOfCalls为10,则必须至少记录10个调用,然后才能计算失败率。如果只记录了9次调用,即使所有9次调用都失败,断路器也不会开启。\",\"waitDurationInOpenState 60000\",\"[ms]\",\"断路器从开启过渡到半开应等待的时间。\",\"automaticTransitionFromOpenToHalfOpenEnabled\",\"false\",\"如果设置为true,则意味着断路器将自动从开启状态过渡到半开状态,并且不需要调用来触发转换。创建一个线程来监视断路器的所有实例,以便在WaitDurationInOpenstate之后将它们转换为半开状态。但是,如果设置为false,则只有在发出调用时才会转换到半开,即使在waitDurationInOpenState之后也是如此。这里的优点是没有线程监视所有断路器的状态。\",\"recordExceptions\",\"empty\",\"记录为失败并因此增加失败率的异常列表。除非通过ignoreExceptions显式忽略,否则与列表中某个匹配或继承的异常都将被视为失败。如果指定异常列表,则所有其他异常均视为成功,除非它们被ignoreExceptions显式忽略。\",\"ignoreExceptions\",\"empty\",\"被忽略且既不算失败也不算成功的异常列表。任何与列表之一匹配或继承的异常都不会被视为失败或成功,即使异常是recordExceptions的一部分\",\"recordException\",\"[throwable -> true· ,By default all ,exceptions are recored as failures ]\",\"一个自定义断言,用于评估异常是否应记录为失败。如果异常应计为失败,则断言必须返回true。如果出断言返回false,应算作成功,除非ignoreExceptions显式忽略异常。\",\"ignoreException\",\"[ throwable -> false , By default no ,exception is ignored]\",\"使用断路器需要在 application.yml 中配置\",\"# 熔断降级配置 resilience4j: # 熔断降级的配置 circuitbreaker: configs: default: # 这里是按数据进行熔断降级 failureRateThreshold: 30 #失败请求百分⽐,超过这个⽐例,CircuitBreaker变为OPEN状态 slidingWindowSize: 10 #滑动窗⼝的⼤⼩,配置COUNT_BASED,表示10个请求,配置 TIME_BASED表示10秒 minimumNumberOfCalls: 5 #最⼩请求个数,只有在滑动窗⼝内,请求个数达到这个个 数,才会触发CircuitBreader对于断路器的判断 slidingWindowType: TIME_BASED #滑动窗⼝的类型 permittedNumberOfCallsInHalfOpenState: 3 #当CircuitBreaker处于HALF_OPEN状态的时候,允许通过的请求个数 automaticTransitionFromOpenToHalfOpenEnabled: true #设置true,表示⾃动从 OPEN变成HALF_OPEN,即使没有请求过来 waitDurationInOpenState: 2s #从OPEN到HALF_OPEN状态需要等待的时间 recordExceptions: #异常名单 - java.lang.Exception instances: backendA: baseConfig: default #熔断器backendA,继承默认配置default backendB: # 这里是按时间顺序的熔断降级 failureRateThreshold: 50 slowCallDurationThreshold: 2s #慢调⽤时间阈值,⾼于这个阈值的呼叫视为慢调⽤, 并增加慢调⽤⽐例。 slowCallRateThreshold: 30 #慢调⽤百分⽐阈值,断路器把调⽤时间⼤于 slowCallDurationThreshold,视为慢调⽤,当慢调⽤⽐例⼤于阈值,断路器打开,并进⾏服务降级 slidingWindowSize: 10 slidingWindowType: TIME_BASED minimumNumberOfCalls: 2 permittedNumberOfCallsInHalfOpenState: 2 waitDurationInOpenState: 2s #从OPEN到HALF_OPEN状态需要等待的时间\",\"上⾯配置了2个断路器\\\"backendA\\\",和\\\"backendB\\\",其中backendA断路器配置基于default配置,\\\"backendB\\\"断路器配置了慢调⽤⽐例熔断,\\\"backendA\\\"熔断器配置了异常⽐例熔断. 代码使用\",\"@GetMapping(\\\"/payment/{id}\\\") @CircuitBreaker(name = \\\"backendD\\\", fallbackMethod = \\\"fallback\\\") public ResponseEntity<Payment> getPaymentById(@PathVariable(\\\"id\\\") Integer id) throws InterruptedException, ExecutionException { log.info(\\\"now i enter the method!!!\\\"); Thread.sleep(10000L); //阻塞10秒,已测试慢调⽤⽐例熔断 String url = \\\"http://cloud-payment-service/payment/\\\" + id; Payment payment = restTemplate.getForObject(url, Payment.class); log.info(\\\"now i exist the method!!!\\\"); return ResponseEntity.ok(payment); } public ResponseEntity<Payment> fallback(Integer id, Throwable e) { e.printStackTrace(); Payment payment = new Payment(); payment.setId(id); payment.setMessage(\\\"fallback...\\\"); return new ResponseEntity<>(payment, HttpStatus.BAD_REQUEST); }\"]},\"383\":{\"h\":\"隔离(Builkhead)\",\"t\":[\"Resilience4j提供了两种隔离的实现⽅式,可以限制并发执⾏的数量。\",\"SemaphoreBulkhead使⽤了信号量\",\"FixedThreadPoolBulkhead使⽤了有界队列和固定⼤⼩线程池\",\"pom添加依赖\",\"<dependency> <groupId>io.github.resilience4j</groupId> <artifactId>resilience4j-bulkhead</artifactId> <version>1.7.0</version> </dependency>\"]},\"384\":{\"h\":\"信号量隔离\",\"t\":[\"配置数据如图\",\"信号量隔离配置\",\"application.yml 中的配置\",\"resilience4j: bulkhead: configs: default: maxConcurrentCalls: 5 # 隔离允许并发线程执⾏的最⼤数量 maxWaitDuration: 20ms # 当达到并发调⽤数量时,新的线程的阻塞时间 instances: backendA: baseConfig: default backendB: maxWaitDuration: 10ms maxConcurrentCalls: 20\",\"使用示例图\",\"// type默认为Bulkhead.Type.SEMAPHORE,表示信号量隔离 @GetMapping(\\\"/payment/{id}\\\") @Bulkhead(name = \\\"backendA\\\", fallbackMethod = \\\"fallback\\\", type = Bulkhead.Type.SEMAPHORE) public ResponseEntity<Payment> getPaymentById(@PathVariable(\\\"id\\\") Integer id) throws InterruptedException, ExecutionException { log.info(\\\"now i enter the method!!!\\\"); Thread.sleep(10000L); //阻塞10秒,已测试慢调⽤⽐例熔断 String url = \\\"http://cloud-payment-service/payment/\\\" + id; Payment payment = restTemplate.getForObject(url, Payment.class); log.info(\\\"now i exist the method!!!\\\"); return ResponseEntity.ok(payment); }\"]},\"385\":{\"h\":\"线程池隔离\",\"t\":[\"配置如图 \",\"修改 application.yml\",\"resilience4j: thread-pool-bulkhead: configs: default: maxThreadPoolSize: 4 # 最⼤线程池⼤⼩ coreThreadPoolSize: 2 # 核⼼线程池⼤⼩ queueCapacity: 2 # 队列容量 instances: backendA: baseConfig: default backendB: maxThreadPoolSize: 1 coreThreadPoolSize: 1 queueCapacity: 1\",\"使用示例\",\"@Service @Slf4j public class OrderService { // 注意,FixedThreadPoolBulkhead只对CompletableFuture⽅法有效,所以我们必创建返回CompletableFuture类型的⽅法 @Bulkhead(name = \\\"backendA\\\", type = Bulkhead.Type.THREADPOOL) public CompletableFuture<Payment> getPaymet() throws InterruptedException{ log.info(\\\"now i enter the method!!!\\\"); Thread.sleep(10000L); log.info(\\\"now i exist the method!!!\\\"); return CompletableFuture.supplyAsync(() -> new Payment(123, \\\"线程池隔离回退。。。\\\")); } }\",\"@Autowired private OrderService orderService; @GetMapping(\\\"/payment/{id}\\\") public ResponseEntity<Payment> getPaymentById(@PathVariable(\\\"id\\\") Integer id) throws InterruptedException, ExecutionException { return ResponseEntity.ok(orderService.getPaymet().get()); }\"]},\"386\":{\"h\":\"限流(RateLimiter)\",\"t\":[\"导入依赖\",\"<dependency> <groupId>io.github.resilience4j</groupId> <artifactId>resilience4j-ratelimiter</artifactId> <version>1.7.0</version> </dependency>\",\"配置如图 R4的限流模块RateLimter基于滑动窗⼝,和令牌桶限流算法\",\" 修改 application.yml\",\"resilience4j: ratelimiter: configs: default: timeoutDuration: 5 # 线程等待权限的默认等待时间 limitRefreshPeriod: 1s # 限流器每隔1s刷新⼀次,将允许处理的最⼤请求重置为2 limitForPeriod: 2 #在⼀个刷新周期内,允许执⾏的最⼤请求数 instances: backendA: baseConfig: default backendB: timeoutDuration: 5 limitRefreshPeriod: 1s limitForPeriod: 5\",\"使用示例\",\"@GetMapping(\\\"/payment/{id}\\\") @RateLimiter(name = \\\"backendA\\\", fallbackMethod = \\\"fallback\\\") public ResponseEntity<Payment> getPaymentById(@PathVariable(\\\"id\\\") Integer id) throws InterruptedException, ExecutionException { log.info(\\\"now i enter the method!!!\\\"); Thread.sleep(10000L); //阻塞10秒,已测试慢调⽤⽐例熔断 String url = \\\"http://cloud-payment-service/payment/\\\" + id; Payment payment = restTemplate.getForObject(url, Payment.class); log.info(\\\"now i exist the method!!!\\\"); return ResponseEntity.ok(payment); }\"]},\"387\":{\"c\":[\"后端开发\",\"spring系列\"]},\"388\":{\"c\":[\"java\"]},\"389\":{\"h\":\"RestTemplate(服务调用)\",\"t\":[\"简介\",\"RestTemplate是Spring Resources中⼀个访问第三⽅RESTful API接⼝的⽹络请求框架。 RestTemplate的设计原则和其他的Spring Template(例如JdbcTemplate)类似,都是为了执⾏复杂任务提供了⼀个具有默认⾏为的简单⽅法。 RestTemplate是⽤来消费REST服务的,所以RestTemplate的主要⽅法都与REST的HTTP协议的⼀些⽅法紧密相连,例如HEAD、GET、POST、PUT、DELETE、OPTIONS等⽅法,这些⽅法在RestTemplate类对应的⽅法为headForHeaders(),getForObject()、postForObject()、put()、delet()等。\",\"调用示例\",\"@RestController @RequestMapping(\\\"/order\\\") public class OrderController { @Autowired private RestTemplate restTemplate; @Autowired private DiscoveryClient discoveryClient; // 当拦截到 /order/payment/1 这种请求时进行处理 @GetMapping(\\\"/payment/{id}\\\") public ResponseEntity<Payment> getPaymentById(@PathVariable(\\\"id\\\") Integer id) { // 从 eureka 获取 payment 的服务 List<ServiceInstance> serviceInstances = discoveryClient.getInstances(\\\"cloud-payment-service\\\"); ServiceInstance serviceInstance = serviceInstances.get(0); // 从 eureka 中获取该服务的 ip和端口号拼接称请求的 url String url = \\\"http://\\\" + serviceInstance.getHost() + \\\":\\\" + serviceInstance.getPort() + \\\"/payment/\\\" + id; // 使用 restTemplate 请求该地址并转换为 Payment.class 类型 Payment payment = restTemplate.getForObject(url, Payment.class); // 成功后返回上面的 payment 对象 return ResponseEntity.ok(payment); } }\"]},\"390\":{\"h\":\"LoadBalancer(负载均衡)\",\"t\":[\"简介\",\"负载均衡是指将负载分摊到多个执⾏单元上,常⻅的负载均衡有两种⽅式。 ⼀种独⽴进程单元,通过负载均衡策略,将请求转发到不同的执⾏单元上,例如Nginx。 另⼀种是将负载均衡逻辑以代码的形式封装到服务消费者的客户端上,服务消费者客户端维护了⼀份服务提供者的信息列表,有了信息表,通过负载均衡策略将请求分摊给多个服务提供者,从⽽达到负载均衡的⽬的。 SpringCloud原有的客户端负载均衡⽅案Ribbon已经被废弃,取⽽代之的是SpringCloud LoadBalancer,LoadBalancer是Spring Cloud Commons的⼀个⼦项⽬,他属于上述的第⼆种⽅式,是将负载均衡逻辑封装到客户端中,并且运⾏在客户端的进程⾥。 在Spring Cloud构件微服务系统中,LoadBalancer作为服务消费者的负载均衡器,有两种使⽤⽅式,⼀种是和RestTemplate相结合,另⼀种是和Feign相结合,Feign已经默认集成了LoadBalancer。\"]},\"391\":{\"h\":\"LoadBalancer整合RestTemplate\",\"t\":[\"修改 application.yml 配置文件\",\"server: # 以下写法的意思是 # port参数存在使⽤port参数,不存在使⽤默认9001端⼝ # 启动⽀付服务时,可以通过指定-Dport=9000,指定服务使⽤不同端⼝启动。 port: ${port:9001}\",\"为产生 RestTemplate 的服务在 springboot 启动器中添加以下 bean 示例如下\",\"@SpringBootApplication public class application { public static void main(String[] args) { SpringApplication.run(application.class, args); } @Bean @LoadBalanced public RestTemplate restTemplate(){ return new RestTemplate(); } }\"]},\"392\":{\"h\":\"演示负载均衡使用\",\"t\":[\"要被调用的服务\",\"import com.jsj.pojo.Payment; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\\\"payment\\\") public class PaymentController { @Value(\\\"${server.port}\\\") private String serverPort; @GetMapping(\\\"{id}\\\") public ResponseEntity<Payment> payment(@PathVariable(\\\"id\\\") Integer id){ Payment payment = new Payment(id,\\\"支付成功, 服务端口\\\"+ serverPort); return ResponseEntity.ok(payment); } }\",\"负载均衡的服务调用上面的服务\",\"@GetMapping(\\\"/payment/{id}\\\") public ResponseEntity<Payment> getPaymentById(@PathVariable(\\\"id\\\") Integer id) { String url = \\\"http://cloud-payment-service/payment/\\\" + id; Payment payment = restTemplate.getForObject(url, Payment.class); return ResponseEntity.ok(payment); }\"]},\"393\":{\"h\":\"LoadBlancerClient\",\"t\":[\"简介\",\"负载均衡的核⼼类为LoadBalancerClient,LoadBalancerClient可以获取负载均衡的服务提供者实例信息。\",\"示例\",\"@Autowired private LoadBalancerClient loadBalancerClient; @GetMapping(\\\"/test-load-balancer\\\") public String testLoadBalancer() { ServiceInstance instance = loadBalancerClient.choose(\\\"cloud-payment-service\\\"); return instance.getHost() + \\\":\\\" + instance.getPort(); }\"]},\"394\":{\"c\":[\"后端开发\",\"spring系列\"]},\"395\":{\"c\":[\"java\"]},\"396\":{\"h\":\"Spring Cloud Sleuth (链路追踪)\",\"t\":[\"基本术语\",\"Spring Cloud Sleuth采⽤的是Google的开源项⽬Dapper的专业术语. Span 基本⼯作单元,发送⼀个远程调度任务 就会产⽣⼀个Span,Span有⼀个64位ID唯⼀标识的,Trace是⽤另⼀个64位ID唯⼀标识的,Span还有其他数据信息,⽐如摘要、时间戳事件、Span的ID、以及进度ID。 Trace ⼀系列Span组成的⼀个树状结构。请求⼀个微服务系统的API接⼝,这个API接⼝,需要调⽤多个微服务,调⽤每个微服务都会产⽣⼀个新的Span,所有由这个请求产⽣的Span组成了这个Trace。 Annotation ⽤来及时记录⼀个事件的,⼀些核⼼注解⽤来定义⼀个请求的开始和结束 。这些注解包括以下： cs - Client Sent -客户端发送⼀个请求,这个注解描述了这个Span的开始 sr - Server Received -服务端获得请求并准备开始处理它,如果将其sr减去cs时间戳便可得到⽹络传输的时间。 ss - Server Sent (服务端发送响应)–该注解表明请求处理的完成(当请求返回客户端),如果ss的时间戳减去sr时间戳,就可以得到服务器请求的时间。 r - Client Received (客户端接收响应)-此时Span的结束,如果cr的时间戳减去cs时间戳便可以得到整个请求所消耗的时间\",\"链路追踪术语\"]},\"397\":{\"h\":\"案例\"},\"398\":{\"h\":\"Zipkin-Server\",\"t\":[\"下载 Zipkin-Server 地址: https://archiva-maven-storage-prod.oss-cn-beijing.aliyuncs.com/repository/central/io/zipkin/zipkin-server/2.23.2/zipkin-server-2.23.2-exec.jar\",\"启动Zipkin-Server java -jar zipkin-server-2.23.2-exec.jar\"]},\"399\":{\"h\":\"Zipkin-Client\",\"t\":[\"添加依赖\",\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-sleuth-zipkin</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-sleuth</artifactId> </dependency>\",\"application.yml中添加以下内容\",\"spring: application: name: cloud-payment-service zipkin: base-url: http://192.168.220.12:9411 sender: type: web sleuth: sampler: probability: 1 # spring.zipkin.base-url：指定Zipkin的服务端,⽤于发送链路报告 # spirng.zipkin.sender.type：web表示使⽤http发送数据 # spring.sleuth.sampler.probability：采样率,值为[0,1]之间,这⾥表示100%采样报告\"]},\"400\":{\"h\":\"使⽤RabbitMQ传输链路数据\",\"t\":[\"在 docker 中安装 RabbitMQ\",\"docker pull rabbitmq:management docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management\",\"Zipkin-Server 启动Zipkin-Server时,指定从RabbitMQ获得链路消息数据。命令如下\",\"RABBIT_ADDRESSES=localhost java -jar zipkin-server-2.23.2-exec.jar #或者下⾯命令 java -jar zipkin-server-2.23.2-exec.jar --zipkin.collector.rabbitmq.addresses=localhost # 注意这⾥使⽤localhost,故此需要把 zipkin-server-2.23.2-exec.jar 上传到docker所在的虚拟机。\",\"Zipkin-Client中添加依赖\",\"<dependency> <groupId>org.springframework.amqp</groupId> <artifactId>spring-rabbit</artifactId> </dependency>\",\"修改application.yml 配置,将链路数据发送给RabbitMQ\",\"spring: zipkin: rabbitmq: addresses: 192.168.220.12:5672 # base-url: http://192.168.220.12:9411 sender: type: rabbit sleuth: sampler: probability: 1 # 因为发送链路数据的⽅式type=rabbit,故此需要配置spring.zipkin.rabbitmq,同时base-url就不需要了\"]},\"401\":{\"h\":\"使⽤ElasticSearch存储链路数据\",\"t\":[\"Zipkin Server将链路数据存储在内存中,⼀旦程序重启,之前的链路数据全部丢失。\",\"那么怎么将链路数据存储起来呢？\",\"Zipkin⽀持将链路数据存储在MySql、Elasticsearch,和Cassandra数据库中. \",\"安装Elasticsearch和Kibana 使⽤docker安装Elasticsearch和Kibana。命令如下\",\"docker pull elasticsearch:7.13.4 # 创建⾃定义的⽹络(⽤于连接到连接到同⼀⽹络的其他服务(例如Kibana)) docker network create somenetwork #运⾏Elasticsearch docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e \\\"discovery.type=single-node\\\" elasticsearch:7.13.4 docker pull kibana:7.3.4 # 运⾏ Kibana docker run -d --name kibana --net somenetwork -p 5601:5601 kibana:7.13.4\",\"Zipkin-Server 启动Zipkin Server时,指定使⽤ES存储数据,命令如下\",\"RABBIT_ADDRESSES=localhost STORAGE_TYPE=elasticsearch ES_HOSTS=http://localhost:9200 java -jar zipkin-server-2.23.2-exec.jar #或者 java -jar zipkin-server-2.23.2-exec.jar -- zipkin.collector.rabbitmq.addresses=localhost --STORAGE_TYPE=elasticsearch --ES_HOSTS=http://localhost:9200\"]},\"402\":{\"c\":[\"后端开发\",\"spring系列\"]},\"403\":{\"c\":[\"java\"]},\"404\":{\"h\":\"Spring Cloud Config\",\"t\":[\"简介\",\"在Spring Boot项⽬中,默认会提供⼀个application.properties或者 application.yml⽂件,我们可以把⼀些全局性的配置或者需要动态维护的配置写⼊改⽂件,不如数据库连接,功能开关,限流阈值,服务地址等。为了解决不同环境下服务连接配置等信息的差异,Spring Boot还提供了基于spring.profiles.active={profile}的机制来实现不同的环境的切换。 随着单体架构向微服务架构的演进,各个应⽤⾃⼰独⽴维护本地配置⽂件的⽅式开始显露出它的不⾜之处,主要有下⾯⼏点: 配置的动态更新 在实际应⽤会有动态更新位置的需求,⽐如修改服务连接地址、限流配置等。在传统模式下,需要⼿动修改配置⽂件并且重启应⽤才能⽣效,这种⽅式效率太低,重启也会导致服务暂时不可⽤。 配置多节点维护 在微服务架构中某些核⼼服务为了保证⾼性能会部署上百个节点,如果在每个节点中都维护⼀个配置⽂件,⼀旦配置⽂件中的某个属性需要修改,可想⽽知,⼯作量是巨⼤的。 不同部署环境下配置的管理：前⾯提到通过profile机制来管理不同环境下的配置,这种⽅式对于⽇常维护来说也⽐较繁琐。 统⼀配置管理就是弥补上述不⾜的⽅法,简单说,最近本的⽅法是把各个应⽤系统中的某些配置放在⼀个第三⽅中间件上进⾏统⼀维护。然后,对于统⼀配置中⼼上的数据的变更需要推送到相应的服务节点实现动态跟新,所以微服务架构中,配置中⼼也是⼀个核⼼组件,⽽Spring Cloud Config就是⼀个配置中⼼组件,并且可以Git,SVN,本地⽂件等作为存储。\"]},\"405\":{\"h\":\"实践\",\"t\":[\"在 idea 新建此 module 时使用 spring lnitializr方式创建\",\"springCloudConfig创建\",\"在 spring boot 启动器上添加注解\",\"@SpringBootApplication @EnableConfigServer public class ConfigApplication { public static void main(String[] args) { SpringApplication.run(ConfigApplication.class, args); } }\",\"在配置文件中添加\",\"server: port: 9006 spring: profiles: active: native application: name: cloud-config cloud: config: server: git: uri: https://gitee.com/Black-sky-cloud/clouf-config.git search-paths: repo default-label: master eureka: client: service-url: defaultZone: http://127.0.0.1:9004/eureka\",\"Config Server默认存储配置的⽅式是git,如果git仓库是公开仓库,username和password属性可以省略不配置,具体配置属性解释如下。\",\"spring.cloud.config.server.git.uri 配置⽂件所在的git仓库 spring.cloud.config.server.git.search-paths 配置⽂件所在⽬录 spring.cloud.config.server.git.default-label 配置⽂件分⽀\",\"配置仓库 在git仓库中,创建config⽬录,在config⽬录中创建 app-dev.yml配置⽂件,代码如下\",\"key1: v1 key2: v2 key3: v3\",\"Spring Cloud Config 有它的⼀套访问规则,我们通过这套规则在浏览器上直接访问就可以。\",\"/{application}-{profile}.yml /{label}/{application}-{profile}.yml 上面的词语解释 {application} 就是应⽤名称,对应到配置⽂件上来,就是配置⽂件的名称部分,例如我上⾯创建的配置⽂件。 {profile} 就是配置⽂件的版本,我们的项⽬有开发版本、测试环境版本、⽣产环境版本,对应到配置⽂件上来就是以 application-{profile}.yml 加以区分,例如application-dev.yml、application-test.yml、application-prod.yml。 {label} 表示 git 分⽀,默认是 master 分⽀,如果项⽬是以分⽀做区分也是可以的,那就可以通过不同的 label 来控制访问不同的配置⽂件了。 git仓库配置⽂件缓存本地⽬录 c:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Temp\\\\config-repo-4882682414831344447 ,可以通过basedir属性改变。\"]},\"406\":{\"h\":\"从 configService 中获取 application.yml的配置\",\"t\":[\"添加依赖\",\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-config</artifactId> </dependency>\",\"application.yml 添加以下内容\",\"spring: application: name: cloud-payment-service cloud: config: uri: http://localhost:9006 profile: default label: master config: import: optional:configserver:http://localhost:9006\",\"配置解释\",\"spring.config.import=optional:configserver:http://localhost:9006 指定Spring Boot项⽬从 Config Server 导⼊配置 spring.cloud.config.url：Config Server地址,默认localhost:8888 spring.cloud.config.profile：为git配置⽂件的后缀 spring.cloud.config.label：为访问git的分⽀。\"]},\"407\":{\"h\":\"本地配置数据\",\"t\":[\"虽然git存储配置数据⾮常⽅便,但是在项⽬开发阶段,使⽤git存储还是很不⽅便,Spring Cloud Config⽀持多种配置存储⽅式,⽐如默认的git,还有本地⽂件存储,JDBC,Redis等存储⽅式,这⾥介绍下本地⽂件存储,其他存储⽅式,参考官⽅⽂档\",\"application.yml 中添加以下内容\",\"spring: profiles: active: native cloud: config: server: native: search-locations: classpath:/config_repo # spring.profiles.active=native：表示使⽤本地配置存储 # spring.cloud.config.server.native.searchLocations：指定配置⽂件所在路径,可以使⽤相对路径⽐如classpath\"]},\"408\":{\"h\":\"自动刷新配置\",\"t\":[\"Spring Cloud Config在项⽬启动时⾃动加载配置内容这⼀机制,导致了他的⼀个缺陷,配置不能⾃动刷新,在上述案例中,修改git仓库中的key1的值\\\"key1=v11\\\",发现⽀付服务得到的配置项key1的值还是旧的配置内容,新的内容不会⾃动刷新过来,在微服务架构中,动辄上百个节点如果都需要重启,这个问题⾮常麻烦。 我们可以使⽤Spring Cloud Bus和Spring Boot Actuator实现⾃动刷新,实现原理如图6-6所示\",\"自动刷新\"]},\"409\":{\"h\":\"配置中心服务端\",\"t\":[\"导入依赖\",\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-bus-amqp</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency>\",\"application.yml 中配置连接RabbitMQ,同时配置暴露/actuator/bus-refresh端点\",\"spring: rabbitmq: host: 192.168.56.110 port: 5672 username: guest password: guest management: endpoints: web: exposure: include: bus-refresh endpoint: bus-refresh: enabled: true\"]},\"410\":{\"h\":\"配置中⼼客户端\",\"t\":[\"导入依赖\",\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-bus-amqp</artifactId> </dependency>\",\"application.yml 中配置\",\"spring: application: name: cloud-payment-service rabbitmq: host: 192.168.56.110 port: 5672 username: guest password: guest\",\"使⽤@RefreshScope注解刷新更改的配置,代码示例如下\",\"@RequestMapping(\\\"/payment\\\") @Slf4j @RefreshScope public class PaymentController { @Value(\\\"${server.port}\\\") private String serverPort; @Value(\\\"${key1}\\\") private String key1; @Value(\\\"${key2}\\\") private String key2; @Value(\\\"${key3}\\\") private String key3; @RequestMapping(\\\"/{id}\\\") public ResponseEntity<Payment> payment(@PathVariable(\\\"id\\\") Integer id) { log.info(\\\"key1={}, key2={}, key3={}\\\", key1, key2, key3); Payment payment = new Payment(id, \\\"⽀付成功,服务端⼝=\\\" + serverPort); return ResponseEntity.ok(payment); } }\"]},\"411\":{\"c\":[\"后端开发\",\"spring系列\"]},\"412\":{\"c\":[\"java\"]},\"413\":{\"h\":\"Spring Cloud Gateway\",\"t\":[\"简介\",\"SpringCloud Gateway 是 Spring Cloud 的⼀个全新项⽬,该项⽬是基于 Spring 5.0,Spring Boot 2.0 和 Project Reactor 等技术开发的⽹关,它旨在为微服务架构提供⼀种简单有效的统⼀的 API 路由管理⽅式。 SpringCloud Gateway 作为 Spring Cloud ⽣态系统中的⽹关,⽬标是替代 Zuul,在Spring Cloud 2.0以上版本中,没有对新版本的Zuul 2.0以上最新⾼性能版本进⾏集成,仍然还是使⽤的Zuul 2.0之前的⾮Reactor模式的⽼版本。 ⽽为了提升⽹关的性能,SpringCloud Gateway是基于WebFlux框架实现的,⽽WebFlux框架底层则使⽤了⾼性能的Reactor模式通信框架Netty。 Spring Cloud Gateway 的⽬标,不仅提供统⼀的路由⽅式,并且基于 Filter 链的⽅式提供了⽹关基本的功能,例如:安全,监控/指标,和限流。 注意:Spring Cloud Gateway 底层使⽤了⾼性能的通信框架Netty。\",\"特征\",\"基于 Spring Framework 5,Project Reactor 和 Spring Boot 2.0 集成 Spring Cloud DiscoveryClient Predicates 和 Filters 作⽤于特定路由,易于编写的 Predicates 和 Filters 具备⼀些⽹关的⾼级功能：动态路由、限流、路径重写 集成Spring Cloud DiscoveryClient 集成熔断器CircuitBreaker\",\"术语解释\",\"Filter(过滤器) 和Zuul的过滤器在概念上类似,可以使⽤它拦截和修改请求,并且对下游的响应,进⾏⼆次处理。 过滤器为org.springframework.cloud.gateway.filter.GatewayFilter类的实例。 Route(路由) ⽹关配置的基本组成模块,和Zuul的路由配置模块类似。 ⼀个Route模块由⼀个 ID,⼀个⽬标URI,⼀组断⾔和⼀组过滤器定义。如果断⾔为真,则路由匹配,⽬标URI会被访问。 Predicate(断⾔) 这是⼀个 Java 8 的 Predicate,可以使⽤它来匹配来⾃ HTTP 请求的任何内容,例如 headers 或参数。断⾔的输⼊类型是⼀个 ServerWebExchange。\",\"处理流程\",\"客户端向 Spring Cloud Gateway 发出请求。 然后在 Gateway Handler Mapping 中找到与请求相匹配的路由,将其发送到 Gateway Web Handler。 Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执⾏业务逻辑,然后返回。过滤器之间⽤虚线分开是因为过滤器可能会在发送代理请求之前(“pre”)或之后(“post”)执⾏业务逻辑。\"]},\"414\":{\"h\":\"路由配置方式\",\"t\":[\"简介\",\"路由是⽹关配置的基本组成模块,和Zuul的路由配置模块类似。⼀个Route模块由⼀个 ⼀个⽬标 URI,⼀组断⾔和⼀组过滤器定义。 如果断⾔为真,则路由匹配,⽬标URI会被访问\"]},\"415\":{\"h\":\"基础路由配置⽅式\",\"t\":[\"# 如果请求的⽬标地址,是单个的URI资源路径,配置⽂件实例如下。 spring: application: name: api-gateway cloud: gateway: routes: - id: service1 uri: https://blog.csdn.net predicates: - Path=/csdn # 上⾯这段配置的意思是,配置了⼀个 id 为 url-proxy-1的URI代理规则,路由的规则为,当访问地址 http://localhost:8080/csdn/1.jsp时,会路由到上游地址https://blog.csdn.net/1.jsp。 # 各字段含义如下 # id：我们⾃定义的路由 ID,保持唯⼀ # uri：⽬标服务地址 # predicates：路由条件,Predicate 接受⼀个输⼊参数,返回⼀个布尔值结果。该接⼝包含多种默认⽅法来将 Predicate 组合成其他复杂的逻辑(⽐如：与,或,⾮)。\"]},\"416\":{\"h\":\"基于代码的路由配置方式\",\"t\":[\"转发功能同样可以通过代码来实现,我们可以在启动类 GateWayApplication 中添加⽅法customRouteLocator() 来定制转发规则。\",\"@SpringBootApplication // 向eureka注册 @EnableDiscoveryClient public class GatewayApplication { public static void main(String[] args) { SpringApplication.run(GatewayApplication.class, args); } /** * 以方法形式配置路径 此方法不常用 * @param builder * @return */ @Bean public RouteLocator customRouteLocator(RouteLocatorBuilder builder){ // 当此服务接收到 csdn 时跳转到 http://blog.csdn.net/ 下 return builder.routes().route(\\\"service1\\\",r->r.path(\\\"/csdn\\\").uri(\\\"http://blog.csdn.net/\\\")).build(); } }\"]},\"417\":{\"h\":\"和注册中⼼相结合的路由配置⽅式\",\"t\":[\"# 在uri的schema协议部分为⾃定义的lb:类型,表示从微服务注册中⼼(如Eureka)订阅服务,并且通过负载均衡进⾏服务的路由 server: port: 9005 spring: application: name: api-gateway cloud: gateway: routes: - id: service1 uri: https://blog.csdn.net predicates: - Path=/csdn - id: service2 # uri: http://127.0.0.1:9001 uri: lb://cloud-payment-service predicates: - Path=/payment/** eureka: client: service-url: defaultZone: http://127.0.0.1:9004/eureka\"]},\"418\":{\"h\":\"路由匹配规则\",\"t\":[\"Spring Cloud Gateway的主要功能之⼀是转发请求,转发规则的定义主要包含三个部分,如下图所示\",\"路由匹配规则\",\"Spring Cloud Gateway 的功能很强⼤,我们仅仅通过 Predicates 的设计就可以看出来,前⾯我们只是使⽤了 predicates 进⾏了简单的条件匹配,其实 Spring Cloud Gataway 帮我们内置了很多Predicates 功能。\",\"Spring Cloud Gateway 是通过 Spring WebFlux 的 HandlerMapping 做为底层⽀持来匹配到转发路由,Spring Cloud Gateway 内置了很多 Predicates ⼯⼚,这些 Predicates ⼯⼚通过不同的 HTTP请求参数来匹配,多个 Predicates ⼯⼚可以组合使⽤.\",\"路由匹配规则1\"]},\"419\":{\"h\":\"Predicate 断⾔条件\",\"t\":[\"简介\",\"Predicate 来源于 Java 8,是 Java 8 中引⼊的⼀个函数,Predicate 接受⼀个输⼊参数,返回⼀个布尔值结果。 该接⼝包含多种默认⽅法来将 Predicate 组合成其他复杂的逻辑(⽐如：与,或,⾮)。 可以⽤于接⼝请求参数校验、判断新⽼数据是否有变化需要进⾏更新操作。 在 Spring Cloud Gateway 中 Spring 利⽤ Predicate 的特性实现了各种路由匹配规则,有通过Header、请求参数等不同的条件来进⾏作为条件匹配到对应的路由. 说⽩了 Predicate 就是为了实现⼀组匹配规则,⽅便让请求过来找到对应的 Route 进⾏处理.\",\"转发规则如下表所示\",\"规则\",\"实例\",\"说明\",\"Path\",\"-Path=/gate/,/rele/\",\"当请求路径为gate/rule开头的时候,转发到 http://localhost:9001服务器上\",\"Before\",\"-Before=2017-01-20T17:42:47.789-07:00[America/Denver]\",\"在某个时间之前的请求才会被转发到 http://localhost:9001 服务器上\",\"After\",\"-After=2017-01-20T17:42:47.789-07:00[America/Denver]\",\"在某个时间之后的请求才会被转发\",\"Between\",\"-Between=2017-01-20T17:42:47.789-07:00[America/Denver],2017-01-20T17:42:47.789-07:00[America/Denver]\",\"在某个时间段之间的请求才会被转发\",\"Cookie\",\"-Cookie-chocolate,ch.p\",\"名为 chocolate 的表单或者满足正则 ch.p 的表单才会被匹配到进行请求转发\",\"Header\",\"-Header=X-Reqest-ld,\\\\d+\",\"携带参数 X-Request-Id或者满足\\\\d+的请求头才会匹配\",\"Host\",\"-Host=www.hd123.com\",\"当主机名为 www.hd123.com的时候直接转发到 http://localhost:9001服务器上\",\"Method\",\"-Method=GET\",\"只有 Get 方法才会匹配转发请求,还可以限定 post/put 等请求方式\"]},\"420\":{\"h\":\"通过请求参数匹配\",\"t\":[\"Query Route Predicate ⽀持传⼊两个参数,⼀个是属性名⼀个为属性值,属性值可以是正则表达式。\",\"# 这样配置,只要请求中包含 smile 属性的参数即可匹配路由。 spring: cloud: gateway: routes: - id: service3 uri: https://www.baidu.com order: 0 predicates: - Query=smile # 还可以将 Query 的值以键值对的⽅式进⾏配置,这样在请求过来时会对属性值和正则进⾏匹配,匹配上才会⾛路由。 spring: cloud: gateway: routes: - id: service3 uri: https://www.baidu.com order: 0 predicates: # 这样只要当请求中包含 keep 属性并且参数值是以 pu 开头的⻓度为三位的字符串才会进⾏匹配和路由。 - Query=keep, pu.\"]},\"421\":{\"h\":\"通过Header匹配\",\"t\":[\"Header Route Predicate 和 Query Route Predicate ⼀样,也是接收 2 个参数,⼀个header 中属性名称和⼀个正则表达式,这个属性值和正则表达式匹配则执⾏\",\"spring: cloud: gateway: routes: - id: service4 uri: https://www.baidu.com order: 0 predicates: - Header=X-Request-Id, \\\\d+\",\"使⽤ curl 测试,命令⾏输⼊：curl http://localhost:9005 -H \\\"X-Request-Id:88\\\",则返回⻚⾯代码证明匹配成功。\"]},\"422\":{\"h\":\"通过Cookie匹配\",\"t\":[\"Cookie Route Predicate 可以接收两个参数,⼀个是 Cookie name ,⼀个是正则表达式,路由规则会通过获取对应的 Cookie name 值和正则表达式去匹配,如果匹配上就会执⾏路由,如果没有匹配上则不执⾏\",\"spring: cloud: gateway: routes: - id: service5 uri: https://www.baidu.com predicates: - Cookie=sessionId, test\",\"使⽤ curl 测试,命令⾏输⼊,curl http://localhost:9005 --cookie \\\"sessionId=test\\\",则会返回⻚⾯代码,如果去掉--cookie \\\"sessionId=test\\\",后台汇报 404 错误。\"]},\"423\":{\"h\":\"通过Host匹配\",\"t\":[\"Host Route Predicate 接收⼀组参数,⼀组匹配的域名列表,这个模板是⼀个 ant 分隔的模板,⽤.号作为分隔符。它通过参数中的主机地址作为匹配规则。\",\"spring: cloud: gateway: routes: - id: service6 uri: https://www.baidu.com predicates: - Host=**.baidu.com\",\"使⽤ curl 测试,命令⾏输⼊,curl http://localhost:9005 -H \\\"Host: www.baidu.com\\\"或者curlhttp://localhost:8080 -H \\\"Host: md.baidu.com\\\",经测试以上两种 host 均可匹配到 host_route 路由,去掉 host 参数则会报 404 错误\"]},\"424\":{\"h\":\"通过请求⽅式匹配\",\"t\":[\"可以通过是 POST、GET、PUT、DELETE 等不同的请求⽅式来进⾏路由。\",\"spring: cloud: gateway: routes: - id: service7 uri: https://www.baidu.com predicates: - Method=PUT\",\"使⽤ curl 测试,命令⾏输⼊,curl -X PUT http://localhost:9005,测试返回⻚⾯代码,证明匹配到路由,以其他⽅式,返回 404 没有找到,证明没有匹配上路由\"]},\"425\":{\"h\":\"通过请求路径匹配\",\"t\":[\"Path RoutePredicate 接收⼀个匹配路径的参数来判断是否路由。\",\"spring: cloud: gateway: routes: - id: service8 uri: http://127.0.0.1:9001 predicates: - Path=/payment/{segment}\",\"如果请求路径符合要求,则此路由将匹配, curl 测试,命令⾏输⼊,curl http://localhost:9005/payment/1,可以正常获取到⻚⾯返回值,curl http://localhost:9005/payment2/1,报404,证明路由是通过指定路由来匹配。\"]},\"426\":{\"h\":\"组合匹配\",\"t\":[\"spring: cloud: gateway: routes: - id: service9 uri: https://www.baidu.com order: 0 predicates: - Host=**.foo.org - Path=/headers - Method=GET - Header=X-Request-Id, \\\\d+ - Query=foo, ba. - Query=baz - Cookie=chocolate, ch.p\",\"各种 Predicates 同时存在于同⼀个路由时,请求必须同时满⾜所有的条件才被这个路由匹配。⼀个请求满⾜多个路由的断⾔条件时,请求只会被⾸个成功匹配的路由转发\"]},\"427\":{\"h\":\"filters 过滤器规则\",\"t\":[\"过滤规则\",\"实例\",\"说明\",\"PrefixPath\",\"-PrefixPath=/app\",\"在请求路径前加上 app\",\"RewritePath\",\"-RewritePath=/test,/app/test\",\"访问 localhost:902/test,请求会转发到 localhost:8001/app/test\",\"SetPath\",\"SetPath=/app/\",\"通过模板设置路径,转发的规则会在路径前增加 app, {path} 表示愿路径\",\"RedirectTo\",\"重定向\",\"RemoveRequestHeader\",\"去掉某个请求头信息\"]},\"428\":{\"h\":\"PrefixPath\",\"t\":[\"# 对所有的请求路径添加前缀 spring: cloud: gateway: routes: - id: service10 uri: http://127.0.0.1:9001 predicates: - Path={segment} filters: - PrefixPath=/payment # 访问/123请求被发送到http://127.0.0.1:9001/payment/123。\"]},\"429\":{\"h\":\"StripPrefix\",\"t\":[\"# 跳过指定的路径 spring: cloud: gateway: routes: - id: service11 uri: http://127.0.0.1:9001 predicates: - Path=/api/{segment} filters: - StripPrefix=1 - PrefixPath=/payment # 此时访问http://localhost:9005/api/123,⾸先StripPrefix过滤器去掉⼀个/api,然后PrefixPath过滤器加上⼀个/payment,能够正确访问到⽀付微服务。\"]},\"430\":{\"h\":\"RewritePath\",\"t\":[\"spring: cloud: gateway: routes: - id: service12 uri: http://127.0.0.1:9001 predicates: - Path=/api/payment/** filters: - RewritePath=/api/(?<segment>.*), /$\\\\{segment} # 请求 http://localhost:9005/api/payment/123 路径,RewritePath过滤器将路径重写为 http://localhost:9005/payment/123,能够正确访问⽀付微服务\"]},\"431\":{\"h\":\"SetPath\",\"t\":[\"SetPath和Rewrite类似,代码如下。\",\"spring: cloud: gateway: routes: - id: service13 uri: http://127.0.0.1:9001 predicates: - Path=/api/payment/{segment} filters: - SetPath=/payment/{segment} # 请求 http://localhost:9005/api/payment/123 路径,SetPath过滤器将路径设置为 http://localhost:9005/payment/123,能够正确访问⽀付微服务。\"]},\"432\":{\"h\":\"RemoveRequestHeader\",\"t\":[\"# 去掉某个请求头信息。 spring: cloud: gateway: routes: - id: removerequestheader_route uri: https://example.org filters: - RemoveRequestHeader=X-Request-Foo\"]},\"433\":{\"h\":\"RemoveRequestParameter\",\"t\":[\"#去掉某个请求参数信息 spring: cloud: gateway: routes: - id: removerequestparameter_route uri: https://example.org filters: - RemoveRequestParameter=red\"]},\"434\":{\"h\":\"SetRequestHeader\",\"t\":[\"# 设置请求头信息 spring: cloud: gateway: routes: - id: setrequestheader_route uri: https://example.org filters: - SetRequestHeader=X-Request-Red, Blue\"]},\"435\":{\"h\":\"default-filters\",\"t\":[\"# 对所有的请求添加过滤器。 spring: cloud: gateway: routes: - id: service14 uri: http://127.0.0.1:9001 predicates: - Path=/9001/{segment} - id: service15 uri: http://127.0.0.1:9000 predicates: - Path=/9000/{segment} default-filters: - StripPrefix=1 - PrefixPath=/payment\"]},\"436\":{\"h\":\"⾃定义过滤器\",\"t\":[\"过滤器执⾏次序 Spring-Cloud-Gateway 基于过滤器实现,同 zuul 类似,有pre和post两种⽅式的 filter,分别处理前置逻辑和后置逻辑。\",\"客户端的请求先经过pre类型的 filter,然后将请求转发到具体的业务服务,收到业务服务的响应之后,再经过post类型的 filter 处理,最后返回响应到客户端。\",\"过滤器执⾏流程如下,order 越⼤,优先级越低\",\"过滤器执行次序\",\"过滤器分为两种\",\"全局过滤器: 对所有路由⽣效。 局部过滤器: 对指定的路由⽣效。\"]},\"437\":{\"h\":\"全局过滤器\",\"t\":[\"实现 GlobalFilter 和 Ordered,重写相关⽅法,加⼊到spring容器管理即可,⽆需配置,全局过滤器对所有的路由都有效。代码如下\",\"import lombok.extern.slf4j.Slf4j; import org.apache.commons.lang.StringUtils; import org.springframework.cloud.gateway.filter.GatewayFilterChain; import org.springframework.cloud.gateway.filter.GlobalFilter; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.core.Ordered; import org.springframework.http.HttpStatus; import org.springframework.web.server.ServerWebExchange; import reactor.core.publisher.Mono; /** * 全局过滤器配置 * 定义了4个全局过滤器,顺序为A>B>C>MyAuthFilter,其中全局过滤器MyAuthFilter中判断令牌是否存在,如果令牌不存在,则返回401状态码,表示没有权限访问 */ //@Configuration @Slf4j public class FilterConfig { @Bean public GlobalFilter a() { return new AFilter(); } @Bean public GlobalFilter b() { return new BFilter(); } @Bean public GlobalFilter c() { return new CFilter(); } @Bean public GlobalFilter myAuth() { return new MyAuthFilter(); } static class AFilter implements GlobalFilter, Ordered { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { log.info(\\\"AFilter 前置逻辑-----\\\"); return chain.filter(exchange).then(Mono.fromRunnable(() -> { log.info(\\\"AFilter 后置逻辑---\\\"); })); } @Override public int getOrder() { return HIGHEST_PRECEDENCE + 100; } } static class BFilter implements GlobalFilter, Ordered { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { log.info(\\\"BFilter 前置逻辑-----\\\"); return chain.filter(exchange).then(Mono.fromRunnable(() -> { log.info(\\\"BFilter 后置逻辑---\\\"); })); } @Override public int getOrder() { return HIGHEST_PRECEDENCE + 200; } } static class CFilter implements GlobalFilter, Ordered { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { log.info(\\\"CFilter 前置逻辑-----\\\"); return chain.filter(exchange).then(Mono.fromRunnable(() -> { log.info(\\\"CFilter 后置逻辑---\\\"); })); } @Override public int getOrder() { return HIGHEST_PRECEDENCE + 300; } } static class MyAuthFilter implements GlobalFilter, Ordered { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { log.info(\\\"MyAuth 前置逻辑--\\\"); String token = exchange.getRequest().getHeaders().getFirst(\\\"token\\\"); if (StringUtils.isBlank(token)){ exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED); return exchange.getResponse().setComplete(); } return chain.filter(exchange); } @Override public int getOrder() { return HIGHEST_PRECEDENCE + 400; } } }\"]},\"438\":{\"h\":\"局部过滤器\",\"t\":[\"定义局部过滤器步骤如下。\",\"需要实现GatewayFilter, Ordered,实现相关的⽅法加⼊到过滤器⼯⼚,并且注册到spring容器中。 在配置⽂件中进⾏配置,如果不配置则不启⽤此过滤器规则。\",\"// 接下来定义局部过滤器,对于请求头user-id校验,如果不存在user-id请求头,直接返回状态码406 @Component public class UserIdCheckGatewayFilterFactory extends AbstractGatewayFilterFactory<Object>{ @Override public GatewayFilter apply(Object config){ return new UserIdCheckGateWayFilter(); } @Slf4j static class UserIdCheckGateWayFilter implements GatewayFilter, Ordered{ @Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){ String url = exchange.getRequest().getPath().pathWithinApplication().value(); log.info(\\\"请求URL:\\\" + url); log.info(\\\"method:\\\" + exchange.getRequest().getMethod()); //获取header String userId = exchange.getRequest().getHeaders().getFirst(\\\"user-id\\\"); log.info(\\\"userId：\\\" + userId); if (StringUtils.isBlank(userId)){ log.info(\\\"*****头部验证不通过,请在头部输⼊ user-id\\\"); //终⽌请求,直接回应 exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE); return exchange.getResponse().setComplete(); } return chain.filter(exchange); } // 值越⼩,优先级越⾼ @Override public int getOrder(){ return HIGHEST_PRECEDENCE; } } }\",\"配置文件\",\"spring: cloud: gateway: routes: - id: service14 uri: http://127.0.0.1:9001 predicates: - Path=/{segment} default-filters: - PrefixPath=/payment - UserIdCheck\"]},\"439\":{\"h\":\"高级特性\",\"t\":[\"熔断降级\",\"在分布式系统中,⽹关作为流量的⼊⼝,因此会有⼤量的请求进⼊⽹关,向其他服务发起调⽤,其他服务不可避免的会出现调⽤失败(超时、异常),失败时不能让请求堆积在⽹关上,需要快速失败并返回给客户端,想要实现这个要求,就必须在⽹关上做熔断、降级操作。 为什么在⽹关上请求失败需要快速返回给客户端？因为当⼀个客户端请求发⽣故障的时候,这个请求会⼀直堆积在⽹关上,当然只有⼀个这种请求,⽹关肯定没有问题(如果⼀个请求就能造成整个系统瘫痪,那这个系统可以下架了),但是⽹关上堆积多了就会给⽹关乃⾄整个服务都造成巨⼤的压⼒,甚⾄整个服务宕掉。 因此要对⼀些服务和⻚⾯进⾏有策略的降级,以此缓解服务器资源的的压⼒,以保证核⼼业务的正常运⾏,同时也保持了客户和⼤部分客户的得到正确的相应,所以需要⽹关上请求失败需要快速返回给客户端。 CircuitBreaker过滤器使⽤Spring Cloud CircuitBreaker API 将⽹关路由包装在断路器中。SpringCloud CircuitBreaker ⽀持多个可与 Spring Cloud Gateway ⼀起使⽤熔断器库。⽐如,Spring Cloud⽀持开箱即⽤的 Resilience4J。\",\"导入依赖\",\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-circuitbreaker-reactor-resilience4j</artifactId> </dependency>\"]},\"440\":{\"h\":\"配置文件\",\"t\":[\"server: port: 9005 spring: application: name: api-gateway cloud: gateway: routes: - id: service14 uri: http://127.0.0.1:9001 predicates: - Path=/payment/{segment} filters: - name: CircuitBreaker args: name: backendA fallbackUri: forward:/fallbackA eureka: client: service-url: defaultZone: http://127.0.0.1:9004/eureka resilience4j: circuitbreaker: configs: default: failureRateThreshold: 30 #失败请求百分⽐,超过这个⽐例,CircuitBreaker变为OPEN状态 slidingWindowSize: 10 #滑动窗⼝的⼤⼩,配置COUNT_BASED,表示10个请求,配置TIME_BASED表示10秒 minimumNumberOfCalls: 5 #最⼩请求个数,只有在滑动窗⼝内,请求个数达到这个个数,才会触发CircuitBreader对于断路器的判断 slidingWindowType: TIME_BASED #滑动窗⼝的类型 permittedNumberOfCallsInHalfOpenState: 3 #当CircuitBreaker处于HALF_OPEN状态的时候,允许通过的请求个数 automaticTransitionFromOpenToHalfOpenEnabled: true #设置true,表示⾃动从OPEN变成HALF_OPEN,即使没有请求过来 waitDurationInOpenState: 2s #从OPEN到HALF_OPEN状态需要等待的时间 recordExceptions: #异常名单 - java.lang.Exception instances: backendA: baseConfig: default backendB: failureRateThreshold: 50 slowCallDurationThreshold: 2s #慢调⽤时间阈值,⾼于这个阈值的呼叫视为慢调⽤,并增加慢调⽤⽐例。 slowCallRateThreshold: 30 #慢调⽤百分⽐阈值,断路器把调⽤时间⼤于 slowCallDurationThreshold,视为慢调⽤,当慢调⽤⽐例⼤于阈值,断路器打开,并进⾏服务降级 slidingWindowSize: 10 slidingWindowType: TIME_BASED minimumNumberOfCalls: 2 permittedNumberOfCallsInHalfOpenState: 2 waitDurationInOpenState: 120s #从OPEN到HALF_OPEN状态需要等待的时间\"]},\"441\":{\"h\":\"全局过滤器 创建⼀个全局过滤器,打印熔断器状态,代码如下\",\"t\":[\"@Component @Slf4j public class CircuitBreakerLogFilter implements GlobalFilter, Ordered { @Autowired private CircuitBreakerRegistry circuitBreakerRegistry; @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { String url = exchange.getRequest().getPath().pathWithinApplication().value(); log.info(\\\"url : {} status : {}\\\", url, circuitBreakerRegistry.circuitBreaker(\\\"backendA\\\").getState().toString()); return chain.filter(exchange); } @Override public int getOrder() { return HIGHEST_PRECEDENCE; } }\"]},\"442\":{\"h\":\"降级方法\",\"t\":[\"@RestController @Slf4j public class FallbackController { @GetMapping(\\\"/fallbackA\\\") public ResponseEntity fallbackA() { return ResponseEntity.ok(\\\"服务不可⽤,降级\\\"); } }\"]},\"443\":{\"h\":\"统⼀跨域请求\",\"t\":[\"简介\",\"跨域请求 当前发起请求的域与该请求指向的资源所在的域不⼀样。 这⾥的域指的是这样的⼀个概念 我们认为若协议 + 域名 + 端⼝号均相同,那么就是同域 举个例⼦ 假如⼀个域名为aaa.cn的⽹站,它发起⼀个资源路径为aaa.cn/books/getBookInfo的Ajax 请求,那么这个请求是同域的,因为资源路径的协议、域名以及端⼝号与当前域⼀致(例⼦中协议名默认为http,端⼝号默认为80)。 但是,如果发起⼀个资源路径为bbb.com/pay/purchase的 Ajax请求,那么这个请求就是跨域请求,因为域不⼀致,与此同时由于安全问题,这种请求会受到同源策略限制。\",\"虽然在安全层⾯上同源限制是必要的,但有时同源策略会对我们的合理⽤途造成影响,为了避免开发的应⽤受到限制,有多种⽅式可以绕开同源策略,常⽤的做法JSONP, CORS。\"]},\"444\":{\"h\":\"跨域请求解决示例\",\"t\":[\"@RestController @RequestMapping(\\\"/payment\\\") @CrossOrigin public class PaymentController { @Value(\\\"${server.port}\\\") private String serverPort; @GetMapping(\\\"/{id}\\\") public ResponseEntity<Payment> payment(@PathVariable(\\\"id\\\") Integer id) { Payment payment = new Payment(id, \\\"⽀付成功,服务端⼝=\\\" + serverPort); return ResponseEntity.ok(payment); } }\",\"跨域配置 现在请求经过gatway⽹关是,可以通过⽹关统⼀配置跨域访问,代码如下\",\"spring: cloud: gateway: globalcors: cors-configurations: '[/**]': allowed-origin-patterns: \\\"*\\\" # spring boot2.4配置 # allowed-origins: \\\"*\\\" allowed-headers: \\\"*\\\" allow-credentials: true allowed-methods: - GET - POST - DELETE - PUT - OPTION\"]},\"445\":{\"h\":\"gateway 使用\",\"t\":[\"在 idea 新建此 module 时使用 spring lnitializr方式创建\",\"向 eureka 中注册\",\"import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.cloud.gateway.route.RouteLocator; import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder; import org.springframework.context.annotation.Bean; @SpringBootApplication // 向eureka注册 @EnableDiscoveryClient public class GatewayApplication { public static void main(String[] args) { SpringApplication.run(GatewayApplication.class, args); } }\",\"在 application.yml 中添加以下内容\",\"server: port: 9005 spring: application: name: api-gateway cloud: gateway: routes: - id: url-proxy-1 uri: https://blog.csdn.net predicates: - Path=/csdn eureka: client: service-url: defaultZone: http://127.0.0.1:9004/eureka\"]},\"446\":{\"c\":[\"后端开发\",\"spring系列\"]},\"447\":{\"c\":[\"java\"]},\"448\":{\"h\":\"微服务\",\"t\":[\"简介\",\"业务系统实施服务化改造之后,原本共享的业务被拆分形成可复⽤的服务,可以在最⼤程度上避免共享业务的重复建设、资源连接瓶颈瓶颈等问题. 微服务就是这样⼀种解决⽅案,从名字上来看,⾯向服务(SOA)和微服务本质上都是服务化思想的⼀种体现。如果SOA是⾯向服务开发的思想的雏形,那么微服务就是针对可重⽤业务服务的更进⼀步优化,我们可以把SOA看成微服务的超集,⼀但服务规模扩⼤就意味着服务的构建、发布、运维的复杂度也会成倍增加,所以实施微服务的前提是软件交付链路及基础设施的成熟化。 因此微服务在我看来并不是⼀个新的概念,他本质上是服务化思想的最佳实践⽅向。 由于SOA和微服务两者的关注点不⼀样,造成了这两者有⾮常⼤的区别: SOA关注的是服务的重⽤性及解决信息孤岛问题。 微服务关注的是解耦,虽然解耦和可重⽤性从特定的⻆度来看是⼀样的,但本质上是有区别的,解耦是降低业务之间的耦合度,⽽重⽤性关注的是服务的复⽤。 微服务会更多地关注在DevOps的持续交付上,因为服务粒度细化之后使得开发运维变得更加重要,因此微服务与容器化技术的结合更加紧密。\",\"微服务\",\"如图1-4所示,将每个具体的业务服务构成可独⽴运⾏的微服务,每个微服务只关注某个特定的功能,服务之间采⽤轻量级通信机制REST API进⾏通信。\",\"细⼼的读者会发现SOA中的服务和微服务架构中的服务粒度是⼀样的,不是说SOA是微服务的超集吗？\",\"其实我们可以把⽤户服务拆分的更细,⽐如⽤户注册服务、⽤户鉴权服务等。实际上,微服务到底要拆分到多⼤的粒度没有统⼀的标准,更多的时候是需要在粒度和团队之间找平衡的,微服务的粒度越⼩,服务独⽴性带来的好处就越多,但是管理⼤量的微服务也会越复杂。\",\"微服务框架功能\",\"注册中⼼ 服务提供者和消费者,能够从注册中⼼注册和得到服务信息。 配置中⼼ 在微服务架构中设计服务较多需要对于配置⽂件统⼀管理。 服务链路追踪 对于服务之间的负载调⽤,要能通过链路追踪,得到具体参与者,调⽤链路出现问题能够快速定位。 负载均衡 服务调⽤服务会采⽤⼀定的负载均衡策略,来保证服务的⾼可⽤。 服务容错 通过熔断、降级服务容错策略,对系统进⾏有效的保护. 降级是在服务或依赖的服务异常时,返回保底数据. 熔断是指依赖服务多次失效,则熔断器打开,不再尝试调⽤,直接返回降级信息。 熔断后,定期探测依赖服务可⽤性,若恢复则恢复调⽤。 服务⽹关 ⽤户请求过载时进⾏限流、排队、过载保护、⿊⽩名单、异常⽤户过滤拦截等都可以通过服务⽹关实现。 服务发布与回滚 蓝绿部署、灰度、AB Test等发布策略,可快速回滚应⽤。 服务动态伸缩、容器化 根据服务负载情况,可快速⼿动或⾃动进⾏节点增加和减少。\",\"简介\",\"Spring Cloud是Spring提供的微服务框架。 它利⽤Spring Boot的开发特性简化了微服务开发的复杂性,如服务发现注册、配置中⼼、消息总线、负载均衡、断路器、数据监控等,这些⼯作都可以借助Spring Boot的开发⻛格做到⼀键启动和部署。 Spring Cloud的⽬标是通过⼀系列组件,帮助开发者迅速构件⼀个分布式系统,Spring Cloud 是通过包装其它公司产品来实现的,⽐如Spring Cloud整合了开源的Netflix很多产品。 Spring Cloud提供了微服务治理的诸多组件,例如服务注册和发现、配置中⼼、熔断器、智能路由、微代理、控制总线、全局锁、分布式会话等。\",\"spring cloud 版本\",\"Spring Cloud\",\"Spring Boot\",\"2020.0.x aka Ilford\",\"2.4.x, 2.5.x (Starting with 2020.0.3)\",\"Hoxton\",\"2.2.x, 2.3.x (Starting with SR5)\",\"Greenwich\",\"2.1.x\",\"Finchley\",\"2.0.x\",\"Edgware\",\"1.5.x\",\"Dalston\",\"1.5.x\",\"官⽹对版本进⾏如下解释\",\"Spring Cloud Dalston, Edgware, Finchley, and Greenwich have all reached end of lifestatus and are no longer supported. Spring Cloud Dalston、Edgware、Finchley 和 Greenwich 都已达到⽣命周期终⽌状态,不再受⽀持\"]},\"449\":{\"c\":[\"后端开发\",\"spring系列\"]},\"450\":{\"c\":[\"java\"]},\"451\":{\"h\":\"微服务容错\",\"t\":[\"简介\",\"在⾼并发访问下,⽐如天猫双11,流量持续不断的涌⼊,服务之间的相互调⽤频率突然增加,引发 系统负载过⾼,这时系统所依赖的服务的稳定性对系统的影响⾮常⼤,⽽且还有很多不确定因素引起雪 崩,如⽹络连接中断,服务宕机等。⼀般微服务容错组件提供了限流、隔离、降级、熔断等⼿段,可以 有效保护我们的微服务系统。\"]},\"452\":{\"h\":\"隔离\"},\"453\":{\"h\":\"线程池隔离\",\"t\":[\"线程池隔离就是通过Java的线程池进⾏隔离,B服务调⽤C服务给予固定的线程数量⽐如12个线程,如果此时C服务宕机了就算⼤量的请求过来,调⽤C服务的接⼝只会占⽤12个线程不会占⽤其他⼯作线程资源,因此B服务就不会出现级联故障。 \"]},\"454\":{\"h\":\"信号量隔离\",\"t\":[\"隔离信号量隔离是使⽤Semaphore来实现的,当拿不到信号量的时候直接拒接因此不会出现超时占⽤其他⼯作线程的情况\",\"emaphore semaphore = new Semaphore(10,true); //获取信号量 semaphore.acquire(); //do something here //释放信号量 semaphore.release();\"]},\"455\":{\"h\":\"线程池隔离和信号量隔离的区别\",\"t\":[\"线程池隔离针对不同的资源分别创建不同的线程池,不同服务调⽤都发⽣在不同的线程池中,在线程池排队、超时等阻塞情况时可以快速失败。\",\"线程池隔离的好处是隔离度⽐较⾼,可以针对某个资源的线程池去进⾏处理⽽不影响其它资源,但是代价就是线程上下⽂切换的 overhead ⽐较⼤,特别是对低延时的调⽤有⽐较⼤的影响。\",\"⽽信号量隔离⾮常轻量级,仅限制对某个资源调⽤的并发数,⽽不是显式地去创建线程池,所以 overhead ⽐较⼩,但是效果不错也⽀持超时失败。 \"]},\"456\":{\"h\":\"熔断\",\"t\":[\"当下游的服务因为某种原因突然变得不可⽤或响应过慢,上游服务为了保证⾃⼰整体服务的可⽤性,不再继续调⽤⽬标服务直接返回,快速释放资源。 如果⽬标服务情况好转则恢复调⽤。\",\"熔断器模型\",\"熔断器模型\",\"熔断器模型的状态机有3个状态\",\"Closed 关闭状态(断路器关闭),所有请求都正常访问。 Open 打开状态(断路器打开),所有请求都会被降级。熔断器会对请求情况计数,当⼀定时间内失败请求百分⽐达到阈值,则触发熔断,断路器会完全打开。 Half Open 半开状态,不是永久的,断路器打开后会进⼊休眠时间。 随后断路器会⾃动进⼊半开状态。 此时会释放部分请求通过,若这些请求都是健康的,则会关闭断路器,否则继续保持打开,再次进⾏休眠计时\"]},\"457\":{\"h\":\"降级\",\"t\":[\"降级是指当⾃身服务压⼒增⼤时,系统将某些不重要的业务或接⼝的功能降低,可以只提供部分功能,也可以完全停⽌所有不重要的功能。\",\"⽐如下线⾮核⼼服务以保证核⼼服务的稳定、降低实时性、降低数据⼀致性,降级的思想是丢⻋保帅。\"]},\"458\":{\"h\":\"限流\",\"t\":[\"简介\",\"就是限制最⼤流量。 系统能提供的最⼤并发有限,同时来的请求⼜太多,就需要限流,⽐如商城秒杀业务,瞬时⼤量请求涌⼊,服务器服务不过来,就只好排队限流了,就跟去景点排队买票和去银⾏办理业务排队等号道理相同。\"]},\"459\":{\"h\":\"漏桶算法\",\"t\":[\"漏桶算法的思路,⼀个固定容量的漏桶,按照常量固定速率流出⽔滴。\",\"如果桶是空的,则不需流出⽔滴。可以以任意速率流⼊⽔滴到漏桶。如果流⼊⽔滴超出了桶的容量,则流⼊的⽔滴溢出了(被丢弃),⽽漏桶容量是不变的。\",\"漏桶限流原理如图所示 \"]},\"460\":{\"h\":\"令牌桶算法\",\"t\":[\"假设限制2r/s,则按照500毫秒的固定速率往桶中添加令牌。\",\"桶中最多存放b个令牌,当桶满时,新添加的令牌被丢弃或拒绝。\",\"当⼀个n个字节⼤⼩的数据包到达,将从桶中删除n个令牌,接着数据包被发送到⽹络上。\",\"如果桶中的令牌不⾜n个,则不会删除令牌,且该数据包将被限流(要么丢弃,要么缓冲区等待) \"]},\"461\":{\"h\":\"固定时间窗⼝算法\",\"t\":[\"在固定的时间窗⼝内,可以允许固定数量的请求进⼊。\",\"超过数量就拒绝或者排队,等下⼀个时间段进⼊。\",\"这种实现计数器限流⽅式由于是在⼀个时间间隔内进⾏限制,如果⽤户在上个时间间隔结束前请求(但没有超过限制),同时在当前时间间隔刚开始请求(同样没超过限制),在各⾃的时间间隔内,这些请求都是正常的,但是将间隔临界的⼀段时间内的请求就会超过系统限制,可能导致系统被压垮\",\"固定时间窗⼝算法原理,如图4-6所示 \",\"由于计数器算法存在时间临界点缺陷,因此在时间临界点左右的极短时间段内容易遭到攻击。\",\"⽐如设定每分钟最多可以请求100次某个接⼝,如12:00:00-12:00:59时间段内没有数据请求,⽽12:00:59-12:01:00时间段内突然并发100次请求,⽽紧接着跨⼊下⼀个计数周期,计数器清零,在12:01:00-12:01:01内⼜有100次请求。\",\"那么也就是说在时间临界点左右可能同时有2倍的阀值进⾏请求,从⽽造成后台处理请求过载的情况,导致系统运营能⼒不⾜,甚⾄导致系统崩溃。\"]},\"462\":{\"h\":\"滑动时间窗⼝算法\",\"t\":[\"滑动窗⼝算法是把固定时间⽚进⾏划分,并且随着时间移动,移动⽅式为开始时间点变为时间列表中的第⼆时间点,结束时间点增加⼀个时间点,不断重复,通过这种⽅式可以巧妙的避开计数器的临界点的问题。\",\"滑动窗⼝算法可以有效的规避计数器算法中时间临界点的问题,但是仍然存在时间⽚段的概念。\",\"同时滑动窗⼝算法计数运算也相对固定时间窗⼝算法⽐较耗时\",\"滑动时间窗⼝算法,如图4-7所示 \"]},\"463\":{\"c\":[\"后端开发\",\"spring系列\"]},\"464\":{\"c\":[\"java\"]},\"465\":{\"h\":\"Mybatis字段自动注入\"},\"466\":{\"h\":\"提取公共字段\",\"t\":[\"import com.baomidou.mybatisplus.annotation.FieldFill; import com.baomidou.mybatisplus.annotation.TableField; import com.fasterxml.jackson.annotation.JsonFormat; import io.swagger.annotations.ApiModelProperty; import lombok.Data; import lombok.experimental.Accessors; import java.io.Serializable; import java.time.LocalDateTime; @Data public class BaseEntity implements Serializable { private static final long serialVersionUID = 1L; /** * 创建人 */ @TableField(value = \\\"creator\\\", fill = FieldFill.INSERT) private Integer creator; /** * 更新人 */ @TableField(value = \\\"updater\\\", fill = FieldFill.UPDATE) private Integer updater; /** * 创建时间 * <p> * FieldFill.INSERT 仅在插入时进行处理 */ @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\") @TableField(value = \\\"create_time\\\", fill = FieldFill.INSERT) private LocalDateTime createTime; /** * 更新时间 * <p> * FieldFill.UPDATE 仅在更新时进行处理 * </p> * FieldFill.INSERT_UPDATE 更新和插入时都进行处理 * </p> * 未指定 FieldFill 时是不会进行自动注入的 */ @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\") @TableField(value = \\\"update_time\\\", fill = FieldFill.UPDATE) private LocalDateTime updateTime; /** * 是否删除 0: 使用中 1: 已删除 */ private Integer del; }\"]},\"467\":{\"h\":\"自动注入类\",\"t\":[\"import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler; import lombok.extern.slf4j.Slf4j; import org.apache.ibatis.reflection.MetaObject; import org.springframework.stereotype.Component; import java.time.LocalDateTime; @Slf4j @Component public class MybatisMetaObjectHandler implements MetaObjectHandler { static final ThreadLocal<Integer> THREAD_LOCAL = new ThreadLocal<>(); @Override public void insertFill(MetaObject metaObject) { this.setFieldValByName(\\\"createTime\\\", LocalDateTime.now(), metaObject); if (null != THREAD_LOCAL.get()) { this.setFieldValByName(\\\"creator\\\", THREAD_LOCAL.get(), metaObject); } else { this.setFieldValByName(\\\"creator\\\", 0, metaObject); } } @Override public void updateFill(MetaObject metaObject) { this.setFieldValByName(\\\"updateTime\\\", LocalDateTime.now(), metaObject); if (null != THREAD_LOCAL.get()) { this.setFieldValByName(\\\"updater\\\", THREAD_LOCAL.get(), metaObject); } else { this.setFieldValByName(\\\"updater\\\", 0, metaObject); } } }\",\"ps: 自动注入类中的用户ID需要在拦截器中进行设置,因为拦截器优先级较高.\"]},\"468\":{\"c\":[\"后端开发\",\"spring系列\"]},\"469\":{\"c\":[\"java\"]},\"470\":{\"h\":\"springBoot配置swagger\",\"t\":[\"本文使用的是knife4j(页面好看!!)\",\"导入依赖\",\" <!--region swagger-knife4j--> <dependency> <groupId>com.github.xiaoymin</groupId> <artifactId>knife4j-openapi2-spring-boot-starter</artifactId> <version>${knife4j.version}</version> </dependency> <!--endregion-->\"]},\"471\":{\"h\":\"swaggerConfig\",\"t\":[\"import com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j; import io.swagger.annotations.ApiOperation; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.service.ApiInfo; import springfox.documentation.service.Contact; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc; @EnableKnife4j @Configuration @EnableSwagger2WebMvc public class SwaggerConfig { /** * 创建API */ @Bean() public Docket createRestApi() { return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .host(\\\"https://127.0.0.1:8001\\\") .groupName(\\\"0.1 版本\\\") .select() .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) .paths(PathSelectors.any()) .build(); } /** * 添加摘要信息 */ private ApiInfo apiInfo() { Contact contact = new Contact(\\\"黑色的小火苗\\\", \\\"https://test.com/test\\\", \\\"test@163.com\\\"); // 用ApiInfoBuilder进行定制 return new ApiInfoBuilder() // 设置标题 .title(\\\"月光后台接口服务\\\") // 描述 .description(\\\"描述：月光后台接口服务\\\") // 作者信息 .version(\\\"0.1\\\") .contact(contact) .build(); } }\"]},\"472\":{\"h\":\"webConfig配置swagger\",\"t\":[\"import cn.moonlight.framework.interceptor.HeaderResolveInterceptor; import cn.moonlight.framework.interceptor.AuthorityInterceptor; import cn.moonlight.framework.resolver.UserAnnotationArgumentResolver; import lombok.RequiredArgsConstructor; import org.springframework.context.annotation.Configuration; import org.springframework.web.method.support.HandlerMethodArgumentResolver; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; import java.util.Arrays; import java.util.List; @Configuration @RequiredArgsConstructor public class WebConfig implements WebMvcConfigurer { private final AuthorityInterceptor authorityInterceptor; private final HeaderResolveInterceptor headerResolveInterceptor; private static final List<String> exclude_path = Arrays.asList(\\\"/login/*\\\", \\\"/error\\\", \\\"/swagger-resources\\\", \\\"/swagger-resources/configuration/ui\\\", \\\"/doc.html\\\", \\\"/webjars/css/**\\\", \\\"/webjars/js/**\\\", \\\"/favicon.ico\\\"); /** * 接口放开以下接口的访问 */ public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(authorityInterceptor) .addPathPatterns(\\\"/**\\\") .excludePathPatterns(exclude_path); registry.addInterceptor(headerResolveInterceptor) .addPathPatterns(\\\"/**\\\") .excludePathPatterns(exclude_path); } /** * 放开以下静态资源的访问 */ public void addResourceHandlers(ResourceHandlerRegistry registry) { // swagger配置 registry.addResourceHandler(\\\"/**\\\") .addResourceLocations(\\\"classpath:/static/\\\"); registry.addResourceHandler(\\\"/swagger-ui.html\\\", \\\"doc.html\\\") .addResourceLocations(\\\"classpath:/META-INF/resources/\\\"); registry.addResourceHandler(\\\"/webjars/**\\\") .addResourceLocations(\\\"classpath:/META-INF/resources/webjars/\\\"); } }\"]},\"473\":{\"c\":[\"后端开发\",\"spring系列\"]},\"474\":{\"c\":[\"java\"]},\"475\":{\"h\":\"全局异常拦截器\",\"t\":[\"我们也可以拦截自定义的异常类,下面是一个异常类的demo\",\"public class RsaException extends RuntimeException { public RsaException(String message) { super(message); } }\",\"全局拦截异常案例\",\"import cn.moonlight.exception.ExcelException; import cn.moonlight.exception.RsaException; import cn.moonlight.response.ResponseBo; import cn.moonlight.response.ResultCode; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.MethodArgumentNotValidException; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.ResponseBody; import org.springframework.web.bind.annotation.RestControllerAdvice; import java.io.ByteArrayOutputStream; import java.io.PrintStream; import java.util.Objects; @Slf4j @RestControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(RsaException.class) public ResponseBo<?> rasException(RsaException e) { log.error(\\\"异常信息：{}，{}\\\", e.getMessage(), e.getClass()); return ResponseBo.error(ResultCode.EXCEL_ERROR, e.getMessage()); } @ExceptionHandler(MethodArgumentNotValidException.class) public ResponseBo<?> bindException(MethodArgumentNotValidException e) { log.error(\\\"异常信息：{}，{}\\\", e.getMessage(), e.getClass()); return ResponseBo.error(Objects.requireNonNull(e.getBindingResult().getFieldError()).getDefaultMessage()); } @ExceptionHandler(Exception.class) @ResponseBody public ResponseBo<?> handleException(Exception exception) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); exception.printStackTrace(new PrintStream(byteArrayOutputStream)); log.info(byteArrayOutputStream.toString()); log.error(\\\"异常信息：\\\" + exception.getMessage()); return ResponseBo.error(ResultCode.ERROR_CODE, exception.getMessage()); } }\"]},\"476\":{\"c\":[\"后端开发\",\"spring系列\"]},\"477\":{\"c\":[\"java\"]},\"478\":{\"h\":\"SpringBoot 拦截器注入数据\"},\"479\":{\"h\":\"创建注解\",\"t\":[\"import java.lang.annotation.*; @Target(ElementType.PARAMETER) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface CurrentUser {}\"]},\"480\":{\"h\":\"创建拦截器\",\"t\":[\"/** * redis 中存在的key */ public class KeyConstant { public final static String REQUEST_HEADER_TOKEN_KEY = \\\"token\\\"; public final static String USER_SESSION_KEY = \\\"CARBON_TOKEN_\\\"; public final static long TOKEN_TIMEOUT = 86400; public final static String CURRENT_USER_KEY = \\\"CURRENT_USER\\\"; public final static String NOW_CARBON_PRICE = \\\"NOW_CARBON_PRICE_\\\"; } import com.alibaba.fastjson2.JSONObject; import lombok.extern.slf4j.Slf4j; import org.springframework.context.annotation.Configuration; import org.springframework.stereotype.Component; import org.springframework.web.servlet.HandlerInterceptor; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @Slf4j @Component public class HeaderResolveInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) { try { //获取当前用户redis session, UserSession 就是我们在redis中存储的数据.具体怎么从redis获取可以根据自己情况进行获取 Integer userId = TokenUtil.getUserId(request.getHeader(KeyConstant.REQUEST_HEADER_TOKEN_KEY)); MybatisMetaObjectHandler.THREAD_LOCAL.set(userId); UserSession userSession = JSONObject.parseObject((String) RedisUtil.get(KeyConstant.USER_SESSION_KEY + userId), UserSession.class); log.info(\\\"[ preHandle ] 获取的 userSession 为: {}\\\", userSession); if (userSession != null) { //绑定到request request.setAttribute(KeyConstant.CURRENT_USER_KEY, userSession); } } catch (Exception e) { log.error(\\\"解析请求头失败:{}\\\", e.toString()); } return true; } }\"]},\"481\":{\"h\":\"接口注入数据\",\"t\":[\"import lombok.extern.slf4j.Slf4j; import org.springframework.core.MethodParameter; import org.springframework.stereotype.Component; import org.springframework.web.bind.support.WebDataBinderFactory; import org.springframework.web.context.request.NativeWebRequest; import org.springframework.web.context.request.RequestAttributes; import org.springframework.web.method.support.HandlerMethodArgumentResolver; import org.springframework.web.method.support.ModelAndViewContainer; @Slf4j @Component public class UserAnnotationArgumentResolver implements HandlerMethodArgumentResolver { /** * 判断当前请求方法中是否存在 @CurrUser/@CurrOrg 注解,存在则返回 true 不存在则返回 false * * @param methodParameter 参数集合 * @return 存在则返回 true 不存在则返回 false */ @Override public boolean supportsParameter(MethodParameter methodParameter) { return methodParameter.hasParameterAnnotation(CurrentUser.class) && methodParameter.getParameterType().equals(UserSession.class); } /** * @param methodParameter 入参集合 * @param modelAndViewContainer model 和 view * @param nativeWebRequest web相关 * @param webDataBinderFactory 入参解析 * @return 参数值 */ @Override public Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) { CurrentUser currUser = methodParameter.getParameterAnnotation(CurrentUser.class); UserSession session = (UserSession) nativeWebRequest.getAttribute(KeyConstant.CURRENT_USER_KEY, RequestAttributes.SCOPE_REQUEST); log.info(\\\" [ resolveArgument ] 获取的 userSession 为: {}\\\", session); if (null != currUser && null != session) { return session; } return null; } }\"]},\"482\":{\"h\":\"将拦截器进行注册\",\"t\":[\"import lombok.RequiredArgsConstructor; import org.springframework.context.annotation.Configuration; import org.springframework.web.method.support.HandlerMethodArgumentResolver; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; import java.util.Arrays; import java.util.List; @Configuration @RequiredArgsConstructor public class WebConfig implements WebMvcConfigurer { private final AuthorityInterceptor authorityInterceptor; private final HeaderResolveInterceptor headerResolveInterceptor; private static final List<String> exclude_path = Arrays.asList(\\\"/login/*\\\", \\\"/error\\\", \\\"/swagger-resources\\\", \\\"/swagger-resources/configuration/ui\\\", \\\"/doc.html\\\"); public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(headerResolveInterceptor) .addPathPatterns(\\\"/**\\\") .excludePathPatterns(exclude_path); } @Override public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) { // 这里切记使用的是new而不是spring管理的实体,否则会注入失败. resolvers.add(new UserAnnotationArgumentResolver()); } }\"]},\"483\":{\"c\":[\"后端开发\",\"spring系列\"]},\"484\":{\"c\":[\"java\"]},\"485\":{\"h\":\"springBoot统一数据返回类\"},\"486\":{\"h\":\"code枚举类\",\"t\":[\"public enum ResultCode { OK(200, \\\"OK\\\"), ERROR_CODE(-1, \\\"请求失败\\\"), public final int code; public final String msg; ResultCode(int code, String msg) { this.code = code; this.msg = msg; } }\"]},\"487\":{\"h\":\"统一返回数据类\",\"t\":[\"import lombok.Getter; import java.io.Serializable; /** * 统一的 HTTP 响应格式。<br/> * code 为 \\\"ok\\\" 表示业务调用成功，否则是失败的错误码，如果有多个则以逗号分隔。<br/> * data 是业务数据，如果失败了则是 null。 * <p/> */ @Getter public class ResponseBo<T> implements Serializable { /** * 响应码 */ private final int code; /** * 错误信息 */ private final String message; /** * 相应数据 */ private final T data; private ResponseBo(int code, String message, T data) { this.code = code; this.data = data; this.message = message; } public static ResponseBo<?> error() { return error(ResultCode.ERROR_CODE, null); } public static <T> ResponseBo<T> error(String msg) { return error(ResultCode.ERROR_CODE, msg); } public static <T> ResponseBo<T> error(ResultCode code, String msg) { return all(code, msg, null); } public static <T> ResponseBo<T> error(ResultCode code) { return all(code, code.msg, null); } public static ResponseBo<?> ok() { return all(ResultCode.OK, null, null); } public static <T> ResponseBo<T> ok(T data) { return all(ResultCode.OK, null, data); } /** * 全参数自定义 * * @param enumCode 错误的枚举 * @param data 返回的数据实体 * @param message 错误信息 * @param <T> 泛型 * @return ResponseBo<T> */ public static <T> ResponseBo<T> all(ResultCode enumCode, String message, T data) { return new ResponseBo<>(enumCode.code, message, data); } }\"]},\"488\":{\"c\":[\"后端开发\",\"spring系列\"]},\"489\":{\"c\":[\"java\"]},\"490\":{\"h\":\"springBoot实现自定义脱敏注解\"},\"491\":{\"h\":\"创建脱敏枚举\",\"t\":[\"/** * 隐私数据类型枚举 */ public enum PrivacyTypeEnum { /** * 身份证号 */ ID_CARD(\\\"(\\\\\\\\d{4})\\\\\\\\d{10}(\\\\\\\\w{4})\\\", \\\"$1*****$2\\\"), /** * 手机号 */ PHONE(\\\"(\\\\\\\\d{3})\\\\\\\\d{4}(\\\\\\\\d{4})\\\", \\\"$1****$2\\\"), /** * 邮箱 */ EMAIL(\\\"(\\\\\\\\w?)(\\\\\\\\w+)(\\\\\\\\w)(@\\\\\\\\w+\\\\\\\\.[a-z]+(\\\\\\\\.[a-z]+)?)\\\", \\\"$1****$3$4\\\"); public final String regex; public final String replacement; PrivacyTypeEnum(String regex, String replacement) { this.regex = regex; this.replacement = replacement; } }\"]},\"492\":{\"h\":\"创建脱敏注解处理类\",\"t\":[\"import cn.moonlight.common.enums.PrivacyTypeEnum; import cn.moonlight.common.interfaces.PrivacyEncrypt; import cn.moonlight.common.util.StringUtil; import com.alibaba.excel.util.StringUtils; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.BeanProperty; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.JsonSerializer; import com.fasterxml.jackson.databind.SerializerProvider; import com.fasterxml.jackson.databind.ser.ContextualSerializer; import lombok.AllArgsConstructor; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import java.io.IOException; import java.util.Objects; @Slf4j @NoArgsConstructor @AllArgsConstructor public class PrivacySerializer extends JsonSerializer<String> implements ContextualSerializer { private PrivacyEncrypt encrypt; @Override public com.fasterxml.jackson.databind.JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException { // 如果bean为null那么直接设置为null if (property == null) { return prov.findNullValueSerializer(null); } // 如果不是String类型或者当前属性没有脱敏注解那么直接设置为原始处理的BeanProperty PrivacyEncrypt privacyEncrypt = property.getAnnotation(PrivacyEncrypt.class); if (!Objects.equals(property.getType().getRawClass(), String.class) || privacyEncrypt == null) { return prov.findNullValueSerializer(property); } // 走到这里说明是String类型且存在脱敏注解那么将脱敏注解设置为当前String的处理就好 return new PrivacySerializer(privacyEncrypt); } @Override public void serialize(String value, JsonGenerator gen, SerializerProvider serializers) throws IOException { // 如果值为空那么直接退出不再处理 if (StringUtils.isBlank(value)) return; // 如果处理类型不为空那么根据处理类型进行处理 if (encrypt.type() != null) { PrivacyTypeEnum privacyTypeEnum = encrypt.type(); gen.writeString(value.replaceAll(privacyTypeEnum.regex, privacyTypeEnum.replacement)); return; } // 如果处理类型为空那么根据正则表达式和替换字符串进行处理 if (StringUtils.isNotBlank(encrypt.regex()) && StringUtils.isNotBlank(encrypt.replacement())) { gen.writeString(value.replaceAll(encrypt.regex(), encrypt.replacement())); return; } // 如果处理类型为空且正则表达式和替换字符串都为空那么根据前缀不脱敏长度和后缀不脱敏长度进行处理 if (encrypt.prefixNoMaskLen() >= 0 && encrypt.suffixNoMaskLen() > 0) { gen.writeString(StringUtil.privacyEncrypt(value, encrypt.prefixNoMaskLen(), encrypt.suffixNoMaskLen(), encrypt.symbol())); } } }\"]},\"493\":{\"h\":\"创建脱敏注解\",\"t\":[\"import cn.moonlight.common.enums.PrivacyTypeEnum; import cn.moonlight.common.serializer.PrivacySerializer; import com.fasterxml.jackson.annotation.JacksonAnnotationsInside; import com.fasterxml.jackson.databind.annotation.JsonSerialize; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; /** * 自定义数据脱敏注解 */ @Target(ElementType.FIELD) // 作用在字段上 @Retention(RetentionPolicy.RUNTIME) // class文件中保留，运行时也保留，能通过反射读取到 @JacksonAnnotationsInside // 表示自定义自己的注解PrivacyEncrypt @JsonSerialize(using = PrivacySerializer.class) // 该注解使用序列化的方式 public @interface PrivacyEncrypt { /** * 脱敏数据类型（没给默认值，所以使用时必须指定type） */ PrivacyTypeEnum type(); /** * 正则表达式 */ String regex() default \\\"\\\"; /** * 表达式替换 */ String replacement() default \\\"\\\"; /** * 前置不需要打码的长度 */ int prefixNoMaskLen() default 0; /** * 后置不需要打码的长度 */ int suffixNoMaskLen() default 0; /** * 用什么打码 */ char symbol() default '*'; }\"]},\"494\":{\"c\":[\"后端开发\",\"spring系列\"]},\"495\":{\"c\":[\"java\"]},\"496\":{\"h\":\"SpringBoot定时任务\"},\"497\":{\"h\":\"定时任务\",\"t\":[\"需要在springBoot启动类上添加 @EnableScheduling 注解表示开启定时任务\",\"在一个方法上添加 @Scheduled 注解表示当前任务是定时指定该方法, @Scheduled 需要传入 cron 表达式\",\"cron 表达式可以在 https://qqe2.com/cron 调试cron表达式是否是想要的执行\"]},\"498\":{\"h\":\"案例\",\"t\":[\"import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.springframework.scheduling.annotation.Scheduled; import org.springframework.stereotype.Component; @Slf4j @Component public class PullDataTask { @Scheduled(cron = \\\"0 5 0 * * ?\\\") // 每天零点5分调用 public void pullData() {} }\"]},\"499\":{\"h\":\"cron表达式解释\",\"t\":[\"cron 表达式格式: {秒数} {分钟} {小时} {日期} {月份} {星期}\",\"{秒数}{分钟} ==> 允许值范围: 0~59 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常\",\"\\\"*\\\" 代表每隔1秒钟触发；\",\"\\\",\\\" 代表在指定的秒数触发，比如\\\"0,15,45\\\"代表0秒、15秒和45秒时触发任务\",\"\\\"-\\\"代表在指定的范围内触发，比如\\\"25-45\\\"代表从25秒开始触发到45秒结束触发，每隔1秒触发1次\",\"\\\"/\\\"代表触发步进(step)，\\\"/\\\"前面的值代表初始值(\\\"\\\"等同\\\"0\\\")，后面的值代表偏移量，比如\\\"0/20\\\"或者\\\"/20\\\"代表从0秒钟开始，每隔20秒钟触发1次，即0秒触发1次，20秒触发1次，40秒触发1次；\\\"5/20\\\"代表5秒触发1次，25秒触发1次，45秒触发1次；\\\"10-45/20\\\"代表在[10,45]内步进20秒命中的时间点触发，即10秒触发1次，30秒触发1次\",\"{小时} ==> 允许值范围: 0~23 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常,占位符和秒数一样\",\"{日期} ==> 允许值范围: 1~31 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常\",\"{星期} ==> 允许值范围: 1~7 (SUN-SAT),1代表星期天(一星期的第一天)，以此类推，7代表星期六(一星期的最后一天)，不允许为空值，若值不合法，调度器将抛出SchedulerException异常\",\"{年份} ==> 允许值范围: 1970~2099 ,允许为空，若值不合法，调度器将抛出SchedulerException异常\",\"注意：除了{日期}和{星期}可以使用\\\"?\\\"来实现互斥，表达无意义的信息之外，其他占位符都要具有具体的时间含义，且依赖关系为：年->月->日期(星期)->小时->分钟->秒数\"]},\"500\":{\"h\":\"corn 经典表达式\",\"t\":[\"\\\"30 **** ?\\\" 每半分钟触发任务\",\"\\\"30 10 ***?\\\" 每小时的10分30秒触发任务\",\"\\\"30 10 1**?\\\" 每天1点10分30秒触发任务\",\"\\\"30 10 1 20* ?\\\" 每月20号1点10分30秒触发任务\",\"\\\"30 10 1 20 10 ? *\\\" 每年10月20号1点10分30秒触发任务\",\"\\\"30 10 1 20 10 ? 2011\\\" 2011年10月20号1点10分30秒触发任务\",\"\\\"30 10 1 ? 10* 2011\\\" 2011年10月每天1点10分30秒触发任务\",\"\\\"30 10 1 ? 10 SUN 2011\\\" 2011年10月每周日1点10分30秒触发任务\",\"\\\"15,30,45****?\\\" 每15秒，30秒，45秒时触发任务\",\"\\\"15-45****?\\\" 15到45秒内，每秒都触发任务\",\"\\\"15/5****?\\\" 每分钟的每15秒开始触发，每隔5秒触发一次\",\"\\\"15-30/5****?\\\" 每分钟的15秒到30秒之间开始触发，每隔5秒触发一次\",\"\\\"0 0/3** *?\\\" 每小时的第0分0秒开始，每三分钟触发一次\",\"\\\"0 15 10 ?* MON-FRI\\\" 星期一到星期五的10点15分0秒触发任务\",\"\\\"0 15 10 L *?\\\" 每个月最后一天的10点15分0秒触发任务\",\"\\\"0 15 10 LW* ?\\\" 每个月最后一个工作日的10点15分0秒触发任务\",\"\\\"0 15 10 ? *5L\\\" 每个月最后一个星期四的10点15分0秒触发任务\",\"\\\"0 15 10 ?* 5#3\\\" 每个月第三周的星期四的10点15分0秒触发任务\",\"ps: corn在线表达式网站: https://qqe2.com/cron\"]},\"501\":{\"c\":[\"后端开发\",\"spring系列\"]},\"502\":{\"c\":[\"java\"]},\"503\":{\"h\":\"spring boot 整合 rabbitMQ\"},\"504\":{\"h\":\"搭建生产者工程\",\"t\":[\"pom.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.1.4.RELEASE</version> </parent> <groupId>cn.black_fire</groupId> <artifactId>springboot-rabbitmq-producer</artifactId> <version>1.0-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> </dependency> </dependencies> </project>\",\"创建配置文件和启动器. 在 application.yml 配置文件中添加以下内容\",\"spring: rabbitmq: port: 5672 host: 192.168.65.128 virtual-host: /black_fire_test username: black_fire password: black_fire\",\"创建配置文件\",\"package cn.black_fire.config; import org.springframework.amqp.core.*; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; /** * @author black_fire */ @Configuration public class RabbitMqConfig { /** * 交换机名称 */ public static final String ITEM_TOPIC_EXCHANGE = \\\"springboot_item_topic_exchange\\\"; /** * 队列名称 */ public static final String ITEM_QUEUE = \\\"springboot_item_queue\\\"; /** * 构建一个 itemTopicExchange 的交换机 */ @Bean(\\\"itemTopicExchange\\\") public Exchange topicExchange(){ return ExchangeBuilder.topicExchange(ITEM_TOPIC_EXCHANGE).durable(true).build(); } /** * 生成队列 */ @Bean public Queue itemQueue(){ return QueueBuilder.durable(ITEM_QUEUE).build(); } /** * 将队列绑定到交换机中 * @param queue 对列 * @param exchange 交换机 * `@Qualifier` 根据 bean 名指定,原本翻译为 [ 此注释可以在字段或参数上使用作为自动定向时的候选bean的限定符 ] * noargs() 代表不传参数 */ @Bean public Binding itemQueueExchange(@Qualifier(\\\"itemQueue\\\") Queue queue, @Qualifier(\\\"itemTopicExchange\\\") Exchange exchange){ return BindingBuilder.bind(queue).to(exchange).with(\\\"item.#\\\").noargs(); } }\",\"发送消息测试\",\"import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.amqp.rabbit.core.RabbitTemplate; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.test.context.junit4.SpringRunner; /** * @author black_fire */ @RunWith(SpringRunner.class) @SpringBootTest public class RabbitMqTest { @Autowired private RabbitTemplate rabbitTemplate; @Test public void test() { rabbitTemplate.convertAndSend(RabbitMqConfig.ITEM_TOPIC_EXCHANGE, \\\"item.insert\\\", \\\"添加商品 routingKey 为 item.insert\\\"); rabbitTemplate.convertAndSend(RabbitMqConfig.ITEM_TOPIC_EXCHANGE, \\\"item.update\\\", \\\"更新商品 routingKey 为 item.update\\\"); rabbitTemplate.convertAndSend(RabbitMqConfig.ITEM_TOPIC_EXCHANGE, \\\"item.delete\\\", \\\"删除商品 routingKey 为 item.delete\\\"); } }\"]},\"505\":{\"h\":\"搭建消费者工程\",\"t\":[\"pom.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.black_fire</groupId> <artifactId>springboot-rabbitmq-consumer</artifactId> <version>1.0-SNAPSHOT</version> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.1.4.RELEASE</version> </parent> <properties> <maven.compiler.source>8</maven.compiler.source> <maven.compiler.target>8</maven.compiler.target> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> </dependency> </dependencies> </project>\",\"创建配置文件和启动器. 在 application.yml 配置文件中添加以下内容\",\"spring: rabbitmq: port: 5672 host: 192.168.65.128 virtual-host: /black_fire_test username: black_fire password: black_fire\",\"创建消息监听\",\"package com.black_fire.listener; import org.springframework.amqp.rabbit.annotation.RabbitListener; import org.springframework.stereotype.Component; /** * @author black_fire */ @Component public class MyListener { @RabbitListener(queues = \\\"springboot_item_queue\\\") public void myListener(String massage){ System.out.println(\\\"接收到的消息为\\\"+massage); } }\",\"写一个死循环保持监听\",\"package com.blackfire; import com.black_fire.ConsumerApplication; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.test.context.junit4.SpringRunner; /** * @author black_fire */ @RunWith(SpringRunner.class) @SpringBootTest(classes = ConsumerApplication.class) public class ConsumerTest { @Test public void test(){ while (true){} } }\"]},\"506\":{\"c\":[\"后端开发\",\"spring系列\"]},\"507\":{\"c\":[\"java\"]},\"508\":{\"h\":\"spring boot整合redis\",\"t\":[\"springData也是和SpringBoot齐名的项目.\",\"说明: SpringBoot2.x之后,原来使用的Jedis被替换为了lettuce.\",\"jedis: 采用的直连,多个线程操作的话是不安全的,如果想要避免不安全,使用jedis pool连接池! 更像BIO模式. lettuce: 采用netty, 实例可用再更多个线程中进行共享, 不存在线程不安全的情况.\"]},\"509\":{\"c\":[\"后端开发\",\"redis\"]},\"510\":{\"c\":[\"java\"]},\"511\":{\"h\":\"Mybatis\",\"t\":[\"简介: MyBatis 本是 apache 的一个开源项目 iBatis,2010 年这个项目由 apache software foundation 迁移到了 google code,并且改名为MyBatis 。\",\"2013 年 11 月迁移到 Github。iBATIS 一词来源于“internet”和“abatis”的组合,是一个基于 Java 的持久层框架。\",\"iBATIS 提供的持久层框架包括 SQL Maps 和 Data Access Objects(DAO)。\",\"Mybatis 基于java的持久层框架,它的内部封装了JDBC,让开发人员只需要关注SQL语句本身,不需要花费精力在驱动的加载、连接的创建、Statement的创建等复杂的过程。\",\"Mybatis通过XML或注解的方式将要执行的各种的statement配置起来,并通过java对象和statement中的sql的动态参数进行映射生成最终执行的SQL语句,最后由mybatis框架执行SQL,并将结果直接映射为java对象。\",\"采用了ORM思想解决了实体类和数据库表映射的问题,对JDBC进行了封装,屏蔽了JDBCAPI底层的访问细节,避免我们与jdbc的api打交道,就能完成对数据的持久化操作。\",\"ORM 中分别表示为:\",\"O --> Object Java对象 POJO\",\"R --> Relation 关系,就是数据库中的一张表\",\"M --> mapping 映射\"]},\"512\":{\"h\":\"Mybaits 对象分析\"},\"513\":{\"h\":\"Resources\",\"t\":[\"Resources 类,顾名思义就是资源,用于读取资源文件。其有很多方法通过加载并解析资源文件,返回不同类型的IO流对象。\"]},\"514\":{\"h\":\"SqlSessionFactoryBuilder\",\"t\":[\"SqlSessionFactory的创建,需要使用SqlSessionFactoryBuilder对象的build()方法,事实上使用SqlSessionFactoryBuilder的原因是将SqlSessionFactory这个复杂对象的创建交由Builder来执行,也就是使用了建造者设计模式。\",\"建造者模式\",\"又称生成器模式,是一种对象的创建模式。\",\"可以将一个产品的内部表象与产品的生成过程分割开来, 从而可以使一个建造过程生成具有不同的内部表象的产品(将一个复杂对象的构建与它的表示分离, 使得同样的构建过程可以创建不同的表示).\",\"这样用户只需指定需要建造的类型就可以得到具体产品,而不需要了解具体的建造过程和细节.\",\"在建造者模式中,角色分指导者(Director)与建造者(Builder) 用户联系指导者, 指导者指挥建造者, 最后得到产品. 建造者模式可以强制实行一种分步骤进行的建造过程.\"]},\"515\":{\"h\":\"SqlSessionFactory\",\"t\":[\"SqlSessionFactory 接口对象是一个重量级对象(系统开销大的对象),是线程安全的,所以一个应用只需要一个该对象即可。\",\"创建SqlSession需要使用SqlSessionFactory接口的的 openSession()方法。\",\"默认的 openSession()方法没有参数,它会创建有如下特性的 SqlSession\",\"会开启一个事务(也就是不自动提交)。\",\"将从由当前环境配置的 DataSource 实例中获取 Connection 对象。事务隔离级别将会使用驱动或数据源的默认设置。\",\"预处理语句不会被复用,也不会批量处理更新。\",\"当参数为 TRUE 是 会自动提交, FALSE 时需要手动提交, 默认为 false.\",\"SqlSession接口对象用于执行持久化操作,SqlSession 中一次会话已创建SqlSession对象开始到SqlSession对象关闭为结束.\",\"PS: SqlSession 接口对象是线程不安全的,所以每次数据库会话结束前需要马上调用其 close()方法将其关闭。\"]},\"516\":{\"h\":\"Mybatis 单独使用\",\"t\":[\"本次使用的数据库需要自己创建,在创建时字符集选为utf8mb4排序规则选为utf8mb4_general_ci\"]},\"517\":{\"h\":\"导入依赖\",\"t\":[\"<dependencies> <!-- spring start --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.2.15.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>5.2.15.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-beans</artifactId> <version>5.2.15.RELEASE</version> </dependency> <!-- spring end --> <!-- Mybatis start --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.6</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <!-- Mybatis end --> <dependency> <!-- 测试依赖,可不导入 --> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13.1</version> </dependency> <dependency> <!-- lombok 依赖(减少get/set生成) --> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.24</version> </dependency> </dependencies>\"]},\"518\":{\"h\":\"创建配置文件\",\"t\":[\"ps: Resource文件夹中创建,文件名可自定义,我这里就定义为 mybatis.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <properties resource=\\\"db.properties\\\" /> <!--配置 mybatis 环境--> <environments default=\\\"development\\\"> <!--id:数据源的名称--> <environment id=\\\"development\\\"> <!--事务类型:使用 JDBC 事务,使用 Connection 的提交和回滚--> <transactionManager type=\\\"JDBC\\\"/> <!--数据源 dataSource:创建数据库 Connection 对象type: POOLED 使用数据库的连接池--> <dataSource type=\\\"POOLED\\\"> <!--连接数据库的四大参数注意数据库版本使用的是MySQL8,如果是mysql5的话,driver和url都不一样,参考学过的JDBC--> <property name=\\\"driver\\\" value=\\\"${database.driver}\\\"/> <property name=\\\"url\\\" value=\\\"${database.url}\\\"/> <property name=\\\"username\\\" value=\\\"${database.username}\\\"/> <property name=\\\"password\\\" value=\\\"${database.password}\\\"/> </dataSource> </environment> </environments> <mappers> <!-- 加上这个后就会扫描该路径下所用到的 *Mapper 和 *Mapper.xml 文件 --> <package name=\\\"扫描的包路径\\\"/> </mappers> </configuration>\"]},\"519\":{\"h\":\"数据库配置\",\"t\":[\"ps: 这些配置也可以在mybaits.xml文件中配置\",\"database.driver=com.mysql.cj.jdbc.Driver database.url=jdbc:mysql://ip:port/databaseName?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT database.username=root database.password=root\"]},\"520\":{\"h\":\"SqlSession获取Mapper\",\"t\":[\"import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import java.io.IOException; import java.io.Reader; /** * &#064;Author Sunset * <p> * 单独使用 Mybatis 时重点是如何获取 SqlSession. * <p> * 1. 通过 SqlSessionFactoryBuilder( 建造者模式对象创建) 来获取到 SqlSessionFactory 工厂. * <p> * 2. 从 SqlSessionFactory 工厂调取 openSession() 获取 SqlSession. */ public class MybatisUtil { /** * 将本次使用的 SqlSession 所处的线程封闭到 TreadLocal */ private static final ThreadLocal<SqlSession> THREAD_LOCAL = new ThreadLocal<>(); private static final SqlSessionFactory FACTORY; static { Reader reader = null; try { // 读取配置文件,参数是配置文件名车 reader = Resources.getResourceAsReader(\\\"mybatis.xml\\\"); } catch (IOException e) { e.printStackTrace(); } // 创建工厂 FACTORY = new SqlSessionFactoryBuilder().build(reader); } /** * 获取链接 * @return 返回 SqlSession */ public static SqlSession getSqlSession(){ // 从threadLocal中获取 SqlSession sqlSession = THREAD_LOCAL.get(); if (sqlSession == null){ // openSession 更改为true 会自动提交 sqlSession = FACTORY.openSession(); // 将sqlSession和线程进行绑定 THREAD_LOCAL.set(sqlSession); } return sqlSession; } /** * 关闭链接 */ public static void closeSqlSession(){ // 从threadLocal中获取 SqlSession sqlSession = THREAD_LOCAL.get(); if (sqlSession != null){ sqlSession.close(); THREAD_LOCAL.remove(); } } }\"]},\"521\":{\"h\":\"创建对应的Mapper和Mapper.xml\",\"t\":[\"UserMapper.java\",\"import org.apache.ibatis.annotations.Param; import org.sunset.cn.entity.User; import java.util.List; public interface UserMapper { List<User> queryAll(@Param(\\\"id\\\") Integer id); }\",\"UserMapper.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace 必须时 mapper 文件的完全限定名 --> <mapper namespace=\\\"org.sunset.cn.mapper.UserMapper\\\"> <select id=\\\"queryAll\\\" resultType=\\\"org.sunset.cn.entity.User\\\"> select id,name,age,email from user <where> <if test=\\\"id != null and id != 0\\\"> id = #{id}</if> </where> </select> </mapper>\"]},\"522\":{\"h\":\"调用Mapper\",\"t\":[\"UserService.java\",\"import org.sunset.cn.entity.User; import java.util.List; public interface UserService { /** * 传入 id 时根据 id查询,不传入时查询全部数据 * @param id 用户id * @return 用户数据 */ List<User> getUser(Integer id); }\",\"UserServiceImpl.java\",\"import org.sunset.cn.entity.User; import org.sunset.cn.mapper.UserMapper; import org.sunset.cn.util.MybatisUtil; import java.util.List; public class UserServiceImpl implements UserService { public UserMapper usersMapper = MybatisUtil.getSqlSession().getMapper(UserMapper.class); @Override public List<User> getUser(Integer id) { return usersMapper.queryAll(id); } // 直接使用 main 方法测试了,就不再去写测试方法调用了 public static void main(String[] args) { UserServiceImpl userService = new UserServiceImpl(); List<User> user = userService.getUser(null); user.forEach(System.out::println); } }\",\"ps: 在创建 Mapper 和Mapper.xml 文件时需要注意以下几点\",\"XML映射文件必须与实体类在同一个包下\",\"XML映射文件名称必须与实体类同名.\",\"XML映射文件需要注册到mybatis的全局配置文件中. (我这里使用的是包扫描所以不需要自己一个个进行注册)\"]},\"523\":{\"h\":\"配置文件标签\",\"t\":[\"配置文件中是有顺序的如果顺序错误也会报错,我们在 idea 中可以 ctrl+鼠标左键 点击 configuration 标签就可以看到.\",\"properties 标签有以下属性 \",\"resource: 该属性存在时是指定读取的 properties 文件.\",\"url: 这个属性不常用.\",\"environments \",\"default: 默认读取那个 environment\",\"environment 是 environments 的子标签 \",\"id: environment的id表示\",\"transactionManager 是 environment 的子标签 \",\"type: 选用的事务,我经常用的是 'JDBC'\",\"dataSource 是 environment 的子标签 \",\"type: 使用的连接池\",\"property \",\"name: 属性名\",\"value: 属性值\",\"mappers\",\"package 是 mappers 的子标签 \",\"name: 指定包下的所有Mapper接口\",\"mapper 是 mappers 的子标签 \",\"reource: 使用相对于类路径的资源,从 classpath 路径查找文件\",\"class: 使用的mapper接口的完全限定名,要求: 接口和映射文件同包同名\",\"url: 不常用\"]},\"524\":{\"h\":\"MapperXml标签\",\"t\":[\"select\",\"id 属性是这个 select 标签所对应的方法名,当前xml中唯一不可重复.\",\"此标签必须要有 resultType 或 resultMap 两个选一个使用.\",\"resultType 属性是指定要返回的java实体类.\",\"resultMap 属性是在实体类与数据库表字段不符时使用的.\",\"parameterType 属性是传入的参数类型\",\"update\",\"id 属性是这个 update 标签所对应的方法名,当前xml中唯一不可重复.\",\"parameterType 属性是传入的参数类型\",\"resultType/resultMap 在此标签中不常用.\",\"resultMap\",\"该标签用于处理数据库字段与实体类字段不一致的情况\",\"id 属性是这个 resultMap 标签的名称,当前xml中唯一不可重复.\",\"type 属性是 resultMaper的返回类型.\",\"id 子标签,主键列使用\",\"result 子标签 其他列使用\",\"id 子标签和 result 子标签的属性是一样的所以这里就写到一起了 \",\"column 表示数据库表中的列名,不区分大小写\",\"property 表示实体类中的对应的属性名,区分大小写\",\"javaType 实体类中的对应的属性的类型,可以省略,mybatis会自己推断\",\"jdbcType \\\"数据库中的类型column的类型\\\" 一般省略\",\"foreach标签 mapper 中的方法\",\" void addList(List<Users> list);\",\"xml 中定义对应的标签\",\" <!--批量添加--> <insert id=\\\"addList\\\" parameterType=\\\"arraylist\\\"> INSERT INTO users (loginname,password) VALUES <!-- collection:要遍历的集合,参数是集合类型,直接写list 如果使用 @Parm 指定的话就是 @Parm 中的字符串 item: 遍历的集合中的每一个数据 separator:将遍历的结果用 , 分割 --> <foreach collection=\\\"list\\\" item=\\\"t\\\" separator=\\\",\\\"> (#{t.loginName},#{t.passWord}) </foreach> </insert>\",\"sql 标签\",\"id 属性其他表中嵌套是用于指定当前 sql 标签使用, 当前 xml 唯一不可重复\",\"里面可以写通用的 sql 片段,其它标签引用时使用 include 标签即可.\",\"include 标签\",\"refid 要引用的标签 id\",\"以后遇到其他标签在进行补充吧,暂时常用的就这些.\",\"ps: parameterType属性需要注意: 如果传入的是 List/Set/.. 那么 parameterType 里传入的是 List 那组尖括号里所包的类型,例如传入的参数是 List<Integer> 那么 parameterType= integer.\"]},\"525\":{\"h\":\"转义字符\",\"t\":[\"字符\",\"转义符号\",\"备注\",\"<\",\"<\",\"小于\",\"<=\",\"<=\",\"小于等于\",\">\",\">\",\"大于\",\">=\",\">=\",\"大于等于\",\"<>\",\"<>\",\"不等于\",\"&\",\"&\",\"与\",\"’\",\"'\",\"单引号\",\"”\",\"\\\"\",\"双引号\"]},\"526\":{\"c\":[\"后端开发\",\"spring系列\"]},\"527\":{\"c\":[\"java\"]},\"528\":{\"h\":\"spring\",\"t\":[\"本文记录了 spring/bean注入/aop/事务.\"]},\"529\":{\"h\":\"spring 优势\",\"t\":[\"方便解耦,简化开发 Spring 就是一个大工厂,可以将所有对象的创建和依赖关系的维护交给 Spring 管理。\",\"方便集成各种优秀框架 Spring 不排斥各种优秀的开源框架,其内部提供了对各种优秀框架(如 Struts2、Hibernate、MyBatis 等)的直接支持。\",\"降低 Java EE API 的使用难度 Spring 对 Java EE 开发中非常难用的一些 API(JDBC、JavaMail、远程调用等)都提供了封装,使这些 API 应用的难度大大降低。\",\"方便程序的测试 Spring 支持 JUnit4,可以通过注解方便地测试 Spring 程序。\",\"AOP 编程的支持 Spring 提供面向切面编程,可以方便地实现对程序进行权限拦截和运行监控等功能。\",\"声明式事务的支持 只需要通过配置就可以完成对事务的管理,而无须手动编程\"]},\"530\":{\"h\":\"spring 核心容器由以下部分组成\",\"t\":[\"Spring-core: 提供框架的基本组成部分,包括 IoC 和依赖注入功能\",\"Spring-beans: 提供 BeanFactory,工厂模式的微妙实现,它移除了编码式单例的需要,并且可以把配置和依赖从实际编码逻辑中解耦。\",\"Spring-context: 建立在由 core和 beans 模块的基础上建立起来的,它以一种类似于 JNDI 注册的方式访问对象。Context 模块继承自 Bean 模块,并且添加了国际化(比如,使用资源束)、事件传播、资源加载和透明地创建上下文(比如,通过 Servelet 容器)等功能。Context 模块也支持 JavaEE 的功能,比如 EJB、JMX 和远程调用等。ApplicationContext 接口是 Context 模块的焦点。\",\"Spring-context-support: 提供了对第三方集成到 Spring 上下文的支持,比如缓存(EhCache,Guava, JCache)、邮件(JavaMail)、调度(CommonJ, Quartz)、模板引擎(FreeMarker,JasperReports, Velocity)等\",\"Spring-expression(SpEL,Spring 表达式语言,Spring Expression Language)\"]},\"531\":{\"h\":\"控制反转(IOC)\"},\"532\":{\"h\":\"BeanFactory\",\"t\":[\"BeanFactory 是基础类型的 IoC 容器,是一个管理 Bean 的工厂,它主要负责初始化各种 Bean,并调用它们的生命周期方法。\",\"BeanFactory 接口实现类最常见的是org.Springframework.beans.factory.xml.XmlBeanFactory,它是根据 XML 配置文件中的定义装配Bean 的.\",\"BeanFactory使用示例:\",\"FileSystemResource fileSystemResource = new FileSystemResource(Spring配置文件的名称); BeanFactory beanFactory = new XmlBeanFactory(fileSystemResource);\"]},\"533\":{\"h\":\"ApplicationContext\",\"t\":[\"ApplicationContext 是 BeanFactory 的子接口,也被称为应用上下文。\",\"它不仅提供了 BeanFactory 的所有功能,还添加了对 i18n(国际化)、资源访问、事件传播等方面的良好支持。\",\"ApplicationContext 接口有两个常用的实现类:\",\"ClassPathXmlApplicationContext——常用\",\"FileSystemXmlApplicationContext\"]},\"534\":{\"h\":\"ClassPathXmlApplicationContext\",\"t\":[\"该类从类路径 ClassPath 中寻找指定的 XML 配置文件,找到并装载完成 ApplicationContext 的实例化工作\",\"ClassPathXmlApplicationContext使用示例:\",\"FileSystemResource systemResource = new FileSystemResource(Spring配置文件的名称); Factory beanFactory = new XmlBeanFactory(systemResource);\"]},\"535\":{\"h\":\"FileSystemXmlApplicationContext\",\"t\":[\"它与 ClassPathXmlApplicationContext 的区别是:\",\"在读取 Spring 的配置文件时,FileSystemXmlApplicationContext 不再从类路径中读取配置文件,而是通过参数指定配置文件的位置,它可以获取类路径之外的资源,如“D:\\\\application.xml”。\",\"FileSystemXmlApplicationContext使用示例:\",\"ApplicationContext context = new FileSystemXmlApplicationContext(String configLocation);\"]},\"536\":{\"h\":\"bean注入\"},\"537\":{\"h\":\"DI注入\",\"t\":[\"容器将bean实例调用无参构造器创建对象并对其属性进行初始化的过程称为DI注入.\",\"DI注入有三大类:\",\"set注入: 是通过 setter 方法传入被调用者的实例。\",\"构造器: 构造注入是在构造调用者实例的同时,完成被调用者的实例化,使用构造器设置依赖关系。\",\"自动注入: \",\"对于引用类型属性的注入,也可不在配置文件中显示的注入. 可以通过为标签 设置 autowire 属性值,为引用类型属性进行隐式自动注入(默认是不自动注入引用类型属性)\",\"byName自动注入: 当配置文件中被调用者 bean 的 id 值与代码中调用者 bean 类的属性名相同时,可使用byName 方式,让容器自动将被调用者 bean 注入给调用者 bean.容器是通过调用者的 bean类的属性名与配置文件的被调用者 bean 的 id 进行比较而实现自动注入的。\",\"byType自动注入: 配置文件中被调用者 bean 的 class 属性指定的类,要与代码中调用者 bean 类的某引用类型属性类型同源。即要么相同,要么有 is-a 关系(子类,或是实现类)。但这样的同源的被调用 bean 只能有一个。多于一个,容器就不知该匹配哪一个了.\"]},\"538\":{\"h\":\"注解注入\",\"t\":[\"@Value: 需要在属性上使用注解@Value,该注解的value属性用于指定要注入的值。\",\"byType自动注入: 需要在引用属性上使用注解@Autowired,该注解默认使用按类型自动装配 Bean 的方式。\",\"byName自动注入: 需要在引用属性上联合使用注解@Autowired与@Qualifier。@Qualifier 的value属性用于指定要匹配的Bean的id值。\",\"@Resource: @Resource 注解既可以按名称匹配Bean也可以按类型匹配Bean,默认是按名称注入。(JDK6以上可用,JDK17以上与JDK8版本的导包路径不同.)\"]},\"539\":{\"h\":\"Bean控制注解\",\"t\":[\"@Controller: 用于controller实现类的注解,该注解创建的对象可以作为处理器接收用户的请求。\",\"@Service: 用户service实现类的注解\",\"@Component: 声明当前是一个bean 并交给 spring 管理\",\"@Repository: 用于dao实现类的的注解,在数据持久化对象中使用\",\"ps: @Repository,@Service,@Controller 是对@Component 注解的细化,标注不同层的对象。 即持久层对象,业务层对象,控制层对象。\"]},\"540\":{\"h\":\"AOP\",\"t\":[\"术语解释\",\"Target(目标对象): 要被增强的对象,一般是业务逻辑类的对象。\",\"Proxy(代理): 一个类被 AOP 织入增强后,就产生一个结果代理类。\",\"Aspect(切面): 表示增强的功能,就是一些代码完成的某个功能,非业务功能。 是切入点和通知的结合。\",\"Joinpoint(连接点): 所谓连接点是指那些被拦截到的点。 在Spring中,这些点指的是方法(一般是类中的业务方法),因为Spring只支持方法类型的连接点。\",\"Pointcut(切入点): \",\"切入点指声明的一个或多个连接点的集合。通过切入点指定一组方法。\",\"被标记为 final 的方法是不能作为连接点与切入点的。\",\"因为最终的是不能被修改的,不能被增强的。\",\"Advice(通知/增强): \",\"所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。通知定义了增强代码切入到目标代码的时间点,是目标方法执行之前执行,还是之后执行等。通知类型不同,切入时间不同。\",\"通知的类型:前置通知,后置通知,异常通知,最终通知,环绕通知。\",\"切入点定义切入的位置,通知定义切入的时间。\",\"Weaving(织入): 是指把增强应用到目标对象来创建新的代理对象的过程。 spring 采用动态代理织入,而 AspectJ 采用编译期织入和类装载期织入。\"]},\"541\":{\"h\":\"AspectJ 对 AOP 的实现\",\"t\":[\"AspectJ的通知类型\",\"前置通知\",\"后置通知\",\"环绕通知\",\"异常通知\",\"最终通知\",\"AspectJ 定义了专门的表达式用于指定切入点, 表达式的原型: execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern ?)\",\"modifiers-pattern 访问权限类型\",\"ret-type-pattern 返回值类型\",\"declaring-type-pattern 包名类名\",\"name-pattern(param-pattern) 方法名(参数类型和参数个数)\",\"throws-pattern 抛出异常类型\",\"？表示可选的部分\",\"语法: execution(访问权限 方法返回值 方法声明(参数) 异常类型) 访问权限和异常类型可以省略或用符号代替.\",\"符号解释:\",\"*: 0-多个任意字符\",\"..: 用在方法参数中,表示任意个参数；用在包名后,表示当前及其子包路径\",\"+: 用在类名后,表示当前及其子类；用在接口后,表示当前接口及其实现类\",\"切入点示例:\",\"execution(* com.sunset.service.*.*(..)) : 指定切入点为:定义在 service 包里的任意类的任意方法。\",\"execution(* com.sunset.service..*.*(..)): 指定切入点为: 定义在 service 包或者子包里的任意类的任意方法 .. 出现在类名中时,后面必须跟 *,表示包、子包下的所有类。\",\"execution(* com.sunset.service.IUserService+.*(..)): 指定切入点为: IUserService 若为接口,则为接口中的任意方法及其所有实现类中的任意方法 若为类,则为该类及其子类中的任意方法。\"]},\"542\":{\"h\":\"AOP示例\"},\"543\":{\"h\":\"引入依赖\",\"t\":[\" <!--spring 核心依赖--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.2.13.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>5.2.13.RELEASE</version> </dependency>\"]},\"544\":{\"h\":\"创建业务接口与实现类\",\"t\":[\"/** * Service 接口 */ public interface PersonService { void add(); } /** * 实现类 */ @Service public class PersonServiceImpl implements PersonService { @Override public void add() { System.out.println(\\\"add ---\\\"); } }\"]},\"545\":{\"h\":\"定义AOP切面类\",\"t\":[\"import org.aspectj.lang.JoinPoint; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.*; import org.springframework.stereotype.Component; /* * 在定义好切面 Aspect 后,需要通知 Spring 容器,让容器生成“目标类+ 切面”的代理对象。 * 这个代理是由容器自动生成的,只需要在 Spring 配置文件中注册一个基于 aspectj 的自动代理生成器,其就会自动扫描到@Aspect 注解,并按通知类型与切入点,将其织入,并生成代理。 */ @Component @Aspect public class MyAspect { /* @Before: 前置通知, 目标方法运行前运行 @After: 后置通知, 目标方法运行后运行 @AfterReturning: 返回通知, 目标方法返回值之后运行 @AfterThrowing: 异常通知, 目标方法抛出异常时运行 @Around: 环绕通知, 目标方法运行前后运行 */ /** * 当较多的通知增强方法使用相同的 execution 切入点表达式时,编写、维护均较为麻烦。 * AspectJ 提供了@Pointcut 注解,用于定义 execution 切入点表达式。 * 其用法是,将@Pointcut 注解在一个方法之上,以后所有的 execution 的 value 属性值均 * 可使用该方法名作为切入点。代表的就是@Pointcut 定义的切入点。 * 这个使用@Pointcut 注解方法一般使用 private 的标识方法,即没有实际作用的方法。 */ @Pointcut(\\\"execution(* com.blackFire.service..*.*(..))\\\") private void pointCut() { } @Pointcut(\\\"execution(* com.blackFire.service..*.add*(..))\\\") private void pointCut2() { } /** * 声明前置通知 * */ @Before(\\\"pointCut()\\\") public void before(JoinPoint jp) { System.out.println(\\\"前置通知:在目标方法执行之前被调用的通知\\\"); String name = jp.getSignature().getName(); System.out.println(\\\"拦截的方法名称:\\\" + name); Object[] args = jp.getArgs(); System.out.println(\\\"方法的参数格式:\\\" + args.length); System.out.println(\\\"方法参数列表:\\\"); for (Object arg : args) { System.out.println(\\\"\\\\t\\\" + arg); } } /** * AfterReturning 注解声明后置通知 * value: 表示切入点表达式 * returning 属性表示 返回的结果,如果需要的话可以在后置通知的方法中修改结果 */ @AfterReturning(value = \\\"pointCut2()\\\",returning = \\\"result\\\") public Object afterReturn(Object result){ if(result!=null){ boolean res=(boolean)result; if(res){ result=false; } } System.out.println(\\\"后置通知:在目标方法执行之后被调用的通知,result=\\\"+result); return result; } /** * Around 注解声明环绕通知 * ProceedingJoinPoint 中的proceed方法表示目标方法被执行 */ @Around(value = \\\"pointCut()\\\") public Object around(ProceedingJoinPoint pjp) throws Throwable { System.out.println(\\\"环绕方法---目标方法的执行之前\\\"); Object proceed = pjp.proceed(); System.out.println(\\\"环绕方法---目标方法的执行之后\\\"); return proceed; } /** * AfterThrowing 注解声明异常通知方法 * value: 表示切入点表达式 * returning 属性表示 返回的结果,如果需要的话可以在后置通知的方法中修改结果 */ @AfterThrowing(value = \\\"pointCut()\\\",throwing = \\\"ex\\\") public void exception(JoinPoint jp,Throwable ex){ //一般会把异常发生的时间、位置、原有都记录下来 System.out.println(\\\"异常通知:在目标方法执行出现异常的时候才会别调用的通知,否则不执行\\\"); System.out.println(jp.getSignature()+\\\"方法出现异常,异常信息是:\\\"+ex.getMessage()); } /** * After 注解声明为最终通知 */ @After( \\\"pointCut()\\\") public void myFinally(){ System.out.println(\\\"最终通知:无论是否出现异常都是最后被调用的通知\\\"); } }\"]},\"546\":{\"h\":\"spring配置文件中注册Aop代理类\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd \\\"> <!-- 配置包扫描, 在 base-package 中配置多个包扫描时使用 `;` 进行分割,也可以使用空格进行分割 --> <context:component-scan base-package=\\\"com.blackFire.domain;com.blackFire.service;com.blackFire.aop\\\"/> <!-- 开启 aspectj 使用--> <aop:aspectj-autoproxy proxy-target-class=\\\"true\\\"/> <!-- aop:aspectj-autoproxy的底层是由 AnnotationAwareAspectJAutoProxyCreator 实现的, 是基于 AspectJ 的注解适配自动代理生成器。 其工作原理是,aop:aspectj-autoproxy通过扫描找到@Aspect 定义的切面类,再由切面类根据切入点找到目标类的目标方法,再由通知类型找到切入的时间点。 --> </beans>\"]},\"547\":{\"h\":\"Spring 事务\",\"t\":[\"事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量\",\"事务隔离级别\",\"事务传播行为\",\"事务默认超时时限\",\"事务隔离级别常量,这些常量均是以 ISOLATION_开头\",\"DEFAULT: 采用 DB 默认的事务隔离级别。 MySql 的默认为REPEATABLE_READ； Oracle默认为READ_COMMITTED。\",\"READ_UNCOMMITTED: 读未提交,未解决任何并发问题。\",\"READ_COMMITTED: 读已提交,解决脏读,存在不可重复读与幻读。\",\"REPEATABLE_READ: 可重复读。解决脏读、不可重复读,存在幻读\",\"SERIALIZABLE: 串行化。不存在并发问题。\"]},\"548\":{\"h\":\"事务传播行为常量\",\"t\":[\"事务传播行为常量, 所谓事务传播行为是指,处于不同事务中的方法在相互调用时,执行期间事务的维护情况。 如,A 事务中的方法 doSome()调用 B 事务中的方法 doOther(),在调用执行期间事务的维护情况,就称为事务传播行为。事务传播行为是加在方法上的。\",\"Propagation.REQUIRED:当前没有事务的时候,就会创建一个新的事务,如果当前有事务就直接加入该事务,比较常用的设置\",\"Propagation.SUPPORTS: 如果当前有事务就直接加入该事务,当前没有事务的时候就以非事务方式执行\",\"Propagation.MANDATORY: 支持当前事务,如果当前有事务就直接加入该事务,当前没有事务的时候就抛出异常\",\"Propagation.REQUIRES_NEW: 创建新事务,无论当前是否有事务都会创建新的\",\"PROPAGATION_NESTED\",\"PROPAGATION_NEVER\",\"PROPAGATION_NOT_SUPPORTED\",\"默认事务超时时限: 常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限,sql 语句的执行时长。 声明式事务控制, Spring提供的对事务的管理,就叫做声明式事务管理。 如果用户需要使用spring的声明式事务管理,在配置文件中配置即可:不想使用的时候直接移除配置。 这种方式实现了对事务控制的最大程度的解耦。 声明式事务管理,核心实现就是基于AOP。 Spring中提供了对事务的管理,事务必须在service层统一控制。\"]},\"549\":{\"h\":\"事务的粗细粒度\",\"t\":[\"细粒度:对方法中的某几行的代码进行开启提交回滚；\",\"粗粒度:对整个方法进行开启提交回滚；\",\"Spring中的aop只能对方法进行拦截,所有我们也就针对方法进行事务的控制。\",\"如果只有单条的查询语句,可以省略事务\",\"如果一次执行的是多条查询语句, 例如统计结果、报表查询,必须开启事务。\"]},\"550\":{\"h\":\"注解形式控制事务\"},\"551\":{\"h\":\"导入依赖\",\"t\":[\"<dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>com.mchange</groupId> <artifactId>c3p0</artifactId> <version>0.9.5.2</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency>\"]},\"552\":{\"h\":\"添加事务注解\",\"t\":[\"import com.sunset.service.PersonService; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Propagation; import org.springframework.transaction.annotation.Transactional; @Service public class PersonServiceImpl implements PersonService { /** * @Transactional 属性 说明: * readOnly:是否只读 * * rollbackFor={Exception.class}: 遇到什么异常会回滚 * * propagation事务的传播: * Propagation.REQUIRED:当前没有事务的时候,就会创建一个新的事务；如果当前有事务,就直 接加入该事务,比较常用的设置 * Propagation.SUPPORTS:支持当前事务,如果当前有事务,就直接加入该事务；当前没有事务的 时候,就以非事务方式执行 * Propagation.MANDATORY:支持当前事务,如果当前有事务,就直接加入该事务；当前没有事务的 时候,就抛出异常 * Propagation.REQUIRES_NEW:创建新事务,无论当前是否有事务都会创建新的 * * isolation=Isolation.DEFAULT:事务的隔离级别:默认是数据库的隔离级别 * */ @Transactional(propagation = Propagation.REQUIRED,rollbackFor = {Exception.class}) @Override public void add() { System.out.println(\\\"add ---\\\"); } }\"]},\"553\":{\"h\":\"配置文件中开启事务\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd \\\"> <!-- 链接数据库的数据源--> <bean id=\\\"dataSource\\\" class=\\\"com.mchange.v2.c3p0.ComboPooledDataSource\\\"> <property name=\\\"driverClass\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"jdbcUrl\\\" value=\\\"\\\"/> <property name=\\\"user\\\" value=\\\"\\\" /> <property name=\\\"password\\\" value=\\\"\\\" /> </bean> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\" /> </bean> <tx:annotation-driven transaction-manager=\\\"transactionManager\\\" /> </beans>\"]},\"554\":{\"c\":[\"后端开发\",\"spring系列\"]},\"555\":{\"c\":[\"java\"]},\"556\":{\"h\":\"SpringSSM整合\"},\"557\":{\"h\":\"Spring 整合 mybatis(SSM)\"},\"558\":{\"h\":\"依赖导入\",\"t\":[\" <!-- 注意这个 packaging 标签必须存在,不然 tomcat 插件一启动就结束了 --> <packaging>war</packaging> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <maven.compiler.target>1.8</maven.compiler.target> <maven.compiler.source>1.8</maven.compiler.source> <spring.version>5.2.15.RELEASE</spring.version> <servlet-api.version>3.0.1</servlet-api.version> <mysql.version>8.0.28</mysql.version> <druid.version>1.2.3</druid.version> <pagehelper.version>5.1.10</pagehelper.version> <log4j.version>1.2.17</log4j.version> <mybatis.version>3.5.6</mybatis.version> <mybatis.spring.version>1.3.3</mybatis.spring.version> <jackson.version>2.9.6</jackson.version> <lombok.version>1.16.14</lombok.version> <junit.version>4.12</junit.version> <lombok.version>1.18.24</lombok.version> </properties> <dependencies> <!-- spring start --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> <version>${spring.version}</version> </dependency> <dependency> <!-- tomcat7 插件依赖 和视图解析器也需要此依赖 --> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>${servlet-api.version}</version> <scope>provided</scope> </dependency> <dependency> <!-- 开启事务使用 --> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>${spring.version}</version> </dependency> <!-- spring end --> <!-- Mybatis start --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <dependency> <!-- alibaba 的 druid --> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>${druid.version}</version> </dependency> <dependency> <!-- github 上的分页插件 --> <groupId>com.github.pagehelper</groupId> <artifactId>pagehelper</artifactId> <version>${pagehelper.version}</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>${mybatis.version}</version> </dependency> <!-- mybatis-spring 与spring组合为 spring ssm 时需要引入,因为 --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>${mybatis.spring.version}</version> </dependency> <!-- Mybatis end --> <dependency> <!-- Jackson Json处理工具包 --> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>${jackson.version}</version> </dependency> <dependency> <!-- lombok 依赖(减少get/set生成) --> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>${lombok.version}</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.2</version> <configuration> <path>/</path> <port>80</port> <uriEncoding>UTF-8</uriEncoding> </configuration> </plugin> </plugins> </build>\"]},\"559\":{\"h\":\"数据库连接配置文件\",\"t\":[\"文件名: db.properties\",\"database.driver=com.mysql.cj.jdbc.Driver database.url=jdbc:mysql://ip:3306/tableName?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT database.username=mysqlUserName database.password=mysqlUserPwd\"]},\"560\":{\"h\":\"配置spring\",\"t\":[\"mybatis.xml(如果不需要可以不创建) 除了 setting 用到 mybatis.xml 文件其他都交给 spring 来管理\"]},\"561\":{\"h\":\"创建spring配置文件application.xml\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd \\\"> <!-- 将这些包中添加注解之后对象的创建权限交给Spring容器--> <context:component-scan base-package=\\\"org.sunset.cn.entity;org.sunset.cn.service;\\\" /> <!-- 读取db 配置文件 --> <context:property-placeholder location=\\\"classpath*:db.properties\\\"/> <!-- 配置数据库链接数据源--> <bean id=\\\"dataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"driverClassName\\\" value=\\\"${database.driver}\\\"/> <property name=\\\"url\\\" value=\\\"${database.url}\\\"/> <property name=\\\"username\\\" value=\\\"${database.username}\\\"/> <property name=\\\"password\\\" value=\\\"${database.password}\\\"/> </bean> <!-- 配置 sqlSessionFactory Bean --> <bean id=\\\"sqlSessionFactory\\\" class=\\\"org.mybatis.spring.SqlSessionFactoryBean\\\"> <!-- 如果有mybatis的单独配置文件,需要在此插入 --> <property name=\\\"configLocation\\\" value=\\\"classpath:mybatis.xml\\\"/> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\"/> <property name=\\\"plugins\\\"> <array> <!-- 分页 --> <bean class=\\\"com.github.pagehelper.PageInterceptor\\\"> <property name=\\\"properties\\\"> <value> reasonable = true </value> </property> </bean> </array> </property> </bean> <!-- 配置 mapper 扫描 --> <bean id=\\\"mapperScannerConfigurer\\\" class=\\\"org.mybatis.spring.mapper.MapperScannerConfigurer\\\"> <property name=\\\"sqlSessionFactoryBeanName\\\" value=\\\"sqlSessionFactory\\\"/> <property name=\\\"basePackage\\\" value=\\\"org.sunset.cn.mapper\\\" /> </bean> <!-- 通过注解方式实现事务 --> <tx:annotation-driven transaction-manager=\\\"transactionManager\\\"/> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\" /> </bean> </beans>\"]},\"562\":{\"h\":\"创建mvc的配置文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:mvc=\\\"http://www.springframework.org/schema/mvc\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd \\\"> <!--springmvc的配置文件:控制器的bean对象都在这里扫描--> <context:component-scan base-package=\\\"org.sunset.cn.controller\\\"/> <mvc:annotation-driven/> <!--视图解析器--> <bean id=\\\"internalResourceViewResolver\\\" class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"> <property name=\\\"prefix\\\" value=\\\"/html/\\\"/> <property name=\\\"suffix\\\" value=\\\".html\\\"/> </bean> <!--静态资源处理--> <mvc:resources mapping=\\\"/html/**\\\" location=\\\"/html/\\\"/> </beans>\"]},\"563\":{\"h\":\"创建 web.xml\",\"t\":[\"idea中需要创建 webapp/WEB-INF/web.xml 来使用. 也就是需要配置 web.\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <!-- 监听器 监听 spring 配置文件 --> <context-param> <param-name>contextConfigLocation</param-name> <param-value>classpath*:application.xml</param-value> </context-param> <listener> <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> </listener> <servlet> <servlet-name>DispatcherServlet</servlet-name> <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> <init-param> <param-name>contextConfigLocation</param-name> <param-value>classpath*:springMvcApplication-local.xml</param-value> </init-param> </servlet> <servlet-mapping> <servlet-name>DispatcherServlet</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> </web-app>\"]},\"564\":{\"h\":\"创建一个 controller 测试下是否成功\",\"t\":[\"import lombok.RequiredArgsConstructor; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.*; @Controller @ResponseBody @RequestMapping(\\\"user\\\") public class UserController { @GetMapping(value = \\\"\\\") public String queryAllOrById()) { return \\\"success\\\"; } }\",\"ps: 启动时使用 tomcat 插件启动,也可以去 idea 的启动配置里选择 mavan ,再在页面中配置运行命令为 tomcat7:run.\"]},\"565\":{\"c\":[\"后端开发\",\"spring系列\"]},\"566\":{\"c\":[\"java\"]},\"567\":{\"h\":\"Spring MVC\"},\"568\":{\"h\":\"组件\"},\"569\":{\"h\":\"DispatcherServlet\",\"t\":[\"前端控制器,也称为中央控制器或者核心控制器。\",\"用户请求的入口控制器,它就相当于 mvc 模式中的c,DispatcherServlet 是整个流程控制的中心,相当于是 SpringMVC 的大脑,由它调用其它组件处理用户的请求,DispatcherServlet 的存在降低了组件之间的耦合性。\",\"SpringMVC框架提供的该核心控制器需要我们在web.xml文件中配置。\"]},\"570\":{\"h\":\"HandlerMapping\",\"t\":[\"处理器映射器 HandlerMapping也是控制器,派发请求的控制器。\",\"我们不需要自己控制该类,但是他是springmvc运转历程中的重要的一个控制器。\",\"HandlerMapping负责根据用户请求找到 Handler 即处理器(也就是我们所说的 Controller),SpringMVC 提供了不同的映射器实现不同的映射方式,\"]},\"571\":{\"h\":\"Handler\",\"t\":[\"处理器 Handler 是继 DispatcherServlet 前端控制器的后端控制器,在DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理。\",\"由于 Handler 涉及到具体的用户业务请求,所以一般情况需要程序员根据业务需求开发 Handler。(这里所说的 Handler 就是指我们的 Controller)\"]},\"572\":{\"h\":\"HandlAdapter\",\"t\":[\"处理器适配器 通过 HandlerAdapter 对处理器进行执行,这是适配器模式的应用,通过扩展处理器适配器,支持更多类型的处理器,调用处理器传递参数等工作。\"]},\"573\":{\"h\":\"ViewResolver\",\"t\":[\"视图解析器 ViewResolver 负责将处理结果生成 View 视图,ViewResolver 首先根据逻辑视图名解析成物理视图名称,即具体的页面地址,再生成 View 视图对象,最后对 View 进行渲染将处理结果通过页面展示给用户。\",\"SpringMVC 框架提供了很多的 View 视图类型,包括:jstlView、freemarkerView、pdfView 等。\"]},\"574\":{\"h\":\"工作原理\",\"t\":[\"用户在浏览器中访问相应网页时,浏览器会向服务器发送一个请求,此时服务器中接收此请求的时前端控制器DispatcherServlet\",\"前端控制器DispatcherServlet接收到此请求后,像Spring中的映射器发起请求HandlerMapping中查询对应的处理类\",\"映射器找到相应的处理类时,将结果返回给前端控制器DispatCherServlet,此时前端控制会去找处理适配器HandlerAdaptor\",\"处理适配器接收到来自前端控制器DispathCherServlet后,对相应的处理器发起处理\",\"相应的处理器类接收到指令后,找到对应方法进行执行\",\"最终将执行结果返回给处理适配器HandlerAdaptor. [ 返回的结果可以是 modelAndView也可以是其他 ]\",\"处理适配器接收到返回的结果后,将结果直接返回给前端控制器DispathCherServlet\",\"前端控制器接收到来自处理适配器的结果后,将结果交给视图解析器ViewResolver进行解析\",\"视图解析器ViewResolver解析完成后将视图地址以及携带的数据返回给前端控制器\",\"前端控制接收到视图地址和数据后,请求相应的视图,拿到对应的视图\",\"最终将视图和数据反馈给用户请求的浏览器.\"]},\"575\":{\"h\":\"注解\"},\"576\":{\"h\":\"@Controller\",\"t\":[\"和在 spring 中是一样的,都是交给容器来创建对象,只不过在 springmvc中默认返回的是页面.\",\"如果在这个注解的类中想要返回对象,需要在方法上添加 @ResponseBody 注解.\"]},\"577\":{\"h\":\"@ResponseBody\",\"t\":[\"可以添加到方法上,表示当前方法的返回值是对象,而不是转发页面\"]},\"578\":{\"h\":\"@RestController\",\"t\":[\"这个注解可以理解为 @Controller 和 @ResponseBody 的组合.使用这个注解后,在当前类中,默认返回的是对象而不是请求或转发的页面.如果使用这个注解后想要转发页面,需要使用 ModelAndView 进行封装才可以转发.\"]},\"579\":{\"h\":\"RequestMapping\",\"t\":[\"该注解可以定义在类上,也可以定义方法上,但是含义不同。\",\"在类上时类似与一级请求,如果这个类处理的请求方法是 \\\"/user/add\\\",\\\"/user/update\\\"这种就可以把 user 提取到类上作为一级请求使用.\",\"在方法上时,如果有一级请求的情况下,类似与二级请求也就是 上面示例中 user 后面不同的请求路径.在方法上时不指定 method 时是所有类型的请求都会进行处理.\",\"method 属性是由 RequestMethod 进行限定的,也就是 method 只能使用 RequestMethod 枚举类中的方法.\",\"@GetMapping/@PostMapping/@PutMapping 都是 @RequestMapping 的延申标签,分别对应各个请求.\"]},\"580\":{\"h\":\"自定义拦截器\",\"t\":[\"自定义拦截器需要实现 HandlerInterceptor 接口.\"]},\"581\":{\"h\":\"HandlerInterceptor接口\"},\"582\":{\"h\":\"preHandle\",\"t\":[\"该方法在处理器方法执行之前执行。\",\"返回值为boolean,若为true,则紧接着会执行处理器方法,且会将afterCompletion() 方法放入到一个专门的方法栈中等待执行。\"]},\"583\":{\"h\":\"postHandle\",\"t\":[\"该方法在处理器方法执行之后执行。\",\"处理器方法若最终未被执行,则该方法不会执行。\",\"由于该方法是在处理器方法执行完后执行,且该方法参数中包含 ModelAndView,所以该方法可以修改处理器方法的处理结果数据,且可以修改跳转方向。\"]},\"584\":{\"h\":\"afterCompletion\",\"t\":[\"当 preHandle()方法返回true时,会将该方法放到专门的方法栈中,等到对请求进行响应的所工作完成之后才执行该方法。 即该方法是在前端控制器渲染(数据填充)了响应页面之后执行的,此时对ModelAndView再操作也对响应无济于事。\",\"最后执行的方法,清除资源,例如在Controller方法中加入数据\"]},\"585\":{\"h\":\"在配置文件中配置\",\"t\":[\"<mvc:interceptors> <!-- 这里可以同时配置多个拦截器,配置的顺序就是拦截器的拦截顺序 --> <mvc:interceptor> <!-- 拦截器要拦截的请求路径 拦截所有用/** --> <mvc:mapping path=\\\"/**\\\"/> <!-- 指定干活的拦截器 --> <bean class=\\\"com.blackFire.interceptor.MyInterceptor2\\\" id=\\\"myInterceptor\\\"></bean> </mvc:interceptor> <mvc:interceptor> <!-- 拦截器要拦截的请求路径 拦截所有用/** --> <mvc:mapping path=\\\"/**\\\"/> <!-- 指定干活的拦截器 --> <bean class=\\\"com.blackFire.interceptor.MyInterceptor2\\\" id=\\\"myInterceptor2\\\"></bean> </mvc:interceptor> </mvc:interceptors> <!-- 如果有多个拦截器的时候: preHandle: 按照配置前后顺序执行 postHandle: 按照配置前后逆序执行 afterCompletion: 按照配置前后逆序执行 -->\"]},\"586\":{\"c\":[\"后端开发\",\"spring系列\"]},\"587\":{\"c\":[\"java\"]},\"588\":{\"h\":\"spring 整合 rabbitmq 示例\"},\"589\":{\"h\":\"搭建生产者工程\",\"t\":[\"pom.xml 添加依赖\",\"<dependencies> <!-- spring依赖 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.1.7.RELEASE</version> </dependency> <!-- spring 整合 rabbitMQ 依赖 --> <dependency> <groupId>org.springframework.amqp</groupId> <artifactId>spring-rabbit</artifactId> <version>2.1.8.RELEASE</version> </dependency> <!-- 测试依赖 --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> </dependency> <!-- spring 测试依赖 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>5.1.7.RELEASE</version> </dependency> </dependencies>\",\"创建 properties 用于存放 rabbitMq 的链接数据\",\"rabbitmq.host=192.168.65.128 rabbitmq.port=5672 rabbitmq.username=black_fire rabbitmq.password=black_fire rabbitmq.virtual-host=/black_fire\",\"spring config xml文件配置\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:rabbit=\\\"http://www.springframework.org/schema/rabbit\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd\\\"> <!-- 加载 properties 配置文件 --> <context:property-placeholder location=\\\"classpath:properties/rabbitmq.properties\\\"/> <!-- 定义rabbitmq connectionFactory 也就是创建链接 --> <rabbit:connection-factory id=\\\"connectionFactory\\\" host=\\\"${rabbitmq.host}\\\" port=\\\"${rabbitmq.port}\\\" username=\\\"${rabbitmq.username}\\\" password=\\\"${rabbitmq.password}\\\" virtual-host=\\\"${rabbitmq.virtual-host}\\\"/> <!-- 定义管理交换机、队列 --> <rabbit:admin connection-factory=\\\"connectionFactory\\\"/> <!-- 定义持久化队列,不存在则自动创建；不绑定到交换机则绑定到默认交换机 默认交换机类型为direct,名字为：\\\"\\\",路由键为队列的名称 --> <rabbit:queue id=\\\"spring_queue\\\" name=\\\"spring_queue\\\" auto-declare=\\\"true\\\"/> <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~广播；所有队列都能收到消息 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --> <!-- 定义广播交换机中的持久化队列,不存在则自动创建 --> <rabbit:queue id=\\\"spring_fanout_queue_1\\\" name=\\\"spring_fanout_queue_1\\\" auto-declare=\\\"true\\\"/> <!--定义广播交换机中的持久化队列,不存在则自动创建--> <rabbit:queue id=\\\"spring_fanout_queue_2\\\" name=\\\"spring_fanout_queue_2\\\" auto-declare=\\\"true\\\"/> <!--定义广播类型交换机；并绑定上述两个队列--> <rabbit:fanout-exchange id=\\\"spring_fanout_exchange\\\" name=\\\"spring_fanout_exchange\\\" auto-declare=\\\"true\\\"> <!-- 绑定队列 --> <rabbit:bindings> <rabbit:binding queue=\\\"spring_fanout_queue_1\\\"/> <rabbit:binding queue=\\\"spring_fanout_queue_2\\\"/> </rabbit:bindings> </rabbit:fanout-exchange> <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~通配符；*匹配一个单词,#匹配多个单词 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --> <!--定义广播交换机中的持久化队列,不存在则自动创建--> <rabbit:queue id=\\\"spring_topic_queue_star\\\" name=\\\"spring_topic_queue_star\\\" auto-declare=\\\"true\\\"/> <!--定义广播交换机中的持久化队列,不存在则自动创建--> <rabbit:queue id=\\\"spring_topic_queue_well\\\" name=\\\"spring_topic_queue_well\\\" auto-declare=\\\"true\\\"/> <!--定义广播交换机中的持久化队列,不存在则自动创建--> <rabbit:queue id=\\\"spring_topic_queue_well2\\\" name=\\\"spring_topic_queue_well2\\\" auto-declare=\\\"true\\\"/> <rabbit:topic-exchange id=\\\"spring_topic_exchange\\\" name=\\\"spring_topic_exchange\\\" auto-declare=\\\"true\\\"> <rabbit:bindings> <rabbit:binding pattern=\\\"item.*\\\" queue=\\\"spring_topic_queue_star\\\"/> <rabbit:binding pattern=\\\"item.#\\\" queue=\\\"spring_topic_queue_well\\\"/> <rabbit:binding pattern=\\\"items.#\\\" queue=\\\"spring_topic_queue_well2\\\"/> </rabbit:bindings> </rabbit:topic-exchange> <!--定义rabbitTemplate对象操作可以在代码中方便发送消息--> <rabbit:template id=\\\"rabbitTemplate\\\" connection-factory=\\\"connectionFactory\\\"/> </beans>\",\"发送消息的方法\",\"import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.amqp.rabbit.core.RabbitTemplate; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; /** * @author black_fire */ @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations =\\\"classpath:/spring/spring-rabbitmq.xml\\\") public class ProducerTest { @Autowired private RabbitTemplate rabbitTemplate; /** * 发送队列消息 使用简单模式 * convertAndSend(String routingKey, Object object) * routingKey 路由键名 * object 消息内容 * 这里路由键和队列同名 */ @Test public void queueTest(){ rabbitTemplate.convertAndSend(\\\"spring_queue\\\",\\\"send spring routing key information\\\"); } /** * 使用广播模式发送消息 * convertAndSend(String exchange, String routingKey, final Object object) * exchange 交换机名 * routingKey 路由键名设置为空 * object 消息内容 */ @Test public void fanoutTest(){ rabbitTemplate.convertAndSend(\\\"spring_fanout_exchange\\\",\\\"\\\",\\\"send spring_fanout_exchange information arrive queue \\\"); } /** * 通配符 交换机类型为 topic * 匹配路由键通配符 * * 一个单词 * # 多个单词 * 绑定到该交换机的匹配队列能收到消息 * convertAndSend(String exchange, String routingKey, final Object object) * exchange 交换机名称 * routingKey 路由键名 * object 发送的消息内容 */ @Test public void topicTest(){ rabbitTemplate.convertAndSend(\\\"spring_topic_exchange\\\",\\\"item.xz\\\",\\\"send spring_topic_exchange information arrive queue\\\"); rabbitTemplate.convertAndSend(\\\"spring_topic_exchange\\\",\\\"item.xz.1\\\",\\\"send spring_topic_exchange information arrive queue\\\"); rabbitTemplate.convertAndSend(\\\"spring_topic_exchange\\\",\\\"item.xz.2\\\",\\\"send spring_topic_exchange information arrive queue\\\"); rabbitTemplate.convertAndSend(\\\"spring_topic_exchange\\\",\\\"items.cn\\\",\\\"send spring_topic_exchange information arrive queue\\\"); } }\"]},\"590\":{\"h\":\"搭建消费者工程\",\"t\":[\"pom.xml 依赖\",\"<dependencies> <!-- spring依赖 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.1.7.RELEASE</version> </dependency> <!-- spring 整合 rabbitMQ 依赖 --> <dependency> <groupId>org.springframework.amqp</groupId> <artifactId>spring-rabbit</artifactId> <version>2.1.8.RELEASE</version> </dependency> <!-- 测试依赖 --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> </dependency> <!-- spring 测试依赖 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>5.1.7.RELEASE</version> </dependency> </dependencies>\",\"properties 文件\",\"rabbitmq.host=192.168.65.128 rabbitmq.port=5672 rabbitmq.username=black_fire rabbitmq.password=black_fire rabbitmq.virtual-host=/black_fire_test\",\"创建 接收消息的文件\",\"import org.springframework.amqp.core.Message; import org.springframework.amqp.core.MessageListener; import java.nio.charset.StandardCharsets; /** * @author black_fire */ public class SpringQueueListener implements MessageListener { @Override public void onMessage(Message message) { try { String msg = new String(message.getBody(), StandardCharsets.UTF_8); System.out.printf(\\\"接收的路由名称为 %s 接收的路由key为 %s 队列名为 %s 消息为 %s \\\\n\\\", message.getMessageProperties().getReceivedExchange(), message.getMessageProperties().getReceivedRoutingKey(), message.getMessageProperties().getConsumerQueue(), msg ); }catch (Exception e){ e.printStackTrace(); } } }\",\"spring config xml 文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:rabbit=\\\"http://www.springframework.org/schema/rabbit\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd\\\"> <!-- 加载 properties 配置文件 --> <context:property-placeholder location=\\\"classpath:properties/rabbitmq.properties\\\"/> <!-- 定义rabbitmq connectionFactory 也就是创建链接 --> <rabbit:connection-factory id=\\\"connectionFactory\\\" host=\\\"${rabbitmq.host}\\\" port=\\\"${rabbitmq.port}\\\" username=\\\"${rabbitmq.username}\\\" password=\\\"${rabbitmq.password}\\\" virtual-host=\\\"${rabbitmq.virtual-host}\\\"/> <!-- 生成消息返回的 bean--> <bean id=\\\"springQueueListener\\\" class=\\\"cn.black_fire.rabbitmq.listener.SpringQueueListener\\\" /> <!-- 监听 --> <rabbit:listener-container connection-factory=\\\"connectionFactory\\\" auto-declare=\\\"true\\\"> <!-- 因为接收的内容都一致就不在重复分开的写接收内容了 只要绑定不同的队列接收即可 --> <rabbit:listener ref=\\\"springQueueListener\\\" queue-names=\\\"spring_queue\\\"/> <rabbit:listener ref=\\\"springQueueListener\\\" queue-names=\\\"spring_fanout_queue_1\\\"/> <rabbit:listener ref=\\\"springQueueListener\\\" queue-names=\\\"spring_fanout_queue_2\\\"/> <rabbit:listener ref=\\\"springQueueListener\\\" queue-names=\\\"spring_topic_queue_star\\\"/> <rabbit:listener ref=\\\"springQueueListener\\\" queue-names=\\\"spring_topic_queue_well\\\"/> <rabbit:listener ref=\\\"springQueueListener\\\" queue-names=\\\"spring_topic_queue_well2\\\"/> </rabbit:listener-container> </beans>\",\"test 测试\",\"import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; /** * @author black_fire */ @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations =\\\"classpath:/spring/spring-rabbitmq.xml\\\") public class ConsumerTest { // 只需要保持运行就可以接收到 @Test public void test(){ while (true){} } }\"]},\"591\":{\"c\":[\"后端开发\",\"spring系列\"]},\"592\":{\"c\":[\"java\"]},\"593\":{\"h\":\"EasyExcel 工具类\"},\"594\":{\"h\":\"创建相关注解\"},\"595\":{\"h\":\"FieldRequired\",\"t\":[\"import java.lang.annotation.*; /** * 当前注解可以使用在类或成员变量上,请不要同时在类和成员变量上同时使用,同时使用会进行两次判断. * <P> * 在头部使用时表示当前所有成员变量都需要进行必填校验 * <P> * 在成员变量上使用时表示当前成员变量需要进行必填校验 * @author 黑色的小火苗 * */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE,ElementType.FIELD}) public @interface FieldRequired { }\"]},\"596\":{\"h\":\"HeadVerification\",\"t\":[\"import java.lang.annotation.*; /** * @author 黑色的小火苗 * easyexcel 头校验 */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE}) public @interface HeadVerification { }\"]},\"597\":{\"h\":\"NotFieldRequired\",\"t\":[\"import java.lang.annotation.*; /** * 该字段只可以使用在字段上,和@FieldRequired注解搭配使用 * <p> * 当@FieldRequired注解存在时,该注解可以使用在字段上,表示该字段不必须 * <p> * ps: @FieldRequired注解放在class上是才起作用 */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.FIELD}) public @interface NotFieldRequired { }\"]},\"598\":{\"h\":\"NotHeadRequired\",\"t\":[\"import java.lang.annotation.*; /** * 该字段只可以使用在字段上,和@HeadVerification注解搭配使用 * <p> * 当@HeadVerification注解在类上存在时,该注解在字段上使用会将其认为不需要进行校验的行头参数 */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.FIELD}) public @interface NotHeadRequired { }\"]},\"599\":{\"h\":\"工具类\",\"t\":[\"import cn.moonlight.common.excel.interfaces.FieldRequired; import cn.moonlight.common.excel.interfaces.HeadVerification; import cn.moonlight.common.excel.interfaces.NotFieldRequired; import cn.moonlight.common.excel.interfaces.NotHeadRequired; import com.alibaba.excel.annotation.ExcelProperty; import com.alibaba.excel.context.AnalysisContext; import com.alibaba.excel.metadata.data.ReadCellData; import com.alibaba.fastjson2.JSON; import com.alibaba.fastjson2.JSONObject; import java.lang.reflect.Field; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; public class EasyExcelUtil { /** * 校验请求头,如果多行请求头 * * @param headCellMap 当前行头数据 * @param context 行 */ public static void verificationHead(Map<Integer, ReadCellData<?>> headCellMap, AnalysisContext context) { Map<Integer, String> headMap = getHeadMap(context.readWorkbookHolder().getClazz()); if (headMap == null) return; if (headCellMap.size() != headMap.size()) throw new RuntimeException(\\\"请检查导入模板是否正确!\\\"); headCellMap.forEach((k, v) -> { if (!v.getStringValue().equals(headMap.get(k))) throw new RuntimeException(\\\"请检查导入模板是否正确!\\\"); }); } /** * 校验请求头,如果多行请求头 * * @param headNumber 需要校验的行头是第几行? 从0开始 * @param headCellMap 当前行头数据 * @param context 行 */ public static void verificationHead(Map<Integer, ReadCellData<?>> headCellMap, AnalysisContext context, Integer headNumber) { if (context.readRowHolder().getRowIndex() < headNumber) return; Map<Integer, String> headMap = getHeadMap(context.readWorkbookHolder().getClazz()); if (headMap == null) return; if (headCellMap.size() != headMap.size()) throw new RuntimeException(\\\"请检查导入模板是否正确!\\\"); headCellMap.forEach((k, v) -> { if (!v.getStringValue().equals(headMap.get(k))) throw new RuntimeException(\\\"请检查导入模板是否正确!\\\"); }); } /** * 通过传入要校验的必填字段来判断都是那些字段需要进行校验 * * @param fieldNames 必填字段 * @param t 本次需校验的数据 * @param <T> 泛型 */ public static <T> boolean verificationData(List<String> fieldNames, T t) { if (fieldNames.isEmpty()) return true; boolean success = true; JSONObject json = JSON.parseObject(JSON.toJSONString(t)); for (String fileName : fieldNames) { String fileValue = json.getString(fileName); success = fileValue == null || fileValue.isEmpty(); } return success; } /** * @param fieldNames 必填参数 * @param t 当前行数据据 * @param <T> 泛型 * @return Map<Boolean, List < String>> 错误行数据 */ public static <T> Map<Boolean, List<String>> verificationData(Map<String, String> fieldNames, T t) { Map<Boolean, List<String>> map = new HashMap<>(); if (fieldNames.isEmpty()) return map; JSONObject json = JSON.parseObject(JSON.toJSONString(t)); List<String> fields = new ArrayList<>(); for (Map.Entry<String, String> field : fieldNames.entrySet()) { String fileValue = json.getString(field.getKey()); if (fileValue == null || fileValue.isEmpty()) { fields.add(field.getValue()); } } if (!fields.isEmpty()) map.put(false, fields); return map; } /** * 使用反射获取实体类的excel表头,与导入的表头进行对应校验来验证模板是否一致 * * @param clazz 需要校验的class */ public static Map<Integer, String> getHeadMap(Class<?> clazz) { // 如果当前要读取的类没有表头校验注解，则返回空 if (!clazz.isAnnotationPresent(HeadVerification.class)) return null; Map<Integer, String> map = new HashMap<>(); Field[] fields = clazz.getDeclaredFields(); for (int i = 0; i < fields.length; i++) { Field field = fields[i]; field.setAccessible(true); if (field.isAnnotationPresent(ExcelProperty.class) && !field.isAnnotationPresent(NotHeadRequired.class)) { String[] value = field.getAnnotation(ExcelProperty.class).value(); map.put(i, value[value.length - 1]); } } return map; } /** * @param clazz 通过class获获取需要必填校验的字段 * @return 必填字段List */ public static List<String> getFieldNames(Class<?> clazz) { List<String> list = new ArrayList<>(); Field[] fields = clazz.getDeclaredFields(); if (clazz.isAnnotationPresent(FieldRequired.class)) { for (Field field : fields) { field.setAccessible(true); if (field.isAnnotationPresent(ExcelProperty.class) && !field.isAnnotationPresent(NotFieldRequired.class)) { list.add(field.getName()); } } return list; } // 如果走到这里就是没有在导入类上添加 @ExcelFieldVerification,那么就判断字段上是否存在 @ExcelFieldVerification 注解 for (Field field : fields) { field.setAccessible(true); if (field.isAnnotationPresent(FieldRequired.class)) { list.add(field.getName()); } } return list; } /** * @param clazz 通过class获获取需要必填校验的字段 * @return 必填字段List */ public static Map<String, String> getFieldNameMap(Class<?> clazz) { Map<String, String> map = new HashMap<>(); Field[] fields = clazz.getDeclaredFields(); if (clazz.isAnnotationPresent(FieldRequired.class)) { for (Field field : fields) { field.setAccessible(true); if (field.isAnnotationPresent(ExcelProperty.class) && !field.isAnnotationPresent(NotFieldRequired.class)) { map.put(field.getName(), field.getAnnotation(ExcelProperty.class).annotationType().getName()); } } return map; } // 如果走到这里就是没有在导入类上添加 @ExcelFieldVerification,那么就判断字段上是否存在 @ExcelFieldVerification 注解 for (Field field : fields) { field.setAccessible(true); if (field.isAnnotationPresent(FieldRequired.class)) { map.put(field.getName(), field.getAnnotation(ExcelProperty.class).annotationType().getName()); } } return map; } }\"]},\"600\":{\"h\":\"示例Listener\",\"t\":[\"import cn.moonlight.common.excel.util.EasyExcelUtil; import com.alibaba.excel.context.AnalysisContext; import com.alibaba.excel.metadata.data.ReadCellData; import com.alibaba.excel.read.listener.ReadListener; import lombok.Getter; import java.util.ArrayList; import java.util.List; import java.util.Map; /** * 简易的示例监听器,本监听器智能校验参数是否必填,其他无法处理,如需其他处理请可以复制当前监听器后重写即可. * * @author 黑色的小火苗 */ @Getter public class EasyListener<T> implements ReadListener<T> { private final List<T> errorList; private final List<T> successList; public EasyListener() { errorList = new ArrayList<>(); successList = new ArrayList<>(); } @Override public void invoke(T t, AnalysisContext context) { List<String> fieldNames = EasyExcelUtil.getFieldNames(context.readWorkbookHolder().getClazz()); if (!fieldNames.isEmpty() && EasyExcelUtil.verificationData(fieldNames, t)) { errorList.add(t); return; } successList.add(t); } @Override public void invokeHead(Map<Integer, ReadCellData<?>> headCellMap, AnalysisContext context) { EasyExcelUtil.verificationHead(headCellMap, context); } @Override public void doAfterAllAnalysed(AnalysisContext analysisContext) {} }\"]},\"601\":{\"c\":[\"后端开发\",\"工具类\"]},\"602\":{\"c\":[\"工具类\",\"java\"]},\"603\":{\"h\":\"fastjson2\",\"t\":[\"文档地址:\",\"github文档: https://github.com/alibaba/fastjson2\",\"gitee文档: https://gitee.com/wenshao/fastjson2\",\"maven引入依赖:\",\"<dependency> <groupId>com.alibaba.fastjson2</groupId> <artifactId>fastjson2</artifactId> <version>2.0.39</version> </dependency>\"]},\"604\":{\"h\":\"简单使用\"},\"605\":{\"h\":\"JSON字符串与JavaObject相互转换\",\"t\":[\" @Test public void jsonTest() { @Data class User { public int id; public String name; } User user = new User(); user.id = 2; user.name = \\\"FastJson2\\\"; String userJsonStr = JSON.toJSONString(user); log.info(\\\"Java对象转换为Json字符串: {}\\\", userJsonStr); // 输出结果 Java对象转换为Json字符串: {\\\"id\\\":2,\\\"name\\\":\\\"FastJson2\\\"} String userJsonStr1 = JSONObject.toJSONString(user); log.info(\\\"Java对象转换为Json字符串: {}\\\", userJsonStr1); // 输出结果 Java对象转换为Json字符串: {\\\"id\\\":2,\\\"name\\\":\\\"FastJson2\\\"} User user1 = JSON.parseObject(userJsonStr, User.class); log.info(\\\"JSON转换为Java对象后: {}\\\", user1); // 输出结果: JSON转换为Java对象后: User(id=2, name=FastJson2) User user2 = JSONObject.parseObject(userJsonStr1, User.class); log.info(\\\"JSON转换为Java对象后: {}\\\", user2); // 输出结果: JSON转换为Java对象后: User(id=2, name=FastJson2) /* 小结: 当我们仅转换一个对象时我们使用 JSON.parseObject()或JSONObject.parseObject()方法 都可以做到java对象的转换 */ }\"]},\"606\":{\"h\":\"JSONArray与Java的List相互转换\",\"t\":[\" @Test public void jsonArrayTest() { List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7); String jsonString = JSON.toJSONString(list); log.info(\\\"jsonString: {}\\\", jsonString); // 输出结果 jsonString: [1,2,3,4,5,6,7] String jsonString2 = JSONObject.toJSONString(list); log.info(\\\"jsonString: {}\\\", jsonString2); // 输出结果 jsonString: [1,2,3,4,5,6,7] String jsonString1 = JSONArray.toJSONString(list); log.info(\\\"jsonString: {}\\\", jsonString1); // 输出结果 jsonString: [1,2,3,4,5,6,7] List list1 = JSON.parseObject(jsonString, List.class); log.info(\\\"转换后的List: {}\\\", list1); // 输出结果 转换后的List: [1, 2, 3, 4, 5, 6, 7] List list2 = JSONObject.parseObject(jsonString2, List.class); log.info(\\\"转换后的List: {}\\\", list2); // 输出结果 转换后的List: [1, 2, 3, 4, 5, 6, 7] List<Integer> integers = JSONArray.parseArray(jsonString1, Integer.class); log.info(\\\"转换后的List: {}\\\", integers); // 输出结果 转换后的List: [1, 2, 3, 4, 5, 6, 7] /* 小结: 当在使用fastjson2时，如果要转换的json字符串是数组，那么需要使用JSONArray.parseArray()方法. 因为我们需要转换为指定的对象而不是List<Object> */ }\"]},\"607\":{\"c\":[\"后端开发\",\"工具类\"]},\"608\":{\"c\":[\"工具类\",\"java\"]},\"609\":{\"h\":\"httpClient\",\"t\":[\"我们在使用HttpClient有时候会不知道该怎么使用,甚至与不好找到对应的api来使用.\",\"这里我将简单的请求进行了一些封装,变成一个简单的工具类来使用\",\"引入依赖\",\"<!-- 版本根据自己需要使用,我这里使用的是5.2.1 --> <dependency> <groupId>org.apache.httpcomponents.client5</groupId> <artifactId>httpclient5</artifactId> <version>5.2.1</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.32</version> </dependency>\"]},\"610\":{\"h\":\"封装实体类和枚举类\"},\"611\":{\"h\":\"HttpType枚举\",\"t\":[\"public enum HttpType { GET, POST, PUT, DELETE, HEAD, OPTIONS, TRACE, CONNECT; }\"]},\"612\":{\"h\":\"HttpResponse(返回实体)\",\"t\":[\"import lombok.Getter; import lombok.extern.slf4j.Slf4j; import org.apache.hc.core5.http.Header; import org.apache.hc.core5.http.HttpEntity; import org.apache.hc.core5.http.NameValuePair; import org.apache.hc.core5.http.io.entity.EntityUtils; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.nio.charset.StandardCharsets; import java.util.Arrays; import java.util.Map; import java.util.stream.Collectors; @Slf4j public class HttpResponse { /** * -- GETTER -- * 获取所有的响应头 */ @Getter private Map<String, String> headers; private byte[] body; public byte[] getBody() { return body; } public String getBodyString() { return new String(body, StandardCharsets.UTF_8); } public boolean getBodyToFile(String filenamePath) { File file = new File(filenamePath); try (FileOutputStream fos = new FileOutputStream(file)) { fos.write(body); fos.flush(); return true; } catch (IOException e) { log.error(\\\"[ httpClient ] 请求文件流输出为文件时出现异常: \\\", e); return false; } } public void setBody(HttpEntity body) throws IOException { this.body = EntityUtils.toByteArray(body); } /** * 获取响应头 * * @param name 头名 * @return 头值 */ public String getHeader(String name) { return headers.get(name); } public void setHeaders(Header[] headers) { this.headers = Arrays.stream(headers).collect(Collectors.toMap(NameValuePair::getName, NameValuePair::getValue)); } }\"]},\"613\":{\"h\":\"组织请求体\",\"t\":[\"import org.apache.hc.client5.http.classic.methods.*; import org.apache.hc.client5.http.config.RequestConfig; import org.apache.hc.client5.http.entity.UrlEncodedFormEntity; import org.apache.hc.core5.http.*; import org.apache.hc.core5.http.io.entity.StringEntity; import org.apache.hc.core5.http.message.BasicNameValuePair; import java.util.List; import java.util.Map; import java.util.stream.Collectors; public class HttpRequestBuilder { private HttpUriRequestBase request; public static HttpRequestBuilder builder() { return new HttpRequestBuilder(); } /** * 设置请求方式 * * @param method 请求方式 * @param uri 请求地址 * @return HttpRequestBuilder */ public HttpRequestBuilder uri(HttpType method, String uri) { switch (method) { case GET: this.request = new HttpGet(uri); break; case POST: this.request = new HttpPost(uri); break; case PUT: this.request = new HttpPut(uri); break; case DELETE: this.request = new HttpDelete(uri); break; } return this; } /** * 设置请求参数 * * @param param 请求参数 GET请求方式：?key=value * @return HttpRequestBuilder */ public HttpRequestBuilder setQueryParam(Map<String, String> param) { List<NameValuePair> params = param.entrySet() .stream() .map((item) -> new BasicNameValuePair(item.getKey(), item.getValue())) .collect(Collectors.toList()); this.request.setEntity(new UrlEncodedFormEntity(params)); return this; } /** * 设置请求体 * * @param jsonBody json字符串 POST请求方式 * @return HttpRequestBuilder */ public HttpRequestBuilder setJsonBody(String jsonBody) { this.request.setEntity(new StringEntity(jsonBody, ContentType.APPLICATION_JSON)); return this; } /** * 设置请求头 * * @param headerName 请求头名称 * @param headerValue 请求头值 * @return HttpRequestBuilder */ public HttpRequestBuilder header(String headerName, Object headerValue) { this.request.setHeader(headerName, headerValue); return this; } /** * 设置请求头 * * @param map 请求头 * @return HttpRequestBuilder */ public HttpRequestBuilder headers(Map<String, Object> map) { map.forEach((k, v) -> this.request.setHeader(k, v)); return this; } /** * 添加请求配置 * * @param config 请求配置 * @return HttpRequestBuilder */ public HttpRequestBuilder setConfig(RequestConfig config) { this.request.setConfig(config); return this; } /** * 构建请求 * * @return HttpRequest */ public ClassicHttpRequest build() { return this.request; } }\"]},\"614\":{\"h\":\"工具类\",\"t\":[\"import lombok.extern.slf4j.Slf4j; import org.apache.hc.client5.http.impl.classic.HttpClients; import org.apache.hc.core5.http.ClassicHttpRequest; import java.io.IOException; @Slf4j public class HttpClientUtils { /** * get请求 * * @param uri 请求地址 * @return HttpResponse * @throws IOException 当请求出现异常时抛出IOException */ public static HttpResponse get(String uri) throws IOException { ClassicHttpRequest request = HttpRequestBuilder.builder().uri(HttpType.GET, uri).build(); return execute(request); } /** * post请求 * * @param uri 请求地址 * @return HttpResponse * @throws IOException 当请求出现异常时抛出IOException */ public static HttpResponse post(String uri) throws IOException { ClassicHttpRequest request = HttpRequestBuilder.builder().uri(HttpType.POST, uri).build(); return execute(request); } /** * 请求执行使用方法 * * @param request 请求体 * @return HttpResponse * @throws IOException 当请求出现异常时抛出IOException */ public static HttpResponse execute(ClassicHttpRequest request) throws IOException { return HttpClients.createDefault().execute(request, response -> { HttpResponse result = new HttpResponse(); result.setHeaders(response.getHeaders()); result.setBody(response.getEntity()); System.out.println(); return result; }); } }\",\"这个工具类其实可以不要用上面的建造者模式的HttpRequestBuilder生成出HttpRequest后之间进行执行也可以. 执行方法可以参考这里的execute方法.\"]},\"615\":{\"c\":[\"后端开发\",\"工具类\"]},\"616\":{\"c\":[\"工具类\",\"java\"]},\"617\":{\"h\":\"poi-tl\",\"t\":[\"官网地址: http://deepoove.com/poi-tl/\",\"导入依赖\",\"<!-- poi-tl start --> <dependency> <groupId>com.deepoove</groupId> <artifactId>poi-tl</artifactId> <version>1.10.3</version> <exclusions> <exclusion> <groupId>org.apache.poi</groupId> <artifactId>poi-ooxml</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.apache.poi</groupId> <artifactId>ooxml-schemas</artifactId> <version>1.4</version> </dependency> <dependency> <groupId>io.github.draco1023</groupId> <artifactId>poi-tl-ext</artifactId> <version>0.3.3</version> <exclusions> <exclusion> <groupId>com.deepoove</groupId> <artifactId>poi-tl</artifactId> </exclusion> <exclusion> <groupId>org.apache.poi</groupId> <artifactId>ooxml-schemas</artifactId> </exclusion> </exclusions> </dependency> <!-- poi-tl end -->\"]},\"618\":{\"h\":\"工具类\",\"t\":[\"import com.deepoove.poi.XWPFTemplate; import com.deepoove.poi.config.Configure; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.InputStream; import java.util.Map; /** * @author sunset@黑色的小火苗 * @create: 2023-05-28 16:50 */ public class WordUtil { /** * 创建Word文档 * * @param stream 输入流 * @param config 模板绑定的配置 * @param data 模板所需数据 * @return byte[] * @throws IOException 可能会出现IO错误 */ public byte[] createWord(InputStream stream, Configure config, Map<String, Object> data) throws IOException { XWPFTemplate template = XWPFTemplate.compile(stream, config).render(data); ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); template.writeAndClose(outputStream); template.close(); return outputStream.toByteArray(); } }\"]},\"619\":{\"h\":\"案例\",\"t\":[\"创建输出时案例对象\",\"import com.deepoove.poi.data.PictureRenderData; import lombok.Data; import lombok.experimental.Accessors; import java.util.List; import java.util.Map; /** * Word 生成案例实体 * * @author sunset@黑色的小火苗 * @create: 2023/6/10 - 18:01 */ @Data @Accessors(chain = true) public class UserWordDemo { private String userName; /** * 例如库中图片地址 */ private String imgUrl; /** * 实际输出的图片 */ private PictureRenderData img; /** * 例如库中图片地址 */ private List<String> imgUrlList; /** * 当一个对象存在多个图片时处理 */ private List<Map<String,PictureRenderData>> imgList; }\",\"演示示例\",\"import com.deepoove.poi.config.Configure; import com.deepoove.poi.data.PictureRenderData; import com.deepoove.poi.data.Pictures; import com.deepoove.poi.plugin.table.LoopRowTableRenderPolicy; import com.sunset.common.util.WordUtil; import org.junit.Test; import org.springframework.core.io.ClassPathResource; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; /** * @author sunset@黑色的小火苗 * @create: 2023/6/10 - 18:05 */ public class WordDemoTest { /** * 测试生成 Word */ @Test public void testGenerateWord() throws IOException { // 1. 读取模板,获取模板输入流 InputStream inputStream = new ClassPathResource(\\\"templates/test.docx\\\").getInputStream(); // 绑定模板配置 LoopRowTableRenderPolicy rowPolicy = new LoopRowTableRenderPolicy(true); // 循环时在同一行进行循环 Configure config = Configure.builder() .bind(\\\"users\\\", rowPolicy) // 绑定列表 .bind(\\\"imgList\\\", rowPolicy) // 绑定列表 .useSpringEL(true) // 开启Spring表达式 .build(); // 模板标签与数据进行绑定 Map<String, Object> data = new HashMap<>(); // 循环给 demoList设置数据 这里就不写了 data.put(\\\"users\\\", getDemoList()); // 调用方法 byte[] wordBytes = WordUtil.createWord(inputStream, config, data); // 输出到文件 FileOutputStream fos = new FileOutputStream(new File(\\\"D:\\\\\\\\data\\\\\\\\temp\\\\\\\\test.docx\\\")); fos.write(wordBytes); fos.flush(); fos.close(); } /** * 生成需要的对象 <br/> * 读取本地图片使用 Pictures.ofStream(\\\"localImgPath\\\") [ localImgPath 本地图片所在地址 ]<br/> * 读取网络图片使用 Pictures.ofUrl(\\\"HttpUrl\\\") [ HttpUrl 网络URl路径 ]<br/> * <br/> * 当循环行中某一列中需要渲染多个图片/文字时 按当前示例这么做就可以 <br/> * * @return List<UserWordDemo> */ private List<UserWordDemo> getDemoList() throws IOException { List<UserWordDemo> demoList = new ArrayList<>(); for (int i = 0; i < 5; i++) { // 当循环行时在一列中生成多个图片/文字时按这种方式可以循环渲染 List<Map<String, PictureRenderData>> imgList = new ArrayList<>(); Map<String, PictureRenderData> map = new HashMap<>(); map.put(\\\"img1\\\", Pictures.ofStream(new ClassPathResource(\\\"static/2.jpg\\\").getInputStream()).size(100, 100).create()); imgList.add(map); Map<String, PictureRenderData> map1 = new HashMap<>(); map1.put(\\\"img1\\\", Pictures.ofStream(new ClassPathResource(\\\"static/2.jpg\\\").getInputStream()).size(100, 100).create()); imgList.add(map1); UserWordDemo userWordDemo = new UserWordDemo() .setUserName(\\\"测试用户名\\\" + i) .setImg(Pictures.ofStream(new ClassPathResource(\\\"static/1.jpg\\\").getInputStream()).size(100, 100).create()) .setImgList(imgList); demoList.add(userWordDemo); } return demoList; } }\",\"模板图片与生成的图片 模板图片 \",\"生成的图片 \"]},\"620\":{\"c\":[\"后端开发\",\"工具类\"]},\"621\":{\"c\":[\"工具类\",\"java\"]},\"622\":{\"h\":\"rsa加密\",\"t\":[\"import org.apache.hc.client5.http.utils.Base64; import javax.crypto.Cipher; import java.io.ByteArrayOutputStream; import java.nio.charset.StandardCharsets; import java.security.*; import java.security.spec.PKCS8EncodedKeySpec; import java.security.spec.X509EncodedKeySpec; /** * RsaException 是我自己写的一个异常用于抛出并全局捕获,使用时可以自己定义. */ public class RsaUtil { /** * RSA最大加密明文大小 */ private static final int MAX_ENCRYPT_BLOCK = 117; /** * RSA最大解密密文大小 */ private static final int MAX_DECRYPT_BLOCK = 128; private static final KeyFactory keyFactory; static { try { keyFactory = KeyFactory.getInstance(\\\"RSA\\\"); } catch (NoSuchAlgorithmException e) { throw new RuntimeException(e); } } /** * 获取密钥对 * * @return 密钥对 */ public static KeyPair getKeyPair() throws Exception { KeyPairGenerator generator = KeyPairGenerator.getInstance(\\\"RSA\\\"); generator.initialize(1024); return generator.generateKeyPair(); } /** * 获取私钥 * * @param privateKey 私钥字符串 */ public static PrivateKey getPrivateKey(String privateKey) throws Exception { byte[] decodedKey = Base64.decodeBase64(privateKey.getBytes()); PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decodedKey); return keyFactory.generatePrivate(keySpec); } /** * 获取公钥 * * @param publicKey 公钥字符串 */ public static PublicKey getPublicKey(String publicKey) throws Exception { byte[] decodedKey = Base64.decodeBase64(publicKey.getBytes()); X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey); return keyFactory.generatePublic(keySpec); } /** * RSA加密 * * @param data 待加密数据 * @param publicKey 公钥 */ public static String encrypt(String data, String publicKey) { try { Cipher cipher = Cipher.getInstance(\\\"RSA\\\"); cipher.init(Cipher.ENCRYPT_MODE, getPublicKey(publicKey)); int inputLen = data.getBytes().length; ByteArrayOutputStream out = new ByteArrayOutputStream(); int offset = 0; byte[] cache; int i = 0; // 对数据分段加密 while (inputLen - offset > 0) { if (inputLen - offset > MAX_ENCRYPT_BLOCK) { cache = cipher.doFinal(data.getBytes(), offset, MAX_ENCRYPT_BLOCK); } else { cache = cipher.doFinal(data.getBytes(), offset, inputLen - offset); } out.write(cache, 0, cache.length); i++; offset = i * MAX_ENCRYPT_BLOCK; } byte[] encryptedData = out.toByteArray(); out.close(); // 获取加密内容使用base64进行编码,并以UTF-8为标准转化成字符串 // 加密后的字符串 return Base64.encodeBase64String(encryptedData); } catch (Exception e) { throw new RsaException(\\\"RSA 加密失败!\\\"); } } /** * RSA解密 * * @param data 待解密数据 * @param privateKey 私钥 */ public static String decrypt(String data, String privateKey) { try { Cipher cipher = Cipher.getInstance(\\\"RSA\\\"); cipher.init(Cipher.DECRYPT_MODE, getPrivateKey(privateKey)); byte[] dataBytes = Base64.decodeBase64(data); int inputLen = dataBytes.length; ByteArrayOutputStream out = new ByteArrayOutputStream(); int offset = 0; byte[] cache; int i = 0; // 对数据分段解密 while (inputLen - offset > 0) { if (inputLen - offset > MAX_DECRYPT_BLOCK) { cache = cipher.doFinal(dataBytes, offset, MAX_DECRYPT_BLOCK); } else { cache = cipher.doFinal(dataBytes, offset, inputLen - offset); } out.write(cache, 0, cache.length); i++; offset = i * MAX_DECRYPT_BLOCK; } byte[] decryptedData = out.toByteArray(); out.close(); // 解密后的内容 return new String(decryptedData, StandardCharsets.UTF_8); } catch (Exception e) { throw new RsaException(\\\"RSA 解密失败!\\\"); } } /** * 签名 * * @param data 待签名数据 * @param privateKey 私钥 * @return 签名 */ public static String sign(String data, String privateKey) throws Exception { byte[] keyBytes = getPrivateKey(privateKey).getEncoded(); PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes); KeyFactory keyFactory = KeyFactory.getInstance(\\\"RSA\\\"); PrivateKey key = keyFactory.generatePrivate(keySpec); Signature signature = Signature.getInstance(\\\"MD5withRSA\\\"); signature.initSign(key); signature.update(data.getBytes()); return new String(Base64.encodeBase64(signature.sign())); } /** * 验签 * * @param srcData 原始字符串 * @param publicKey 公钥 * @param sign 签名 * @return 是否验签通过 */ public static boolean verify(String srcData, String publicKey, String sign) throws Exception { byte[] keyBytes = getPublicKey(publicKey).getEncoded(); X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes); PublicKey key = keyFactory.generatePublic(keySpec); Signature signature = Signature.getInstance(\\\"MD5withRSA\\\"); signature.initVerify(key); signature.update(srcData.getBytes()); return signature.verify(Base64.decodeBase64(sign.getBytes())); } public static void demoMain() { try { // 生成密钥对 KeyPair keyPair = getKeyPair(); String privateKey = new String(Base64.encodeBase64(keyPair.getPrivate().getEncoded())); String publicKey = new String(Base64.encodeBase64(keyPair.getPublic().getEncoded())); System.out.println(\\\"私钥:\\\" + privateKey); System.out.println(\\\"公钥:\\\" + publicKey); // RSA加密 String data = \\\"待加密的文字内容\\\"; String encryptData = encrypt(data, publicKey); System.out.println(\\\"加密后内容:\\\" + encryptData); // RSA解密 String decryptData = decrypt(encryptData, privateKey); System.out.println(\\\"解密后内容:\\\" + decryptData); // RSA签名 String sign = sign(data, privateKey); // RSA验签 boolean result = verify(data, publicKey, sign); System.out.print(\\\"验签结果:\\\" + result); } catch (Exception e) { System.out.print(\\\"加解密异常\\\"); } } }\",\"ps: 生成一对密钥后就可以直接使用了,不要使用两次不同公钥对私钥进行解密.\"]},\"623\":{\"c\":[\"后端开发\",\"工具类\"]},\"624\":{\"c\":[\"工具类\",\"java\"]},\"625\":{\"h\":\"设计模式\",\"t\":[\"简介\",\"设计模式(Design Pattern) 简称 DP 概念 软件设计模式(Design pattern),又称设计模式,是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。 (-- 来自百度百科) 设计模式有六大原则 开闭原则 (Open Closed Principle 简写为 OCP) 单一职责原则(Single responsibility principle 简写为 SRP) 里氏替换原则(Liskov Substitution Principle 简写为 LSP) 依赖倒置原则(Dependence Inversion Principle 简写为 DIP) 接口隔离原则(Interface Segregation Principle 简写为 ISP) 迪米特法则(Law of Demeter 简写为 LoD)\"]},\"626\":{\"h\":\"开闭原则(OCP)\",\"t\":[\"定义\",\"开闭原则由勃兰特·梅耶(Bertrand Meyer) 提出,他在 1988 年的著作《面向对象软件构造》(Object Oriented Software Construction)中提出：软件实体应当对扩展开放,对修改关闭. 简单点说就是是：一个软件实体应该通过扩展来实现变化,而不是通过修改已有的代码来实现变化. 一个软件产品在它的生命周期内一般都会发生变化,开闭原则视为软件实体的未来事件而制定的对现行开发设计进行约束的一个原则。\",\"开闭原则的作用\",\"开闭原则是面向对象程序设计的终极目标,它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性. 对软件测试的影响 软件遵守开闭原则的话,软件测试时只需要对扩展的代码进行测试就可以了,因为原有的测试代码仍然能够正常运行 可以提高代码的可复用性 粒度越小,被复用的可能性就越大; 在面向对象的程序设计中,根据原子和抽象编程可以提高代码的可复用性。 可以提高软件的可维护性 遵守开闭原则的软件,其稳定性高和延续性强,从而易于扩展和维护。\"]},\"627\":{\"h\":\"单一职责原则(SRP)\",\"t\":[\"定义\",\"单一职责原则(Single Responsibility Principle,SRP)又称单一功能原则,由罗伯特·C.马丁(Robert C.Martin)于《敏捷软件开发：原则、模式和实践》一书中提出的。这里的职责是指类变化的原因,单一职责原则规定一个类应该有且仅有一个引起它变化的原因,否则类应该被拆分(There should never be more than one reason for a class to change)。 该原则提出对象不应该承担太多职责,如果一个对象承担了太多的职责,至少存在以下两个缺点： 1. 一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力； 2. 当客户端需要该对象的某一个职责时,不得不将其他不需要的职责全都包含进来,从而造成冗余代码或代码的浪费。\",\"单一职责的优点\",\"单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点。 降低类的复杂度。一个类只负责一项职责,其逻辑肯定要比负责多项职责简单得多。 提高类的可读性。复杂性降低,自然其可读性会提高。 提高系统的可维护性。可读性提高,那自然更容易维护了。 变更引起的风险降低。变更是必然的,如果单一职责原则遵守得好,当修改一个功能时,可以显著降低对其他功能的影响。 PS: 单一职责同样也适用于方法。一个方法应该尽可能做好一件事情。如果一个方法处理的事情太多,其颗粒度会变得很粗,不利于重用。\"]},\"628\":{\"h\":\"里氏替换原则(LSP)\",\"t\":[\"定义\",\"该原则有两个定义 第一种 If for each object o1 of type S there is an object o2 of type T such that for all programs Pdefined in terms of T, the behavior of P is unchanged when o1 is substituted for o2 then S is a subtypeof T. 如果每一个类型S的对象o1,都有一个类型T的对象o2,在以T定义的所有程序P中将所有的对象o2都替换为o1,而程序P的行为没有发生变化,那么S是T的子类 第二种 Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it. 所有引用基类的地方必须能透明地使用其子类对象。\",\"里氏替换原则是继承复用的基石,它为良好的继承定义了一个规范,定义中包含了4层含义:\",\"子类必须完全实现父类的方法 我们以前做过的项目中,经常定义一个接口或者抽象类,然后编码实现,调用类则直接传入接口或者抽象类,其实这就是已经在使用历史替换原则了\",\"PS：在类中调用其他类时务必要使用父类或接口,如果不能使用父类或者接口,说明类的设计违背了里氏替换原则。\",\"子类中可以增加自己特有的方法 类都有自己的属性和方法,子类当然也不例外。除了从父类继承过来的,可以有自己独有的内容。\",\"为什么要单独列出来,是因为里氏替换原则是不可以反过来用的。\",\"也就是子类出现的地方,父类未必可以胜任\",\"当子类覆盖或实现父类的方法时,方法的输入参数(方法的形参)要比父类方法的输入参数更宽松。\",\"当子类的方法实现父类的抽象方法时,方法的后置条件(即方法的返回值)要比父类更严格。\",\"作用\",\"主要作用如下 1. 里氏替换原则是实现开闭原则的重要方式之一。 2. 它克服了继承中重写父类造成的可复用性变差的缺点。 3. 它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误,降低了代码出错的可能性。\",\"里氏替换原则通俗来讲就是 子类可以扩展父类的功能,但不能改变父类原有的功能。也就是说：子类继承父类时,除添加新的方法完成新增功能外,尽量不要重写父类的方法。\",\"如果通过重写父类的方法来完成新的功能,这样写起来虽然简单,但是整个继承体系的可复用性会比较差,特别是运用多态比较频繁时,程序运行出错的概率会非常大。 如果程序违背了里氏替换原则,则继承类的对象在基类出现的地方会出现运行错误。 这时其修正方法是取消原来的继承关系,重新设计它们之间的关系。 \"]},\"629\":{\"h\":\"依赖倒置原则(DIP)\",\"t\":[\"定义\",\"依赖倒置原则的原始定义为 High level modules shouldnot depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details. Details should depend upon abstractions。 高级别模块不应该取决于低级别模块。 替代依赖于抽象.Abstractions不应依赖于细节。 细节应该取决于抽象。\",\"核心思想：要面向接口编程,不要面向实现编程。\",\"依赖倒置原则是实现开闭原则的重要途径之一,它降低了客户与实现模块之间的耦合。 由于在软件设计中,细节具有多变性,而抽象层则相对稳定,因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。 这里的抽象指的是接口或者抽象类,而细节是指具体的实现类。 使用接口或者抽象类的目的是制定好规范和契约,而不去涉及任何具体的操作,把展现细节的任务交给它们的实现类去完成。\",\"依赖倒置原则的作用\",\"依赖倒置原则可以降低类间的耦合性。 依赖倒置原则可以提高系统的稳定性。 依赖倒置原则可以减少并行开发引起的风险。 依赖倒置原则可以提高代码的可读性和可维护性。\",\"依赖倒置原则的实现方法\",\"依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性,所以我们在实际编程中只要遵循以下4点,就能在项目中满足这个规则。 1. 每个类尽量提供接口或抽象类,或者两者都具备。 2. 变量的声明类型尽量是接口或者是抽象类。 3. 任何类都不应该从具体类派生。 4. 尽量不要覆写基类的方法 5. 使用继承时结合里氏替换原则\"]},\"630\":{\"h\":\"接口隔离原则(ISP)\",\"t\":[\"定义\",\"接口隔离原则要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口,让接口中只包含客户感兴趣的方法。 2002 年罗伯特·C.马丁给“接口隔离原则”的定义是：客户端不应该被迫依赖于它不使用的方法(Clients should not be forced to depend on methods they do not use)。该原则还有另外一个定义：一个类对另一个类的依赖应该建立在最小的接口上(The dependency of one class to another one should depend on the smallest possible interface)。 以上两个定义的含义是 要为各个类建立它们需要的专用接口,而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。 接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性,体现了封装的思想,但两者是不同的: 单一职责原则注重的是职责,而接口隔离原则注重的是对接口依赖的隔离。 单一职责原则主要是约束类,它针对的是程序中的实现和细节； 接口隔离原则主要约束接口,主要针对抽象和程序整体框架的构建。 把一个臃肿的接口变为两个独立的接口所依赖的原则就是接口隔离原则\",\"接口隔离的优点\",\"接口隔离原则是为了约束接口、降低类对接口的依赖性,遵循接口隔离原则有以下 5 个优点。 1. 将臃肿庞大的接口分解为多个粒度小的接口,可以预防外来变更的扩散,提高系统的灵活性和可维护性。 2. 接口隔离提高了系统的内聚性,减少了对外交互,降低了系统的耦合性。 3. 如果接口的粒度大小定义合理,能够保证系统的稳定性；但是,如果定义过小,则会造成接口数量过多,使 设计复杂化；如果定义太大,灵活性降低,无法提供定制服务,给整体项目带来无法预料的风险。 4. 使用多个专门的接口还能够体现对象的层次,因为可以通过接口的继承,实现对总接口的定义。 5. 能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法,当实现这个接口的时候,被迫设计冗余的代码。\",\"接口隔离原则的实现方法\",\"在具体应用接口隔离原则时,应该根据以下几个规则来衡量。 接口尽量小,但是要有限度. 一个接口只服务于一个子模块或业务逻辑。 为依赖接口的类定制服务.只提供调用者需要的方法,屏蔽不需要的方法。 了解环境,拒绝盲从。每个项目或产品都有选定的环境因素,环境不同,接口拆分的标准就不同深入了解业务逻辑。 提高内聚,减少对外交互。使接口用最少的方法去完成最多的事情。\"]},\"631\":{\"h\":\"迪米特法则(LoD)\",\"t\":[\"定义\",\"迪米特法则(Law of Demeter,LoD)又叫作最少知识原则(Least Knowledge Principle,LKP),产生于 1987 年美国东北大学(Northeastern University)的一个名为迪米特(Demeter)的研究项目,由伊恩·荷兰(Ian Holland)提出,它要求一个对象应该对其他对象有最少的了解。 通俗的说,一个类应该对自己需要耦合或调用的类知道的最少,被耦合或调用的类的内部是如何复杂都与我无关,我就知道你提供的public方法就好。 迪米特法则还是在讲如何减少耦合的问题,类之间的耦合越弱,越有利于复用,一个处在弱耦合的类被修改,不会对有关系的类造成波及。也就是说,信息的隐藏促进了软件的复用。 迪米特法则还有一个定义是 只与你的直接朋友交谈,不跟“陌生人”说话(Talk only to your immediate friends and not to strangers). 其含义是：如果两个软件实体无须直接通信,那么就不应当发生直接的相互调用,可以通过第三方转发该调用。其目的是降低类之间的耦合度,提高模块的相对独立性 每个对象都必然会和其他对象有耦合关系,两个对象之间的耦合就 成为朋友关系,这种关系有很多比如组合、聚合、依赖等等。包括以下几类： 1. 当前对象本身(this) 2. 当前对象的方法参数(以参数形式传入到当前对象方法中的对象) 3. 当前对象的成员对象 4. 如果当前对象的成员对象是一个集合,那么集合中的元素也都是朋友 5. 当前对象所创建的对象\",\"优点\",\"降低了类之间的耦合度,提高了模块的相对独立性。 由于亲合度降低,从而提高了类的可复用率和系统的扩展性。 但是,过度使用迪米特法则会使系统产生大量的中介类,从而增加系统的复杂性,使模块之间的通信效率降低。所以,在釆用迪米特法则时需要反复权衡,确保高内聚和低耦合的同时,保证系统的结构清晰。\",\"实现方法\",\"从迪米特法则的定义和特点可知,它强调以下两点： 1. 从依赖者的角度来说,只依赖应该依赖的对象。 2. 从被依赖者的角度说,只暴露应该暴露的方法。 所以在运用迪米特法则时要注意以下 6 点: 1. 在类的划分上,应该创建弱耦合的类。类与类之间的耦合越弱,就越有利于实现可复用的目标。 2. 在类的结构设计上,尽量降低类成员的访问权限。 3. 在类的设计上,优先考虑将一个类设置成不变类。 4. 在对其他类的引用上,将引用其他对象的次数降到最低。 5. 不暴露类的属性成员,而应该提供相应的访问器(set 和 get 方法)。 6. 谨慎使用序列化(Serializable)功能。\"]},\"632\":{\"c\":[\"后端开发\",\"设计模式\"]},\"633\":{\"c\":[\"设计模式\",\"java\"]},\"634\":{\"h\":\"责任链模式\",\"t\":[\"现在模拟一个需求:\",\"需要检查一个产品的是否合格,需要从三个方面进行检查.\",\"长度 必须为15\",\"宽度 必须为15\",\"高度 必须为10\",\"如果我们直接进行判断的话后续如果产品又添加了其他检查类型,那么我们可能会一直if判断下去.\",\"此时我们就可以使用责任链模式,将每个检查流程进行分隔处理且互相不影响各自的执行.\"]},\"635\":{\"h\":\"实现代码\"},\"636\":{\"h\":\"创建产品实体类\",\"t\":[\"package org.bamboo.product.entity; import lombok.Data; import lombok.experimental.Accessors; import org.bamboo.product.handler.HeightQCHandler; import org.bamboo.product.handler.LengthQCHandler; import org.bamboo.product.handler.WidthQCHandler; @Data @Accessors(chain = true) public class Product { private Integer id; /** * 产品长度 */ private Integer length; /** * 产品宽度 */ private Integer width; /** * 产品高度 */ private Integer height; }\"]},\"637\":{\"h\":\"创建责任链抽象类\",\"t\":[\"package org.bamboo.product.handler; import org.bamboo.product.entity.Product; public abstract class QCHandler { protected QCHandler nextHandler; /** * 检查产品 * * @param product 产品 * @return Boolean */ public abstract Boolean check(Product product); /** * 设置下一级处理器 * * @param nextHandler 下一级处理器 */ public void setNextHandler(QCHandler nextHandler) { this.nextHandler = nextHandler; } /** * 判断是否存在下一级处理器 * * @param product 产品 * @return Boolean */ protected Boolean checkNextHandler(Product product) { //没有下一级处理器，直接返回false if (nextHandler == null) return false; // 存在下一级处理器，则校验下一级处理器 return nextHandler.check(product); } }\"]},\"638\":{\"h\":\"创建长度处理器\",\"t\":[\"package org.bamboo.product.handler; import org.bamboo.product.entity.Product; public class LengthQCHandler extends QCHandler { { setNextHandler(new WidthQCHandler()); } @Override public Boolean check(Product product) { if (product.getLength() != 15) { System.out.println(\\\"长度检查不合格!\\\"); return false; } return checkNextHandler(product); } }\"]},\"639\":{\"h\":\"创建宽度处理器\",\"t\":[\"import org.bamboo.product.entity.Product; public class WidthQCHandler extends QCHandler { { setNextHandler(new HeightQCHandler()); } @Override public Boolean check(Product product) { if (product.getWidth() != 15) { System.out.println(\\\"宽度检查不合格!\\\"); return false; } return checkNextHandler(product); } }\"]},\"640\":{\"h\":\"创建高度处理器\",\"t\":[\"import org.bamboo.product.entity.Product; public class HeightQCHandler extends QCHandler { @Override public Boolean check(Product product) { if (product.getHeight() != 15) { System.out.println(\\\"高度检查不合格!\\\"); return false; } return checkNextHandler(product); } }\"]},\"641\":{\"h\":\"调用测试\",\"t\":[\" public static void main(String[] args) { Product product = new Product().setLength(15).setWidth(3).setHeight(1); LengthQCHandler lengthQCHandler = new LengthQCHandler(); // 这里是使用默认写好的内置责任链来使用 System.out.println(lengthQCHandler.check(product)); // 这里是自己手动去设置责任链调用,已知顺序的情况可以直接默认一条. HeightQCHandler heightQCHandler = new HeightQCHandler(); WidthQCHandler widthQCHandler = new WidthQCHandler(); lengthQCHandler.setNextHandler(heightQCHandler); heightQCHandler.setNextHandler(widthQCHandler); System.out.println(lengthQCHandler.check(product)); }\"]},\"642\":{\"h\":\"工厂创建责任链\",\"t\":[\"import org.bamboo.product.handler.LengthQCHandler; import org.bamboo.product.handler.QCHandler; import java.util.List; public class QCFactory { /** * 获取默认执行责任练 * * @return QCHandler */ public static QCHandler getDefaultQCHandler() { return new LengthQCHandler(); } /** * 根据list顺序生成责任链并返回第一个 * * @param handlerList 责任链集合 * @return QCHandler */ public static QCHandler getQCHandler(List<QCHandler> handlerList) { if (handlerList.isEmpty()) { throw new RuntimeException(\\\"handlerList is empty\\\"); } QCHandler qcHandler = null; if (handlerList.size() > 1) { int item = handlerList.size() - 1; while (item > 0) { handlerList.get(item - 1).setNextHandler(handlerList.get(item)); item--; } } qcHandler = handlerList.get(0); return qcHandler; } }\"]},\"643\":{\"c\":[\"后端开发\",\"设计模式\"]},\"644\":{\"c\":[\"设计模式\",\"java\"]},\"645\":{\"h\":\"创建型模式之单例模式\",\"t\":[\"定义\",\"确保某一个类只有一个实例,而且自行实例化并向整个系统提供这个实例。 也就是在整个程序运行时,仅有当前一个对象.且该对象是该对象本身创建的,外部无法创建对象.\",\"特点\",\"单例类只有一个实例对象;\",\"该单例对象必须由单例类自行创建;\",\"单例类对外提供一个访问该单例的全局访问点;\",\"单例模式优缺点\",\"优点: 在内存里只有一个实例,减少了内存的开销,尤其是频繁的创建和销毁实例。 避免对资源的多重占用(比如写文件操作)。 单例模式可以在系统设置全局的访问点,优化和共享资源访问。 缺点: 单例模式一般没有接口,扩展很困难。如果要扩展,只能修改代码。 与单一职责原则冲突,一个类应该只关心内部逻辑,而不关心外面怎么样来实例化。\",\"单例模式有两种\",\"懒加载(懒汉式) 单例\",\"直接加载(饿汉式) 单例\"]},\"646\":{\"h\":\"懒加载(懒汉式) 单例示例\",\"t\":[\"/** * @author blackFire * 懒加载(懒汉)型单例 */ public class SingleCase { // volatile 线程同步保证线程安全 private static volatile SingleCase singleCase = null; private SingleCase() {} /** * 外部无法创建对象,只能由该方法进行创建,且每次使用的都是同一个对象 * synchronized 对方法加锁,保证线程安全 * @return SingleCase */ public static synchronized SingleCase getInstance() { if (singleCase == null) { singleCase = new SingleCase(); } return singleCase; } }\",\"ps: 因为是在使用时才会进行创建,所以时懒加载(懒汉式).\"]},\"647\":{\"h\":\"直接加载(饿汉式) 单例示例\",\"t\":[\"/** * @author blackFire */ public class SingleCase1 { private static final SingleCase1 singleCase1 = new SingleCase1(); private SingleCase1() {} public static SingleCase1 getInstance(){ return singleCase1; } }\",\"ps: 该对象一加载就会创建对象,所以是直接加载型单例.\"]},\"648\":{\"c\":[\"后端开发\",\"设计模式\"]},\"649\":{\"c\":[\"设计模式\",\"java\"]},\"650\":{\"h\":\"工厂模式\"},\"651\":{\"h\":\"介绍\",\"t\":[\"定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。\"]},\"652\":{\"h\":\"案例\",\"t\":[\"我们可以根据情况来创建绘画形状为需求来说明并实现工厂模式.\"]},\"653\":{\"h\":\"创建工厂接口\",\"t\":[\"public interface Shape { /** * 判断是否应该自身执行 * * @param shape 枚举类 * @return boolean 应该本身执行是返回true 不应该执行返回false */ boolean supportsInternal(ShapeEnum shape); /** * 执行绘画操作 */ void draw(); }\",\"创建枚举\",\"public enum ShapeEnum { /** * 圆形 */ CIRCLE, /** * 矩形 */ RECTANGLE, /** * 正方形 */ SQUARE; }\"]},\"654\":{\"h\":\"创建相应形状类\",\"t\":[\"/** * 圆形形状类 */ public class Circle implements Shape { @Override public boolean supportsInternal(ShapeEnum shape) { return ShapeEnum.CIRCLE.equals(shape); } @Override public void draw() { System.out.println(\\\"Inside Circle::draw() method.\\\"); } }\",\"/** * 正方形形状类 */ public class Square implements Shape { @Override public boolean supportsInternal(ShapeEnum shape) { return ShapeEnum.SQUARE.equals(shape); } @Override public void draw() { System.out.println(\\\"Inside Square::draw() method.\\\"); } }\",\"/** * 矩形形状类 */ public class Rectangle implements Shape { @Override public boolean supportsInternal(ShapeEnum shape) { return ShapeEnum.RECTANGLE.equals(shape); } @Override public void draw() { System.out.println(\\\"Inside Rectangle::draw() method.\\\"); } }\"]},\"655\":{\"h\":\"使用工厂创建对应形状\",\"t\":[\"import java.util.Objects; import java.util.ServiceLoader; public class ShapeFactory { public static Shape getShape(ShapeEnum shapeEnum) { ServiceLoader<Shape> shapes = ServiceLoader.load(Shape.class); Shape result = null; for (Shape shape : shapes) { if (shape.supportsInternal(shapeEnum)) { result = shape; break; } } // 最终应该是有匹配结果的,如果没有匹配结果那么我应该直接报错回去 return Objects.requireNonNull(result); } }\",\"使用ServiceLoader扫描相关对象时我们需要在META-INF/services下创建以Shape的全路径为名的文件[以我的为例文件名就是 org.bamboo.shape.Shape],将要扫描的文件全路径写入到对应文件\",\"org.bamboo.shape.Circle org.bamboo.shape.Rectangle org.bamboo.shape.Square\",\"ps: ServiceLoader 为java本身的工具类所以不需要担心兼容问题但是jdk应该是需要1.8以上.并且读取顺序为从第一行顺序向下读取.\"]},\"656\":{\"h\":\"测试是否可行\",\"t\":[\"public class ShapeTest { public static void main(String[] args) { ShapeFactory.getShape(ShapeEnum.CIRCLE).draw(); // 输出结果为: Inside Circle::draw() method. // 说明这个方法是可行的. } }\"]},\"657\":{\"c\":[\"后端开发\",\"设计模式\"]},\"658\":{\"c\":[\"设计模式\",\"java\"]},\"659\":{\"h\":\"java 设计模式之代理模式(proxy)\",\"t\":[\"简介\",\"通过代理对象访问对象,并为其实现增强功能. 简单来说就是,在一个对象上增加一些功能,使其更简单的的使用. 代理模式有两种 静态代理 动态代理 静态代理缺点 每次编写一个目标对象时都需要重新编写一个代理类\",\"代理的目标对象\",\"/** * @author blackFire */ public interface UserDao { /** * 添加一个 user */ void insertUser(); }\",\"/** * @author blackFire */ public class UserDaoImpl implements UserDao { /** * 添加一个 user 的实现 */ @Override public void insertUser() { System.out.println(\\\"insert user ------\\\"); } }\"]},\"660\":{\"h\":\"静态代理\",\"t\":[\"简介\",\"静态代理实现步骤 1. 准备切面类 2. 使用静态代理类将切面类中增强的方法进行围绕实现\",\"准备代理使用的切面类\",\"/** * @author blackFire */ public class UserAop { public void before() { System.out.println(\\\"开启事务\\\"); } public void after() { System.out.println(\\\"提交事务\\\"); } public void exception() { System.out.println(\\\"回滚事务\\\"); } public void myFinally() { System.out.println(\\\"最终 finally\\\"); } }\",\"代理类\",\"import com.blackfire.dao.UserDao; import com.blackfire.dao.aop.UserAop; import com.blackfire.dao.impl.UserDaoImpl; /** * @author blackFire */ public class UserDaoImplProxy implements UserDao { private final UserDaoImpl userDao; private final UserAop userAop; public UserDaoImplProxy(UserDaoImpl userDao, UserAop userAop) { this.userDao = userDao; this.userAop = userAop; } @Override public void insertUser() { try{ userAop.before(); userDao.insertUser(); userAop.after(); }catch (Exception e){ userAop.exception(); }finally { userAop.myFinally(); } } }\",\"测试代理的结果\",\"import com.blackfire.dao.aop.UserAop; import com.blackfire.dao.impl.UserDaoImpl; import org.junit.Test; import static org.junit.Assert.*; public class UserDaoImplProxyTest { @Test public void insertUser() { UserDaoImpl userDao = new UserDaoImpl(); UserAop userAop = new UserAop(); UserDaoImplProxy proxy = new UserDaoImplProxy(userDao,userAop); userDao.insertUser(); System.out.println(\\\"------------\\\"); proxy.insertUser(); } } /* 输出结果如下 insert user ------ ------------ 开启事务 insert user ------ 提交事务 最终 finally */\"]},\"661\":{\"h\":\"动态代理\",\"t\":[\"简介\",\"动态代理有两种模式 1. 原始 jdk 动态代理 2. cglib 动态代理\"]},\"662\":{\"h\":\"JDK动态代理\",\"t\":[\"简介\",\"jdk 动态代理使用的时 Proxy 类进行的动态代理 Proxy 核心方法如下 public static Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h) 该方法可以为任何实现接口的目标对象提供代理对象. 主要针对目标对象接口中的方法进行增强. 上面方法中名词解释 ClassLoader 目标对象的ClassLoader Class<?>[] interfaces 目标对象接口 InvocationHandler h 回调,接口 处理(增强)目标对象接口中的方法.\",\"InvocationHandler 接口\",\"public interface InvocationHandler { /* 调用目标对象,并对其进行增强. method : 指代 目标对象接口中的方法. args: 接口中每个方法的参数 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable; }\"]},\"663\":{\"h\":\"原始 Jdk 代理\",\"t\":[\"@Test public void test(){ // 获取要被代理的对象 UserDaoImpl userDaoImpl = new UserDaoImpl(); // 获取目标对象的 Class Class<? extends UserDaoImpl> userDaoImplClass = userDaoImpl.getClass(); // 使用 jdk 进行代理 UserDao userDao = (UserDao) Proxy.newProxyInstance( userDaoImplClass.getClassLoader(), userDaoImplClass.getInterfaces(), new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { Object obj = null; try { System.out.println(\\\"开启事务\\\"); // 对方法进行参数注入 obj = method.invoke(userDaoImpl, args); System.out.println(\\\"事务提交\\\"); }catch (Exception e){ System.out.println(\\\"回滚事务\\\"); e.printStackTrace(); }finally { System.out.println(\\\"其他\\\"); } return obj; } } ); userDao.insertUser(); } /* 输出结果如下 开启事务 insert user ------ 事务提交 其他 */\"]},\"664\":{\"h\":\"工厂模式 jdk 代理\",\"t\":[\"我们先准备切面的接口\",\"/** * @author blackFire */ public interface Aop { /** * 前置 */ void before(); /** * 后置 */ void after(); /** * 异常 */ void exception(); /** * 最终 */ void myFinally(); }\",\"切面接口实现\",\"/** * @author blackFire */ public class MyAop implements Aop { @Override public void before() { System.out.println(\\\"开启事务\\\"); } @Override public void after() { System.out.println(\\\"提交事务\\\"); } @Override public void exception() { System.out.println(\\\"回滚事务\\\"); } @Override public void myFinally() { System.out.println(\\\"最终 finally\\\"); } }\",\"代理类实现\",\"import com.blackfire.dao.aop.Aop; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; /** * @author blackFire */ public class JdkProxyFactory { private static final String FIND = \\\"find\\\"; /** * 对 obj 进行动态代理 * * @param obj 要代理的对象 * @param aop 切面类 * @return 代理类 */ public static Object getInstance(Object obj, Aop aop) { return Proxy.newProxyInstance( obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { Object invoke; if (method.getName().startsWith(FIND)) { invoke = method.invoke(obj, args); } else { try { aop.before(); invoke = method.invoke(obj, args); aop.after(); } catch (Exception e) { aop.exception(); throw e; } finally { aop.myFinally(); } } return invoke; } } ); } }\"]},\"665\":{\"h\":\"cglib 动态代理\",\"t\":[\"简介\",\"cglib 又称子类代理 在内存中生成一个该目标对象的子类,对其所有的方法进行增强. 特点 目标对象不需要接口,可以提高代理对象 对特殊方法无法处理. [ 例如 final 修饰的方法] 核心方法 Enhancer 核心类,提供目标对象的子类对象(代理) create() 静态方法,提供代理对象. intercept() 具体实现对目标对象的增强.\",\"需要导入jar\",\"<dependency> <groupId>cglib</groupId> <artifactId>cglib</artifactId> <version>3.2.2</version> </dependency>\",\"切面类仍然使用上面的 MyAop 实现类来实现 cglib 动态代理\",\"import com.blackfire.dao.aop.Aop; import net.sf.cglib.proxy.Enhancer; import net.sf.cglib.proxy.MethodInterceptor; import net.sf.cglib.proxy.MethodProxy; import java.lang.reflect.Method; /** * @author blackFire */ public class CglibProxyFactory { private static final String FIND = \\\"find\\\"; public static Object getInstance(Class<?> cla, Aop aop){ return Enhancer.create( cla, new MethodInterceptor() { @Override public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable { Object invoke; if (method.getName().startsWith(FIND)){ invoke = methodProxy.invokeSuper(o,objects); }else { try { aop.before(); invoke = methodProxy.invokeSuper(o,objects); aop.after(); }catch (Exception e){ aop.exception(); throw e; }finally { aop.myFinally(); } } return invoke; } } ); } }\"]},\"666\":{\"c\":[\"后端开发\",\"设计模式\"]},\"667\":{\"c\":[\"设计模式\",\"java\"]},\"668\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"669\":{\"h\":\"Collect\"},\"670\":{\"h\":\"Android\"},\"671\":{\"h\":\"Dev\"},\"672\":{\"h\":\"Java\"},\"673\":{\"h\":\"Sql\"},\"674\":{\"h\":\"Web\"},\"675\":{\"h\":\"Linux\"},\"676\":{\"h\":\"Install\"},\"677\":{\"h\":\"Win\"},\"678\":{\"h\":\"Base\"},\"679\":{\"h\":\"Redis\"},\"680\":{\"h\":\"Spring Cloud\"},\"681\":{\"h\":\"Springboot\"},\"682\":{\"h\":\"Spring系列\"},\"683\":{\"h\":\"工具类\"},\"684\":{\"h\":\"设计模式\"},\"685\":{\"h\":\"创建型\"},\"686\":{\"h\":\"结构型模式\"}},\"dirtCount\":0,\"index\":[[\"回调\",{\"1\":{\"662\":1}}],[\"回滚事务\",{\"1\":{\"660\":1,\"663\":1,\"664\":1}}],[\"静态方法\",{\"1\":{\"665\":1}}],[\"静态代理实现步骤\",{\"1\":{\"660\":1}}],[\"静态代理缺点\",{\"1\":{\"659\":1}}],[\"静态代理\",{\"0\":{\"660\":1},\"1\":{\"659\":1}}],[\"静态资源处理\",{\"1\":{\"562\":1}}],[\"静态资源存储目录\",{\"1\":{\"214\":1}}],[\"静态资源库\",{\"0\":{\"1\":1}}],[\"矩形形状类\",{\"1\":{\"654\":1}}],[\"矩形\",{\"1\":{\"653\":1}}],[\"圆形形状类\",{\"1\":{\"654\":1}}],[\"圆形\",{\"1\":{\"653\":1}}],[\"枚举类\",{\"1\":{\"653\":1}}],[\"枚举类中的方法\",{\"1\":{\"579\":1}}],[\"型单例\",{\"1\":{\"646\":1}}],[\"饿汉式\",{\"0\":{\"647\":1},\"1\":{\"645\":1}}],[\"懒汉\",{\"1\":{\"646\":1}}],[\"懒汉式\",{\"0\":{\"646\":1},\"1\":{\"645\":1,\"646\":1}}],[\"懒加载\",{\"0\":{\"646\":1},\"1\":{\"645\":1,\"646\":1}}],[\"缺点\",{\"1\":{\"645\":1}}],[\"缺省为60\",{\"1\":{\"368\":1}}],[\"缺省为打开\",{\"1\":{\"368\":1}}],[\"尤其是频繁的创建和销毁实例\",{\"1\":{\"645\":1}}],[\"外部无法创建对象\",{\"1\":{\"645\":1,\"646\":1}}],[\"责任链集合\",{\"1\":{\"642\":1}}],[\"责任链模式\",{\"0\":{\"634\":1}}],[\"宽度检查不合格\",{\"1\":{\"639\":1}}],[\"宽度\",{\"1\":{\"634\":1}}],[\"谨慎使用序列化\",{\"1\":{\"631\":1}}],[\"点\",{\"1\":{\"631\":1}}],[\"点击\",{\"1\":{\"17\":1,\"204\":1,\"523\":1}}],[\"聚合\",{\"1\":{\"631\":1}}],[\"聚合查询\",{\"0\":{\"77\":1}}],[\"陌生人\",{\"1\":{\"631\":1}}],[\"越有利于复用\",{\"1\":{\"631\":1}}],[\"越⼤\",{\"1\":{\"436\":1}}],[\"荷兰\",{\"1\":{\"631\":1}}],[\"屏蔽不需要的方法\",{\"1\":{\"630\":1}}],[\"屏蔽了jdbcapi底层的访问细节\",{\"1\":{\"511\":1}}],[\"灵活性降低\",{\"1\":{\"630\":1}}],[\"减少了内存的开销\",{\"1\":{\"645\":1}}],[\"减少了对外交互\",{\"1\":{\"630\":1}}],[\"减少对外交互\",{\"1\":{\"630\":1}}],[\"减少get\",{\"1\":{\"517\":1,\"558\":1}}],[\"个优点\",{\"1\":{\"630\":1}}],[\"个参数\",{\"1\":{\"421\":1}}],[\"遵循接口隔离原则有以下\",{\"1\":{\"630\":1}}],[\"遵守开闭原则的软件\",{\"1\":{\"626\":1}}],[\"体现了封装的思想\",{\"1\":{\"630\":1}}],[\"体验则会感觉很慢\",{\"1\":{\"199\":1}}],[\"替代依赖于抽象\",{\"1\":{\"629\":1}}],[\"至少存在以下两个缺点\",{\"1\":{\"627\":1}}],[\"敏捷软件开发\",{\"1\":{\"627\":1}}],[\"马丁给\",{\"1\":{\"630\":1}}],[\"马丁\",{\"1\":{\"627\":1}}],[\"粒度越小\",{\"1\":{\"626\":1}}],[\"面向对象软件构造\",{\"1\":{\"626\":1}}],[\"梅耶\",{\"1\":{\"626\":1}}],[\"迪米特法则还有一个定义是\",{\"1\":{\"631\":1}}],[\"迪米特法则还是在讲如何减少耦合的问题\",{\"1\":{\"631\":1}}],[\"迪米特法则\",{\"0\":{\"631\":1},\"1\":{\"625\":1,\"631\":1}}],[\"验签结果\",{\"1\":{\"622\":1}}],[\"验签\",{\"1\":{\"622\":1}}],[\"验证指定\",{\"1\":{\"363\":1}}],[\"签名\",{\"1\":{\"622\":3}}],[\"私钥\",{\"1\":{\"622\":3}}],[\"私钥字符串\",{\"1\":{\"622\":1}}],[\"待加密的文字内容\",{\"1\":{\"622\":1}}],[\"待加密数据\",{\"1\":{\"622\":1}}],[\"待签名数据\",{\"1\":{\"622\":1}}],[\"待解密数据\",{\"1\":{\"622\":1}}],[\"公钥\",{\"1\":{\"622\":3}}],[\"公钥字符串\",{\"1\":{\"622\":1}}],[\"公共组件目录\",{\"1\":{\"214\":1}}],[\"密钥对\",{\"1\":{\"622\":1}}],[\"密码\",{\"1\":{\"232\":1,\"246\":1}}],[\"封装实体类和枚举类\",{\"0\":{\"610\":1}}],[\"变更是必然的\",{\"1\":{\"627\":1}}],[\"变更引起的风险降低\",{\"1\":{\"627\":1}}],[\"变成一个简单的工具类来使用\",{\"1\":{\"609\":1}}],[\"变量的声明类型尽量是接口或者是抽象类\",{\"1\":{\"629\":1}}],[\"变量和类型\",{\"1\":{\"281\":1}}],[\"变量\",{\"1\":{\"205\":1,\"269\":1,\"280\":1}}],[\"甚至与不好找到对应的api来使用\",{\"1\":{\"609\":1}}],[\"甚⾄导致系统崩溃\",{\"1\":{\"461\":1}}],[\"甚⾄整个服务宕掉\",{\"1\":{\"439\":1}}],[\"必填参数\",{\"1\":{\"599\":1}}],[\"必填字段list\",{\"1\":{\"599\":2}}],[\"必填字段\",{\"1\":{\"599\":1}}],[\"必须为10\",{\"1\":{\"634\":1}}],[\"必须为15\",{\"1\":{\"634\":2}}],[\"必须开启事务\",{\"1\":{\"549\":1}}],[\"必须时\",{\"1\":{\"521\":1}}],[\"必须知道\",{\"1\":{\"315\":1}}],[\"必须在里面放置一个\",{\"1\":{\"215\":1}}],[\"必须得加上\",{\"1\":{\"205\":1}}],[\"必须使用\",{\"1\":{\"202\":1}}],[\"必须要有返回值\",{\"1\":{\"190\":1}}],[\"必须加上\",{\"1\":{\"163\":1}}],[\"行\",{\"1\":{\"599\":2}}],[\"校验请求头\",{\"1\":{\"599\":2}}],[\"头值\",{\"1\":{\"612\":1}}],[\"头名\",{\"1\":{\"612\":1}}],[\"头校验\",{\"1\":{\"596\":1}}],[\"头部验证不通过\",{\"1\":{\"438\":1}}],[\"头部\",{\"0\":{\"218\":1}}],[\"了解环境\",{\"1\":{\"630\":1}}],[\"了响应页面之后执行的\",{\"1\":{\"584\":1}}],[\"了3个⼤版本\",{\"1\":{\"51\":1}}],[\"像spring中的映射器发起请求handlermapping中查询对应的处理类\",{\"1\":{\"574\":1}}],[\"像千层饼一样\",{\"1\":{\"20\":1,\"26\":1}}],[\"首先根据逻辑视图名解析成物理视图名称\",{\"1\":{\"573\":1}}],[\"首屏\",{\"1\":{\"199\":1}}],[\"涉及到具体的用户业务请求\",{\"1\":{\"571\":1}}],[\"派发请求的控制器\",{\"1\":{\"570\":1}}],[\"遇到什么异常会回滚\",{\"1\":{\"552\":1}}],[\"报表查询\",{\"1\":{\"549\":1}}],[\"报404\",{\"1\":{\"425\":1}}],[\"粗粒度\",{\"1\":{\"549\":1}}],[\"粗粒度分词\",{\"1\":{\"52\":1}}],[\"比较常用的设置\",{\"1\":{\"548\":1,\"552\":1}}],[\"比如写文件操作\",{\"1\":{\"645\":1}}],[\"比如缓存\",{\"1\":{\"530\":1}}],[\"比如\",{\"1\":{\"499\":3,\"530\":3}}],[\"比如说现在由三个索引\",{\"1\":{\"31\":1}}],[\"处于不同事务中的方法在相互调用时\",{\"1\":{\"548\":1}}],[\"处理适配器接收到返回的结果后\",{\"1\":{\"574\":1}}],[\"处理适配器接收到来自前端控制器dispathcherservlet后\",{\"1\":{\"574\":1}}],[\"处理器方法若最终未被执行\",{\"1\":{\"583\":1}}],[\"处理器适配器\",{\"1\":{\"572\":1}}],[\"处理器\",{\"1\":{\"571\":1}}],[\"处理器映射器\",{\"1\":{\"570\":1}}],[\"处理\",{\"1\":{\"436\":1,\"662\":1}}],[\"处理流程\",{\"1\":{\"413\":1}}],[\"处理post请求\",{\"1\":{\"266\":1}}],[\"处理pb级别的数据\",{\"1\":{\"29\":1}}],[\"处理get请求\",{\"1\":{\"266\":1}}],[\"处理err对象\",{\"1\":{\"185\":1}}],[\"处理业务逻辑\",{\"1\":{\"107\":1,\"110\":2}}],[\"处理消息失败的模式\",{\"1\":{\"106\":1}}],[\"处理结果\",{\"1\":{\"65\":1,\"70\":1,\"71\":1}}],[\"串行化\",{\"1\":{\"547\":1}}],[\"未解决任何并发问题\",{\"1\":{\"547\":1}}],[\"未指定\",{\"1\":{\"466\":1}}],[\"读已提交\",{\"1\":{\"547\":1}}],[\"读未提交\",{\"1\":{\"547\":1}}],[\"读取网络图片使用\",{\"1\":{\"619\":1}}],[\"读取本地图片使用\",{\"1\":{\"619\":1}}],[\"读取模板\",{\"1\":{\"619\":1}}],[\"读取db\",{\"1\":{\"561\":1}}],[\"读取配置文件\",{\"1\":{\"520\":1}}],[\"读取数量\",{\"1\":{\"357\":1}}],[\"读取消费者组中的消息\",{\"1\":{\"357\":1}}],[\"读取流\",{\"1\":{\"284\":1}}],[\"读取第一个参数\",{\"1\":{\"244\":1}}],[\"读取时间\",{\"1\":{\"113\":1}}],[\"拦截所有用\",{\"1\":{\"585\":2}}],[\"拦截器要拦截的请求路径\",{\"1\":{\"585\":2}}],[\"拦截器注入数据\",{\"0\":{\"478\":1}}],[\"拦截的方法名称\",{\"1\":{\"545\":1}}],[\"维护均较为麻烦\",{\"1\":{\"545\":1}}],[\"符号解释\",{\"1\":{\"541\":1}}],[\"符号表\",{\"1\":{\"11\":1}}],[\"抛出异常类型\",{\"1\":{\"541\":1}}],[\"织入\",{\"1\":{\"540\":1}}],[\"织入增强后\",{\"1\":{\"540\":1}}],[\"环绕方法\",{\"1\":{\"545\":2}}],[\"环绕通知\",{\"1\":{\"540\":1,\"541\":1,\"545\":1}}],[\"环境不同\",{\"1\":{\"630\":1}}],[\"环境\",{\"1\":{\"518\":1}}],[\"非业务功能\",{\"1\":{\"540\":1}}],[\"非常重要的面试题\",{\"0\":{\"163\":1}}],[\"切入时间不同\",{\"1\":{\"540\":1}}],[\"切入点表达式\",{\"1\":{\"545\":1}}],[\"切入点表达式时\",{\"1\":{\"545\":1}}],[\"切入点示例\",{\"1\":{\"541\":1}}],[\"切入点定义切入的位置\",{\"1\":{\"540\":1}}],[\"切入点指声明的一个或多个连接点的集合\",{\"1\":{\"540\":1}}],[\"切入点\",{\"1\":{\"540\":1}}],[\"切面类仍然使用上面的\",{\"1\":{\"665\":1}}],[\"切面类\",{\"1\":{\"664\":1}}],[\"切面接口实现\",{\"1\":{\"664\":1}}],[\"切面\",{\"1\":{\"540\":1,\"545\":1}}],[\"切换数据库命令\",{\"1\":{\"334\":1}}],[\"切换指定的node版本和位数\",{\"1\":{\"262\":1}}],[\"切换到当前目录\",{\"1\":{\"213\":2}}],[\"国际化\",{\"1\":{\"533\":1}}],[\"控制器的bean对象都在这里扫描\",{\"1\":{\"562\":1}}],[\"控制层对象\",{\"1\":{\"539\":1}}],[\"控制反转\",{\"0\":{\"531\":1}}],[\"控制总线\",{\"1\":{\"448\":1}}],[\"邮件\",{\"1\":{\"530\":1}}],[\"邮箱\",{\"1\":{\"304\":1,\"491\":1}}],[\"远程调用等\",{\"1\":{\"529\":1}}],[\"管理\",{\"1\":{\"529\":1,\"539\":1}}],[\"优化和共享资源访问\",{\"1\":{\"645\":1}}],[\"优先考虑将一个类设置成不变类\",{\"1\":{\"631\":1}}],[\"优先级越⾼\",{\"1\":{\"438\":1}}],[\"优先级越低\",{\"1\":{\"436\":1}}],[\"优点\",{\"1\":{\"631\":1,\"645\":1}}],[\"优势\",{\"0\":{\"529\":1}}],[\"备注\",{\"1\":{\"525\":1}}],[\"暂时常用的就这些\",{\"1\":{\"524\":1}}],[\"片段\",{\"1\":{\"524\":1}}],[\"唯一不可重复\",{\"1\":{\"524\":1}}],[\"唯一索引值\",{\"1\":{\"163\":1}}],[\"遍历的集合中的每一个数据\",{\"1\":{\"524\":1}}],[\"区分大小写\",{\"1\":{\"524\":1}}],[\"区分多个⽂件\",{\"1\":{\"367\":1}}],[\"扫描\",{\"1\":{\"561\":1}}],[\"扫描的包路径\",{\"1\":{\"518\":1}}],[\"扫描失效服务的间隔时间\",{\"1\":{\"368\":1}}],[\"预处理语句不会被复用\",{\"1\":{\"515\":1}}],[\"角色分指导者\",{\"1\":{\"514\":1}}],[\"顾名思义就是资源\",{\"1\":{\"513\":1}}],[\"连接点\",{\"1\":{\"540\":1}}],[\"连接数据库的四大参数注意数据库版本使用的是mysql8\",{\"1\":{\"518\":1}}],[\"连接的创建\",{\"1\":{\"511\":1}}],[\"连接符\",{\"1\":{\"73\":1}}],[\"迁移到了\",{\"1\":{\"511\":1}}],[\"搭建消费者工程\",{\"0\":{\"505\":1,\"590\":1}}],[\"搭建生产者工程\",{\"0\":{\"504\":1,\"589\":1}}],[\"经常定义一个接口或者抽象类\",{\"1\":{\"628\":1}}],[\"经过分类编目的\",{\"1\":{\"625\":1}}],[\"经典表达式\",{\"0\":{\"500\":1}}],[\"经测试以上两种\",{\"1\":{\"423\":1}}],[\"年美国东北大学\",{\"1\":{\"631\":1}}],[\"年罗伯特\",{\"1\":{\"630\":1}}],[\"年的著作\",{\"1\":{\"626\":1}}],[\"年这个项目由\",{\"1\":{\"511\":1}}],[\"年\",{\"1\":{\"499\":1,\"511\":1}}],[\"年份\",{\"1\":{\"499\":1}}],[\"占位符和秒数一样\",{\"1\":{\"499\":1}}],[\"星期一到星期五的10点15分0秒触发任务\",{\"1\":{\"500\":1}}],[\"星期\",{\"1\":{\"499\":4}}],[\"月迁移到\",{\"1\":{\"511\":1}}],[\"月份\",{\"1\":{\"499\":1}}],[\"月光后台接口服务\",{\"1\":{\"471\":2}}],[\"日期\",{\"1\":{\"499\":3}}],[\"日志\",{\"0\":{\"378\":1},\"1\":{\"113\":1,\"378\":1}}],[\"脱敏数据类型\",{\"1\":{\"493\":1}}],[\"走到这里说明是string类型且存在脱敏注解那么将脱敏注解设置为当前string的处理就好\",{\"1\":{\"492\":1}}],[\"身份证号\",{\"1\":{\"491\":1}}],[\"隐私数据类型枚举\",{\"1\":{\"491\":1}}],[\"入参解析\",{\"1\":{\"481\":1}}],[\"入参集合\",{\"1\":{\"481\":1}}],[\"黑色的小火苗\",{\"1\":{\"471\":1,\"595\":1,\"596\":1,\"600\":1,\"618\":1,\"619\":2}}],[\"滑动时间窗⼝算法\",{\"0\":{\"462\":1},\"1\":{\"462\":1}}],[\"滑动窗⼝算法可以有效的规避计数器算法中时间临界点的问题\",{\"1\":{\"462\":1}}],[\"滑动窗⼝算法是把固定时间⽚进⾏划分\",{\"1\":{\"462\":1}}],[\"滑动窗⼝的类型\",{\"1\":{\"382\":1,\"440\":1}}],[\"滑动窗⼝的⼤⼩\",{\"1\":{\"382\":1,\"440\":1}}],[\"滑动窗口的类型可以是count\",{\"1\":{\"382\":1}}],[\"桶中最多存放b个令牌\",{\"1\":{\"460\":1}}],[\"假设限制2r\",{\"1\":{\"460\":1}}],[\"假如⼀个域名为aaa\",{\"1\":{\"443\":1}}],[\"令牌桶算法\",{\"0\":{\"460\":1}}],[\"漏桶限流原理如图所示\",{\"1\":{\"459\":1}}],[\"漏桶算法的思路\",{\"1\":{\"459\":1}}],[\"漏桶算法\",{\"0\":{\"459\":1}}],[\"瞬时⼤量请求涌⼊\",{\"1\":{\"458\":1}}],[\"降低了类之间的耦合度\",{\"1\":{\"631\":1}}],[\"降低了系统的耦合性\",{\"1\":{\"630\":1}}],[\"降低了代码出错的可能性\",{\"1\":{\"628\":1}}],[\"降低类对接口的依赖性\",{\"1\":{\"630\":1}}],[\"降低类的复杂度\",{\"1\":{\"627\":1}}],[\"降低它们之间的耦合性\",{\"1\":{\"630\":1}}],[\"降低\",{\"1\":{\"529\":1}}],[\"降低数据⼀致性\",{\"1\":{\"457\":1}}],[\"降低实时性\",{\"1\":{\"457\":1}}],[\"降级的思想是丢⻋保帅\",{\"1\":{\"457\":1}}],[\"降级是指当⾃身服务压⼒增⼤时\",{\"1\":{\"457\":1}}],[\"降级是在服务或依赖的服务异常时\",{\"1\":{\"448\":1}}],[\"降级服务容错策略\",{\"1\":{\"448\":1}}],[\"降级\",{\"0\":{\"457\":1},\"1\":{\"442\":1,\"451\":1}}],[\"降级方法\",{\"0\":{\"442\":1}}],[\"降级操作\",{\"1\":{\"439\":1}}],[\"否则类应该被拆分\",{\"1\":{\"627\":1}}],[\"否则不执行\",{\"1\":{\"545\":1}}],[\"否则是失败的错误码\",{\"1\":{\"487\":1}}],[\"否则会注入失败\",{\"1\":{\"482\":1}}],[\"否则继续保持打开\",{\"1\":{\"456\":1}}],[\"否则与列表中某个匹配或继承的异常都将被视为失败\",{\"1\":{\"382\":1}}],[\"释放信号量\",{\"1\":{\"454\":1}}],[\"释放资源\",{\"1\":{\"59\":1,\"60\":1,\"86\":1,\"89\":1,\"94\":1,\"97\":1,\"100\":1}}],[\"崩\",{\"1\":{\"451\":1}}],[\"智能路由\",{\"1\":{\"448\":1}}],[\"容器就不知该匹配哪一个了\",{\"1\":{\"537\":1}}],[\"容器是通过调用者的\",{\"1\":{\"537\":1}}],[\"容器将bean实例调用无参构造器创建对象并对其属性进行初始化的过程称为di注入\",{\"1\":{\"537\":1}}],[\"容器\",{\"1\":{\"530\":1,\"532\":1,\"545\":1}}],[\"容器化\",{\"1\":{\"448\":1}}],[\"容易造成危险\",{\"1\":{\"157\":1}}],[\"灰度\",{\"1\":{\"448\":1}}],[\"蓝绿部署\",{\"1\":{\"448\":1}}],[\"蓝奏云地址\",{\"1\":{\"232\":1}}],[\"蓝奏云下载地址\",{\"1\":{\"232\":1}}],[\"蓝奏云\",{\"1\":{\"7\":2,\"246\":1}}],[\"⿊⽩名单\",{\"1\":{\"448\":1}}],[\"⿊⾊\",{\"1\":{\"77\":4}}],[\"若为true\",{\"1\":{\"582\":1}}],[\"若为类\",{\"1\":{\"541\":1}}],[\"若为接口\",{\"1\":{\"541\":1}}],[\"若值不合法\",{\"1\":{\"499\":5}}],[\"若这些请求都是健康的\",{\"1\":{\"456\":1}}],[\"若恢复则恢复调⽤\",{\"1\":{\"448\":1}}],[\"若列表中没有任何元素时也就是这个key都不存在的情况下\",{\"1\":{\"344\":2}}],[\"细节具有多变性\",{\"1\":{\"629\":1}}],[\"细节应该取决于抽象\",{\"1\":{\"629\":1}}],[\"细粒度\",{\"1\":{\"549\":1}}],[\"细粒度分词\",{\"1\":{\"52\":1}}],[\"细⼼的读者会发现soa中的服务和微服务架构中的服务粒度是⼀样的\",{\"1\":{\"448\":1}}],[\"造成了这两者有⾮常⼤的区别\",{\"1\":{\"448\":1}}],[\"他在\",{\"1\":{\"626\":1}}],[\"他本质上是服务化思想的最佳实践⽅向\",{\"1\":{\"448\":1}}],[\"他属于上述的第⼆种⽅式\",{\"1\":{\"390\":1}}],[\"⾯向服务\",{\"1\":{\"448\":1}}],[\"⾯向java的公⽤分词组件\",{\"1\":{\"51\":1}}],[\"微代理\",{\"1\":{\"448\":1}}],[\"微服务容错\",{\"0\":{\"451\":1}}],[\"微服务框架功能\",{\"1\":{\"448\":1}}],[\"微服务的粒度越⼩\",{\"1\":{\"448\":1}}],[\"微服务到底要拆分到多⼤的粒度没有统⼀的标准\",{\"1\":{\"448\":1}}],[\"微服务会更多地关注在devops的持续交付上\",{\"1\":{\"448\":1}}],[\"微服务关注的是解耦\",{\"1\":{\"448\":1}}],[\"微服务就是这样⼀种解决⽅案\",{\"1\":{\"448\":1}}],[\"微服务\",{\"0\":{\"448\":1},\"1\":{\"448\":1}}],[\"微步云沙箱\",{\"1\":{\"12\":1}}],[\"现在模拟一个需求\",{\"1\":{\"634\":1}}],[\"现在请求经过gatway⽹关是\",{\"1\":{\"444\":1}}],[\"现状\",{\"1\":{\"150\":1}}],[\"跨域配置\",{\"1\":{\"444\":1}}],[\"跨域请求解决示例\",{\"0\":{\"444\":1}}],[\"跨域请求\",{\"1\":{\"443\":1}}],[\"虽然解耦和可重⽤性从特定的⻆度来看是⼀样的\",{\"1\":{\"448\":1}}],[\"虽然在安全层⾯上同源限制是必要的\",{\"1\":{\"443\":1}}],[\"虽然git存储配置数据⾮常⽅便\",{\"1\":{\"407\":1}}],[\"例⼦中协议名默认为http\",{\"1\":{\"443\":1}}],[\"例如库中图片地址\",{\"1\":{\"619\":2}}],[\"例如在controller方法中加入数据\",{\"1\":{\"584\":1}}],[\"例如统计结果\",{\"1\":{\"549\":1}}],[\"例如传入的参数是\",{\"1\":{\"524\":1}}],[\"例如服务注册和发现\",{\"1\":{\"448\":1}}],[\"例如application\",{\"1\":{\"405\":1}}],[\"例如我上⾯创建的配置⽂件\",{\"1\":{\"405\":1}}],[\"例如我的就是d\",{\"1\":{\"18\":1}}],[\"例如我的更改后的位置是d\",{\"1\":{\"17\":1}}],[\"例如kibana\",{\"1\":{\"401\":1}}],[\"例如key中长度为3但是向索引为10的位置设置值时就是失败的\",{\"1\":{\"341\":1}}],[\"例如nginx\",{\"1\":{\"390\":1}}],[\"例如head\",{\"1\":{\"389\":1}}],[\"例如jdbctemplate\",{\"1\":{\"389\":1}}],[\"例如断路器\",{\"1\":{\"381\":1}}],[\"例如guava和apache\",{\"1\":{\"381\":1}}],[\"例如⼼跳\",{\"1\":{\"366\":1}}],[\"例如负载均衡\",{\"1\":{\"366\":1}}],[\"例如examuserid\",{\"1\":{\"363\":1}}],[\"例如图片\",{\"1\":{\"214\":1}}],[\"例如递交给某个特别队列\",{\"1\":{\"91\":1}}],[\"例如年龄范围\",{\"1\":{\"57\":1}}],[\"例如\",{\"1\":{\"28\":1,\"42\":3,\"99\":1,\"168\":1,\"213\":1,\"233\":1,\"382\":1,\"413\":2,\"665\":1}}],[\"举个例⼦\",{\"1\":{\"443\":1}}],[\"举例\",{\"1\":{\"99\":1}}],[\"端⼝号默认为80\",{\"1\":{\"443\":1}}],[\"端⼝号均相同\",{\"1\":{\"443\":1}}],[\"端口的服务\",{\"1\":{\"284\":1}}],[\"端口号\",{\"1\":{\"283\":3,\"368\":1}}],[\"终⽌请求\",{\"1\":{\"438\":1}}],[\"顺序为a>b>c>myauthfilter\",{\"1\":{\"437\":1}}],[\"顺序存储\",{\"1\":{\"320\":1}}],[\"⽆需配置\",{\"1\":{\"437\":1}}],[\"⽆⽇志记录\",{\"1\":{\"378\":1}}],[\"⾸先stripprefix过滤器去掉⼀个\",{\"1\":{\"429\":1}}],[\"跳过指定的路径\",{\"1\":{\"429\":1}}],[\"跳转路由的属性\",{\"1\":{\"225\":1}}],[\"跳转的链接需要携带参数\",{\"1\":{\"204\":1}}],[\"跳转到新闻页面\",{\"1\":{\"207\":1}}],[\"跳转到\",{\"1\":{\"204\":1,\"224\":1}}],[\"证明路由是通过指定路由来匹配\",{\"1\":{\"425\":1}}],[\"证明没有匹配上路由\",{\"1\":{\"424\":1}}],[\"证明匹配到路由\",{\"1\":{\"424\":1}}],[\"均可匹配到\",{\"1\":{\"423\":1}}],[\"号作为分隔符\",{\"1\":{\"423\":1}}],[\"携带参数\",{\"1\":{\"419\":1}}],[\"规则\",{\"1\":{\"419\":1}}],[\"规定了控件的宽度和高度\",{\"1\":{\"21\":1}}],[\"⽅便让请求过来找到对应的\",{\"1\":{\"419\":1}}],[\"⽅法命名规则查询的基本语法findby\",{\"1\":{\"73\":1}}],[\"⽅法\",{\"1\":{\"42\":1}}],[\"说话\",{\"1\":{\"631\":1}}],[\"说⽩了\",{\"1\":{\"419\":1}}],[\"说明这个方法是可行的\",{\"1\":{\"656\":1}}],[\"说明类的设计违背了里氏替换原则\",{\"1\":{\"628\":1}}],[\"说明\",{\"1\":{\"21\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"184\":1,\"212\":1,\"262\":1,\"419\":1,\"427\":1,\"508\":1,\"552\":1}}],[\"⼯⼚可以组合使⽤\",{\"1\":{\"418\":1}}],[\"⼯⼚通过不同的\",{\"1\":{\"418\":1}}],[\"⼯⼚\",{\"1\":{\"418\":1}}],[\"⼯作量是巨⼤的\",{\"1\":{\"404\":1}}],[\"做为底层⽀持来匹配到转发路由\",{\"1\":{\"418\":1}}],[\"做增减操作\",{\"1\":{\"363\":1}}],[\"帮助开发者迅速构件⼀个分布式系统\",{\"1\":{\"448\":1}}],[\"帮助客户端和message\",{\"1\":{\"80\":1}}],[\"帮我们内置了很多predicates\",{\"1\":{\"418\":1}}],[\"⾮\",{\"1\":{\"415\":1,\"419\":1}}],[\"各种\",{\"1\":{\"426\":1}}],[\"各字段含义如下\",{\"1\":{\"415\":1}}],[\"各个应⽤⾃⼰独⽴维护本地配置⽂件的⽅式开始显露出它的不⾜之处\",{\"1\":{\"404\":1}}],[\"各个微服务与注册中⼼使⽤⼀定机制\",{\"1\":{\"366\":1}}],[\"⽹关肯定没有问题\",{\"1\":{\"439\":1}}],[\"⽹关作为流量的⼊⼝\",{\"1\":{\"439\":1}}],[\"⽹关配置的基本组成模块\",{\"1\":{\"413\":1}}],[\"⽹关等\",{\"1\":{\"366\":1}}],[\"具备⼀些⽹关的⾼级功能\",{\"1\":{\"413\":1}}],[\"具体实现对目标对象的增强\",{\"1\":{\"665\":1}}],[\"具体怎么从redis获取可以根据自己情况进行获取\",{\"1\":{\"480\":1}}],[\"具体配置属性解释如下\",{\"1\":{\"405\":1}}],[\"具体代码如下\",{\"1\":{\"378\":1}}],[\"具体代码可以参考下面的案例\",{\"1\":{\"85\":1}}],[\"具体的数值100dp\",{\"1\":{\"26\":4}}],[\"易于编写的\",{\"1\":{\"413\":1}}],[\"底层使⽤了⾼性能的通信框架netty\",{\"1\":{\"413\":1}}],[\"底层使用默认交换机\",{\"1\":{\"93\":1}}],[\"安全\",{\"1\":{\"413\":1}}],[\"安装elasticsearch和kibana\",{\"1\":{\"401\":1}}],[\"安装gcc\",{\"1\":{\"332\":1}}],[\"安装全局npm\",{\"1\":{\"263\":1}}],[\"安装制定版本的node\",{\"1\":{\"262\":1}}],[\"安装nvm\",{\"0\":{\"259\":1}}],[\"安装成功示例\",{\"1\":{\"255\":1}}],[\"安装mysql服务\",{\"0\":{\"255\":1},\"1\":{\"255\":1}}],[\"安装zlib库\",{\"1\":{\"248\":1}}],[\"安装pcre库\",{\"1\":{\"247\":1}}],[\"安装rpm包\",{\"1\":{\"243\":1}}],[\"安装流程\",{\"0\":{\"243\":1}}],[\"安装axios\",{\"1\":{\"221\":2}}],[\"安装路由模块\",{\"1\":{\"219\":1}}],[\"安装路由\",{\"1\":{\"219\":1}}],[\"安装完成之后\",{\"1\":{\"217\":1}}],[\"安装完成后\",{\"1\":{\"212\":1}}],[\"安装依赖环境\",{\"1\":{\"232\":1}}],[\"安装依赖\",{\"1\":{\"213\":1}}],[\"安装桥接工具\",{\"1\":{\"212\":1}}],[\"安装的方式\",{\"1\":{\"150\":1}}],[\"安装vue框架\",{\"0\":{\"150\":1}}],[\"安装\",{\"0\":{\"212\":1,\"232\":1,\"233\":1,\"246\":1},\"1\":{\"41\":1,\"217\":1,\"233\":3,\"246\":2,\"248\":1}}],[\"安装插件的⽅式有两种\",{\"1\":{\"41\":1}}],[\"仍然还是使⽤的zuul\",{\"1\":{\"413\":1}}],[\"⽬标服务地址\",{\"1\":{\"415\":1}}],[\"⽬标uri会被访问\",{\"1\":{\"413\":1,\"414\":1}}],[\"⽬标是替代\",{\"1\":{\"413\":1}}],[\"⽬前querydsl⽀持的平台包括jpa\",{\"1\":{\"56\":1}}],[\"⽣态系统中的⽹关\",{\"1\":{\"413\":1}}],[\"⽣产环境版本\",{\"1\":{\"405\":1}}],[\"⽀持多个可与\",{\"1\":{\"439\":1}}],[\"⽀持传⼊两个参数\",{\"1\":{\"420\":1}}],[\"⽀持更多格式的数据\",{\"1\":{\"29\":1}}],[\"⽀付成功\",{\"1\":{\"410\":1,\"444\":1}}],[\"动辄上百个节点如果都需要重启\",{\"1\":{\"408\":1}}],[\"动态代理使用的时\",{\"1\":{\"662\":1}}],[\"动态代理有两种模式\",{\"1\":{\"661\":1}}],[\"动态代理\",{\"0\":{\"661\":1,\"665\":1},\"1\":{\"659\":1,\"661\":2,\"665\":1}}],[\"动态路由\",{\"0\":{\"204\":1},\"1\":{\"225\":1,\"413\":1}}],[\"动态\",{\"1\":{\"165\":1}}],[\"那自然更容易维护了\",{\"1\":{\"627\":1}}],[\"那组尖括号里所包的类型\",{\"1\":{\"524\":1}}],[\"那这个系统可以下架了\",{\"1\":{\"439\":1}}],[\"那就可以通过不同的\",{\"1\":{\"405\":1}}],[\"那么我们可能会一直if判断下去\",{\"1\":{\"634\":1}}],[\"那么我需要清除的缓存地址就是d\",{\"1\":{\"17\":1}}],[\"那么集合中的元素也都是朋友\",{\"1\":{\"631\":1}}],[\"那么s是t的子类\",{\"1\":{\"628\":1}}],[\"那么需要使用jsonarray\",{\"1\":{\"606\":1}}],[\"那么需要从开始一直查到数据所在\",{\"1\":{\"311\":1}}],[\"那么就不应当发生直接的相互调用\",{\"1\":{\"631\":1}}],[\"那么就判断字段上是否存在\",{\"1\":{\"599\":2}}],[\"那么就是同域\",{\"1\":{\"443\":1}}],[\"那么\",{\"1\":{\"524\":2}}],[\"那么也就是说在时间临界点左右可能同时有2倍的阀值进⾏请求\",{\"1\":{\"461\":1}}],[\"那么微服务就是针对可重⽤业务服务的更进⼀步优化\",{\"1\":{\"448\":1}}],[\"那么这个请求就是跨域请求\",{\"1\":{\"443\":1}}],[\"那么这个请求是同域的\",{\"1\":{\"443\":1}}],[\"那么怎么将链路数据存储起来呢\",{\"1\":{\"401\":1}}],[\"那么服务注册中⼼将该实例重新纳⼊到服务列表中\",{\"1\":{\"366\":1}}],[\"那么事务将被打断\",{\"1\":{\"358\":1}}],[\"那么可以考虑将一个字段变更为升序排序且由于我们这边是以考试为思路来设计所以可以考虑使用考试的最高分减去当前人的考试分数获取一个新的升序分数\",{\"1\":{\"324\":1}}],[\"那么保证其唯一\",{\"1\":{\"318\":1}}],[\"那么对于我们来讲保证hashset集合元素的唯一\",{\"1\":{\"318\":1}}],[\"那么执行\",{\"1\":{\"238\":1}}],[\"那么该消息就会丢失\",{\"1\":{\"107\":1}}],[\"那么默认使用\",{\"1\":{\"105\":1,\"106\":1}}],[\"那么消息会丢失\",{\"1\":{\"91\":1}}],[\"统⼀跨域请求\",{\"0\":{\"443\":1}}],[\"统⼀配置管理就是弥补上述不⾜的⽅法\",{\"1\":{\"404\":1}}],[\"统一的\",{\"1\":{\"487\":1}}],[\"统一返回数据类\",{\"0\":{\"487\":1}}],[\"统一设置激活样式\",{\"0\":{\"229\":1}}],[\"统一导入\",{\"0\":{\"227\":1}}],[\"随后断路器会⾃动进⼊半开状态\",{\"1\":{\"456\":1}}],[\"随着单体架构向微服务架构的演进\",{\"1\":{\"404\":1}}],[\"随机获取变量中的元素\",{\"1\":{\"363\":1}}],[\"随机获取变量中指定个数的元素\",{\"1\":{\"363\":1}}],[\"功能\",{\"1\":{\"418\":1,\"631\":1}}],[\"功能开关\",{\"1\":{\"404\":1}}],[\"功能包括\",{\"1\":{\"112\":1}}],[\"故此需要配置spring\",{\"1\":{\"400\":1}}],[\"故此需要把\",{\"1\":{\"400\":1}}],[\"⽤户请求过载时进⾏限流\",{\"1\":{\"448\":1}}],[\"⽤户鉴权服务等\",{\"1\":{\"448\":1}}],[\"⽤\",{\"1\":{\"423\":1}}],[\"⽤于连接到连接到同⼀⽹络的其他服务\",{\"1\":{\"401\":1}}],[\"⽤于发送链路报告\",{\"1\":{\"399\":1}}],[\"⽤来及时记录⼀个事件的\",{\"1\":{\"396\":1}}],[\"支付成功\",{\"1\":{\"392\":1}}],[\"支持更多类型的处理器\",{\"1\":{\"572\":1}}],[\"支持当前事务\",{\"1\":{\"548\":1,\"552\":2}}],[\"支持\",{\"1\":{\"529\":1}}],[\"支持网络\",{\"1\":{\"331\":1}}],[\"支持promise\",{\"1\":{\"184\":1}}],[\"核⼼线程池⼤⼩\",{\"1\":{\"385\":1}}],[\"核心类\",{\"1\":{\"665\":1}}],[\"核心方法\",{\"1\":{\"665\":1}}],[\"核心方法如下\",{\"1\":{\"662\":1}}],[\"核心思想\",{\"1\":{\"629\":1}}],[\"核心实现就是基于aop\",{\"1\":{\"548\":1}}],[\"核心依赖\",{\"1\":{\"543\":1}}],[\"核心容器由以下部分组成\",{\"0\":{\"530\":1}}],[\"核心模块\",{\"1\":{\"381\":1}}],[\"核心\",{\"1\":{\"334\":1}}],[\"信息的隐藏促进了软件的复用\",{\"1\":{\"631\":1}}],[\"信息被保存到\",{\"1\":{\"80\":1}}],[\"信号量隔离配置\",{\"1\":{\"384\":1}}],[\"信号量隔离\",{\"0\":{\"384\":1,\"454\":1}}],[\"慢调⽤百分⽐阈值\",{\"1\":{\"382\":1,\"440\":1}}],[\"慢调⽤时间阈值\",{\"1\":{\"382\":1,\"440\":1}}],[\"⾼于这个阈值的呼叫视为慢调⽤\",{\"1\":{\"382\":1,\"440\":1}}],[\"⾼级功能多有第三⽅插件提供\",{\"1\":{\"29\":1}}],[\"允许为空\",{\"1\":{\"499\":1}}],[\"允许值范围\",{\"1\":{\"499\":5}}],[\"允许执⾏的最⼤请求数\",{\"1\":{\"386\":1}}],[\"允许通过的请求个数\",{\"1\":{\"382\":1,\"440\":1}}],[\"允许你在分⽚\",{\"1\":{\"39\":1}}],[\"允许你⽔平分割\",{\"1\":{\"39\":1}}],[\"应该本身执行是返回true\",{\"1\":{\"653\":1}}],[\"应该创建弱耦合的类\",{\"1\":{\"631\":1}}],[\"应该根据以下几个规则来衡量\",{\"1\":{\"630\":1}}],[\"应算作成功\",{\"1\":{\"382\":1}}],[\"应用的难度大大降低\",{\"1\":{\"529\":1}}],[\"应用类加载器\",{\"1\":{\"289\":1}}],[\"应用层\",{\"1\":{\"277\":1}}],[\"应用范围不同\",{\"1\":{\"193\":1}}],[\"直到所有允许通过的访问结束\",{\"1\":{\"382\":1}}],[\"直接加载\",{\"0\":{\"647\":1},\"1\":{\"645\":1}}],[\"直接写list\",{\"1\":{\"524\":1}}],[\"直接写事件名\",{\"1\":{\"159\":1}}],[\"直接使用\",{\"1\":{\"522\":1}}],[\"直接返回false\",{\"1\":{\"637\":1}}],[\"直接返回降级信息\",{\"1\":{\"448\":1}}],[\"直接返回状态码406\",{\"1\":{\"438\":1}}],[\"直接回应\",{\"1\":{\"438\":1}}],[\"直接杀死进程\",{\"1\":{\"248\":1}}],[\"直接解压就可以\",{\"1\":{\"248\":1}}],[\"直接下载源码然后通过路径引入\",{\"1\":{\"150\":1}}],[\"超过数量就拒绝或者排队\",{\"1\":{\"461\":1}}],[\"超过这个⽐例\",{\"1\":{\"382\":1,\"440\":1}}],[\"超过该配置值的话\",{\"1\":{\"382\":1}}],[\"超时等阻塞情况时可以快速失败\",{\"1\":{\"455\":1}}],[\"超时处理\",{\"1\":{\"381\":1}}],[\"超时配置\",{\"0\":{\"374\":1}}],[\"超时设置\",{\"1\":{\"252\":1}}],[\"超时\",{\"1\":{\"146\":1,\"439\":1}}],[\"除添加新的方法完成新增功能外\",{\"1\":{\"628\":1}}],[\"除了从父类继承过来的\",{\"1\":{\"628\":1}}],[\"除了\",{\"1\":{\"499\":1,\"560\":1}}],[\"除非ignoreexceptions显式忽略异常\",{\"1\":{\"382\":1}}],[\"除非它们被ignoreexceptions显式忽略\",{\"1\":{\"382\":1}}],[\"除非通过ignoreexceptions显式忽略\",{\"1\":{\"382\":1}}],[\"除状态装换外\",{\"1\":{\"382\":1}}],[\"除此以外熔断器还会有两种特殊状态\",{\"1\":{\"382\":1}}],[\"除此以外的情况都使⽤过滤\",{\"1\":{\"57\":1}}],[\"始终拒绝访问\",{\"1\":{\"382\":1}}],[\"始终允许访问\",{\"1\":{\"382\":1}}],[\"居于时间的滑动窗⼝统计了最近n秒的调⽤返回结果\",{\"1\":{\"382\":1}}],[\"强制开启\",{\"1\":{\"382\":1}}],[\"强制跳转上海\",{\"1\":{\"206\":1}}],[\"禁⽤\",{\"1\":{\"382\":1}}],[\"禁用此套接字的输出流\",{\"1\":{\"281\":1}}],[\"禁用\",{\"1\":{\"281\":7}}],[\"半开状态\",{\"1\":{\"456\":1}}],[\"半开\",{\"1\":{\"382\":1}}],[\"断⾔条件\",{\"0\":{\"419\":1}}],[\"断⾔的输⼊类型是⼀个\",{\"1\":{\"413\":1}}],[\"断⾔\",{\"1\":{\"413\":1}}],[\"断路器会完全打开\",{\"1\":{\"456\":1}}],[\"断路器会从半开状态恢复为开启状态\",{\"1\":{\"382\":1}}],[\"断路器关闭\",{\"1\":{\"456\":1}}],[\"断路器配置了慢调⽤⽐例熔断\",{\"1\":{\"382\":1}}],[\"断路器打开后会进⼊休眠时间\",{\"1\":{\"456\":1}}],[\"断路器打开\",{\"1\":{\"382\":1,\"440\":1,\"456\":1}}],[\"断路器把调⽤时间⼤于\",{\"1\":{\"382\":1,\"440\":1}}],[\"断路器把调用时间用于slowcalldurationthreshold的调用视为慢调用\",{\"1\":{\"382\":1}}],[\"断路器从开启过渡到半开应等待的时间\",{\"1\":{\"382\":1}}],[\"断路器也不会开启\",{\"1\":{\"382\":1}}],[\"断路器计算失败率或慢调用率之前所需的最小调用数\",{\"1\":{\"382\":1}}],[\"断路器在半开状态下的最长等待时间\",{\"1\":{\"382\":1}}],[\"断路器在半开状态下允许通过的调用次数\",{\"1\":{\"382\":1}}],[\"断路器开启\",{\"1\":{\"382\":1}}],[\"断路器状态并关闭变为开启\",{\"1\":{\"382\":1}}],[\"断路器使⽤滑动窗⼝来存储和统计调⽤的结果\",{\"1\":{\"382\":1}}],[\"断路器通过有限状态机实现\",{\"1\":{\"382\":1}}],[\"断路器\",{\"0\":{\"382\":1},\"1\":{\"448\":1}}],[\"断路器将会开启\",{\"1\":{\"381\":1}}],[\"断开连接时\",{\"1\":{\"278\":1}}],[\"异步执⾏可以采⽤\",{\"1\":{\"381\":1}}],[\"异常类型\",{\"1\":{\"541\":1}}],[\"异常通知\",{\"1\":{\"540\":1,\"541\":1,\"545\":2}}],[\"异常信息是\",{\"1\":{\"545\":1}}],[\"异常信息\",{\"1\":{\"475\":3}}],[\"异常⽤户过滤拦截等都可以通过服务⽹关实现\",{\"1\":{\"448\":1}}],[\"异常名单\",{\"1\":{\"382\":1,\"440\":1}}],[\"异常\",{\"1\":{\"303\":1,\"304\":1,\"439\":1,\"664\":1}}],[\"隔离信号量隔离是使⽤semaphore来实现的\",{\"1\":{\"454\":1}}],[\"隔离允许并发线程执⾏的最⼤数量\",{\"1\":{\"384\":1}}],[\"隔离\",{\"0\":{\"383\":1,\"452\":1},\"1\":{\"381\":1,\"451\":1}}],[\"隔离机制等\",{\"1\":{\"381\":1}}],[\"隔离机制\",{\"1\":{\"381\":2}}],[\"装饰器\",{\"1\":{\"381\":1}}],[\"记录为失败并因此增加失败率的异常列表\",{\"1\":{\"382\":1}}],[\"记录请求和响应的标头\",{\"1\":{\"378\":1}}],[\"记录基本信息以及请求和响应标头\",{\"1\":{\"378\":1}}],[\"记忆力博客网盘\",{\"1\":{\"13\":1}}],[\"告诉配置类feign需要打印的内容\",{\"1\":{\"378\":1}}],[\"熔断等⼿段\",{\"1\":{\"451\":1}}],[\"熔断后\",{\"1\":{\"448\":1}}],[\"熔断是指依赖服务多次失效\",{\"1\":{\"448\":1}}],[\"熔断\",{\"0\":{\"456\":1},\"1\":{\"381\":1}}],[\"熔断降级\",{\"1\":{\"439\":1}}],[\"熔断降级的配置\",{\"1\":{\"382\":1}}],[\"熔断降级配置\",{\"1\":{\"382\":1}}],[\"熔断降级返回的结果\",{\"1\":{\"376\":2}}],[\"熔断降级示例\",{\"0\":{\"376\":1}}],[\"熔断器会对请求情况计数\",{\"1\":{\"456\":1}}],[\"熔断器会从打开状态转换到半开状态\",{\"1\":{\"382\":1}}],[\"熔断器模型的状态机有3个状态\",{\"1\":{\"456\":1}}],[\"熔断器模型\",{\"1\":{\"456\":2}}],[\"熔断器配置了异常⽐例熔断\",{\"1\":{\"382\":1}}],[\"熔断器backenda\",{\"1\":{\"382\":1}}],[\"熔断器就会从关闭状态转换到打开状态\",{\"1\":{\"382\":1}}],[\"熔断器\",{\"1\":{\"366\":1,\"448\":1}}],[\"防止由于服务器处理时间长而阻塞调用者\",{\"1\":{\"374\":1}}],[\"被耦合或调用的类的内部是如何复杂都与我无关\",{\"1\":{\"631\":1}}],[\"被迫设计冗余的代码\",{\"1\":{\"630\":1}}],[\"被复用的可能性就越大\",{\"1\":{\"626\":1}}],[\"被标记为\",{\"1\":{\"540\":1}}],[\"被丢弃\",{\"1\":{\"459\":1}}],[\"被忽略且既不算失败也不算成功的异常列表\",{\"1\":{\"382\":1}}],[\"被spring\",{\"1\":{\"366\":1}}],[\"被其他命令所改动\",{\"1\":{\"358\":1}}],[\"意为\",{\"1\":{\"366\":1}}],[\"意思是没有复制\",{\"1\":{\"39\":1}}],[\"某个值\",{\"1\":{\"363\":1}}],[\"某⼀个产品的⼀个⽂档\",{\"1\":{\"35\":1}}],[\"起始区间\",{\"1\":{\"363\":1}}],[\"起始坐标时屏幕左上角\",{\"1\":{\"20\":1}}],[\"检查产品\",{\"1\":{\"637\":1}}],[\"检查给定的元素是否在变量中\",{\"1\":{\"363\":1}}],[\"检索数据\",{\"1\":{\"29\":1}}],[\"弹出元素并删除\",{\"1\":{\"363\":1}}],[\"弹出变量中的元素\",{\"1\":{\"363\":1}}],[\"弹栈\",{\"1\":{\"308\":1}}],[\"纯数字\",{\"1\":{\"363\":1}}],[\"批量移除set缓存中元素\",{\"1\":{\"363\":1}}],[\"批量添加\",{\"1\":{\"363\":2,\"524\":1}}],[\"批量操作在发送\",{\"1\":{\"358\":1}}],[\"秒数\",{\"1\":{\"499\":2}}],[\"秒\",{\"1\":{\"363\":2}}],[\"键值对\",{\"1\":{\"363\":1}}],[\"键\",{\"1\":{\"363\":5}}],[\"监控\",{\"1\":{\"413\":1}}],[\"监视一个\",{\"1\":{\"358\":1}}],[\"监听器\",{\"1\":{\"563\":1}}],[\"监听\",{\"1\":{\"283\":1,\"563\":1,\"590\":1}}],[\"监听data数据变化时\",{\"1\":{\"190\":1}}],[\"监听搜索内容\",{\"1\":{\"189\":1}}],[\"监听这个队列\",{\"1\":{\"86\":1,\"87\":1}}],[\"收到业务服务的响应之后\",{\"1\":{\"436\":1}}],[\"收到\",{\"1\":{\"358\":1}}],[\"收到消息失败后是否需要重新发送\",{\"1\":{\"87\":1}}],[\"转义符号\",{\"1\":{\"525\":1}}],[\"转义字符\",{\"0\":{\"525\":1}}],[\"转发的规则会在路径前增加\",{\"1\":{\"427\":1}}],[\"转发到\",{\"1\":{\"419\":1}}],[\"转发规则如下表所示\",{\"1\":{\"419\":1}}],[\"转发规则的定义主要包含三个部分\",{\"1\":{\"418\":1}}],[\"转发功能同样可以通过代码来实现\",{\"1\":{\"416\":1}}],[\"转移变量的元素值到目的变量\",{\"1\":{\"363\":1}}],[\"转移消息的归属权\",{\"1\":{\"357\":1}}],[\"转换后的list\",{\"1\":{\"606\":6}}],[\"转换为\",{\"1\":{\"284\":1}}],[\"转换\",{\"1\":{\"63\":2}}],[\"转换实体类进行创建文档\",{\"1\":{\"63\":1}}],[\"反向获取消息列表\",{\"1\":{\"356\":1}}],[\"反射获取一个对象\",{\"1\":{\"295\":1,\"296\":1}}],[\"反射获取\",{\"1\":{\"291\":1}}],[\"反射使用的演示对象\",{\"1\":{\"290\":1}}],[\"反射\",{\"0\":{\"287\":1}}],[\"反射中解析\",{\"1\":{\"269\":1}}],[\"~\",{\"1\":{\"356\":1}}],[\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~通配符\",{\"1\":{\"589\":1}}],[\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~\",{\"1\":{\"589\":2}}],[\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~广播\",{\"1\":{\"589\":1}}],[\"~~~~\",{\"1\":{\"105\":1}}],[\"长度检查不合格\",{\"1\":{\"638\":1}}],[\"长度\",{\"1\":{\"356\":1,\"634\":1}}],[\"限流配置等\",{\"1\":{\"404\":1}}],[\"限流阈值\",{\"1\":{\"404\":1}}],[\"限流\",{\"0\":{\"386\":1,\"458\":1},\"1\":{\"381\":1,\"413\":1}}],[\"限流器每隔1s刷新⼀次\",{\"1\":{\"386\":1}}],[\"限流器中任何的反应式类型进⾏装饰\",{\"1\":{\"381\":1}}],[\"限流器\",{\"1\":{\"381\":3}}],[\"限流处理\",{\"1\":{\"108\":1}}],[\"限制长度\",{\"1\":{\"356\":1}}],[\"宕机等\",{\"1\":{\"355\":1}}],[\"合并为一个\",{\"1\":{\"354\":1}}],[\"迭代有序集合中的元素\",{\"1\":{\"351\":1}}],[\"迭代hash表中的键值对\",{\"1\":{\"349\":1}}],[\"迭代集合中的元素\",{\"1\":{\"346\":1}}],[\"迭代器\",{\"1\":{\"312\":1}}],[\"仅有当前一个对象\",{\"1\":{\"645\":1}}],[\"仅在更新时进行处理\",{\"1\":{\"466\":1}}],[\"仅在插入时进行处理\",{\"1\":{\"466\":1}}],[\"仅限制对某个资源调⽤的并发数\",{\"1\":{\"455\":1}}],[\"仅保留指定区间内的元素\",{\"1\":{\"345\":1}}],[\"仅⽀持json⽂件格式\",{\"1\":{\"29\":1}}],[\"追加到destination的头部\",{\"1\":{\"344\":1}}],[\"追加命令\",{\"1\":{\"337\":1}}],[\"空链表\",{\"1\":{\"341\":1}}],[\"空队列是不包含元素的空表\",{\"1\":{\"309\":1}}],[\"阻塞10秒\",{\"1\":{\"382\":1,\"384\":1,\"386\":1}}],[\"阻塞毫秒数\",{\"1\":{\"356\":1,\"357\":1}}],[\"阻塞指定的秒数\",{\"1\":{\"344\":1}}],[\"阻塞命令\",{\"0\":{\"344\":1}}],[\"阻塞队列使用\",{\"1\":{\"341\":1}}],[\"阻止默认事件\",{\"1\":{\"159\":2}}],[\"移动⽅式为开始时间点变为时间列表中的第⼆时间点\",{\"1\":{\"462\":1}}],[\"移动命令\",{\"1\":{\"336\":1}}],[\"移出并获取列表的最后一个元素\",{\"1\":{\"344\":1}}],[\"移出并获取列表的第一个元素\",{\"1\":{\"344\":1}}],[\"移除集合中右边的元素在等待的时间里\",{\"1\":{\"363\":1}}],[\"移除集合中右边的元素\",{\"1\":{\"363\":1}}],[\"移除集合中左边的元素在等待的时间里\",{\"1\":{\"363\":1}}],[\"移除集合中的左边第一个元素\",{\"1\":{\"363\":1}}],[\"移除集合中一个或多个成员\",{\"1\":{\"346\":1}}],[\"移除指定key\",{\"1\":{\"363\":1}}],[\"移除有序集合中给定的分数区间的所有成员\",{\"1\":{\"351\":1}}],[\"移除有序集合中给定的排名区间的所有成员\",{\"1\":{\"351\":1}}],[\"移除有序集合中给定的字典区间的所有成员\",{\"1\":{\"351\":1}}],[\"移除有序集合中的一个或多个成员\",{\"1\":{\"351\":1}}],[\"移除source列表的最后一位元素\",{\"1\":{\"343\":1}}],[\"移除时是从尾部开始找要移除的元素\",{\"1\":{\"343\":1}}],[\"移除时是从头部开始找要移除的元素\",{\"1\":{\"343\":1}}],[\"移除key中指定个数的value\",{\"1\":{\"343\":2}}],[\"移除并返回集合中的一个随机元素\",{\"1\":{\"346\":1}}],[\"移除并返回此列表的最后一个元素\",{\"1\":{\"316\":1}}],[\"移除并返回此列表的第一个元素\",{\"1\":{\"316\":1}}],[\"移除并获取列表的最后一位元素\",{\"1\":{\"343\":1}}],[\"移除并获取列表的第一位元素\",{\"1\":{\"343\":1}}],[\"移除或弹出一个元素\",{\"0\":{\"343\":1}}],[\"移除列表中指定位置的元素\",{\"1\":{\"315\":1}}],[\"移除几天前就将\",{\"1\":{\"244\":1}}],[\"移除\",{\"1\":{\"210\":1,\"244\":1}}],[\"五大数据类型\",{\"0\":{\"335\":1}}],[\"误区2\",{\"1\":{\"334\":1}}],[\"误区1\",{\"1\":{\"334\":1}}],[\"找下载示例\",{\"1\":{\"332\":1}}],[\"找到对应方法进行执行\",{\"1\":{\"574\":1}}],[\"找到并装载完成\",{\"1\":{\"534\":1}}],[\"找到dameonize\",{\"1\":{\"332\":1}}],[\"找到\",{\"1\":{\"248\":1}}],[\"找到缓存包清理一下缓存\",{\"1\":{\"17\":1}}],[\"找到setting\",{\"1\":{\"17\":1}}],[\"找到caches\",{\"1\":{\"17\":1}}],[\"找到c\",{\"1\":{\"17\":1}}],[\"英文官网命令查询\",{\"1\":{\"331\":1}}],[\"英文缩写\",{\"1\":{\"110\":1}}],[\"狂神说\",{\"1\":{\"331\":1}}],[\"狂神的公众号\",{\"1\":{\"331\":1}}],[\"事实上使用sqlsessionfactorybuilder的原因是将sqlsessionfactory这个复杂对象的创建交由builder来执行\",{\"1\":{\"514\":1}}],[\"事务提交\",{\"1\":{\"663\":2}}],[\"事务的隔离级别\",{\"1\":{\"552\":1}}],[\"事务的粗细粒度\",{\"0\":{\"549\":1}}],[\"事务必须在service层统一控制\",{\"1\":{\"548\":1}}],[\"事务中的方法\",{\"1\":{\"548\":2}}],[\"事务中任意命令执行失败\",{\"1\":{\"358\":1}}],[\"事务默认超时时限\",{\"1\":{\"547\":1}}],[\"事务传播行为是加在方法上的\",{\"1\":{\"548\":1}}],[\"事务传播行为常量\",{\"0\":{\"548\":1},\"1\":{\"548\":1}}],[\"事务传播行为\",{\"1\":{\"547\":1}}],[\"事务隔离级别常量\",{\"1\":{\"547\":1}}],[\"事务隔离级别\",{\"1\":{\"547\":1}}],[\"事务隔离级别将会使用驱动或数据源的默认设置\",{\"1\":{\"515\":1}}],[\"事务定义接口\",{\"1\":{\"547\":1}}],[\"事务类型\",{\"1\":{\"518\":1}}],[\"事务可以一次执行多个命令\",{\"1\":{\"358\":1}}],[\"事务\",{\"0\":{\"358\":1,\"547\":1},\"1\":{\"331\":1,\"518\":1,\"528\":1}}],[\"事件传播等方面的良好支持\",{\"1\":{\"533\":1}}],[\"事件传播\",{\"1\":{\"530\":1}}],[\"事件监听\",{\"1\":{\"200\":1}}],[\"事件对象\",{\"1\":{\"159\":1}}],[\"事件名\",{\"1\":{\"159\":1}}],[\"事件名=\",{\"1\":{\"159\":2}}],[\"浏览量\",{\"1\":{\"331\":1}}],[\"浏览器会向服务器发送一个请求\",{\"1\":{\"574\":1}}],[\"浏览器与服务器程序\",{\"1\":{\"276\":1}}],[\"浏览器端\",{\"1\":{\"184\":1}}],[\"浏览器插件站\",{\"1\":{\"13\":1}}],[\"计算基数所需的空间总是固定\",{\"1\":{\"354\":1}}],[\"计算两个位置之间的距离\",{\"1\":{\"353\":1}}],[\"计算给定的一个或多个有序集的并集\",{\"1\":{\"351\":1}}],[\"计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合\",{\"1\":{\"351\":1}}],[\"计算在有序集合中指定区间分数的成员数\",{\"1\":{\"351\":1}}],[\"计算属性和watch区别\",{\"1\":{\"190\":1}}],[\"计算属性也会重新计算计算=>\",{\"1\":{\"183\":1}}],[\"计算属性依赖data中的数据变化\",{\"1\":{\"183\":1}}],[\"计算属性不需要调用形式的写法\",{\"1\":{\"183\":1}}],[\"计算属性\",{\"0\":{\"183\":1},\"1\":{\"183\":1,\"190\":1}}],[\"计数器清零\",{\"1\":{\"461\":1}}],[\"计数器\",{\"1\":{\"331\":1}}],[\"计时器\",{\"1\":{\"331\":1}}],[\"地理位置\",{\"0\":{\"353\":1}}],[\"地图信息分析\",{\"1\":{\"331\":1}}],[\"地址\",{\"1\":{\"113\":1,\"398\":1}}],[\"持久化\",{\"1\":{\"331\":2}}],[\"能减少项目工程中的代码冗余\",{\"1\":{\"630\":1}}],[\"能通过反射读取到\",{\"1\":{\"493\":1}}],[\"能够保证系统的稳定性\",{\"1\":{\"630\":1}}],[\"能够从注册中⼼注册和得到服务信息\",{\"1\":{\"448\":1}}],[\"能够正确访问⽀付微服务\",{\"1\":{\"430\":1,\"431\":1}}],[\"能够正确访问到⽀付微服务\",{\"1\":{\"429\":1}}],[\"能够匹配\",{\"1\":{\"99\":1}}],[\"能做什么\",{\"1\":{\"331\":1}}],[\"免费开源\",{\"1\":{\"331\":1}}],[\"概述\",{\"0\":{\"331\":1}}],[\"概念\",{\"1\":{\"80\":1,\"625\":1}}],[\"考试id\",{\"1\":{\"327\":1}}],[\"考试排行榜工具类\",{\"1\":{\"327\":1}}],[\"拼接为本场考试使用的key\",{\"1\":{\"327\":1}}],[\"拼接id\",{\"1\":{\"226\":1}}],[\"准备代理使用的切面类\",{\"1\":{\"660\":1}}],[\"准备切面类\",{\"1\":{\"660\":1}}],[\"准备测试数据\",{\"1\":{\"324\":1}}],[\"准备一些数据\",{\"1\":{\"77\":1}}],[\"由伊恩\",{\"1\":{\"631\":1}}],[\"由罗伯特\",{\"1\":{\"627\":1}}],[\"由它调用其它组件处理用户的请求\",{\"1\":{\"569\":1}}],[\"由此我们可以进行尝试是否可行\",{\"1\":{\"324\":1}}],[\"由此我们可以思考将两个分数组装为一个double类型的分数来进行排序\",{\"1\":{\"324\":1}}],[\"由于亲合度降低\",{\"1\":{\"631\":1}}],[\"由于在软件设计中\",{\"1\":{\"629\":1}}],[\"由于该方法是在处理器方法执行完后执行\",{\"1\":{\"583\":1}}],[\"由于\",{\"1\":{\"571\":1}}],[\"由于计数器算法存在时间临界点缺陷\",{\"1\":{\"461\":1}}],[\"由于soa和微服务两者的关注点不⼀样\",{\"1\":{\"448\":1}}],[\"由于redis的sort排序仅支持一个字段进行升序或降序\",{\"1\":{\"324\":1}}],[\"由于有了类加载器\",{\"1\":{\"289\":1}}],[\"由于需要拿到编辑数据的标识\",{\"1\":{\"225\":1}}],[\"由于只有一个页面\",{\"1\":{\"199\":1}}],[\"由于上面改了gradle下载存放地址\",{\"1\":{\"17\":1}}],[\"思路\",{\"1\":{\"324\":1}}],[\"哈希桶中的数据量小于6时\",{\"1\":{\"320\":1}}],[\"哈希桶中的数据量大于8时\",{\"1\":{\"320\":1}}],[\"哈希表存储采用数组+链表+红黑树实现\",{\"1\":{\"318\":1}}],[\"哈希表底层采用\",{\"1\":{\"318\":1}}],[\"哈希表\",{\"1\":{\"318\":1,\"320\":1}}],[\"散列因子\",{\"1\":{\"320\":1}}],[\"才会触发circuitbreader对于断路器的判断\",{\"1\":{\"382\":1,\"440\":1}}],[\"才会接收到消息\",{\"1\":{\"96\":1}}],[\"才添加\",{\"1\":{\"363\":1}}],[\"才能保证hashset集合中的对象唯一\",{\"1\":{\"318\":1}}],[\"建立在由\",{\"1\":{\"530\":1}}],[\"建立自己的比较方式\",{\"1\":{\"318\":1}}],[\"建造者模式对象创建\",{\"1\":{\"520\":1}}],[\"建造者模式可以强制实行一种分步骤进行的建造过程\",{\"1\":{\"514\":1}}],[\"建造者模式\",{\"1\":{\"514\":1}}],[\"建议给每个元素设置一个key属性\",{\"1\":{\"163\":1}}],[\"继承默认配置default\",{\"1\":{\"382\":1}}],[\"继承熔断器\",{\"0\":{\"375\":1}}],[\"继承\",{\"1\":{\"316\":1,\"318\":1}}],[\"继承时出现警告解决\",{\"0\":{\"120\":1}}],[\"集成熔断器circuitbreaker\",{\"1\":{\"413\":1}}],[\"集成spring\",{\"1\":{\"413\":1}}],[\"集成\",{\"1\":{\"413\":1}}],[\"集合移动到\",{\"1\":{\"346\":1}}],[\"集合\",{\"0\":{\"346\":1},\"1\":{\"346\":1}}],[\"集合中\",{\"1\":{\"348\":1}}],[\"集合中可以有重复的元素\",{\"1\":{\"315\":1}}],[\"集合中顶级父接口有哪些\",{\"1\":{\"312\":1}}],[\"集合是java中提供的一种容器\",{\"1\":{\"312\":1}}],[\"集群示例\",{\"0\":{\"367\":1}}],[\"集群中任意节点的主机名\",{\"1\":{\"42\":1}}],[\"集群\",{\"0\":{\"37\":1},\"1\":{\"331\":1}}],[\"趋近平衡树\",{\"1\":{\"312\":1}}],[\"速度特别快\",{\"1\":{\"312\":1}}],[\"速度快\",{\"1\":{\"163\":1}}],[\"任何类都不应该从具体类派生\",{\"1\":{\"629\":1}}],[\"任何与列表之一匹配或继承的异常都不会被视为失败或成功\",{\"1\":{\"382\":1}}],[\"任何被装饰的⽅法都可以同步或异步执⾏\",{\"1\":{\"381\":1}}],[\"任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同\",{\"1\":{\"312\":1}}],[\"任意可选的查询字符串参数\",{\"1\":{\"42\":1}}],[\"叶子节点\",{\"1\":{\"312\":1}}],[\"树的键值仍然是有序的\",{\"1\":{\"312\":1}}],[\"顶上的叫根结点\",{\"1\":{\"312\":1}}],[\"顶层根基路由组件\",{\"1\":{\"214\":1}}],[\"循环给\",{\"1\":{\"619\":1}}],[\"循环时在同一行进行循环\",{\"1\":{\"619\":1}}],[\"循环链表\",{\"1\":{\"311\":1}}],[\"循环拿到的所有属性\",{\"1\":{\"298\":1}}],[\"左子树\",{\"1\":{\"312\":1}}],[\"左边知道右边的数据是什么\",{\"1\":{\"311\":1}}],[\"左边数据时谁\",{\"1\":{\"311\":1}}],[\"左侧外间距\",{\"1\":{\"26\":1}}],[\"右子树\",{\"1\":{\"312\":1}}],[\"右链表不知\",{\"1\":{\"311\":1}}],[\"右侧外间距\",{\"1\":{\"26\":1}}],[\"增强\",{\"1\":{\"540\":1,\"662\":1}}],[\"增减值\",{\"1\":{\"363\":1}}],[\"增加元素\",{\"1\":{\"311\":1}}],[\"增删元素快\",{\"1\":{\"311\":1}}],[\"增删改查慢\",{\"1\":{\"310\":1}}],[\"增删改使用\",{\"1\":{\"303\":1,\"304\":1}}],[\"依次向后查找指定元素\",{\"1\":{\"311\":1}}],[\"依赖等等\",{\"1\":{\"631\":1}}],[\"依赖倒置原则可以提高代码的可读性和可维护性\",{\"1\":{\"629\":1}}],[\"依赖倒置原则可以提高系统的稳定性\",{\"1\":{\"629\":1}}],[\"依赖倒置原则可以减少并行开发引起的风险\",{\"1\":{\"629\":1}}],[\"依赖倒置原则可以降低类间的耦合性\",{\"1\":{\"629\":1}}],[\"依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性\",{\"1\":{\"629\":1}}],[\"依赖倒置原则的实现方法\",{\"1\":{\"629\":1}}],[\"依赖倒置原则的作用\",{\"1\":{\"629\":1}}],[\"依赖倒置原则的原始定义为\",{\"1\":{\"629\":1}}],[\"依赖倒置原则是实现开闭原则的重要途径之一\",{\"1\":{\"629\":1}}],[\"依赖倒置原则\",{\"0\":{\"629\":1},\"1\":{\"625\":1}}],[\"依赖导入\",{\"0\":{\"558\":1}}],[\"依赖包版本锁定文件\",{\"1\":{\"214\":1}}],[\"依赖\",{\"1\":{\"113\":1,\"517\":1,\"558\":1,\"589\":1,\"590\":2}}],[\"想要实现这个要求\",{\"1\":{\"439\":1}}],[\"想查找某个元素\",{\"1\":{\"311\":1}}],[\"想更新全局的npm的话首先删除全局路径\",{\"1\":{\"263\":1}}],[\"链的⽅式提供了⽹关基本的功能\",{\"1\":{\"413\":1}}],[\"链路追踪术语\",{\"1\":{\"396\":1}}],[\"链路追踪\",{\"0\":{\"396\":1}}],[\"链表有三类\",{\"1\":{\"311\":1}}],[\"链表中每一个元素称为结点\",{\"1\":{\"311\":1}}],[\"链表\",{\"0\":{\"311\":1}}],[\"链接数据库的数据源\",{\"1\":{\"553\":1}}],[\"链接超时\",{\"1\":{\"113\":1}}],[\"链接\",{\"0\":{\"301\":1},\"1\":{\"80\":1,\"84\":1,\"86\":1,\"89\":1,\"94\":1,\"97\":1,\"100\":1,\"284\":1,\"303\":1,\"304\":1}}],[\"队头\",{\"1\":{\"309\":1}}],[\"队尾\",{\"1\":{\"309\":1}}],[\"队列容量\",{\"1\":{\"385\":1}}],[\"队列的出入口各占一侧\",{\"1\":{\"309\":1}}],[\"队列是一种特殊的线性表\",{\"1\":{\"309\":1}}],[\"队列消息长度到达限制\",{\"1\":{\"110\":1}}],[\"队列过期时间\",{\"1\":{\"109\":1}}],[\"队列\",{\"0\":{\"309\":1},\"1\":{\"105\":1,\"106\":1,\"341\":1,\"589\":1}}],[\"队列与交换机的绑定\",{\"1\":{\"96\":1}}],[\"队列名为\",{\"1\":{\"590\":1}}],[\"队列名\",{\"1\":{\"94\":1,\"97\":1,\"356\":1,\"357\":1}}],[\"队列名称\",{\"1\":{\"85\":1,\"86\":1,\"87\":2,\"356\":1,\"357\":1,\"504\":1}}],[\"队列其它参数\",{\"1\":{\"86\":1,\"87\":1}}],[\"压缩的类型\",{\"1\":{\"377\":1}}],[\"压缩软件\",{\"1\":{\"7\":1}}],[\"压栈\",{\"1\":{\"308\":1}}],[\"先进入的反而在最后\",{\"1\":{\"341\":1}}],[\"先进先出\",{\"1\":{\"309\":1}}],[\"先进后出\",{\"1\":{\"308\":1}}],[\"先创建这个索引\",{\"1\":{\"57\":1}}],[\"先创建索引后设置\",{\"0\":{\"44\":1}}],[\"又叫作最少知识原则\",{\"1\":{\"631\":1}}],[\"又称子类代理\",{\"1\":{\"665\":1}}],[\"又称单一功能原则\",{\"1\":{\"627\":1}}],[\"又称设计模式\",{\"1\":{\"625\":1}}],[\"又称生成器模式\",{\"1\":{\"514\":1}}],[\"又称为堆栈\",{\"1\":{\"308\":1}}],[\"又可以在\",{\"1\":{\"184\":1}}],[\"栈的出入口都是栈的顶部位置\",{\"1\":{\"308\":1}}],[\"栈又称为先进后厨的线性表\",{\"1\":{\"308\":1}}],[\"栈是限定仅在表尾进行插入和删除操作的线性表\",{\"1\":{\"308\":1}}],[\"栈\",{\"0\":{\"308\":1},\"1\":{\"341\":1}}],[\"班级\",{\"1\":{\"304\":1}}],[\"政治面貌\",{\"1\":{\"304\":1}}],[\"专业\",{\"1\":{\"304\":1}}],[\"手机号\",{\"1\":{\"304\":1,\"491\":1}}],[\"手动签收\",{\"1\":{\"107\":1,\"110\":1}}],[\"手动确认\",{\"1\":{\"107\":1}}],[\"学习中需要用到的东西\",{\"1\":{\"331\":1}}],[\"学习于\",{\"1\":{\"20\":1}}],[\"学生学号\",{\"1\":{\"304\":1}}],[\"学生姓名\",{\"1\":{\"304\":1}}],[\"学生id\",{\"1\":{\"304\":1}}],[\"秉持着先开后关原则\",{\"1\":{\"303\":1}}],[\"泛型\",{\"1\":{\"303\":3,\"304\":3,\"487\":1,\"599\":2}}],[\"条件查询使用\",{\"1\":{\"303\":1,\"304\":1}}],[\"去掉某个请求参数信息\",{\"1\":{\"433\":1}}],[\"去掉某个请求头信息\",{\"1\":{\"427\":1,\"432\":1}}],[\"去掉\",{\"1\":{\"423\":1}}],[\"去除\",{\"1\":{\"303\":1}}],[\"去c\",{\"1\":{\"17\":1}}],[\"拥有无参构造器\",{\"1\":{\"298\":1}}],[\"带参构造器创建方法\",{\"1\":{\"294\":2}}],[\"带参数的跳转\",{\"1\":{\"205\":1}}],[\"无法提供定制服务\",{\"1\":{\"630\":1}}],[\"无论当前是否有事务都会创建新的\",{\"1\":{\"548\":1,\"552\":1}}],[\"无论是否出现异常都是最后被调用的通知\",{\"1\":{\"545\":1}}],[\"无论前台使用的是什么格式传输的\",{\"1\":{\"266\":1}}],[\"无条件时使用\",{\"1\":{\"303\":1,\"304\":1}}],[\"无参构造器创建\",{\"1\":{\"293\":1}}],[\"演示示例\",{\"1\":{\"619\":1}}],[\"演示负载均衡使用\",{\"0\":{\"392\":1}}],[\"演示\",{\"1\":{\"291\":1}}],[\"委派的好处就是避免有些类被重复加载\",{\"1\":{\"289\":1}}],[\"双引号\",{\"1\":{\"525\":1}}],[\"双列集合\",{\"0\":{\"319\":1}}],[\"双列集合的顶级父接口\",{\"1\":{\"312\":1,\"320\":1}}],[\"双向链表\",{\"1\":{\"311\":2}}],[\"双向数据绑定\",{\"1\":{\"170\":1}}],[\"双亲委派模型\",{\"1\":{\"289\":1}}],[\"嵌在jvm内核中的加载器\",{\"1\":{\"289\":1}}],[\"嵌套路由\",{\"0\":{\"209\":1}}],[\"嵌套\",{\"1\":{\"195\":2}}],[\"负责将处理结果生成\",{\"1\":{\"573\":1}}],[\"负责加载应用程序classpath目录下的所有jar和class文件\",{\"1\":{\"289\":1}}],[\"负责动态加载java类到java虚拟机的内存空间中\",{\"1\":{\"289\":1}}],[\"负载均衡的核⼼类为loadbalancerclient\",{\"1\":{\"393\":1}}],[\"负载均衡的服务调用上面的服务\",{\"1\":{\"392\":1}}],[\"负载均衡是指将负载分摊到多个执⾏单元上\",{\"1\":{\"390\":1}}],[\"负载均衡\",{\"0\":{\"390\":1},\"1\":{\"112\":1,\"448\":2}}],[\"得到具体参与者\",{\"1\":{\"448\":1}}],[\"得到相关的执⾏结果和延迟的时间统计数据都是⼗分有⽤的\",{\"1\":{\"381\":1}}],[\"得到属性\",{\"1\":{\"288\":1}}],[\"得到方法\",{\"1\":{\"288\":1}}],[\"得到一个可以给前端输出信息的输出流对象\",{\"1\":{\"266\":1}}],[\"欢迎链接服务器\",{\"1\":{\"283\":1}}],[\"打印熔断器状态\",{\"0\":{\"441\":1}}],[\"打印消费者组的信息\",{\"1\":{\"357\":1}}],[\"打印流信息\",{\"1\":{\"357\":1}}],[\"打印流\",{\"1\":{\"283\":1}}],[\"打开状态\",{\"1\":{\"456\":1}}],[\"打开nodejs版本控制\",{\"1\":{\"262\":1}}],[\"打开nexus\",{\"1\":{\"18\":1}}],[\"打开⾃动补全菜单\",{\"1\":{\"54\":1}}],[\"打开浏览器\",{\"1\":{\"41\":1}}],[\"打开全局配置\",{\"1\":{\"16\":1}}],[\"退出这两个状态的唯⼀⽅法是触发状态转换或者重置熔断器\",{\"1\":{\"382\":1}}],[\"退出方法\",{\"1\":{\"283\":1}}],[\"退回模式\",{\"0\":{\"106\":1},\"1\":{\"104\":1,\"106\":1}}],[\"推出\",{\"1\":{\"283\":1}}],[\"推荐\",{\"1\":{\"184\":1,\"193\":1}}],[\"推荐使用0\",{\"1\":{\"146\":1}}],[\"线程同步保证线程安全\",{\"1\":{\"646\":1}}],[\"线程等待权限的默认等待时间\",{\"1\":{\"386\":1}}],[\"线程安全\",{\"1\":{\"320\":2}}],[\"线程不安全\",{\"1\":{\"320\":1}}],[\"线程为您服务\",{\"1\":{\"283\":1}}],[\"线程池隔离的好处是隔离度⽐较⾼\",{\"1\":{\"455\":1}}],[\"线程池隔离针对不同的资源分别创建不同的线程池\",{\"1\":{\"455\":1}}],[\"线程池隔离和信号量隔离的区别\",{\"0\":{\"455\":1}}],[\"线程池隔离就是通过java的线程池进⾏隔离\",{\"1\":{\"453\":1}}],[\"线程池隔离回退\",{\"1\":{\"385\":1}}],[\"线程池隔离\",{\"0\":{\"385\":1,\"453\":1}}],[\"线程池\",{\"1\":{\"283\":1}}],[\"线性扩容等机制\",{\"1\":{\"112\":1}}],[\"线性布局就是从左到右或从上到下按顺序排列的一种布局\",{\"1\":{\"21\":1}}],[\"此标签必须要有\",{\"1\":{\"524\":1}}],[\"此注释可以在字段或参数上使用作为自动定向时的候选bean的限定符\",{\"1\":{\"504\":1}}],[\"此方法不常用\",{\"1\":{\"416\":1}}],[\"此外\",{\"1\":{\"381\":1}}],[\"此服务恢复⼼跳\",{\"1\":{\"366\":1}}],[\"此列表中不包含任何元素时返回\",{\"1\":{\"315\":1}}],[\"此规定值\",{\"1\":{\"281\":2}}],[\"此选项被禁用\",{\"1\":{\"281\":1}}],[\"此时我们就可以使用责任链模式\",{\"1\":{\"634\":1}}],[\"此时对modelandview再操作也对响应无济于事\",{\"1\":{\"584\":1}}],[\"此时前端控制会去找处理适配器handleradaptor\",{\"1\":{\"574\":1}}],[\"此时服务器中接收此请求的时前端控制器dispatcherservlet\",{\"1\":{\"574\":1}}],[\"此时会释放部分请求通过\",{\"1\":{\"456\":1}}],[\"此时访问http\",{\"1\":{\"429\":1}}],[\"此时span的结束\",{\"1\":{\"396\":1}}],[\"此时\",{\"1\":{\"195\":2}}],[\"启用nagle的算法\",{\"1\":{\"281\":1}}],[\"启用\",{\"1\":{\"281\":5}}],[\"启动时使用\",{\"1\":{\"564\":1}}],[\"启动zipkin\",{\"1\":{\"398\":1,\"400\":1,\"401\":1}}],[\"启动器中添加以下\",{\"1\":{\"391\":1}}],[\"启动器上添加注解\",{\"1\":{\"405\":1}}],[\"启动器上添加\",{\"1\":{\"372\":1}}],[\"启动⽀付服务时\",{\"1\":{\"391\":1}}],[\"启动redis服务\",{\"1\":{\"332\":1}}],[\"启动类加载器中\",{\"1\":{\"289\":1}}],[\"启动多线程\",{\"1\":{\"283\":1}}],[\"启动mysql服务\",{\"0\":{\"253\":1},\"1\":{\"255\":1}}],[\"启动mysql和查看是否启动成功\",{\"1\":{\"243\":1}}],[\"启动服务\",{\"1\":{\"234\":1}}],[\"启动\",{\"0\":{\"234\":1}}],[\"启动运行项目\",{\"1\":{\"213\":2}}],[\"系统开销大的对象\",{\"1\":{\"515\":1}}],[\"系统能提供的最⼤并发有限\",{\"1\":{\"458\":1}}],[\"系统将某些不重要的业务或接⼝的功能降低\",{\"1\":{\"457\":1}}],[\"系统负载过⾼\",{\"1\":{\"451\":1}}],[\"系统可以对发出的事件进⾏监听\",{\"1\":{\"381\":1}}],[\"系统默认类型为socketimpl\",{\"1\":{\"280\":1}}],[\"系统指令\",{\"0\":{\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1}}],[\"描述\",{\"1\":{\"280\":1,\"281\":1,\"382\":1,\"471\":2}}],[\"套接字对象\",{\"1\":{\"283\":1}}],[\"套接字中的\",{\"1\":{\"283\":1}}],[\"套接字总服务\",{\"1\":{\"283\":1}}],[\"套接字\",{\"0\":{\"279\":1},\"1\":{\"284\":1}}],[\"四次挥手\",{\"0\":{\"278\":1}}],[\"四川杭州\",{\"1\":{\"57\":2}}],[\"四川\",{\"1\":{\"57\":8}}],[\"三次握手\",{\"0\":{\"278\":1}}],[\"三元运算符\",{\"1\":{\"156\":1}}],[\"物理层\",{\"1\":{\"277\":1}}],[\"物理上存在于⼀个索引之中\",{\"1\":{\"35\":1}}],[\"网络url路径\",{\"1\":{\"619\":1}}],[\"网络层\",{\"1\":{\"277\":1}}],[\"网络编程\",{\"0\":{\"275\":1,\"276\":1}}],[\"七层网络模型\",{\"1\":{\"277\":1}}],[\"程序运行出错的概率会非常大\",{\"1\":{\"628\":1}}],[\"程序的重用性\",{\"1\":{\"625\":1}}],[\"程序的分类\",{\"0\":{\"276\":1}}],[\"程序\",{\"1\":{\"276\":2,\"529\":1}}],[\"保持唯⼀\",{\"1\":{\"415\":1}}],[\"保证系统的结构清晰\",{\"1\":{\"631\":1}}],[\"保证代码可靠性\",{\"1\":{\"625\":1}}],[\"保证线程安全\",{\"1\":{\"320\":1,\"646\":1}}],[\"保证元素唯一性的方式依赖于\",{\"1\":{\"318\":1}}],[\"保留区间内的元素\",{\"0\":{\"345\":1}}],[\"保留\",{\"1\":{\"272\":1}}],[\"保存策略\",{\"1\":{\"272\":1}}],[\"忽略任何使用参数位泛型变量的方法或构造函数调用时产生的警告\",{\"1\":{\"270\":1}}],[\"废弃\",{\"1\":{\"270\":1}}],[\"跟踪代码依赖\",{\"1\":{\"269\":1}}],[\"⼩明\",{\"1\":{\"266\":1}}],[\"人们将servlet理解为后者\",{\"1\":{\"265\":1}}],[\"人物列表组件中引入\",{\"1\":{\"221\":1}}],[\"广义的servlet是指任何实现了这个servlet接口的类\",{\"1\":{\"265\":1}}],[\"广播模式\",{\"0\":{\"93\":1}}],[\"广播\",{\"1\":{\"91\":1}}],[\"狭义的servlet是指java语言实现的一个接口\",{\"1\":{\"265\":1}}],[\"避免对资源的多重占用\",{\"1\":{\"645\":1}}],[\"避免我们与jdbc的api打交道\",{\"1\":{\"511\":1}}],[\"避免npm访问到的是nodejs中自带的npm包管理工具\",{\"1\":{\"263\":1}}],[\"避免多次写入标签\",{\"1\":{\"173\":1}}],[\"卸载指定的版本\",{\"1\":{\"262\":1}}],[\"平台\",{\"1\":{\"262\":1}}],[\"平均价格\",{\"1\":{\"77\":1}}],[\"初始桶数量为\",{\"1\":{\"320\":1}}],[\"初始化mysql实例\",{\"0\":{\"254\":1}}],[\"初始状态\",{\"1\":{\"210\":2}}],[\"库数据存储地址\",{\"1\":{\"252\":1}}],[\"停止更新很久了\",{\"1\":{\"331\":1}}],[\"停止\",{\"1\":{\"248\":1}}],[\"停⽌服务\",{\"1\":{\"234\":1}}],[\"目标方法的执行之后\",{\"1\":{\"545\":1}}],[\"目标方法的执行之前\",{\"1\":{\"545\":1}}],[\"目标方法抛出异常时运行\",{\"1\":{\"545\":1}}],[\"目标方法返回值之后运行\",{\"1\":{\"545\":1}}],[\"目标方法运行前后运行\",{\"1\":{\"545\":1}}],[\"目标方法运行前运行\",{\"1\":{\"545\":1}}],[\"目标方法运行后运行\",{\"1\":{\"545\":1}}],[\"目标类+\",{\"1\":{\"545\":1}}],[\"目标对象不需要接口\",{\"1\":{\"665\":1}}],[\"目标对象接口中的方法\",{\"1\":{\"662\":2}}],[\"目标对象接口\",{\"1\":{\"662\":1}}],[\"目标对象的classloader\",{\"1\":{\"662\":1}}],[\"目标对象\",{\"1\":{\"540\":1}}],[\"目录下\",{\"1\":{\"332\":1}}],[\"目录\",{\"1\":{\"244\":1}}],[\"目前mysql8\",{\"1\":{\"243\":1,\"256\":1}}],[\"脚本执行结束\",{\"1\":{\"244\":1}}],[\"脚本执行开始\",{\"1\":{\"244\":1}}],[\"脚手架是否安装成功\",{\"1\":{\"212\":1}}],[\"授权远程链接\",{\"1\":{\"243\":1}}],[\"存入的元素\",{\"1\":{\"309\":1}}],[\"存元素\",{\"1\":{\"308\":1}}],[\"存在下一级处理器\",{\"1\":{\"637\":1}}],[\"存在幻读\",{\"1\":{\"547\":1}}],[\"存在不可重复读与幻读\",{\"1\":{\"547\":1}}],[\"存在则返回\",{\"1\":{\"481\":2}}],[\"存在为true\",{\"1\":{\"363\":1}}],[\"存在\",{\"1\":{\"363\":3}}],[\"存在四次挥手操作\",{\"1\":{\"278\":1}}],[\"存在三次握手操作\",{\"1\":{\"278\":1}}],[\"存在的话卸载当前已安装的包\",{\"1\":{\"243\":1}}],[\"存储的值\",{\"1\":{\"337\":1}}],[\"存储的键名\",{\"1\":{\"337\":1}}],[\"存储到数组中\",{\"1\":{\"314\":1}}],[\"存储下一个结点的地址指针域\",{\"1\":{\"311\":1}}],[\"存储数据元素的数据域\",{\"1\":{\"311\":1}}],[\"存储\",{\"1\":{\"224\":1}}],[\"存储在⽂档中的field才可以从document中获取\",{\"1\":{\"29\":1}}],[\"登录时用户和密码都是\",{\"1\":{\"234\":1}}],[\"访问权限和异常类型可以省略或用符号代替\",{\"1\":{\"541\":1}}],[\"访问权限\",{\"1\":{\"541\":1}}],[\"访问权限类型\",{\"1\":{\"541\":1}}],[\"访问\",{\"1\":{\"234\":1,\"427\":1,\"428\":1}}],[\"访问数据\",{\"1\":{\"154\":1}}],[\"没给默认值\",{\"1\":{\"493\":1}}],[\"没改造之前\",{\"1\":{\"228\":1}}],[\"没有下一级处理器\",{\"1\":{\"637\":1}}],[\"没有找到\",{\"1\":{\"424\":1}}],[\"没有对新版本的zuul\",{\"1\":{\"413\":1}}],[\"没有设置就是非阻塞模式\",{\"1\":{\"356\":1}}],[\"没有什么效果\",{\"1\":{\"146\":1}}],[\"没有实现自己的文件系统而是利用操作系统的文件系统来管理文件\",{\"1\":{\"112\":1}}],[\"没有更改gradle存放位置的\",{\"1\":{\"17\":1}}],[\"换成\",{\"1\":{\"227\":1}}],[\"姓名\",{\"1\":{\"224\":1}}],[\"姓名和性别\",{\"1\":{\"224\":1}}],[\"利用编程式导航回到\",{\"1\":{\"226\":1}}],[\"利用编程式导航\",{\"1\":{\"224\":1}}],[\"利⽤\",{\"1\":{\"29\":1,\"419\":1}}],[\"判断是否应该自身执行\",{\"1\":{\"653\":1}}],[\"判断是否存在下一级处理器\",{\"1\":{\"637\":1}}],[\"判断当前请求方法中是否存在\",{\"1\":{\"481\":1}}],[\"判断当前集合是否为空\",{\"1\":{\"314\":1}}],[\"判断当前集合中是否包含给定的对象\",{\"1\":{\"314\":1}}],[\"判断新⽼数据是否有变化需要进⾏更新操作\",{\"1\":{\"419\":1}}],[\"判断该key是否已过期\",{\"1\":{\"363\":1}}],[\"判断\",{\"1\":{\"346\":1}}],[\"判断提交内容非空\",{\"1\":{\"226\":1}}],[\"判断id\",{\"1\":{\"225\":1}}],[\"判断填报信息是否为空\",{\"1\":{\"224\":2}}],[\"判断删除状态\",{\"1\":{\"222\":1}}],[\"判断删除成功\",{\"1\":{\"222\":1}}],[\"性别\",{\"1\":{\"223\":1,\"224\":1,\"304\":1}}],[\"拷贝静态资源\",{\"1\":{\"223\":1}}],[\"拷贝html静态内容到\",{\"1\":{\"218\":1}}],[\"渲染新增组件\",{\"0\":{\"223\":1}}],[\"刷新数据\",{\"1\":{\"222\":2}}],[\"引发\",{\"1\":{\"451\":1}}],[\"引导启动类加载器无法被应用程序直接使用\",{\"1\":{\"289\":1}}],[\"引导启动类加载器\",{\"1\":{\"289\":1}}],[\"引用router\",{\"1\":{\"219\":1}}],[\"引入依赖\",{\"0\":{\"543\":1},\"1\":{\"609\":1}}],[\"引入组件\",{\"1\":{\"223\":1}}],[\"引入index\",{\"1\":{\"217\":1}}],[\"引入\",{\"1\":{\"217\":1}}],[\"引入axios\",{\"1\":{\"186\":1,\"221\":1}}],[\"引入第三方格式化日期插件\",{\"1\":{\"178\":1}}],[\"步骤\",{\"1\":{\"219\":1,\"224\":1}}],[\"侧边栏\",{\"0\":{\"218\":1}}],[\"侧重于功能或者数据的封装\",{\"1\":{\"198\":1}}],[\"效率最高\",{\"1\":{\"341\":1}}],[\"效率比较高\",{\"1\":{\"320\":1}}],[\"效率低\",{\"1\":{\"320\":1}}],[\"效率高\",{\"1\":{\"320\":1,\"331\":1}}],[\"效率也较低\",{\"1\":{\"80\":1}}],[\"效果演示\",{\"0\":{\"216\":1}}],[\"里氏替换原则通俗来讲就是\",{\"1\":{\"628\":1}}],[\"里氏替换原则是实现开闭原则的重要方式之一\",{\"1\":{\"628\":1}}],[\"里氏替换原则是继承复用的基石\",{\"1\":{\"628\":1}}],[\"里氏替换原则\",{\"0\":{\"628\":1},\"1\":{\"625\":1}}],[\"里传入的是\",{\"1\":{\"524\":1}}],[\"里内容出现的\",{\"1\":{\"215\":1}}],[\"里面可以写通用的\",{\"1\":{\"524\":1}}],[\"里面\",{\"1\":{\"57\":1}}],[\"里面会有一个nexus\",{\"1\":{\"18\":1}}],[\"里面会有一个乱码的文件夹将下载好的压缩包直接放入这个乱码文件夹中即可\",{\"1\":{\"17\":1}}],[\"业务层对象\",{\"1\":{\"539\":1}}],[\"业务系统实施服务化改造之后\",{\"1\":{\"448\":1}}],[\"业务组件目录\",{\"1\":{\"214\":1}}],[\"业务处理出现异常\",{\"1\":{\"107\":1}}],[\"项目基本信息配置文件\",{\"1\":{\"214\":1}}],[\"项目默认索引图片\",{\"1\":{\"214\":1}}],[\"项目主容器文件\",{\"1\":{\"214\":1}}],[\"项目需要的依赖包\",{\"1\":{\"214\":1}}],[\"项目目录解释\",{\"0\":{\"214\":1}}],[\"两边被称作\",{\"1\":{\"312\":1}}],[\"两个选一个使用\",{\"1\":{\"524\":1}}],[\"两个set集合的差值\",{\"1\":{\"363\":1}}],[\"两个插入或改动值\",{\"1\":{\"341\":1}}],[\"两个对象之间的耦合就\",{\"1\":{\"631\":1}}],[\"两个对象\",{\"1\":{\"266\":1}}],[\"两个消费者示例\",{\"0\":{\"95\":1}}],[\"两种特殊情况\",{\"1\":{\"320\":1}}],[\"两种\",{\"1\":{\"213\":1}}],[\"固定时间窗⼝算法原理\",{\"1\":{\"461\":1}}],[\"固定时间窗⼝算法\",{\"0\":{\"461\":1}}],[\"固定写法\",{\"1\":{\"213\":1}}],[\"固定字符串\",{\"1\":{\"109\":1}}],[\"复杂性降低\",{\"1\":{\"627\":1}}],[\"复杂业务\",{\"1\":{\"212\":1}}],[\"复制到新数组对应索引的位置\",{\"1\":{\"310\":1}}],[\"复制到新数组对应的索引位置\",{\"1\":{\"310\":1}}],[\"复制到\",{\"1\":{\"239\":1}}],[\"复制之所以重要\",{\"1\":{\"39\":1}}],[\"兼得\",{\"1\":{\"212\":1}}],[\"怎么破\",{\"1\":{\"212\":1}}],[\"版本根据自己需要使用\",{\"1\":{\"609\":1}}],[\"版本添加了\",{\"1\":{\"354\":1}}],[\"版本新增加的数据结构\",{\"1\":{\"355\":1}}],[\"版本新增\",{\"1\":{\"353\":1}}],[\"版本号\",{\"1\":{\"262\":1}}],[\"版本低于2\",{\"1\":{\"233\":1}}],[\"版本\",{\"1\":{\"212\":1,\"448\":1,\"471\":1}}],[\"版本为\",{\"1\":{\"128\":1}}],[\"问题\",{\"1\":{\"212\":1}}],[\"命令⾏输⼊\",{\"1\":{\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1}}],[\"命令如下\",{\"1\":{\"400\":1,\"401\":2}}],[\"命令对所有\",{\"1\":{\"358\":1}}],[\"命令后进入事务执行\",{\"1\":{\"358\":1}}],[\"命令前被放入队列缓存\",{\"1\":{\"358\":1}}],[\"命令参数\",{\"1\":{\"333\":2}}],[\"命令\",{\"1\":{\"262\":1}}],[\"命令行\",{\"1\":{\"211\":1}}],[\"命名空间\",{\"1\":{\"80\":1}}],[\"命名规则\",{\"1\":{\"73\":1}}],[\"样式\",{\"1\":{\"211\":1}}],[\"辅助开发工具\",{\"1\":{\"211\":1}}],[\"离开的\",{\"1\":{\"210\":3}}],[\"离开\",{\"1\":{\"210\":1}}],[\"离开过渡\",{\"1\":{\"210\":1}}],[\"离线安装gradle\",{\"1\":{\"17\":1}}],[\"情形中\",{\"1\":{\"210\":1}}],[\"过度使用迪米特法则会使系统产生大量的中介类\",{\"1\":{\"631\":1}}],[\"过度动画\",{\"0\":{\"210\":1}}],[\"过大的大接口里面通常放置许多不用的方法\",{\"1\":{\"630\":1}}],[\"过载保护\",{\"1\":{\"448\":1}}],[\"过期时间\",{\"1\":{\"363\":1}}],[\"过期时长\",{\"1\":{\"327\":1}}],[\"过期命令\",{\"1\":{\"336\":1}}],[\"过渡效果\",{\"1\":{\"210\":2}}],[\"过渡结束状态\",{\"1\":{\"210\":2}}],[\"过滤规则\",{\"1\":{\"427\":1}}],[\"过滤器分为两种\",{\"1\":{\"436\":1}}],[\"过滤器执行次序\",{\"1\":{\"436\":1}}],[\"过滤器执⾏流程如下\",{\"1\":{\"436\":1}}],[\"过滤器执⾏次序\",{\"1\":{\"436\":1}}],[\"过滤器规则\",{\"0\":{\"427\":1}}],[\"过滤器之间⽤虚线分开是因为过滤器可能会在发送代理请求之前\",{\"1\":{\"413\":1}}],[\"过滤器为org\",{\"1\":{\"413\":1}}],[\"过滤器也可以多个串行起来并排使用\",{\"1\":{\"177\":1}}],[\"过滤器可以传递参数\",{\"1\":{\"177\":1}}],[\"过滤器的基本用法\",{\"0\":{\"176\":1}}],[\"过滤器的分析\",{\"0\":{\"175\":1}}],[\"过滤器应该被添加在尾部\",{\"1\":{\"175\":1}}],[\"过滤器名字\",{\"1\":{\"175\":3,\"176\":3}}],[\"过滤器\",{\"0\":{\"175\":1,\"176\":1,\"177\":1},\"1\":{\"413\":1}}],[\"过滤可以⽤于查找拥有某个域的数据\",{\"1\":{\"57\":1}}],[\"过滤\",{\"1\":{\"30\":1}}],[\"二叉树是每个节点最多有两个子树的树结构\",{\"1\":{\"312\":1}}],[\"二叉树\",{\"1\":{\"312\":1}}],[\"二级导航的路由和模板\",{\"1\":{\"209\":1}}],[\"二级导航的router\",{\"1\":{\"209\":1}}],[\"二娃\",{\"1\":{\"161\":1}}],[\"激活样式\",{\"1\":{\"208\":1}}],[\"审查导航元素\",{\"1\":{\"208\":1}}],[\"编写\",{\"1\":{\"545\":1}}],[\"编写规则\",{\"0\":{\"73\":1}}],[\"编程的支持\",{\"1\":{\"529\":1}}],[\"编程式导航\",{\"0\":{\"207\":1},\"1\":{\"224\":1}}],[\"编译格式检查\",{\"1\":{\"269\":1,\"270\":1}}],[\"编译的配置段\",{\"1\":{\"213\":1}}],[\"编辑失败\",{\"1\":{\"226\":1}}],[\"编辑英雄\",{\"1\":{\"226\":1}}],[\"编辑\",{\"0\":{\"226\":1}}],[\"编辑组件\",{\"1\":{\"225\":1}}],[\"编辑按钮添加跳转的属性\",{\"1\":{\"225\":1}}],[\"编辑按钮\",{\"1\":{\"225\":1}}],[\"尾部\",{\"1\":{\"204\":1}}],[\"详情页\",{\"1\":{\"204\":1}}],[\"最终\",{\"1\":{\"660\":2,\"664\":2}}],[\"最终应该是有匹配结果的\",{\"1\":{\"655\":1}}],[\"最终将视图和数据反馈给用户请求的浏览器\",{\"1\":{\"574\":1}}],[\"最终将执行结果返回给处理适配器handleradaptor\",{\"1\":{\"574\":1}}],[\"最终通知\",{\"1\":{\"540\":1,\"541\":1,\"545\":1}}],[\"最终会被渲染成a标签\",{\"1\":{\"203\":1}}],[\"最近本的⽅法是把各个应⽤系统中的某些配置放在⼀个第三⽅中间件上进⾏统⼀维护\",{\"1\":{\"404\":1}}],[\"最⼤线程池⼤⼩\",{\"1\":{\"385\":1}}],[\"最⼩请求个数\",{\"1\":{\"382\":1,\"440\":1}}],[\"最开始主要应⽤与亚⻢逊公司的云计算服务平台aws\",{\"1\":{\"366\":1}}],[\"最后执行的方法\",{\"1\":{\"584\":1}}],[\"最后对\",{\"1\":{\"573\":1}}],[\"最后得到产品\",{\"1\":{\"514\":1}}],[\"最后由mybatis框架执行sql\",{\"1\":{\"511\":1}}],[\"最后返回响应到客户端\",{\"1\":{\"436\":1}}],[\"最后将source移除的元素返回\",{\"1\":{\"343\":1}}],[\"最后进入的反而在最前面\",{\"1\":{\"341\":1}}],[\"最后设置数据即可\",{\"1\":{\"296\":1}}],[\"最新的稳定版本始终可在固定\",{\"1\":{\"332\":1}}],[\"最新稳定版本\",{\"1\":{\"332\":1}}],[\"最新版本也支持\",{\"1\":{\"211\":1}}],[\"最初\",{\"1\":{\"51\":1}}],[\"再生成\",{\"1\":{\"573\":1}}],[\"再在页面中配置运行命令为\",{\"1\":{\"564\":1}}],[\"再由通知类型找到切入的时间点\",{\"1\":{\"546\":1}}],[\"再由切面类根据切入点找到目标类的目标方法\",{\"1\":{\"546\":1}}],[\"再次进⾏休眠计时\",{\"1\":{\"456\":1}}],[\"再经过post类型的\",{\"1\":{\"436\":1}}],[\"再通过指定的过滤器链来将请求发送到我们实际的服务执⾏业务逻辑\",{\"1\":{\"413\":1}}],[\"再把原数组元素根据索引\",{\"1\":{\"310\":1}}],[\"再执行一次这个命令即可\",{\"1\":{\"263\":1}}],[\"再引入vue\",{\"1\":{\"202\":1}}],[\"再对索引进⾏搜索的过程就叫全⽂检索\",{\"1\":{\"28\":1}}],[\"显示待处理消息的相关信息\",{\"1\":{\"357\":1}}],[\"显示编辑数据\",{\"0\":{\"225\":1}}],[\"显示不同的内容\",{\"1\":{\"202\":1}}],[\"显示隐藏\",{\"1\":{\"158\":1}}],[\"让其子类自己决定实例化哪一个工厂类\",{\"1\":{\"651\":1}}],[\"让其自动重新发送消息\",{\"1\":{\"107\":1}}],[\"让接口中只包含客户感兴趣的方法\",{\"1\":{\"630\":1}}],[\"让代码更容易被他人理解\",{\"1\":{\"625\":1}}],[\"让容器生成\",{\"1\":{\"545\":1}}],[\"让容器自动将被调用者\",{\"1\":{\"537\":1}}],[\"让开发人员只需要关注sql语句本身\",{\"1\":{\"511\":1}}],[\"让构建单页面应用变得简单\",{\"1\":{\"202\":1}}],[\"内步进20秒命中的时间点触发\",{\"1\":{\"499\":1}}],[\"内置了很多\",{\"1\":{\"418\":1}}],[\"内置注解\",{\"0\":{\"270\":1}}],[\"内存中是断电即失\",{\"1\":{\"331\":1}}],[\"内存存储\",{\"1\":{\"331\":1}}],[\"内省\",{\"0\":{\"297\":1}}],[\"内容丰富模板\",{\"1\":{\"212\":1}}],[\"内容切换\",{\"1\":{\"200\":1}}],[\"内部建立的逻辑链接\",{\"1\":{\"80\":1}}],[\"内部可以承载\",{\"1\":{\"20\":1}}],[\"拿到对应的视图\",{\"1\":{\"574\":1}}],[\"拿到了hash值\",{\"1\":{\"200\":1}}],[\"拿到父组件传递的值\",{\"1\":{\"197\":1}}],[\"锚链接\",{\"1\":{\"200\":1}}],[\"框架提供了很多的\",{\"1\":{\"573\":1}}],[\"框架\",{\"1\":{\"199\":1}}],[\"模板图片\",{\"1\":{\"619\":1}}],[\"模板图片与生成的图片\",{\"1\":{\"619\":1}}],[\"模板标签与数据进行绑定\",{\"1\":{\"619\":1}}],[\"模板所需数据\",{\"1\":{\"618\":1}}],[\"模板绑定的配置\",{\"1\":{\"618\":1}}],[\"模板引擎\",{\"1\":{\"530\":1}}],[\"模式和实践\",{\"1\":{\"627\":1}}],[\"模式中的c\",{\"1\":{\"569\":1}}],[\"模式之间的总结\",{\"0\":{\"102\":1}}],[\"模块的焦点\",{\"1\":{\"530\":1}}],[\"模块的基础上建立起来的\",{\"1\":{\"530\":1}}],[\"模块也支持\",{\"1\":{\"530\":1}}],[\"模块继承自\",{\"1\":{\"530\":1}}],[\"模块之间切换\",{\"1\":{\"199\":1}}],[\"模块\",{\"1\":{\"198\":1,\"530\":1}}],[\"兄弟组件的通信也有自己的写法\",{\"1\":{\"197\":1}}],[\"兄弟组件通信\",{\"1\":{\"196\":1}}],[\"父类未必可以胜任\",{\"1\":{\"628\":1}}],[\"父组件\",{\"1\":{\"197\":1}}],[\"父组件到子组件\",{\"1\":{\"196\":1}}],[\"父组件传递数据给子组件使用\",{\"1\":{\"196\":1}}],[\"父子组件的传值有多种方法\",{\"1\":{\"197\":1}}],[\"父子组件传值\",{\"0\":{\"197\":1}}],[\"父子组件通信\",{\"1\":{\"196\":1}}],[\"父子组件\",{\"1\":{\"196\":1}}],[\"父级id\",{\"1\":{\"128\":2,\"137\":1,\"139\":1}}],[\"父级递归查询子级\",{\"0\":{\"137\":1},\"1\":{\"128\":1}}],[\"小结\",{\"1\":{\"605\":1,\"606\":1}}],[\"小于等于\",{\"1\":{\"525\":1}}],[\"小于\",{\"1\":{\"525\":1}}],[\"小时\",{\"1\":{\"499\":2}}],[\"小写字母\",{\"1\":{\"193\":1}}],[\"小米\",{\"1\":{\"185\":2}}],[\"逻辑没有任何关联\",{\"1\":{\"192\":1}}],[\"运维的复杂度也会成倍增加\",{\"1\":{\"448\":1}}],[\"运行时也保留\",{\"1\":{\"493\":1}}],[\"运行以下命令安装\",{\"1\":{\"248\":1}}],[\"运行\",{\"1\":{\"239\":1,\"248\":1}}],[\"运行下面命令安装\",{\"1\":{\"247\":1}}],[\"运行下面命令\",{\"1\":{\"233\":1}}],[\"运行作用域\",{\"1\":{\"192\":1}}],[\"运⾏elasticsearch\",{\"1\":{\"401\":1}}],[\"运⾏\",{\"1\":{\"42\":1,\"401\":1}}],[\"独立\",{\"1\":{\"192\":1}}],[\"独⽴于lucene项⽬\",{\"1\":{\"51\":1}}],[\"确保某一个类只有一个实例\",{\"1\":{\"645\":1}}],[\"确保高内聚和低耦合的同时\",{\"1\":{\"631\":1}}],[\"确保消息能准确无误的发送\",{\"1\":{\"278\":1}}],[\"确定按钮方法\",{\"1\":{\"224\":1}}],[\"确定删除此条记录\",{\"1\":{\"187\":1}}],[\"确认删除此条数据\",{\"1\":{\"222\":1}}],[\"确认\",{\"1\":{\"107\":1}}],[\"确认模式发送消息\",{\"1\":{\"105\":1}}],[\"确认模式\",{\"0\":{\"105\":1},\"1\":{\"104\":1,\"105\":1}}],[\"列表不存在时不执行且返回0\",{\"1\":{\"341\":2}}],[\"列表渲染\",{\"0\":{\"221\":1}}],[\"列表中更新\",{\"1\":{\"210\":1}}],[\"列表页\",{\"1\":{\"204\":1}}],[\"列表\",{\"0\":{\"186\":1,\"218\":1,\"341\":1}}],[\"列表数据变动会导致\",{\"1\":{\"163\":1}}],[\"及其\",{\"1\":{\"332\":1}}],[\"及其以下版本\",{\"1\":{\"150\":1}}],[\"及基本使用\",{\"0\":{\"185\":1}}],[\"介绍\",{\"0\":{\"185\":1,\"211\":1,\"651\":1},\"1\":{\"211\":1,\"215\":1}}],[\"既可以在\",{\"1\":{\"184\":1}}],[\"已知顺序的情况可以直接默认一条\",{\"1\":{\"641\":1}}],[\"已删除\",{\"1\":{\"466\":1}}],[\"已测试慢调⽤⽐例熔断\",{\"1\":{\"382\":1,\"384\":1,\"386\":1}}],[\"已处理\",{\"1\":{\"357\":1}}],[\"已过时\",{\"1\":{\"280\":2}}],[\"已经不维护\",{\"1\":{\"184\":1}}],[\"已发送\",{\"1\":{\"86\":1,\"89\":1,\"94\":1}}],[\"改为几天\",{\"1\":{\"244\":1}}],[\"改造所有的的请求\",{\"1\":{\"228\":1}}],[\"改变视图内容\",{\"1\":{\"201\":1}}],[\"改变页面视图\",{\"1\":{\"183\":1}}],[\"改一下名称就可以了\",{\"1\":{\"90\":1}}],[\"局部过滤器\",{\"0\":{\"438\":1},\"1\":{\"436\":1}}],[\"局部嵌套全局\",{\"1\":{\"195\":1}}],[\"局部组件\",{\"0\":{\"194\":1},\"1\":{\"195\":1}}],[\"局部指令在vue实例内部定义\",{\"1\":{\"182\":1}}],[\"局部自定义指令\",{\"0\":{\"182\":1}}],[\"路径查找文件\",{\"1\":{\"523\":1}}],[\"路径重写\",{\"1\":{\"413\":1}}],[\"路径\",{\"1\":{\"178\":1,\"193\":1,\"201\":1,\"209\":1,\"430\":1,\"431\":1}}],[\"路由规则会通过获取对应的\",{\"1\":{\"422\":1}}],[\"路由规则中\",{\"1\":{\"204\":1}}],[\"路由匹配规则1\",{\"1\":{\"418\":1}}],[\"路由匹配规则\",{\"0\":{\"418\":1},\"1\":{\"418\":1}}],[\"路由匹配到的组件将渲染在这里\",{\"1\":{\"203\":1}}],[\"路由条件\",{\"1\":{\"415\":1}}],[\"路由的规则为\",{\"1\":{\"415\":1}}],[\"路由的激活样式\",{\"0\":{\"208\":1}}],[\"路由是⽹关配置的基本组成模块\",{\"1\":{\"414\":1}}],[\"路由配置方式\",{\"0\":{\"414\":1}}],[\"路由配置文件\",{\"1\":{\"214\":1}}],[\"路由管理⽅式\",{\"1\":{\"413\":1}}],[\"路由表\",{\"1\":{\"219\":1}}],[\"路由表需要的组件从外部引入\",{\"1\":{\"219\":1}}],[\"路由模块\",{\"1\":{\"219\":1}}],[\"路由模式特点\",{\"1\":{\"96\":1}}],[\"路由模式\",{\"0\":{\"96\":1},\"1\":{\"91\":1,\"102\":1}}],[\"路由功能\",{\"0\":{\"219\":1}}],[\"路由\",{\"0\":{\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"207\":1,\"209\":1},\"1\":{\"413\":1,\"423\":1}}],[\"路由键名设置为空\",{\"1\":{\"589\":1}}],[\"路由键名\",{\"1\":{\"589\":2}}],[\"路由键为队列的名称\",{\"1\":{\"589\":1}}],[\"路由键\",{\"1\":{\"106\":1}}],[\"路由key\",{\"1\":{\"85\":1,\"86\":1,\"87\":1,\"90\":2,\"95\":2,\"96\":1,\"98\":2,\"101\":2}}],[\"元注解\",{\"0\":{\"271\":1}}],[\"元素值\",{\"1\":{\"363\":5}}],[\"元素从\",{\"1\":{\"346\":1}}],[\"元素是否是集合\",{\"1\":{\"346\":1}}],[\"元素名\",{\"1\":{\"341\":1}}],[\"元素写一些样式\",{\"1\":{\"215\":1}}],[\"元素进行底层操作\",{\"1\":{\"181\":1}}],[\"元\",{\"1\":{\"177\":2}}],[\"传输层\",{\"1\":{\"277\":1}}],[\"传输方法是\",{\"1\":{\"266\":1}}],[\"传统模式\",{\"1\":{\"199\":1}}],[\"传参数和串联使用\",{\"0\":{\"177\":1}}],[\"传入\",{\"1\":{\"59\":1,\"522\":1}}],[\"看过滤器api的用法\",{\"1\":{\"175\":1}}],[\"看此篇幅前先看这里\",{\"0\":{\"65\":1}}],[\"写一个死循环保持监听\",{\"1\":{\"505\":1}}],[\"写一个死循环测试接收消息即可\",{\"1\":{\"107\":1}}],[\"写一个示例\",{\"1\":{\"266\":1}}],[\"写shell脚本时不要再win下写好再放进去\",{\"1\":{\"244\":1}}],[\"写入静态内容\",{\"1\":{\"223\":1}}],[\"写入组件选项\",{\"1\":{\"193\":1}}],[\"写入v\",{\"1\":{\"173\":1}}],[\"页面好看\",{\"1\":{\"470\":1}}],[\"页面跳转方式\",{\"1\":{\"266\":1}}],[\"页面是\",{\"1\":{\"234\":1}}],[\"页面刷新\",{\"1\":{\"200\":1}}],[\"页面结构\",{\"1\":{\"192\":1}}],[\"页面模板闪屏现象\",{\"1\":{\"173\":1}}],[\"页面数据变化\",{\"1\":{\"171\":1}}],[\"页面的使用\",{\"0\":{\"81\":1}}],[\"特别是运用多态比较频繁时\",{\"1\":{\"628\":1}}],[\"特别是对低延时的调⽤有⽐较⼤的影响\",{\"1\":{\"455\":1}}],[\"特别适合以文件为载体的在线服务\",{\"1\":{\"112\":1}}],[\"特征\",{\"1\":{\"413\":1}}],[\"特有的方法\",{\"1\":{\"316\":1}}],[\"特指空节点\",{\"1\":{\"312\":1}}],[\"特性\",{\"1\":{\"213\":1,\"331\":1}}],[\"特性的初始值\",{\"1\":{\"170\":1}}],[\"特点\",{\"1\":{\"170\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"315\":1,\"645\":1,\"665\":1}}],[\"布尔值\",{\"1\":{\"166\":1}}],[\"布尔值来决定该元素显示隐藏\",{\"1\":{\"158\":1}}],[\"场景\",{\"1\":{\"165\":1,\"173\":1}}],[\"绑定列表\",{\"1\":{\"619\":2}}],[\"绑定模板配置\",{\"1\":{\"619\":1}}],[\"绑定到该交换机的匹配队列能收到消息\",{\"1\":{\"589\":1}}],[\"绑定到request\",{\"1\":{\"480\":1}}],[\"绑定队列\",{\"1\":{\"589\":1}}],[\"绑定的属性\",{\"1\":{\"197\":1}}],[\"绑定为子组件上的属性\",{\"1\":{\"197\":1}}],[\"绑定其他表单元素\",{\"0\":{\"172\":1}}],[\"绑定表单元素\",{\"1\":{\"170\":1}}],[\"绑定style\",{\"0\":{\"168\":1,\"169\":1}}],[\"绑定class数组语法\",{\"1\":{\"167\":1}}],[\"绑定class\",{\"0\":{\"167\":1}}],[\"绑定class和原生class会进行合并\",{\"1\":{\"166\":1}}],[\"绑定class对象语法\",{\"1\":{\"166\":1}}],[\"绑定标签上的任何属性\",{\"1\":{\"165\":1}}],[\"绑定之后\",{\"1\":{\"93\":1}}],[\"好处\",{\"1\":{\"163\":1}}],[\"方便程序的测试\",{\"1\":{\"529\":1}}],[\"方便集成各种优秀框架\",{\"1\":{\"529\":1}}],[\"方便解耦\",{\"1\":{\"529\":1}}],[\"方便更新\",{\"1\":{\"163\":1}}],[\"方式\",{\"0\":{\"291\":1},\"1\":{\"537\":1}}],[\"方法的后置条件\",{\"1\":{\"628\":1}}],[\"方法的形参\",{\"1\":{\"628\":1}}],[\"方法的输入参数\",{\"1\":{\"628\":1}}],[\"方法的参数格式\",{\"1\":{\"545\":1}}],[\"方法返回true时\",{\"1\":{\"584\":1}}],[\"方法返回值\",{\"1\":{\"541\":1}}],[\"方法放入到一个专门的方法栈中等待执行\",{\"1\":{\"582\":1}}],[\"方法出现异常\",{\"1\":{\"545\":1}}],[\"方法参数列表\",{\"1\":{\"545\":1}}],[\"方法参数解释\",{\"1\":{\"86\":1,\"87\":1}}],[\"方法声明\",{\"1\":{\"541\":1}}],[\"方法传入被调用者的实例\",{\"1\":{\"537\":1}}],[\"方法测试了\",{\"1\":{\"522\":1}}],[\"方法将其关闭\",{\"1\":{\"515\":1}}],[\"方法没有参数\",{\"1\":{\"515\":1}}],[\"方法才会匹配转发请求\",{\"1\":{\"419\":1}}],[\"方法获取到所有的属性\",{\"1\":{\"298\":1}}],[\"方法名中采用$event的方式传形参\",{\"1\":{\"159\":1}}],[\"方法名\",{\"1\":{\"159\":3,\"541\":1}}],[\"方法调用\",{\"1\":{\"156\":1}}],[\"方法调用等\",{\"1\":{\"156\":1}}],[\"方法中的\",{\"1\":{\"155\":1}}],[\"方法被执行了\",{\"1\":{\"105\":1}}],[\"方法\",{\"0\":{\"281\":1},\"1\":{\"63\":1,\"74\":1,\"85\":2,\"107\":1,\"183\":1,\"269\":1,\"281\":1,\"290\":1,\"295\":1,\"298\":4,\"318\":1,\"514\":1,\"515\":1,\"605\":1,\"606\":1,\"631\":1}}],[\"视图类型\",{\"1\":{\"573\":1}}],[\"视图对象\",{\"1\":{\"573\":1}}],[\"视图\",{\"1\":{\"573\":1}}],[\"视图解析器viewresolver解析完成后将视图地址以及携带的数据返回给前端控制器\",{\"1\":{\"574\":1}}],[\"视图解析器\",{\"1\":{\"562\":1,\"573\":1}}],[\"视图列表重新更新\",{\"1\":{\"163\":1}}],[\"视为慢调⽤\",{\"1\":{\"382\":1,\"440\":1}}],[\"视频网站等等\",{\"1\":{\"112\":1}}],[\"大于等于\",{\"1\":{\"525\":1}}],[\"大于\",{\"1\":{\"525\":1}}],[\"大娃\",{\"1\":{\"161\":1}}],[\"大圣云沙箱\",{\"1\":{\"12\":1}}],[\"指代\",{\"1\":{\"662\":1}}],[\"指导者指挥建造者\",{\"1\":{\"514\":1}}],[\"指标\",{\"1\":{\"413\":1}}],[\"指的是\",{\"1\":{\"277\":1}}],[\"指的是zlib\",{\"1\":{\"248\":1}}],[\"指的是pcre\",{\"1\":{\"248\":1}}],[\"指定干活的拦截器\",{\"1\":{\"585\":2}}],[\"指定切入点为\",{\"1\":{\"541\":3}}],[\"指定的话就是\",{\"1\":{\"524\":1}}],[\"指定的字段是否存在\",{\"1\":{\"349\":1}}],[\"指定包下的所有mapper接口\",{\"1\":{\"523\":1}}],[\"指定配置⽂件所在路径\",{\"1\":{\"407\":1}}],[\"指定spring\",{\"1\":{\"406\":1}}],[\"指定使⽤es存储数据\",{\"1\":{\"401\":1}}],[\"指定从rabbitmq获得链路消息数据\",{\"1\":{\"400\":1}}],[\"指定zipkin的服务端\",{\"1\":{\"399\":1}}],[\"指定服务使⽤不同端⼝启动\",{\"1\":{\"391\":1}}],[\"指定索引位置删除袁术\",{\"1\":{\"310\":1}}],[\"指定索引位置增加元素\",{\"1\":{\"310\":1}}],[\"指定应该使用的代理类型\",{\"1\":{\"280\":1}}],[\"指定一个版本进行安装\",{\"1\":{\"261\":1}}],[\"指定库还原\",{\"1\":{\"244\":1}}],[\"指定在那个控件的右侧\",{\"1\":{\"24\":1}}],[\"指定在那个控件的左侧\",{\"1\":{\"24\":1}}],[\"指定在那个控件的上侧\",{\"1\":{\"24\":2}}],[\"指令名称>\",{\"1\":{\"181\":1}}],[\"指令名称\",{\"1\":{\"181\":1}}],[\"指令所在元素只渲染一次\",{\"1\":{\"174\":1}}],[\"指令基于一个数组来渲染一个列表\",{\"1\":{\"161\":1}}],[\"第三种\",{\"1\":{\"291\":1}}],[\"第二参数是一个对象\",{\"1\":{\"181\":1}}],[\"第二种方法\",{\"1\":{\"162\":1}}],[\"第二种用法在\",{\"1\":{\"175\":1}}],[\"第二种用法\",{\"1\":{\"161\":1}}],[\"第二种\",{\"1\":{\"159\":1,\"291\":1,\"628\":1}}],[\"第一次\",{\"1\":{\"199\":1}}],[\"第一参数是指令名称\",{\"1\":{\"181\":1}}],[\"第一个参数永远是前面传递过来的过滤值\",{\"1\":{\"177\":1}}],[\"第一种获取方式\",{\"1\":{\"291\":1}}],[\"第一种用法在双花括号中\",{\"1\":{\"175\":1}}],[\"第一种方法\",{\"1\":{\"161\":1,\"162\":1}}],[\"第一种\",{\"1\":{\"159\":1,\"628\":1}}],[\"扩展很困难\",{\"1\":{\"645\":1}}],[\"扩展类加载器\",{\"1\":{\"289\":1}}],[\"扩展\",{\"1\":{\"159\":1}}],[\"扩展你的搜索量\",{\"1\":{\"39\":1}}],[\"扩展你的内容容量\",{\"1\":{\"39\":1}}],[\"修饰的属性时\",{\"1\":{\"296\":2}}],[\"修饰的方法时\",{\"1\":{\"295\":1}}],[\"修饰的方法\",{\"1\":{\"295\":1,\"665\":1}}],[\"修饰的构造器时\",{\"1\":{\"294\":1}}],[\"修饰的构造器时需要使用这个\",{\"1\":{\"294\":1}}],[\"修饰的构造器\",{\"1\":{\"294\":1}}],[\"修饰符=\",{\"1\":{\"159\":1}}],[\"修饰符\",{\"1\":{\"159\":1}}],[\"修改git仓库中的key1的值\",{\"1\":{\"408\":1}}],[\"修改application\",{\"1\":{\"400\":1}}],[\"修改配置文件\",{\"1\":{\"368\":1}}],[\"修改本地\",{\"1\":{\"367\":1}}],[\"修改root密码\",{\"0\":{\"256\":1},\"1\":{\"243\":1}}],[\"修改默认配置信息\",{\"1\":{\"233\":1}}],[\"修改\",{\"1\":{\"185\":1,\"385\":1,\"386\":1,\"391\":1}}],[\"修改文档数据\",{\"1\":{\"57\":1}}],[\"修改path变量为最新的地址\",{\"1\":{\"18\":1}}],[\"较好\",{\"1\":{\"158\":2}}],[\"后\",{\"1\":{\"545\":1}}],[\"后面不同的请求路径\",{\"1\":{\"579\":1}}],[\"后面必须跟\",{\"1\":{\"541\":1}}],[\"后面的值代表偏移量\",{\"1\":{\"499\":1}}],[\"后面跟着表达式的值是布尔值\",{\"1\":{\"158\":1}}],[\"后置\",{\"1\":{\"664\":1}}],[\"后置通知\",{\"1\":{\"540\":1,\"541\":1,\"545\":2}}],[\"后置不需要打码的长度\",{\"1\":{\"493\":1}}],[\"后置逻辑\",{\"1\":{\"437\":3}}],[\"后会对桶进行扩容一倍处理\",{\"1\":{\"320\":1}}],[\"后前向前台传输数据取值\",{\"1\":{\"266\":1}}],[\"后台汇报\",{\"1\":{\"422\":1}}],[\"后台向前台传输数据\",{\"1\":{\"266\":1}}],[\"后台全部使用的是string\",{\"1\":{\"266\":1}}],[\"后消失\",{\"1\":{\"238\":1}}],[\"后端开发\",{\"2\":{\"78\":1,\"114\":1,\"117\":1,\"124\":1,\"130\":1,\"144\":1,\"267\":1,\"273\":1,\"285\":1,\"299\":1,\"305\":1,\"321\":1,\"328\":1,\"364\":1,\"370\":1,\"379\":1,\"387\":1,\"394\":1,\"402\":1,\"411\":1,\"446\":1,\"449\":1,\"463\":1,\"468\":1,\"473\":1,\"476\":1,\"483\":1,\"488\":1,\"494\":1,\"501\":1,\"506\":1,\"509\":1,\"526\":1,\"554\":1,\"565\":1,\"586\":1,\"591\":1,\"601\":1,\"607\":1,\"615\":1,\"620\":1,\"623\":1,\"632\":1,\"643\":1,\"648\":1,\"657\":1,\"666\":1}}],[\"尽量降低类成员的访问权限\",{\"1\":{\"631\":1}}],[\"尽量不要覆写基类的方法\",{\"1\":{\"629\":1}}],[\"尽量不要重写父类的方法\",{\"1\":{\"628\":1}}],[\"尽量避免使用\",{\"1\":{\"157\":1}}],[\"尽管⼀个⽂档\",{\"1\":{\"35\":1}}],[\"标注不同层的对象\",{\"1\":{\"539\":1}}],[\"标记一个事务块的开始\",{\"1\":{\"358\":1}}],[\"标记这个注解是自动继承的\",{\"1\":{\"271\":1}}],[\"标记这个注解应该是哪种\",{\"1\":{\"271\":1}}],[\"标记这些注解是否包含在用户文档中\",{\"1\":{\"271\":1}}],[\"标记当前\",{\"1\":{\"266\":1}}],[\"标识这个注解怎么保存\",{\"1\":{\"271\":1}}],[\"标识某注解可以在同一个声明上使用多次\",{\"1\":{\"270\":2}}],[\"标识一个匿名函数或函数式接口\",{\"1\":{\"270\":1}}],[\"标准的项目开发结构\",{\"1\":{\"211\":1}}],[\"标准开发的\",{\"1\":{\"80\":1}}],[\"标签必须存在\",{\"1\":{\"558\":1}}],[\"标签即可\",{\"1\":{\"524\":1}}],[\"标签使用\",{\"1\":{\"524\":1}}],[\"标签的名称\",{\"1\":{\"524\":1}}],[\"标签的name属性获取传过来的值\",{\"1\":{\"266\":1}}],[\"标签所对应的方法名\",{\"1\":{\"524\":2}}],[\"标签有以下属性\",{\"1\":{\"523\":1}}],[\"标签就可以看到\",{\"1\":{\"523\":1}}],[\"标签来包裹所有的代码\",{\"1\":{\"215\":1}}],[\"标签上传入不同的值\",{\"1\":{\"204\":1}}],[\"标签\",{\"1\":{\"157\":1,\"210\":1,\"524\":2}}],[\"标签中的内容\",{\"1\":{\"157\":1}}],[\"很像innertext和innerhtml\",{\"1\":{\"157\":1}}],[\"很可能消息接收到\",{\"1\":{\"107\":1}}],[\"正方形形状类\",{\"1\":{\"654\":1}}],[\"正方形\",{\"1\":{\"653\":1}}],[\"正则表达式\",{\"1\":{\"493\":1}}],[\"正则匹配路径\",{\"1\":{\"363\":1}}],[\"正⽂和元数据\",{\"1\":{\"378\":1}}],[\"正数情况下\",{\"1\":{\"266\":1}}],[\"正确写法\",{\"1\":{\"156\":1}}],[\"正常队列绑定死信交换机\",{\"1\":{\"110\":1}}],[\"正常情况下\",{\"1\":{\"107\":1}}],[\"请检查导入模板是否正确\",{\"1\":{\"599\":4}}],[\"请不要同时在类和成员变量上同时使用\",{\"1\":{\"595\":1}}],[\"请在头部输⼊\",{\"1\":{\"438\":1}}],[\"请在实现实体类时\",{\"1\":{\"304\":1}}],[\"请输入\",{\"1\":{\"223\":1}}],[\"请输入姓名\",{\"1\":{\"223\":1}}],[\"请使用三元表达式\",{\"1\":{\"156\":1}}],[\"请求执行使用方法\",{\"1\":{\"614\":1}}],[\"请求配置\",{\"1\":{\"613\":1}}],[\"请求头\",{\"1\":{\"613\":1}}],[\"请求头值\",{\"1\":{\"613\":1}}],[\"请求头名称\",{\"1\":{\"613\":1}}],[\"请求参数\",{\"1\":{\"613\":1}}],[\"请求参数等不同的条件来进⾏作为条件匹配到对应的路由\",{\"1\":{\"419\":1}}],[\"请求地址\",{\"1\":{\"613\":1,\"614\":2}}],[\"请求方式\",{\"1\":{\"613\":1}}],[\"请求文件流输出为文件时出现异常\",{\"1\":{\"612\":1}}],[\"请求相应的视图\",{\"1\":{\"574\":1}}],[\"请求会转发到\",{\"1\":{\"427\":1}}],[\"请求只会被⾸个成功匹配的路由转发\",{\"1\":{\"426\":1}}],[\"请求必须同时满⾜所有的条件才被这个路由匹配\",{\"1\":{\"426\":1}}],[\"请求⼀个微服务系统的api接⼝\",{\"1\":{\"396\":1}}],[\"请求该地址并转换为\",{\"1\":{\"389\":1}}],[\"请求个数达到这个个数\",{\"1\":{\"440\":1}}],[\"请求个数达到这个个\",{\"1\":{\"382\":1}}],[\"请求最小压缩的阈值\",{\"1\":{\"377\":1}}],[\"请求压缩\",{\"1\":{\"377\":1}}],[\"请求与相应压缩\",{\"0\":{\"377\":1}}],[\"请求链接\",{\"1\":{\"283\":1}}],[\"请求的任何内容\",{\"1\":{\"413\":1}}],[\"请求的链接地址\",{\"1\":{\"266\":1}}],[\"请求的url\",{\"1\":{\"44\":1}}],[\"请求并处理\",{\"1\":{\"266\":2}}],[\"请求人物列表的方法封装\",{\"1\":{\"221\":1}}],[\"请求列表的方法封装\",{\"1\":{\"221\":1}}],[\"请求失败\",{\"1\":{\"185\":1,\"486\":1}}],[\"请求接口文档地址失败解决\",{\"0\":{\"122\":1}}],[\"请求端口\",{\"1\":{\"59\":1}}],[\"请求成功返回\",{\"1\":{\"49\":1}}],[\"请求成功\",{\"1\":{\"48\":1,\"185\":1}}],[\"请求\",{\"1\":{\"45\":1,\"46\":1,\"47\":1,\"52\":1,\"430\":1,\"431\":1,\"443\":1}}],[\"请求体\",{\"1\":{\"43\":1,\"44\":1,\"46\":1,\"49\":1,\"50\":1,\"53\":3,\"614\":1}}],[\"请求url\",{\"1\":{\"43\":1,\"48\":1,\"49\":1,\"50\":1,\"438\":1}}],[\"流量持续不断的涌⼊\",{\"1\":{\"451\":1}}],[\"流结束\",{\"1\":{\"281\":1}}],[\"流控制也不会生效\",{\"1\":{\"156\":1}}],[\"流程图绘图\",{\"1\":{\"9\":1}}],[\"用到\",{\"1\":{\"560\":1}}],[\"用户在浏览器中访问相应网页时\",{\"1\":{\"574\":1}}],[\"用户请求的入口控制器\",{\"1\":{\"569\":1}}],[\"用户service实现类的注解\",{\"1\":{\"539\":1}}],[\"用户数据\",{\"1\":{\"522\":1}}],[\"用户id\",{\"1\":{\"522\":1}}],[\"用户联系指导者\",{\"1\":{\"514\":1}}],[\"用户体验好\",{\"1\":{\"199\":1}}],[\"用什么打码\",{\"1\":{\"493\":1}}],[\"用apiinfobuilder进行定制\",{\"1\":{\"471\":1}}],[\"用指定元素替换集合中指定位置的元素\",{\"1\":{\"315\":1}}],[\"用途类型\",{\"1\":{\"272\":1}}],[\"用在接口后\",{\"1\":{\"541\":1}}],[\"用在类名后\",{\"1\":{\"541\":1}}],[\"用在包名后\",{\"1\":{\"541\":1}}],[\"用在方法参数中\",{\"1\":{\"541\":1}}],[\"用在\",{\"1\":{\"270\":1}}],[\"用来接受父组件的传值\",{\"1\":{\"197\":1}}],[\"用法\",{\"1\":{\"156\":1,\"202\":1}}],[\"用于存放\",{\"1\":{\"589\":1}}],[\"用于定义\",{\"1\":{\"545\":1}}],[\"用于dao实现类的的注解\",{\"1\":{\"539\":1}}],[\"用于controller实现类的注解\",{\"1\":{\"539\":1}}],[\"用于读取资源文件\",{\"1\":{\"513\":1}}],[\"用于评估异常是否应记录为失败\",{\"1\":{\"382\":1}}],[\"用于该阈值的呼叫视为慢调用\",{\"1\":{\"382\":1}}],[\"用于\",{\"1\":{\"80\":1}}],[\"包或者子包里的任意类的任意方法\",{\"1\":{\"541\":1}}],[\"包里的任意类的任意方法\",{\"1\":{\"541\":1}}],[\"包名类名\",{\"1\":{\"541\":1}}],[\"包括以下几类\",{\"1\":{\"631\":1}}],[\"包括\",{\"1\":{\"530\":1,\"573\":1}}],[\"包括断路器\",{\"1\":{\"381\":1}}],[\"包括元素成员和元素分值\",{\"1\":{\"351\":1}}],[\"包\",{\"1\":{\"248\":1,\"269\":1,\"312\":1}}],[\"包裹的形式\",{\"1\":{\"156\":1}}],[\"包含了\",{\"1\":{\"80\":1,\"198\":1}}],[\"形式返回\",{\"1\":{\"304\":1}}],[\"形式\",{\"1\":{\"156\":1}}],[\"插件启动\",{\"1\":{\"564\":1}}],[\"插件依赖\",{\"1\":{\"558\":1}}],[\"插件一启动就结束了\",{\"1\":{\"558\":1}}],[\"插件\",{\"1\":{\"221\":2}}],[\"插件收集\",{\"0\":{\"9\":1}}],[\"插值表达式\",{\"0\":{\"156\":1},\"1\":{\"156\":1,\"157\":1,\"190\":1}}],[\"常量\",{\"1\":{\"548\":1}}],[\"常⽤的做法jsonp\",{\"1\":{\"443\":1}}],[\"常⻅的负载均衡有两种⽅式\",{\"1\":{\"390\":1}}],[\"常规跳转\",{\"1\":{\"205\":1}}],[\"常规函数写法\",{\"1\":{\"155\":1}}],[\"常用\",{\"1\":{\"533\":1}}],[\"常用方法\",{\"1\":{\"266\":2,\"315\":1}}],[\"常用方法案例\",{\"0\":{\"76\":1}}],[\"常用的类型有\",{\"1\":{\"80\":1}}],[\"理由是箭头函数绑定了父级作用域的上下文\",{\"1\":{\"155\":1}}],[\"函数引⽤上叠加地使⽤⼀个或多个装饰器\",{\"1\":{\"381\":1}}],[\"函数引⽤进⾏装饰\",{\"1\":{\"381\":1}}],[\"函数式接口\",{\"1\":{\"270\":1}}],[\"函数中\",{\"1\":{\"186\":1}}],[\"函数简写法\",{\"1\":{\"155\":1}}],[\"函数\",{\"1\":{\"155\":1}}],[\"同\",{\"1\":{\"436\":1}}],[\"同样没超过限制\",{\"1\":{\"461\":1}}],[\"同样需要使用\",{\"1\":{\"327\":1}}],[\"同样也被代理到了\",{\"1\":{\"155\":1}}],[\"同分数时我们需要按照考试是时长进行升序\",{\"1\":{\"324\":1}}],[\"同一hash值的链表都存储在一个链表里\",{\"1\":{\"318\":1}}],[\"同时使用会进行两次判断\",{\"1\":{\"595\":1}}],[\"同时滑动窗⼝算法计数运算也相对固定时间窗⼝算法⽐较耗时\",{\"1\":{\"462\":1}}],[\"同时在当前时间间隔刚开始请求\",{\"1\":{\"461\":1}}],[\"同时来的请求⼜太多\",{\"1\":{\"458\":1}}],[\"同时也保持了客户和⼤部分客户的得到正确的相应\",{\"1\":{\"439\":1}}],[\"同时存在于同⼀个路由时\",{\"1\":{\"426\":1}}],[\"同时配置暴露\",{\"1\":{\"409\":1}}],[\"同时base\",{\"1\":{\"400\":1}}],[\"同时集成了spring\",{\"1\":{\"372\":1}}],[\"同时将多个field\",{\"1\":{\"349\":1}}],[\"同时设置一个或多个key\",{\"1\":{\"338\":2}}],[\"同时设置或获取多个属性值\",{\"0\":{\"338\":1}}],[\"同时\",{\"1\":{\"209\":1}}],[\"同时不计算分数\",{\"1\":{\"57\":1}}],[\"同时提供了对lucene的默认优化实现\",{\"1\":{\"51\":1}}],[\"响应码\",{\"1\":{\"487\":1}}],[\"响应格式\",{\"1\":{\"487\":1}}],[\"响应压缩\",{\"1\":{\"377\":1}}],[\"响应式的数据\",{\"1\":{\"154\":1}}],[\"响应太慢\",{\"1\":{\"39\":1}}],[\"值与代码中调用者\",{\"1\":{\"537\":1}}],[\"值越⼩\",{\"1\":{\"438\":1}}],[\"值和正则表达式去匹配\",{\"1\":{\"422\":1}}],[\"值为\",{\"1\":{\"399\":1}}],[\"值附加过期时间\",{\"1\":{\"363\":1}}],[\"值\",{\"1\":{\"153\":1,\"353\":1,\"363\":4}}],[\"返回实体\",{\"0\":{\"612\":1}}],[\"返回通知\",{\"1\":{\"545\":1}}],[\"返回不同类型的io流对象\",{\"1\":{\"513\":1}}],[\"返回的结果可以是\",{\"1\":{\"574\":1}}],[\"返回的结果\",{\"1\":{\"545\":2}}],[\"返回的数据实体\",{\"1\":{\"487\":1}}],[\"返回的是被移除的元素\",{\"1\":{\"315\":1}}],[\"返回的是弹出层的id\",{\"1\":{\"146\":1}}],[\"返回保底数据\",{\"1\":{\"448\":1}}],[\"返回⼀个布尔值结果\",{\"1\":{\"415\":1,\"419\":1}}],[\"返回所有键值对\",{\"1\":{\"363\":1}}],[\"返回所有给定集合的并集\",{\"1\":{\"348\":1}}],[\"返回给定\",{\"1\":{\"354\":1}}],[\"返回给定所有集合的差集并存储在\",{\"1\":{\"347\":1}}],[\"返回给定所有集合的交集\",{\"1\":{\"347\":1}}],[\"返回一个或多个位置对象的\",{\"1\":{\"353\":1}}],[\"返回有序集合中指定成员的排名\",{\"1\":{\"351\":1}}],[\"返回有序集合中指定成员的索引\",{\"1\":{\"351\":1}}],[\"返回有序集中指定分数区间内的成员\",{\"1\":{\"351\":1}}],[\"返回有序集中指定区间内的成员\",{\"1\":{\"351\":1}}],[\"返回有序集中\",{\"1\":{\"351\":1}}],[\"返回第一个集合与其他集合之间的差异\",{\"1\":{\"346\":1}}],[\"返回此列表中的最后一个元素\",{\"1\":{\"316\":1}}],[\"返回此列表中的第一个元素\",{\"1\":{\"316\":1}}],[\"返回此套接字支持的一组套接字选项\",{\"1\":{\"281\":1}}],[\"返回此套接字连接到的端点的地址\",{\"1\":{\"281\":1}}],[\"返回此套接字连接的远程端口号\",{\"1\":{\"281\":1}}],[\"返回此套接字的输出流\",{\"1\":{\"281\":1}}],[\"返回此套接字的输入流\",{\"1\":{\"281\":1}}],[\"返回此套接字绑定的端点的地址\",{\"1\":{\"281\":1}}],[\"返回此套接字绑定的本地端口号\",{\"1\":{\"281\":1}}],[\"返回集合中一个或多个随机数\",{\"1\":{\"346\":1}}],[\"返回集合中的所有成员\",{\"1\":{\"346\":1}}],[\"返回集合中指定位置的元素\",{\"1\":{\"315\":1}}],[\"返回集合中元素的个数\",{\"1\":{\"314\":1}}],[\"返回类型的\",{\"1\":{\"303\":1}}],[\"返回类型\",{\"1\":{\"303\":2,\"304\":2}}],[\"返回so\",{\"1\":{\"281\":1}}],[\"返回\",{\"1\":{\"281\":1,\"363\":1,\"424\":1,\"520\":1}}],[\"返回套接字连接的写半部分是否已关闭\",{\"1\":{\"281\":1}}],[\"返回套接字连接的读半部分是否已关闭\",{\"1\":{\"281\":1}}],[\"返回套接字连接的地址\",{\"1\":{\"281\":1}}],[\"返回套接字的连接状态\",{\"1\":{\"281\":1}}],[\"返回套接字的关闭状态\",{\"1\":{\"281\":1}}],[\"返回套接字的绑定状态\",{\"1\":{\"281\":1}}],[\"返回套接字选项的值\",{\"1\":{\"281\":1}}],[\"返回与此套接字关联的唯一socketchannel对象\",{\"1\":{\"281\":1}}],[\"返回值为boolean\",{\"1\":{\"582\":1}}],[\"返回值类型\",{\"1\":{\"541\":1}}],[\"返回值的更新前的元素\",{\"1\":{\"315\":1}}],[\"返回值\",{\"1\":{\"42\":1}}],[\"窗口关闭时执行\",{\"1\":{\"146\":1}}],[\"锄禾日<span\",{\"1\":{\"146\":1}}],[\"额外jsonb操作符\",{\"0\":{\"143\":1}}],[\"`ls\",{\"1\":{\"244\":1}}],[\"`rm\",{\"1\":{\"244\":1}}],[\"`\",{\"1\":{\"195\":2,\"197\":1,\"504\":1,\"546\":2}}],[\"`<div>体育<\",{\"1\":{\"206\":1}}],[\"`<div>我是z\",{\"1\":{\"194\":1}}],[\"`<div>\",{\"1\":{\"193\":1,\"195\":1}}],[\"`表名称`\",{\"1\":{\"135\":1}}],[\"`database\",{\"1\":{\"129\":1}}],[\"放开以下静态资源的访问\",{\"1\":{\"472\":1}}],[\"放弃执行事务块内的所有命令\",{\"1\":{\"358\":1}}],[\"放至id\",{\"1\":{\"135\":1}}],[\"放置一些静态资源文件\",{\"1\":{\"214\":1}}],[\"放置\",{\"1\":{\"20\":1}}],[\"输出到文件\",{\"1\":{\"619\":1}}],[\"输出结果如下\",{\"1\":{\"660\":1,\"663\":1}}],[\"输出结果\",{\"1\":{\"605\":4,\"606\":6}}],[\"输出结果为\",{\"1\":{\"324\":1,\"656\":1}}],[\"输出\",{\"1\":{\"293\":1}}],[\"输出流转换为\",{\"1\":{\"283\":1}}],[\"输出设置\",{\"1\":{\"211\":1}}],[\"输出示例\",{\"1\":{\"128\":2,\"139\":1,\"140\":1}}],[\"输入流\",{\"1\":{\"284\":1,\"618\":1}}],[\"输入下面命令可以进到编辑页面\",{\"1\":{\"244\":1}}],[\"输入子集获取从父级到当前子集的组织拼接\",{\"1\":{\"128\":1}}],[\"输入父级获取子父级的组织拼接\",{\"1\":{\"128\":1}}],[\"输⼊\",{\"1\":{\"41\":1}}],[\"递归查询\",{\"0\":{\"128\":1,\"136\":1}}],[\"递交给所有队列\",{\"1\":{\"91\":1}}],[\"且每次使用的都是同一个对象\",{\"1\":{\"646\":1}}],[\"且可以修改跳转方向\",{\"1\":{\"583\":1}}],[\"且该对象是该对象本身创建的\",{\"1\":{\"645\":1}}],[\"且该方法参数中包含\",{\"1\":{\"583\":1}}],[\"且该数据包将被限流\",{\"1\":{\"460\":1}}],[\"且会将aftercompletion\",{\"1\":{\"582\":1}}],[\"且依赖关系为\",{\"1\":{\"499\":1}}],[\"且获取value从start位置到end位置的字符进行返回\",{\"1\":{\"339\":1}}],[\"且所有给定的key都不存在\",{\"1\":{\"338\":1}}],[\"且它的父类加载器是bootstrap\",{\"1\":{\"289\":1}}],[\"且写法也有一些区别\",{\"1\":{\"127\":1}}],[\"且不重复\",{\"1\":{\"88\":1}}],[\"导致系统运营能⼒不⾜\",{\"1\":{\"461\":1}}],[\"导致了他的⼀个缺陷\",{\"1\":{\"408\":1}}],[\"导⼊配置\",{\"1\":{\"406\":1}}],[\"导出的数据库名称\",{\"1\":{\"244\":2}}],[\"导出html文件后页面怎么刷新都无法正常显示页面\",{\"1\":{\"123\":1}}],[\"导入\",{\"1\":{\"375\":1}}],[\"导入素材\",{\"0\":{\"217\":1}}],[\"导入vue和vue\",{\"1\":{\"203\":1}}],[\"导入依赖\",{\"0\":{\"517\":1,\"551\":1},\"1\":{\"58\":1,\"386\":1,\"409\":1,\"410\":1,\"439\":1,\"470\":1,\"617\":1}}],[\"全参数自定义\",{\"1\":{\"487\":1}}],[\"全称java\",{\"1\":{\"265\":1}}],[\"全局拦截异常案例\",{\"1\":{\"475\":1}}],[\"全局拦截器\",{\"1\":{\"122\":1}}],[\"全局异常拦截器\",{\"0\":{\"475\":1}}],[\"全局锁\",{\"1\":{\"448\":1}}],[\"全局过滤器配置\",{\"1\":{\"437\":1}}],[\"全局过滤器对所有的路由都有效\",{\"1\":{\"437\":1}}],[\"全局过滤器\",{\"0\":{\"437\":1,\"441\":1},\"1\":{\"436\":1}}],[\"全局过滤器代码\",{\"1\":{\"178\":1}}],[\"全局安装脚手架\",{\"1\":{\"212\":1}}],[\"全局嵌套全局\",{\"1\":{\"195\":1}}],[\"全局组件\",{\"0\":{\"193\":1},\"1\":{\"195\":4}}],[\"全局自动聚焦的自定义指令\",{\"1\":{\"181\":1}}],[\"全局自定义指令\",{\"0\":{\"181\":1},\"1\":{\"181\":1}}],[\"全局和局部\",{\"1\":{\"181\":1,\"193\":1}}],[\"全局\",{\"1\":{\"175\":1}}],[\"全⽂\",{\"1\":{\"57\":1}}],[\"注入给调用者\",{\"1\":{\"537\":1}}],[\"注解形式控制事务\",{\"0\":{\"550\":1}}],[\"注解声明为最终通知\",{\"1\":{\"545\":1}}],[\"注解声明异常通知方法\",{\"1\":{\"545\":1}}],[\"注解声明环绕通知\",{\"1\":{\"545\":1}}],[\"注解声明后置通知\",{\"1\":{\"545\":1}}],[\"注解方法一般使用\",{\"1\":{\"545\":1}}],[\"注解在一个方法之上\",{\"1\":{\"545\":1}}],[\"注解的细化\",{\"1\":{\"539\":1}}],[\"注解既可以按名称匹配bean也可以按类型匹配bean\",{\"1\":{\"538\":1}}],[\"注解注入\",{\"0\":{\"538\":1}}],[\"注解表示当前任务是定时指定该方法\",{\"1\":{\"497\":1}}],[\"注解表示开启定时任务\",{\"1\":{\"497\":1}}],[\"注解示例如下\",{\"1\":{\"372\":1}}],[\"注解会被编译器记录在类文件中\",{\"1\":{\"272\":1}}],[\"注解是否包含在文档中\",{\"1\":{\"272\":1}}],[\"注解可用范围\",{\"1\":{\"269\":1}}],[\"注解\",{\"0\":{\"269\":1,\"575\":1},\"1\":{\"481\":1,\"545\":2,\"576\":1,\"599\":2}}],[\"注册的方式访问对象\",{\"1\":{\"530\":1}}],[\"注册注解\",{\"1\":{\"372\":1}}],[\"注册服务\",{\"0\":{\"369\":1}}],[\"注册中⼼\",{\"1\":{\"366\":1,\"448\":1}}],[\"注册删除事件\",{\"1\":{\"222\":2}}],[\"注册在app\",{\"1\":{\"218\":1}}],[\"注册组件名称\",{\"1\":{\"193\":1}}],[\"注册方式不同\",{\"1\":{\"193\":1}}],[\"注册一个自定义指令\",{\"1\":{\"181\":1}}],[\"注册后会将所有的请求都进行拦截\",{\"1\":{\"122\":1}}],[\"注意服务降级类需要在spring容器中注册\",{\"1\":{\"376\":1}}],[\"注意这个\",{\"1\":{\"558\":1}}],[\"注意这⾥使⽤localhost\",{\"1\":{\"400\":1}}],[\"注意这条代码所在位置会影响下面获取后的页面反馈\",{\"1\":{\"266\":1}}],[\"注意这里添加成功的状态码\",{\"1\":{\"224\":1}}],[\"注意此处这是两个反引号\",{\"1\":{\"244\":1}}],[\"注意要引入vue\",{\"1\":{\"220\":1}}],[\"注意获取参数route\",{\"1\":{\"205\":1}}],[\"注意命名规范\",{\"1\":{\"193\":1}}],[\"注意到复制分⽚从不与原\",{\"1\":{\"39\":1}}],[\"注意\",{\"1\":{\"35\":1,\"150\":1,\"153\":1,\"155\":1,\"157\":1,\"158\":1,\"166\":1,\"168\":1,\"173\":1,\"183\":1,\"192\":1,\"193\":2,\"202\":1,\"205\":2,\"213\":1,\"215\":1,\"225\":1,\"331\":1,\"336\":1,\"367\":1,\"385\":1,\"413\":1,\"499\":1}}],[\"原始\",{\"0\":{\"663\":1},\"1\":{\"661\":1}}],[\"原始字符串\",{\"1\":{\"622\":1}}],[\"原则\",{\"1\":{\"627\":1}}],[\"原有都记录下来\",{\"1\":{\"545\":1}}],[\"原有的style会覆盖\",{\"1\":{\"168\":1}}],[\"原来使用的jedis被替换为了lettuce\",{\"1\":{\"508\":1}}],[\"原本翻译为\",{\"1\":{\"504\":1}}],[\"原本共享的业务被拆分形成可复⽤的服务\",{\"1\":{\"448\":1}}],[\"原数组中指定索引位置元素不复制到新数组中\",{\"1\":{\"310\":1}}],[\"原理及实现\",{\"0\":{\"171\":1}}],[\"原因\",{\"1\":{\"122\":1}}],[\"原队列存在消息过期设置\",{\"1\":{\"110\":1}}],[\"续约间隔\",{\"1\":{\"113\":1}}],[\"单例示例\",{\"0\":{\"646\":1,\"647\":1}}],[\"单例\",{\"1\":{\"645\":2}}],[\"单例模式有两种\",{\"1\":{\"645\":1}}],[\"单例模式一般没有接口\",{\"1\":{\"645\":1}}],[\"单例模式可以在系统设置全局的访问点\",{\"1\":{\"645\":1}}],[\"单例模式优缺点\",{\"1\":{\"645\":1}}],[\"单例类对外提供一个访问该单例的全局访问点\",{\"1\":{\"645\":1}}],[\"单例类只有一个实例对象\",{\"1\":{\"645\":1}}],[\"单一职责同样也适用于方法\",{\"1\":{\"627\":1}}],[\"单一职责的优点\",{\"1\":{\"627\":1}}],[\"单一职责原则主要是约束类\",{\"1\":{\"630\":1}}],[\"单一职责原则注重的是职责\",{\"1\":{\"630\":1}}],[\"单一职责原则的核心就是控制类的粒度大小\",{\"1\":{\"627\":1}}],[\"单一职责原则规定一个类应该有且仅有一个引起它变化的原因\",{\"1\":{\"627\":1}}],[\"单一职责原则\",{\"0\":{\"627\":1},\"1\":{\"625\":1,\"627\":1}}],[\"单引号\",{\"1\":{\"525\":1}}],[\"单独使用\",{\"0\":{\"516\":1},\"1\":{\"520\":1}}],[\"单列集合\",{\"0\":{\"313\":1}}],[\"单列集合同时会继承\",{\"1\":{\"312\":1}}],[\"单列集合的顶级父接口\",{\"1\":{\"312\":1}}],[\"单向链表\",{\"1\":{\"311\":1}}],[\"单页应用\",{\"0\":{\"199\":1,\"200\":1}}],[\"单个文件上传大小\",{\"1\":{\"113\":1}}],[\"单位为dp\",{\"1\":{\"21\":1}}],[\"称为追踪服务器或调度服务器\",{\"1\":{\"112\":1}}],[\"作者信息\",{\"1\":{\"471\":1}}],[\"作⽤于特定路由\",{\"1\":{\"413\":1}}],[\"作用在字段上\",{\"1\":{\"493\":1}}],[\"作用\",{\"1\":{\"153\":1,\"156\":1,\"165\":1,\"170\":1,\"174\":1,\"211\":1,\"628\":1}}],[\"作用是文件存储\",{\"1\":{\"112\":1}}],[\"作用是负载均衡和调度\",{\"1\":{\"112\":1}}],[\"作为\",{\"1\":{\"413\":1}}],[\"作为消息发送方希望杜绝任何消息丢失或者投递失败场景\",{\"1\":{\"104\":1}}],[\"作为轻量级的\",{\"1\":{\"80\":1}}],[\"作为复制源的原来的分⽚\",{\"1\":{\"39\":1}}],[\"作为集群的⼀部分\",{\"1\":{\"38\":1}}],[\"调度\",{\"1\":{\"530\":1}}],[\"调度器将抛出schedulerexception异常\",{\"1\":{\"499\":5}}],[\"调度最终由\",{\"1\":{\"112\":1}}],[\"调试cron表达式是否是想要的执行\",{\"1\":{\"497\":1}}],[\"调⽤c服务的接⼝只会占⽤12个线程不会占⽤其他⼯作线程资源\",{\"1\":{\"453\":1}}],[\"调⽤链路出现问题能够快速定位\",{\"1\":{\"448\":1}}],[\"调⽤每个微服务都会产⽣⼀个新的span\",{\"1\":{\"396\":1}}],[\"调用目标对象\",{\"1\":{\"662\":1}}],[\"调用测试\",{\"0\":{\"641\":1}}],[\"调用类则直接传入接口或者抽象类\",{\"1\":{\"628\":1}}],[\"调用方法\",{\"1\":{\"619\":1}}],[\"调用处理器传递参数等工作\",{\"1\":{\"572\":1}}],[\"调用mapper\",{\"0\":{\"522\":1}}],[\"调用示例\",{\"1\":{\"389\":1}}],[\"调用接口时\",{\"1\":{\"227\":1}}],[\"调用获取英雄数据的方法\",{\"1\":{\"225\":1}}],[\"调用加载英雄方法\",{\"1\":{\"225\":1}}],[\"调用组件\",{\"1\":{\"197\":1}}],[\"调用的形式\",{\"1\":{\"183\":1}}],[\"调用\",{\"1\":{\"159\":1,\"182\":1,\"224\":1,\"548\":1}}],[\"调用channel\",{\"1\":{\"107\":1}}],[\"架构包括\",{\"1\":{\"112\":1}}],[\"架构图\",{\"1\":{\"80\":1}}],[\"充分考虑了冗余备份\",{\"1\":{\"112\":1}}],[\"解密后内容\",{\"1\":{\"622\":1}}],[\"解密后的内容\",{\"1\":{\"622\":1}}],[\"解密失败\",{\"1\":{\"622\":1}}],[\"解析请求头失败\",{\"1\":{\"480\":1}}],[\"解耦是降低业务之间的耦合度\",{\"1\":{\"448\":1}}],[\"解压至指定位置\",{\"1\":{\"248\":1}}],[\"解压\",{\"1\":{\"247\":1,\"248\":1}}],[\"解压的包中找到\",{\"1\":{\"239\":1}}],[\"解决脏读\",{\"1\":{\"547\":2}}],[\"解决⽅案推荐使⽤nacos作为替换⽅案\",{\"1\":{\"366\":1}}],[\"解决此错误有两个方法我个人是用第二个方法解决的\",{\"0\":{\"239\":1}}],[\"解决页面初次渲染时\",{\"1\":{\"173\":1}}],[\"解决了大容量存储和负载均衡的问题\",{\"1\":{\"112\":1}}],[\"解释\",{\"1\":{\"42\":1,\"52\":1,\"57\":1,\"73\":1,\"266\":1}}],[\"等到对请求进行响应的所工作完成之后才执行该方法\",{\"1\":{\"584\":1}}],[\"等功能\",{\"1\":{\"530\":1}}],[\"等同\",{\"1\":{\"499\":1}}],[\"等同于\",{\"1\":{\"266\":1}}],[\"等下⼀个时间段进⼊\",{\"1\":{\"461\":1}}],[\"等不同的请求⽅式来进⾏路由\",{\"1\":{\"424\":1}}],[\"等请求方式\",{\"1\":{\"419\":1}}],[\"等技术开发的⽹关\",{\"1\":{\"413\":1}}],[\"等待时间\",{\"1\":{\"363\":2}}],[\"等的标注\",{\"1\":{\"269\":1}}],[\"等一应俱全\",{\"1\":{\"192\":1}}],[\"等\",{\"1\":{\"112\":1,\"269\":1,\"389\":1,\"529\":1,\"530\":1,\"573\":1}}],[\"组织请求体\",{\"0\":{\"613\":1}}],[\"组合匹配\",{\"0\":{\"426\":1}}],[\"组合成其他复杂的逻辑\",{\"1\":{\"415\":1,\"419\":1}}],[\"组合实现延迟队列的效果\",{\"1\":{\"111\":1}}],[\"组名\",{\"1\":{\"357\":1}}],[\"组装key\",{\"1\":{\"327\":3}}],[\"组成结点可以在运行时动态生成\",{\"1\":{\"311\":1}}],[\"组件和模块的区别\",{\"0\":{\"198\":1}}],[\"组件和实例相似之处\",{\"1\":{\"192\":1}}],[\"组件之间的通信根据关系的可以分为\",{\"1\":{\"196\":1}}],[\"组件之间的传值\",{\"1\":{\"196\":1}}],[\"组件之间可以重叠\",{\"1\":{\"26\":1}}],[\"组件通信的几种情况\",{\"0\":{\"196\":1}}],[\"组件嵌套\",{\"0\":{\"195\":1},\"1\":{\"196\":1,\"209\":1}}],[\"组件没有el选项\",{\"1\":{\"192\":1}}],[\"组件中data为一个函数且需要返回一个对象\",{\"1\":{\"192\":1}}],[\"组件特点\",{\"0\":{\"192\":1}}],[\"组件\",{\"0\":{\"191\":1,\"568\":1},\"1\":{\"198\":1,\"199\":1}}],[\"组件的样式\",{\"1\":{\"215\":1}}],[\"组件的逻辑结构及数据对象\",{\"1\":{\"215\":1}}],[\"组件的页面结构\",{\"1\":{\"215\":1}}],[\"组件的选项中定义本地的过滤器\",{\"1\":{\"175\":1}}],[\"组件的默认位置都是左上角\",{\"1\":{\"26\":1}}],[\"组件相对父容器的位置\",{\"1\":{\"26\":1}}],[\"即类的扩展不会给已有的系统引入新的错误\",{\"1\":{\"628\":1}}],[\"即方法的返回值\",{\"1\":{\"628\":1}}],[\"即该方法是在前端控制器渲染\",{\"1\":{\"584\":1}}],[\"即具体的页面地址\",{\"1\":{\"573\":1}}],[\"即处理器\",{\"1\":{\"570\":1}}],[\"即没有实际作用的方法\",{\"1\":{\"545\":1}}],[\"即持久层对象\",{\"1\":{\"539\":1}}],[\"即要么相同\",{\"1\":{\"537\":1}}],[\"即10秒触发1次\",{\"1\":{\"499\":1}}],[\"即0秒触发1次\",{\"1\":{\"499\":1}}],[\"即使没有请求过来\",{\"1\":{\"382\":1,\"440\":1}}],[\"即使异常是recordexceptions的一部分\",{\"1\":{\"382\":1}}],[\"即使在waitdurationinopenstate之后也是如此\",{\"1\":{\"382\":1}}],[\"即使所有9次调用都失败\",{\"1\":{\"382\":1}}],[\"即使用链表处理冲突\",{\"1\":{\"318\":1}}],[\"即消息长度\",{\"1\":{\"356\":1}}],[\"即消息进入队列后不会立即被消费\",{\"1\":{\"111\":1}}],[\"即远程字典服务\",{\"1\":{\"331\":1}}],[\"即hash值相等的元素较多时\",{\"1\":{\"318\":1}}],[\"即存进去的元素\",{\"1\":{\"308\":1}}],[\"即第一次使用该类时才加载\",{\"1\":{\"289\":1}}],[\"即无穷大的超时\",{\"1\":{\"281\":1}}],[\"即此平台在此\",{\"1\":{\"281\":1}}],[\"即当前项的索引\",{\"1\":{\"161\":1}}],[\"即可访问到web页面\",{\"1\":{\"41\":1}}],[\"延迟队列\",{\"0\":{\"111\":1},\"1\":{\"111\":1}}],[\"拒绝盲从\",{\"1\":{\"630\":1}}],[\"拒绝签收\",{\"1\":{\"110\":1}}],[\"拒绝签收多个消息\",{\"1\":{\"107\":1}}],[\"拒绝接受\",{\"1\":{\"110\":1}}],[\"出现在类名中时\",{\"1\":{\"541\":1}}],[\"出现异常\",{\"1\":{\"110\":1}}],[\"出现错误\",{\"1\":{\"110\":1}}],[\"出于多租户和安全因素设计的\",{\"1\":{\"80\":1}}],[\"死信交换机名称\",{\"1\":{\"110\":1}}],[\"死信交换机\",{\"1\":{\"110\":1}}],[\"死信队列\",{\"0\":{\"110\":1},\"1\":{\"110\":1}}],[\"生成一对密钥后就可以直接使用了\",{\"1\":{\"622\":1}}],[\"生成密钥对\",{\"1\":{\"622\":1}}],[\"生成的图片\",{\"1\":{\"619\":1}}],[\"生成需要的对象\",{\"1\":{\"619\":1}}],[\"生成案例实体\",{\"1\":{\"619\":1}}],[\"生成队列\",{\"1\":{\"504\":1}}],[\"生成帮助文档\",{\"1\":{\"269\":1}}],[\"生成动态web内容\",{\"1\":{\"265\":1}}],[\"生成简易模板\",{\"1\":{\"213\":1}}],[\"生成自增序列\",{\"1\":{\"135\":1}}],[\"生成缩略图参数\",{\"1\":{\"113\":1}}],[\"生成消息返回的\",{\"1\":{\"107\":1,\"108\":1,\"590\":1}}],[\"生产版本\",{\"1\":{\"150\":1}}],[\"生产端\",{\"1\":{\"110\":1}}],[\"生产者案例\",{\"0\":{\"97\":1}}],[\"生产者\",{\"0\":{\"100\":1},\"1\":{\"91\":1}}],[\"生产者示例\",{\"0\":{\"89\":1,\"94\":1}}],[\"错误行数据\",{\"1\":{\"599\":1}}],[\"错误的枚举\",{\"1\":{\"487\":1}}],[\"错误\",{\"1\":{\"422\":1,\"423\":1}}],[\"错误日志收集地址\",{\"1\":{\"252\":1}}],[\"错误解决\",{\"0\":{\"237\":1}}],[\"错误写法\",{\"1\":{\"156\":1}}],[\"错误收集\",{\"0\":{\"118\":1}}],[\"错误信息\",{\"1\":{\"106\":1,\"487\":2}}],[\"错误码\",{\"1\":{\"106\":1}}],[\"则校验下一级处理器\",{\"1\":{\"637\":1}}],[\"则继承类的对象在基类出现的地方会出现运行错误\",{\"1\":{\"628\":1}}],[\"则继续\",{\"1\":{\"238\":1}}],[\"则该方法不会执行\",{\"1\":{\"583\":1}}],[\"则紧接着会执行处理器方法\",{\"1\":{\"582\":1}}],[\"则为该类及其子类中的任意方法\",{\"1\":{\"541\":1}}],[\"则为接口中的任意方法及其所有实现类中的任意方法\",{\"1\":{\"541\":1}}],[\"则不会删除令牌\",{\"1\":{\"460\":1}}],[\"则不需流出⽔滴\",{\"1\":{\"459\":1}}],[\"则按照500毫秒的固定速率往桶中添加令牌\",{\"1\":{\"460\":1}}],[\"则流⼊的⽔滴溢出了\",{\"1\":{\"459\":1}}],[\"则会造成接口数量过多\",{\"1\":{\"630\":1}}],[\"则会关闭断路器\",{\"1\":{\"456\":1}}],[\"则会返回⻚⾯代码\",{\"1\":{\"422\":1}}],[\"则会返回一个\",{\"1\":{\"104\":1}}],[\"则触发熔断\",{\"1\":{\"456\":1}}],[\"则熔断器打开\",{\"1\":{\"448\":1}}],[\"则此路由将匹配\",{\"1\":{\"425\":1}}],[\"则路由匹配\",{\"1\":{\"413\":1,\"414\":1}}],[\"则断言必须返回true\",{\"1\":{\"382\":1}}],[\"则所有其他异常均视为成功\",{\"1\":{\"382\":1}}],[\"则只有在发出调用时才会转换到半开\",{\"1\":{\"382\":1}}],[\"则意味着断路器将自动从开启状态过渡到半开状态\",{\"1\":{\"382\":1}}],[\"则必须至少记录10个调用\",{\"1\":{\"382\":1}}],[\"则变为关闭状态\",{\"1\":{\"382\":1}}],[\"则变为打开状态\",{\"1\":{\"382\":1}}],[\"则可以使⽤fallbackfactory属性指定\",{\"1\":{\"376\":1}}],[\"则执⾏降级⽅法\",{\"1\":{\"376\":1}}],[\"则全部不添加\",{\"1\":{\"363\":1}}],[\"则返回空\",{\"1\":{\"599\":1}}],[\"则返回401状态码\",{\"1\":{\"437\":1}}],[\"则返回⻚⾯代码证明匹配成功\",{\"1\":{\"421\":1}}],[\"则返回true\",{\"1\":{\"316\":1}}],[\"则返回给消息发送方returncallback\",{\"1\":{\"106\":1}}],[\"则计算属性则会取缓存的结果\",{\"1\":{\"183\":1}}],[\"则是被迭代的数组元素的别名\",{\"1\":{\"161\":1}}],[\"则使用\",{\"1\":{\"158\":2}}],[\"则调用channel\",{\"1\":{\"107\":1}}],[\"则需要在业务处理成功后\",{\"1\":{\"107\":1}}],[\"则自动确认收到\",{\"1\":{\"107\":1}}],[\"则丢弃消息\",{\"1\":{\"106\":1}}],[\"失败时不能让请求堆积在⽹关上\",{\"1\":{\"439\":1}}],[\"失败请求百分⽐\",{\"1\":{\"382\":1,\"440\":1}}],[\"失败原因\",{\"1\":{\"105\":1}}],[\"失败\",{\"1\":{\"105\":1,\"156\":1}}],[\"失败随时都可能发⽣\",{\"1\":{\"39\":1}}],[\"来自百度百科\",{\"1\":{\"625\":1}}],[\"来使用\",{\"1\":{\"563\":1}}],[\"来管理\",{\"1\":{\"560\":1}}],[\"来获取到\",{\"1\":{\"520\":1}}],[\"来获取dom对象\",{\"1\":{\"179\":1}}],[\"来实现互斥\",{\"1\":{\"499\":1}}],[\"来实现消息队列的功能\",{\"1\":{\"355\":1}}],[\"来保证服务的⾼可⽤\",{\"1\":{\"448\":1}}],[\"来源于\",{\"1\":{\"419\":1}}],[\"来源于古希腊词汇\",{\"1\":{\"366\":1}}],[\"来定制转发规则\",{\"1\":{\"416\":1}}],[\"来控制访问不同的配置⽂件了\",{\"1\":{\"405\":1}}],[\"来创建loadbalancer客户端\",{\"1\":{\"373\":1}}],[\"来拼接为本场的数据\",{\"1\":{\"327\":1}}],[\"来区分是谁的数据\",{\"1\":{\"327\":1}}],[\"来比较是否为重复的元素\",{\"1\":{\"315\":1}}],[\"来进行检查\",{\"1\":{\"212\":1}}],[\"来表示\",{\"1\":{\"135\":1}}],[\"来查看版本号\",{\"1\":{\"128\":1}}],[\"来接收\",{\"1\":{\"105\":1,\"106\":1}}],[\"来加⼊这个集群\",{\"1\":{\"37\":1}}],[\"$3$4\",{\"1\":{\"491\":1}}],[\"$2\",{\"1\":{\"491\":2}}],[\"$file\",{\"1\":{\"244\":2}}],[\"$daysago\",{\"1\":{\"244\":1}}],[\"$date\",{\"1\":{\"244\":1}}],[\"$data\",{\"1\":{\"154\":2}}],[\"$1`\",{\"1\":{\"244\":2}}],[\"$1\",{\"1\":{\"244\":2,\"491\":3}}],[\"$path\",{\"1\":{\"244\":2}}],[\"$log\",{\"1\":{\"244\":7}}],[\"$http\",{\"1\":{\"227\":2}}],[\"$router\",{\"1\":{\"207\":1,\"224\":1,\"226\":1}}],[\"$route\",{\"1\":{\"204\":2,\"225\":1,\"226\":1}}],[\"$refs\",{\"1\":{\"179\":1}}],[\"$event\",{\"1\":{\"171\":1}}],[\"$\",{\"1\":{\"105\":5,\"106\":5,\"107\":5,\"108\":5,\"213\":7,\"244\":7,\"357\":3,\"391\":1,\"392\":1,\"410\":4,\"430\":1,\"444\":1,\"518\":4,\"561\":4,\"589\":5,\"590\":5}}],[\"加解密异常\",{\"1\":{\"622\":1}}],[\"加密后内容\",{\"1\":{\"622\":1}}],[\"加密后的字符串\",{\"1\":{\"622\":1}}],[\"加密失败\",{\"1\":{\"622\":1}}],[\"加⼊到spring容器管理即可\",{\"1\":{\"437\":1}}],[\"加以区分\",{\"1\":{\"405\":1}}],[\"加入承载视图\",{\"1\":{\"219\":1}}],[\"加横向的结构\",{\"1\":{\"193\":1}}],[\"加载该servlet的优先级越高\",{\"1\":{\"266\":1}}],[\"加载慢\",{\"1\":{\"199\":1}}],[\"加载完dom再执行的函数\",{\"1\":{\"186\":1}}],[\"加载\",{\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"199\":1,\"589\":1,\"590\":1}}],[\"加上这个后就会扫描该路径下所用到的\",{\"1\":{\"518\":1}}],[\"加上\",{\"1\":{\"76\":1}}],[\"整合\",{\"0\":{\"503\":1,\"557\":1,\"588\":1},\"1\":{\"589\":1,\"590\":1}}],[\"整合形式演示案例\",{\"1\":{\"105\":1,\"107\":1}}],[\"整个框架只是使⽤了varr的库\",{\"1\":{\"381\":1}}],[\"整个\",{\"1\":{\"157\":1}}],[\"整个消息投递的路径为\",{\"1\":{\"104\":1}}],[\"投递失败则会返回一个\",{\"1\":{\"104\":1}}],[\"高度检查不合格\",{\"1\":{\"640\":1}}],[\"高度\",{\"1\":{\"634\":1}}],[\"高级别模块不应该取决于低级别模块\",{\"1\":{\"629\":1}}],[\"高级特性\",{\"0\":{\"103\":1,\"439\":1}}],[\"高性能服务器一定是多线程的\",{\"1\":{\"334\":1}}],[\"高性能等指标\",{\"1\":{\"112\":1}}],[\"高亮结果\",{\"1\":{\"71\":1}}],[\"竞争关系\",{\"1\":{\"102\":1}}],[\"完善路由表\",{\"1\":{\"219\":1}}],[\"完全组件化开发\",{\"1\":{\"199\":1}}],[\"完全一致\",{\"1\":{\"96\":1}}],[\"完成被调用者的实例化\",{\"1\":{\"537\":1}}],[\"完成文件上传和下载\",{\"1\":{\"112\":1}}],[\"完成索引数据的查看\",{\"1\":{\"41\":1}}],[\"完成图形化界⾯的效果\",{\"1\":{\"41\":1}}],[\"与单一职责原则冲突\",{\"1\":{\"645\":1}}],[\"与导入的表头进行对应校验来验证模板是否一致\",{\"1\":{\"599\":1}}],[\"与spring组合为\",{\"1\":{\"558\":1}}],[\"与建造者\",{\"1\":{\"514\":1}}],[\"与此同时由于安全问题\",{\"1\":{\"443\":1}}],[\"与此相⽐\",{\"1\":{\"381\":1}}],[\"与\",{\"1\":{\"317\":1,\"318\":1,\"415\":1,\"419\":1,\"525\":1}}],[\"与数组的索引是一个道理\",{\"1\":{\"315\":1}}],[\"与webpack\",{\"1\":{\"214\":1}}],[\"与启动类平级\",{\"1\":{\"120\":1}}],[\"与消息的\",{\"1\":{\"96\":1}}],[\"与简单模式相比\",{\"1\":{\"88\":1}}],[\"向其他服务发起调⽤\",{\"1\":{\"439\":1}}],[\"向eureka注册\",{\"1\":{\"416\":1,\"445\":1}}],[\"向外提供的服务的\",{\"1\":{\"373\":1}}],[\"向已存在的集合中添加元素\",{\"1\":{\"363\":2}}],[\"向已存在的列表的头部添加一个值\",{\"1\":{\"341\":1}}],[\"向集合最右边添加元素\",{\"1\":{\"363\":2}}],[\"向集合中添加一个或多个成员\",{\"1\":{\"346\":1}}],[\"向左边批量添加参数元素\",{\"1\":{\"363\":2}}],[\"向有序集合添加一个或多个成员\",{\"1\":{\"351\":1}}],[\"向pivot\",{\"1\":{\"341\":1}}],[\"向列表尾部添加一个或多个值\",{\"1\":{\"341\":1}}],[\"向list添加一个或多个值添加到列表头部\",{\"1\":{\"341\":1}}],[\"向指定服务器端口\",{\"1\":{\"284\":1}}],[\"向线程池中添加一个线程\",{\"1\":{\"283\":1}}],[\"向\",{\"1\":{\"96\":1,\"445\":1}}],[\"声明式事务管理\",{\"1\":{\"548\":1}}],[\"声明式事务控制\",{\"1\":{\"548\":1}}],[\"声明式事务的支持\",{\"1\":{\"529\":1}}],[\"声明前置通知\",{\"1\":{\"545\":1}}],[\"声明当前是一个bean\",{\"1\":{\"539\":1}}],[\"声明死信队列\",{\"1\":{\"110\":1}}],[\"声明正常的队列\",{\"1\":{\"110\":1}}],[\"声明两个队列\",{\"1\":{\"94\":1,\"97\":1,\"100\":1}}],[\"声明交换机\",{\"1\":{\"94\":1,\"97\":1,\"100\":1,\"101\":2}}],[\"定时任务\",{\"0\":{\"497\":1}}],[\"定时运行备份脚本\",{\"0\":{\"244\":1}}],[\"定期探测依赖服务可⽤性\",{\"1\":{\"448\":1}}],[\"定义中包含了4层含义\",{\"1\":{\"628\":1}}],[\"定义广播类型交换机\",{\"1\":{\"589\":1}}],[\"定义广播交换机中的持久化队列\",{\"1\":{\"589\":5}}],[\"定义持久化队列\",{\"1\":{\"589\":1}}],[\"定义的切面类\",{\"1\":{\"546\":1}}],[\"定义的切入点\",{\"1\":{\"545\":1}}],[\"定义aop切面类\",{\"0\":{\"545\":1}}],[\"定义了事务底层默认的超时时限\",{\"1\":{\"548\":1}}],[\"定义了专门的表达式用于指定切入点\",{\"1\":{\"541\":1}}],[\"定义了4个全局过滤器\",{\"1\":{\"437\":1}}],[\"定义局部过滤器步骤如下\",{\"1\":{\"438\":1}}],[\"定义在\",{\"1\":{\"270\":1,\"541\":2}}],[\"定义在java\",{\"1\":{\"270\":1}}],[\"定义提交方法\",{\"1\":{\"226\":1}}],[\"定义获取英雄数据方法\",{\"1\":{\"225\":1}}],[\"定义一个创建对象的接口\",{\"1\":{\"651\":1}}],[\"定义一个数据对象\",{\"1\":{\"224\":1}}],[\"定义一个全局组件\",{\"1\":{\"193\":1}}],[\"定义表单数据\",{\"1\":{\"224\":1}}],[\"定义删除方法\",{\"1\":{\"222\":2}}],[\"定义数据\",{\"1\":{\"221\":1}}],[\"定义数据对象\",{\"1\":{\"183\":1}}],[\"定义data选项定义list列表数据\",{\"1\":{\"221\":1}}],[\"定义\",{\"1\":{\"183\":1,\"626\":1,\"627\":1,\"628\":1,\"629\":1,\"630\":1,\"631\":1,\"645\":1}}],[\"定义ref\",{\"1\":{\"179\":1}}],[\"定义rabbittemplate对象操作可以在代码中方便发送消息\",{\"1\":{\"105\":1,\"106\":1,\"589\":1}}],[\"定义rabbitmq\",{\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"589\":1,\"590\":1}}],[\"定义格式化日期过滤器\",{\"1\":{\"178\":1}}],[\"定义过滤器\",{\"1\":{\"177\":1}}],[\"定义全局过滤器vue\",{\"1\":{\"176\":1}}],[\"定义自增序列时一般使用\",{\"1\":{\"135\":1}}],[\"定义管理交换机\",{\"1\":{\"105\":1,\"106\":1,\"589\":1}}],[\"定到默认的交换机\",{\"1\":{\"93\":1}}],[\"定向\",{\"1\":{\"91\":1}}],[\"定位自己的位置\",{\"1\":{\"20\":1}}],[\"到\",{\"1\":{\"104\":1}}],[\"到底如何操作\",{\"1\":{\"91\":1}}],[\"到达\",{\"1\":{\"80\":1}}],[\"知道如何处理消息\",{\"1\":{\"91\":1}}],[\"另⼀种是和feign相结合\",{\"1\":{\"390\":1}}],[\"另⼀种是将负载均衡逻辑以代码的形式封装到服务消费者的客户端上\",{\"1\":{\"390\":1}}],[\"另⼀部分是单词的内容\",{\"1\":{\"29\":1}}],[\"另一端进行删除元素的线性表\",{\"1\":{\"309\":1}}],[\"另一端称为栈底\",{\"1\":{\"308\":1}}],[\"另一方面\",{\"1\":{\"91\":1}}],[\"缓存消息\",{\"1\":{\"91\":1}}],[\"消费组名\",{\"1\":{\"357\":1}}],[\"消费限流\",{\"0\":{\"108\":1}}],[\"消费者名\",{\"1\":{\"357\":1}}],[\"消费者组相关命令\",{\"0\":{\"357\":1}}],[\"消费者拒接消费消息\",{\"1\":{\"110\":1}}],[\"消费者案例\",{\"0\":{\"98\":1}}],[\"消费者\",{\"0\":{\"101\":1},\"1\":{\"91\":1}}],[\"消息为\",{\"1\":{\"590\":1}}],[\"消息总线\",{\"1\":{\"448\":1}}],[\"消息会全部忽略\",{\"1\":{\"357\":1}}],[\"消息会转发到符合routing\",{\"1\":{\"96\":1}}],[\"消息就会被丢弃\",{\"1\":{\"355\":1}}],[\"消息到达超时时间未被消费\",{\"1\":{\"110\":1}}],[\"消息成为死信的三种情况\",{\"1\":{\"110\":1}}],[\"消息过期\",{\"1\":{\"109\":1}}],[\"消息过期时间示例\",{\"1\":{\"109\":1}}],[\"消息对象\",{\"1\":{\"106\":1}}],[\"消息可靠性投递\",{\"1\":{\"105\":1}}],[\"消息从\",{\"1\":{\"104\":2}}],[\"消息队列相关命令\",{\"0\":{\"356\":1}}],[\"消息队列\",{\"1\":{\"91\":1,\"341\":1}}],[\"消息的可靠投递\",{\"0\":{\"104\":1}}],[\"消息的发送方在\",{\"1\":{\"96\":1}}],[\"消息的接受者\",{\"1\":{\"91\":1}}],[\"消息的配置内容\",{\"1\":{\"87\":1}}],[\"消息id\",{\"1\":{\"87\":1,\"90\":2,\"95\":2,\"98\":2,\"101\":2,\"356\":1}}],[\"消息和重传标志\",{\"1\":{\"87\":1}}],[\"消息routingkey\",{\"1\":{\"87\":1}}],[\"消息包的内容\",{\"1\":{\"87\":1}}],[\"消息者标签\",{\"1\":{\"87\":1}}],[\"消息\",{\"1\":{\"86\":1,\"87\":1,\"89\":1,\"94\":1,\"156\":1,\"356\":1,\"357\":1}}],[\"消息接收到后回调\",{\"1\":{\"85\":1,\"87\":1}}],[\"消息内容\",{\"1\":{\"85\":1,\"86\":1,\"589\":2}}],[\"消息其它属性\",{\"1\":{\"85\":1,\"86\":1}}],[\"消息最终被送到这里等待\",{\"1\":{\"80\":1}}],[\"而且自行实例化并向整个系统提供这个实例\",{\"1\":{\"645\":1}}],[\"而且过程略有变化\",{\"1\":{\"91\":1}}],[\"而应该提供相应的访问器\",{\"1\":{\"631\":1}}],[\"而接口隔离原则注重的是对接口依赖的隔离\",{\"1\":{\"630\":1}}],[\"而细节是指具体的实现类\",{\"1\":{\"629\":1}}],[\"而抽象层则相对稳定\",{\"1\":{\"629\":1}}],[\"而程序p的行为没有发生变化\",{\"1\":{\"628\":1}}],[\"而无须手动编程\",{\"1\":{\"529\":1}}],[\"而不关心外面怎么样来实例化\",{\"1\":{\"645\":1}}],[\"而不要试图去建立一个很庞大的接口供所有依赖它的类去调用\",{\"1\":{\"630\":1}}],[\"而不去涉及任何具体的操作\",{\"1\":{\"629\":1}}],[\"而不是通过修改已有的代码来实现变化\",{\"1\":{\"626\":1}}],[\"而不是转发页面\",{\"1\":{\"577\":1}}],[\"而不是从尾部插入\",{\"1\":{\"351\":1}}],[\"而不需要了解具体的建造过程和细节\",{\"1\":{\"514\":1}}],[\"而不管其他任何设置\",{\"1\":{\"280\":1}}],[\"而map集合的键是不允许重复的\",{\"1\":{\"320\":1}}],[\"而methods方法必须采用\",{\"1\":{\"183\":1}}],[\"而jdk1\",{\"1\":{\"318\":1}}],[\"而结束链表的下一位是开始链表的下一位\",{\"1\":{\"311\":1}}],[\"而它的\",{\"1\":{\"198\":1}}],[\"而\",{\"1\":{\"158\":1,\"161\":1,\"202\":1,\"540\":1}}],[\"而上面没有\",{\"1\":{\"146\":1}}],[\"而部署主机名\",{\"1\":{\"113\":1}}],[\"而是通过参数指定配置文件的位置\",{\"1\":{\"535\":1}}],[\"而是把这个请求转交给父类加载器去完成\",{\"1\":{\"289\":1}}],[\"而是根据消息的\",{\"1\":{\"96\":1}}],[\"而是要指定一个\",{\"1\":{\"96\":1}}],[\"而是发给x\",{\"1\":{\"91\":1}}],[\"而发布\",{\"1\":{\"93\":1}}],[\"订阅服务\",{\"1\":{\"417\":1}}],[\"订阅模式需要设置队列和交换机的绑定\",{\"1\":{\"93\":1}}],[\"订阅模式需要定义交换机\",{\"1\":{\"93\":1}}],[\"订阅模式的生产方是面向交换机发送消息\",{\"1\":{\"93\":1}}],[\"订阅模式概述\",{\"0\":{\"91\":1}}],[\"订单数据索引\",{\"1\":{\"31\":1}}],[\"订单号\",{\"1\":{\"29\":2}}],[\"工厂模式使其创建过程延迟到子类进行\",{\"1\":{\"651\":1}}],[\"工厂模式\",{\"0\":{\"650\":1,\"664\":1}}],[\"工厂模式的微妙实现\",{\"1\":{\"530\":1}}],[\"工厂创建责任链\",{\"0\":{\"642\":1}}],[\"工厂调取\",{\"1\":{\"520\":1}}],[\"工厂\",{\"1\":{\"520\":1}}],[\"工作原理\",{\"0\":{\"574\":1}}],[\"工作队列模式\",{\"1\":{\"102\":1}}],[\"工作队列模式不需要设置\",{\"1\":{\"93\":1}}],[\"工作队列模式不用定义交换机\",{\"1\":{\"93\":1}}],[\"工作队列模式的生产方是面向队列发送消息\",{\"1\":{\"93\":1}}],[\"工作模式\",{\"0\":{\"88\":1}}],[\"工具\",{\"0\":{\"211\":1},\"1\":{\"211\":1}}],[\"工具类\",{\"0\":{\"593\":1,\"599\":1,\"614\":1,\"618\":1,\"683\":1},\"1\":{\"113\":1},\"2\":{\"601\":1,\"602\":1,\"607\":1,\"608\":1,\"615\":1,\"616\":1,\"620\":1,\"621\":1,\"623\":1,\"624\":1}}],[\"工具进行\",{\"0\":{\"42\":1}}],[\"工具网\",{\"1\":{\"11\":1}}],[\"自然其可读性会提高\",{\"1\":{\"627\":1}}],[\"自增或自减\",{\"0\":{\"340\":1}}],[\"自增序列\",{\"0\":{\"135\":1}}],[\"自定义拦截器需要实现\",{\"1\":{\"580\":1}}],[\"自定义拦截器\",{\"0\":{\"580\":1}}],[\"自定义数据脱敏注解\",{\"1\":{\"493\":1}}],[\"自定义一个\",{\"1\":{\"304\":1}}],[\"自定义注解示例\",{\"1\":{\"272\":1}}],[\"自定义注解\",{\"0\":{\"272\":1}}],[\"自定义指令\",{\"0\":{\"180\":1}}],[\"自定义大小\",{\"1\":{\"21\":1}}],[\"自动注入\",{\"1\":{\"537\":1}}],[\"自动注入类中的用户id需要在拦截器中进行设置\",{\"1\":{\"467\":1}}],[\"自动注入类\",{\"0\":{\"467\":1}}],[\"自动刷新\",{\"1\":{\"408\":1}}],[\"自动刷新配置\",{\"0\":{\"408\":1}}],[\"自动开启浏览器\",{\"1\":{\"213\":1}}],[\"自动触发该函数\",{\"1\":{\"190\":1}}],[\"自动触发函数\",{\"1\":{\"190\":1}}],[\"自动绑定为\",{\"1\":{\"155\":1}}],[\"自动确认\",{\"1\":{\"107\":1}}],[\"自动删除\",{\"1\":{\"86\":1,\"87\":1}}],[\"时需要引入\",{\"1\":{\"558\":1}}],[\"时需要手动提交\",{\"1\":{\"515\":1}}],[\"时候\",{\"1\":{\"552\":2}}],[\"时根据\",{\"1\":{\"522\":1}}],[\"时重点是如何获取\",{\"1\":{\"520\":1}}],[\"时跳转到\",{\"1\":{\"416\":1}}],[\"时使用\",{\"1\":{\"368\":1,\"405\":1,\"445\":1}}],[\"时间戳事件\",{\"1\":{\"396\":1}}],[\"时间类型\",{\"1\":{\"363\":2}}],[\"时间\",{\"1\":{\"363\":2}}],[\"时间间隔\",{\"1\":{\"109\":1}}],[\"时\",{\"1\":{\"86\":1,\"87\":1,\"204\":1,\"289\":1,\"318\":1,\"363\":1}}],[\"时是所有类型的请求都会进行处理\",{\"1\":{\"579\":1}}],[\"时是不会进行自动注入的\",{\"1\":{\"466\":1}}],[\"时是不分词的\",{\"1\":{\"57\":1}}],[\"时是分词的\",{\"1\":{\"57\":1}}],[\"交集\",{\"0\":{\"347\":1}}],[\"交换机找到消息\",{\"1\":{\"105\":1}}],[\"交换机会根据routing\",{\"1\":{\"102\":2}}],[\"交换机会将消息发送到绑定的队列\",{\"1\":{\"102\":1}}],[\"交换机和队列进行绑定\",{\"1\":{\"102\":2}}],[\"交换机名\",{\"1\":{\"94\":1,\"97\":1,\"589\":1}}],[\"交换机名称\",{\"1\":{\"85\":1,\"86\":1,\"94\":1,\"97\":1,\"100\":1,\"504\":1,\"589\":1}}],[\"交换机类型为\",{\"1\":{\"589\":1}}],[\"交换机类型\",{\"1\":{\"94\":1,\"97\":1,\"100\":1}}],[\"交换机需要与队列进行绑定\",{\"1\":{\"93\":1}}],[\"交换机\",{\"1\":{\"87\":2,\"90\":2,\"91\":3,\"95\":2,\"98\":2,\"101\":2,\"105\":1,\"106\":1,\"504\":1}}],[\"交互操作\",{\"1\":{\"54\":1}}],[\"发出请求\",{\"1\":{\"413\":1}}],[\"发现⽀付服务得到的配置项key1的值还是旧的配置内容\",{\"1\":{\"408\":1}}],[\"发现了\",{\"1\":{\"366\":1}}],[\"发送的消息内容\",{\"1\":{\"589\":1}}],[\"发送队列消息\",{\"1\":{\"589\":1}}],[\"发送⼀个远程调度任务\",{\"1\":{\"396\":1}}],[\"发送aixos请求put方式\",{\"1\":{\"226\":1}}],[\"发送axios请求以post方式\",{\"1\":{\"224\":1}}],[\"发送axios请求实现模糊搜索\",{\"1\":{\"189\":1}}],[\"发送请求\",{\"1\":{\"224\":1}}],[\"发送请求获取数据\",{\"1\":{\"186\":1}}],[\"发送给死信交换机的routingkey\",{\"1\":{\"110\":1}}],[\"发送消息的方法\",{\"1\":{\"589\":1}}],[\"发送消息测试\",{\"1\":{\"504\":1}}],[\"发送消息案例\",{\"0\":{\"86\":1}}],[\"发送消息使用的时\",{\"1\":{\"85\":1}}],[\"发送消息需要关闭资源\",{\"1\":{\"85\":1}}],[\"发送消息\",{\"1\":{\"85\":1,\"86\":1}}],[\"发布订阅\",{\"1\":{\"355\":1}}],[\"发布订阅系统\",{\"1\":{\"331\":1}}],[\"发布订阅模式\",{\"1\":{\"102\":1}}],[\"发布订阅模式与工作队列模式的区别\",{\"1\":{\"93\":1}}],[\"发布\",{\"1\":{\"80\":1,\"93\":2,\"448\":1}}],[\"|b\",{\"1\":{\"177\":1}}],[\"|过滤器名字\",{\"1\":{\"175\":1}}],[\"||\",{\"1\":{\"139\":1,\"140\":2,\"327\":2,\"492\":1,\"599\":2}}],[\"|\",{\"1\":{\"84\":1,\"86\":1,\"89\":1,\"94\":1,\"97\":1,\"100\":1,\"175\":1,\"176\":1,\"177\":1,\"214\":27,\"248\":1,\"303\":5,\"304\":4}}],[\"开闭原则是面向对象程序设计的终极目标\",{\"1\":{\"626\":1}}],[\"开闭原则的作用\",{\"1\":{\"626\":1}}],[\"开闭原则视为软件实体的未来事件而制定的对现行开发设计进行约束的一个原则\",{\"1\":{\"626\":1}}],[\"开闭原则由勃兰特\",{\"1\":{\"626\":1}}],[\"开闭原则\",{\"0\":{\"626\":1},\"1\":{\"625\":1}}],[\"开始值\",{\"1\":{\"356\":2}}],[\"开始\",{\"1\":{\"339\":1}}],[\"开始链表的上一位时链表的最后一位\",{\"1\":{\"311\":1}}],[\"开始移除7天之前的备份数据\",{\"1\":{\"244\":1}}],[\"开发中非常难用的一些\",{\"1\":{\"529\":1}}],[\"开发者不需要再关注其他\",{\"1\":{\"211\":1}}],[\"开发难度高\",{\"1\":{\"199\":1}}],[\"开发版本\",{\"1\":{\"150\":1}}],[\"开发相关\",{\"0\":{\"0\":1}}],[\"开启事务\",{\"1\":{\"660\":2,\"663\":2,\"664\":1}}],[\"开启事务使用\",{\"1\":{\"558\":1}}],[\"开启spring表达式\",{\"1\":{\"619\":1}}],[\"开启熔断配置需要在\",{\"1\":{\"375\":1}}],[\"开启注解\",{\"1\":{\"372\":1}}],[\"开启\",{\"1\":{\"372\":1,\"382\":1,\"546\":1}}],[\"开启管理界⾯\",{\"1\":{\"233\":1}}],[\"开启配置\",{\"1\":{\"233\":1}}],[\"开启手动签收消息\",{\"1\":{\"107\":1,\"108\":1}}],[\"开启退回模式\",{\"1\":{\"106\":2}}],[\"开启确认模式\",{\"1\":{\"105\":1,\"106\":1}}],[\"开头的⻓度为三位的字符串才会进⾏匹配和路由\",{\"1\":{\"420\":1}}],[\"开头\",{\"1\":{\"83\":1,\"547\":1}}],[\"服务宕机等\",{\"1\":{\"451\":1}}],[\"服务之间的相互调⽤频率突然增加\",{\"1\":{\"451\":1}}],[\"服务之间采⽤轻量级通信机制rest\",{\"1\":{\"448\":1}}],[\"服务动态伸缩\",{\"1\":{\"448\":1}}],[\"服务发布与回滚\",{\"1\":{\"448\":1}}],[\"服务发现是指当⼀个服务消费者需要调⽤另外⼀个服务时\",{\"1\":{\"366\":1}}],[\"服务⽹关\",{\"1\":{\"448\":1}}],[\"服务容错\",{\"1\":{\"448\":1}}],[\"服务调⽤服务会采⽤⼀定的负载均衡策略\",{\"1\":{\"448\":1}}],[\"服务调用\",{\"0\":{\"389\":1}}],[\"服务链路追踪\",{\"1\":{\"448\":1}}],[\"服务独⽴性带来的好处就越多\",{\"1\":{\"448\":1}}],[\"服务不可⽤\",{\"1\":{\"442\":1}}],[\"服务地址等\",{\"1\":{\"404\":1}}],[\"服务端⼝=\",{\"1\":{\"410\":1,\"444\":1}}],[\"服务端发送响应\",{\"1\":{\"396\":1}}],[\"服务端获得请求并准备开始处理它\",{\"1\":{\"396\":1}}],[\"服务端口\",{\"1\":{\"392\":1}}],[\"服务端渲染\",{\"1\":{\"199\":1}}],[\"服务进行注册时需要以下配置\",{\"1\":{\"369\":1}}],[\"服务运行是的服务名\",{\"1\":{\"368\":1}}],[\"服务运行端口\",{\"1\":{\"213\":1}}],[\"服务注册是指各个微服务在启动时\",{\"1\":{\"366\":1}}],[\"服务注册与发现\",{\"0\":{\"366\":1}}],[\"服务消费者客户端维护了⼀份服务提供者的信息列表\",{\"1\":{\"390\":1}}],[\"服务消费者从eureka查询服务提供者的地址\",{\"1\":{\"366\":1}}],[\"服务消费者\",{\"1\":{\"366\":1}}],[\"服务提供者和消费者\",{\"1\":{\"448\":1}}],[\"服务提供者将⾃⼰的服务信息\",{\"1\":{\"366\":1}}],[\"服务提供者\",{\"1\":{\"366\":1}}],[\"服务\",{\"1\":{\"248\":1}}],[\"服务的注解\",{\"1\":{\"368\":1}}],[\"服务的\",{\"1\":{\"367\":1}}],[\"服务的失效时间\",{\"1\":{\"113\":1}}],[\"服务的端⼜号\",{\"1\":{\"42\":1}}],[\"服务器服务不过来\",{\"1\":{\"458\":1}}],[\"服务器端\",{\"0\":{\"283\":1}}],[\"服务器将响应返回客户端\",{\"1\":{\"265\":1}}],[\"服务器启动并调用servlet\",{\"1\":{\"265\":1}}],[\"服务器异常\",{\"1\":{\"113\":1}}],[\"服务器上\",{\"1\":{\"112\":1,\"419\":1}}],[\"服务器\",{\"1\":{\"83\":1}}],[\"取⽽代之的是springcloud\",{\"1\":{\"390\":1}}],[\"取消\",{\"1\":{\"358\":1}}],[\"取消事务\",{\"1\":{\"358\":1}}],[\"取出指定范围内的元素\",{\"1\":{\"342\":1}}],[\"取出参数\",{\"1\":{\"304\":3}}],[\"取元素\",{\"1\":{\"308\":1}}],[\"取决于exchange的类型\",{\"1\":{\"91\":1}}],[\"取走\",{\"1\":{\"80\":1}}],[\"取得内部聚合\",{\"1\":{\"77\":1}}],[\"中提出\",{\"1\":{\"626\":1}}],[\"中是一样的\",{\"1\":{\"576\":1}}],[\"中定义了事务描述相关的三类常量\",{\"1\":{\"547\":1}}],[\"中定义对应的标签\",{\"1\":{\"524\":1}}],[\"中寻找指定的\",{\"1\":{\"534\":1}}],[\"中可以\",{\"1\":{\"523\":1}}],[\"中可以包含\",{\"1\":{\"80\":1}}],[\"中一次会话已创建sqlsession对象开始到sqlsession对象关闭为结束\",{\"1\":{\"515\":1}}],[\"中一些常见方法\",{\"1\":{\"314\":1}}],[\"中分别表示为\",{\"1\":{\"511\":1}}],[\"中存在的key\",{\"1\":{\"480\":1}}],[\"中注册\",{\"1\":{\"445\":1}}],[\"中属性名称和⼀个正则表达式\",{\"1\":{\"421\":1}}],[\"中引⼊的⼀个函数\",{\"1\":{\"419\":1}}],[\"中添加⽅法customroutelocator\",{\"1\":{\"416\":1}}],[\"中添加以下内容\",{\"1\":{\"375\":1,\"407\":1,\"445\":1}}],[\"中找到与请求相匹配的路由\",{\"1\":{\"413\":1}}],[\"中安装\",{\"1\":{\"400\":1}}],[\"中获取\",{\"0\":{\"406\":1}}],[\"中获取该服务的\",{\"1\":{\"389\":1}}],[\"中获取相应参数\",{\"1\":{\"304\":1}}],[\"中导入\",{\"1\":{\"369\":1}}],[\"中只要有一个key存在\",{\"1\":{\"363\":1}}],[\"中间元素\",{\"1\":{\"341\":1}}],[\"中集合都属于\",{\"1\":{\"312\":1}}],[\"中返回\",{\"1\":{\"303\":1}}],[\"中处理接收的请求时都需要\",{\"1\":{\"266\":1}}],[\"中给的解决方法\",{\"0\":{\"238\":1}}],[\"中下载对应的版本\",{\"1\":{\"236\":1}}],[\"中调用获取数据方法\",{\"1\":{\"221\":1}}],[\"中使用的发送http请求的库\",{\"1\":{\"184\":1}}],[\"中\",{\"1\":{\"175\":1,\"347\":1,\"349\":1,\"351\":2,\"354\":1,\"419\":1}}],[\"中文社区\",{\"1\":{\"151\":1}}],[\"中配置多个包扫描时使用\",{\"1\":{\"546\":1}}],[\"中配置连接rabbitmq\",{\"1\":{\"409\":1}}],[\"中配置如下\",{\"1\":{\"367\":1}}],[\"中配置死信队列\",{\"1\":{\"110\":1}}],[\"中配置\",{\"1\":{\"105\":1,\"378\":1,\"382\":1,\"410\":1}}],[\"中的proceed方法表示目标方法被执行\",{\"1\":{\"545\":1}}],[\"中的字符串\",{\"1\":{\"524\":1}}],[\"中的方法\",{\"1\":{\"524\":1}}],[\"中的配置\",{\"1\":{\"384\":1}}],[\"中的指定字段的浮点数值加上增量\",{\"1\":{\"350\":1}}],[\"中的指定字段的整数值加上增量\",{\"1\":{\"350\":1}}],[\"中的数据取出并存储与\",{\"1\":{\"303\":1}}],[\"中的\",{\"1\":{\"85\":2,\"233\":1,\"298\":1}}],[\"中的查询表中\",{\"1\":{\"80\":1}}],[\"中去\",{\"1\":{\"80\":1}}],[\"中查看\",{\"1\":{\"43\":1}}],[\"匹配路由键通配符\",{\"1\":{\"589\":1}}],[\"匹配多个单词\",{\"1\":{\"589\":1}}],[\"匹配一个单词\",{\"1\":{\"589\":1}}],[\"匹配一个或多个词\",{\"1\":{\"99\":1}}],[\"匹配上才会⾛路由\",{\"1\":{\"420\":1}}],[\"匹配不多不少恰好1个词\",{\"1\":{\"99\":1}}],[\"匹配查询表中的\",{\"1\":{\"80\":1}}],[\"匹配开头查询\",{\"1\":{\"57\":1}}],[\"极大减少了操作系统建立\",{\"1\":{\"80\":1}}],[\"识别\",{\"1\":{\"80\":1}}],[\"实际输出的图片\",{\"1\":{\"619\":1}}],[\"实际上\",{\"1\":{\"448\":1}}],[\"实际上工作队列模式会将队列绑\",{\"1\":{\"93\":1}}],[\"实践\",{\"0\":{\"405\":1}}],[\"实时保存\",{\"1\":{\"213\":1}}],[\"实现代码\",{\"0\":{\"635\":1}}],[\"实现方法\",{\"1\":{\"631\":1}}],[\"实现对总接口的定义\",{\"1\":{\"630\":1}}],[\"实现的\",{\"1\":{\"546\":1}}],[\"实现相关的⽅法加⼊到过滤器⼯⼚\",{\"1\":{\"438\":1}}],[\"实现类来实现\",{\"1\":{\"665\":1}}],[\"实现类\",{\"1\":{\"320\":1,\"544\":1}}],[\"实现了序列化接口的这种类\",{\"1\":{\"298\":1}}],[\"实现提交方法的逻辑\",{\"1\":{\"226\":1}}],[\"实现添加方法的逻辑\",{\"1\":{\"224\":1}}],[\"实现删除逻辑\",{\"1\":{\"222\":1}}],[\"实现根据不同的请求地址\",{\"1\":{\"202\":1}}],[\"实现导航结构\",{\"1\":{\"201\":1}}],[\"实现路由\",{\"0\":{\"201\":1}}],[\"实现原理如图6\",{\"1\":{\"408\":1}}],[\"实现原理\",{\"0\":{\"200\":1}}],[\"实现一个全局组件\",{\"1\":{\"193\":1}}],[\"实现\",{\"0\":{\"189\":1},\"1\":{\"184\":1,\"316\":1,\"318\":1,\"437\":1}}],[\"实现计算属性方法\",{\"1\":{\"183\":1}}],[\"实现其格式化功能\",{\"1\":{\"178\":1}}],[\"实例中获取\",{\"1\":{\"515\":1}}],[\"实例可用再更多个线程中进行共享\",{\"1\":{\"508\":1}}],[\"实例完成事件\",{\"1\":{\"221\":1}}],[\"实例化router\",{\"1\":{\"219\":1}}],[\"实例化路由对象\",{\"1\":{\"203\":1}}],[\"实例代码\",{\"1\":{\"189\":1}}],[\"实例之前定义全局自定义指令vue\",{\"1\":{\"181\":1}}],[\"实例\",{\"1\":{\"155\":2,\"176\":1,\"183\":1,\"227\":1,\"419\":1,\"427\":1}}],[\"实例访问这些方法\",{\"1\":{\"155\":1}}],[\"实例的data中的数据作为数据来源\",{\"1\":{\"170\":1}}],[\"实例的data\",{\"1\":{\"154\":1}}],[\"实例选项compoents中定义局部组件名字\",{\"1\":{\"194\":1}}],[\"实例选项\",{\"0\":{\"153\":1,\"154\":1,\"155\":1,\"183\":1,\"190\":1}}],[\"实在\",{\"1\":{\"80\":1}}],[\"实体类中的对应的属性的类型\",{\"1\":{\"524\":1}}],[\"实体类\",{\"1\":{\"63\":1}}],[\"都有一个类型t的对象o2\",{\"1\":{\"628\":1}}],[\"都提供了封装\",{\"1\":{\"529\":1}}],[\"都已达到⽣命周期终⽌状态\",{\"1\":{\"448\":1}}],[\"都是\",{\"1\":{\"579\":1}}],[\"都是交给容器来创建对象\",{\"1\":{\"576\":1}}],[\"都是为了执⾏复杂任务提供了⼀个具有默认⾏为的简单⽅法\",{\"1\":{\"389\":1}}],[\"都是可以根据\",{\"1\":{\"99\":1}}],[\"都会重新计算\",{\"1\":{\"183\":1}}],[\"都会采用npm的方式来进行正式项目开发\",{\"1\":{\"150\":1}}],[\"都可通过this访问\",{\"1\":{\"155\":1}}],[\"都可以做到java对象的转换\",{\"1\":{\"605\":1}}],[\"都可以插入值\",{\"1\":{\"341\":1}}],[\"都可以添加类名\",{\"1\":{\"209\":1}}],[\"都可以\",{\"1\":{\"9\":1}}],[\"都建立一个\",{\"1\":{\"80\":1}}],[\"语句的执行时长\",{\"1\":{\"548\":1}}],[\"语句进行赋值处理\",{\"1\":{\"303\":1,\"304\":1}}],[\"语句来进⾏\",{\"1\":{\"57\":1}}],[\"语法校验\",{\"1\":{\"211\":1}}],[\"语法\",{\"1\":{\"161\":1,\"168\":1,\"169\":1,\"541\":1}}],[\"语言专门为开发高并发和分布式系统的一种语言\",{\"1\":{\"80\":1}}],[\"语言开发\",{\"1\":{\"80\":1}}],[\"采样报告\",{\"1\":{\"399\":1}}],[\"采样率\",{\"1\":{\"399\":1}}],[\"采用编译期织入和类装载期织入\",{\"1\":{\"540\":1}}],[\"采用动态代理织入\",{\"1\":{\"540\":1}}],[\"采用了orm思想解决了实体类和数据库表映射的问题\",{\"1\":{\"511\":1}}],[\"采用netty\",{\"1\":{\"508\":1}}],[\"采用的直连\",{\"1\":{\"508\":1}}],[\"采用分段锁机制\",{\"1\":{\"320\":1}}],[\"采用\",{\"1\":{\"80\":1,\"150\":1,\"201\":1,\"213\":2,\"227\":1,\"547\":1}}],[\"采⽤api代替传统的拼接字符串来构造查询语句\",{\"1\":{\"56\":1}}],[\"技术公司基于\",{\"1\":{\"80\":1}}],[\"执⾏业务逻辑\",{\"1\":{\"413\":1}}],[\"执⾏查询\",{\"1\":{\"77\":1}}],[\"执行绘画操作\",{\"1\":{\"653\":1}}],[\"执行期间事务的维护情况\",{\"1\":{\"548\":1}}],[\"执行所有事务块内的命令\",{\"1\":{\"358\":1}}],[\"执行\",{\"1\":{\"332\":1}}],[\"执行方法可以参考这里的execute方法\",{\"1\":{\"614\":1}}],[\"执行方法\",{\"1\":{\"288\":1}}],[\"执行结束\",{\"1\":{\"244\":1}}],[\"执行后\",{\"1\":{\"243\":1}}],[\"执行测试\",{\"1\":{\"238\":1}}],[\"执行以下命令就可以\",{\"1\":{\"212\":1}}],[\"执行了~~~\",{\"1\":{\"106\":1}}],[\"执行查询得到一个结果\",{\"1\":{\"65\":1,\"70\":1,\"71\":1}}],[\"执行操作\",{\"1\":{\"62\":1,\"63\":1}}],[\"执行当前方法\",{\"1\":{\"59\":1}}],[\"排队\",{\"1\":{\"448\":1}}],[\"排行榜数据\",{\"1\":{\"327\":1}}],[\"排行榜所存key\",{\"1\":{\"327\":1}}],[\"排行榜最大人数\",{\"1\":{\"327\":1}}],[\"排行榜工具类\",{\"0\":{\"327\":1}}],[\"排除所有的字段查询\",{\"1\":{\"77\":1}}],[\"排序条件\",{\"1\":{\"363\":1}}],[\"排序条件组装\",{\"1\":{\"327\":1}}],[\"排序key\",{\"1\":{\"327\":1}}],[\"排序所用的key\",{\"1\":{\"327\":1}}],[\"排序\",{\"1\":{\"30\":1,\"57\":1,\"351\":1,\"363\":1}}],[\"划分桶\",{\"1\":{\"77\":1}}],[\"奔驰a5\",{\"1\":{\"77\":1}}],[\"奔驰a4\",{\"1\":{\"77\":1}}],[\"奔驰a3\",{\"1\":{\"77\":1}}],[\"奔驰a2\",{\"1\":{\"77\":1}}],[\"奔驰a1\",{\"1\":{\"77\":1}}],[\"奔驰\",{\"1\":{\"77\":5}}],[\"宝⻢a5\",{\"1\":{\"77\":1}}],[\"宝⻢a4\",{\"1\":{\"77\":1}}],[\"宝⻢a3\",{\"1\":{\"77\":1}}],[\"宝⻢a2\",{\"1\":{\"77\":1}}],[\"宝⻢a1\",{\"1\":{\"77\":1}}],[\"宝⻢\",{\"1\":{\"77\":5}}],[\"⽩⾊\",{\"1\":{\"77\":2}}],[\"红黑树的约束\",{\"1\":{\"312\":1}}],[\"红黑树本身就是一颗二叉查找树\",{\"1\":{\"312\":1}}],[\"红黑树\",{\"0\":{\"312\":1}}],[\"红⾊\",{\"1\":{\"77\":9}}],[\"红色\",{\"1\":{\"21\":1}}],[\"⽐较⼩\",{\"1\":{\"455\":1}}],[\"⽐较⼤\",{\"1\":{\"455\":1}}],[\"⽐亚迪a5\",{\"1\":{\"77\":1}}],[\"⽐亚迪a4\",{\"1\":{\"77\":1}}],[\"⽐亚迪a3\",{\"1\":{\"77\":1}}],[\"⽐亚迪a2\",{\"1\":{\"77\":1}}],[\"⽐亚迪a1\",{\"1\":{\"77\":1}}],[\"⽐亚迪\",{\"1\":{\"77\":5}}],[\"⽐如设定每分钟最多可以请求100次某个接⼝\",{\"1\":{\"461\":1}}],[\"⽐如商城秒杀业务\",{\"1\":{\"458\":1}}],[\"⽐如下线⾮核⼼服务以保证核⼼服务的稳定\",{\"1\":{\"457\":1}}],[\"⽐如天猫双11\",{\"1\":{\"451\":1}}],[\"⽐如spring\",{\"1\":{\"448\":1}}],[\"⽐如⽤户注册服务\",{\"1\":{\"448\":1}}],[\"⽐如默认的git\",{\"1\":{\"407\":1}}],[\"⽐如修改服务连接地址\",{\"1\":{\"404\":1}}],[\"⽐如修改密码\",{\"1\":{\"233\":1}}],[\"⽐如摘要\",{\"1\":{\"396\":1}}],[\"⽐如打印异常⽇志\",{\"1\":{\"376\":1}}],[\"⽐如说现在运营⼀个博客平台并且将所有的数据存储到⼀个索引中\",{\"1\":{\"32\":1}}],[\"⽐如\",{\"1\":{\"29\":2,\"35\":1,\"39\":1,\"415\":1,\"419\":1,\"439\":1}}],[\"⽐如读⾳\",{\"1\":{\"28\":1}}],[\"构造注入是在构造调用者实例的同时\",{\"1\":{\"537\":1}}],[\"构造器\",{\"0\":{\"280\":1},\"1\":{\"77\":1,\"280\":1,\"537\":1}}],[\"构建请求\",{\"1\":{\"613\":1}}],[\"构建一个\",{\"1\":{\"504\":1}}],[\"构建\",{\"0\":{\"62\":1},\"1\":{\"62\":1}}],[\"汽车实体类\",{\"1\":{\"77\":1}}],[\"救人\",{\"1\":{\"76\":3}}],[\"救⼈是职责更是本能\",{\"1\":{\"63\":1,\"76\":1}}],[\"不应该执行返回false\",{\"1\":{\"653\":1}}],[\"不应该使用箭头函数来定义\",{\"1\":{\"155\":1}}],[\"不暴露类的属性成员\",{\"1\":{\"631\":1}}],[\"不跟\",{\"1\":{\"631\":1}}],[\"不得不将其他不需要的职责全都包含进来\",{\"1\":{\"627\":1}}],[\"不绑定到交换机则绑定到默认交换机\",{\"1\":{\"589\":1}}],[\"不想使用的时候直接移除配置\",{\"1\":{\"548\":1}}],[\"不可重复读\",{\"1\":{\"547\":1}}],[\"不排斥各种优秀的开源框架\",{\"1\":{\"529\":1}}],[\"不等于\",{\"1\":{\"525\":1}}],[\"不区分大小写\",{\"1\":{\"524\":1}}],[\"不常用\",{\"1\":{\"523\":1}}],[\"不常用sql方法\",{\"0\":{\"133\":1}}],[\"不传入时查询全部数据\",{\"1\":{\"522\":1}}],[\"不允许为空值\",{\"1\":{\"499\":4}}],[\"不断重复\",{\"1\":{\"462\":1}}],[\"不再从类路径中读取配置文件\",{\"1\":{\"535\":1}}],[\"不再继续调⽤⽬标服务直接返回\",{\"1\":{\"456\":1}}],[\"不再受⽀持\",{\"1\":{\"448\":1}}],[\"不再尝试调⽤\",{\"1\":{\"448\":1}}],[\"不仅提供统⼀的路由⽅式\",{\"1\":{\"413\":1}}],[\"不如数据库连接\",{\"1\":{\"404\":1}}],[\"不存在则自动创建\",{\"1\":{\"589\":6}}],[\"不存在则返回\",{\"1\":{\"481\":2}}],[\"不存在并发问题\",{\"1\":{\"547\":1}}],[\"不存在线程不安全的情况\",{\"1\":{\"508\":1}}],[\"不存在使⽤默认9001端⼝\",{\"1\":{\"391\":1}}],[\"不存在为false\",{\"1\":{\"363\":1}}],[\"不存在\",{\"1\":{\"363\":2}}],[\"不存在区间内的元素都被删除\",{\"1\":{\"345\":1}}],[\"不能被增强的\",{\"1\":{\"540\":1}}],[\"不能为null\",{\"1\":{\"363\":1}}],[\"不能是任意绑定了\",{\"1\":{\"96\":1}}],[\"不管此列表中包含几个指定的元素都会返回\",{\"1\":{\"315\":1}}],[\"不管父接口中使用的注解有没有被\",{\"1\":{\"271\":1}}],[\"不包含任何数据元素的栈称为空栈\",{\"1\":{\"308\":1}}],[\"不要面向实现编程\",{\"1\":{\"629\":1}}],[\"不要使用两次不同公钥对私钥进行解密\",{\"1\":{\"622\":1}}],[\"不要写成router\",{\"1\":{\"205\":1}}],[\"不要让el所管理的视图是html或者body\",{\"1\":{\"153\":1}}],[\"不然\",{\"1\":{\"558\":1}}],[\"不然只能在前台运行\",{\"1\":{\"248\":1}}],[\"不然会出现奇怪的问题\",{\"1\":{\"244\":1}}],[\"不然容易错乱\",{\"1\":{\"205\":1}}],[\"不然不会进入死信队列\",{\"1\":{\"110\":1}}],[\"不同服务调⽤都发⽣在不同的线程池中\",{\"1\":{\"455\":1}}],[\"不同部署环境下配置的管理\",{\"1\":{\"404\":1}}],[\"不同的node都使用这个npm\",{\"1\":{\"263\":1}}],[\"不同的域中拆分出来的相同的单词是不同的term\",{\"1\":{\"29\":1}}],[\"不同\",{\"1\":{\"204\":1}}],[\"不会对有关系的类造成波及\",{\"1\":{\"631\":1}}],[\"不会触发\",{\"1\":{\"200\":1}}],[\"不会再请求服务器\",{\"1\":{\"199\":1}}],[\"不利于重用\",{\"1\":{\"627\":1}}],[\"不利于\",{\"1\":{\"199\":1}}],[\"不需要花费精力在驱动的加载\",{\"1\":{\"511\":1}}],[\"不需要引⼊所有的依赖\",{\"1\":{\"381\":1}}],[\"不需要引⼊其他的外部依赖\",{\"1\":{\"381\":1}}],[\"不需要返回值\",{\"1\":{\"190\":1}}],[\"不需要设置交换机\",{\"1\":{\"102\":2}}],[\"不是永久的\",{\"1\":{\"456\":1}}],[\"不是说soa是微服务的超集吗\",{\"1\":{\"448\":1}}],[\"不是\",{\"1\":{\"363\":1}}],[\"不是长整型\",{\"1\":{\"363\":1}}],[\"不是vue的插件\",{\"1\":{\"184\":1}}],[\"不是表达式\",{\"1\":{\"156\":1}}],[\"不推荐使用\",{\"1\":{\"184\":1}}],[\"不加\",{\"1\":{\"183\":1}}],[\"不加就是普通\",{\"1\":{\"76\":1}}],[\"不成立\",{\"1\":{\"156\":1}}],[\"不支持简单密码了\",{\"1\":{\"243\":1,\"256\":1}}],[\"不支持jsonp\",{\"1\":{\"184\":1}}],[\"不支持\",{\"1\":{\"150\":1}}],[\"不写延时的话会直接执行\",{\"1\":{\"146\":1}}],[\"不重回队列\",{\"1\":{\"110\":1}}],[\"不具备存储消息的能力\",{\"1\":{\"91\":1}}],[\"刚才自定义的查询方法\",{\"1\":{\"76\":1}}],[\"刚索\",{\"1\":{\"49\":1}}],[\"添加一个\",{\"1\":{\"659\":2}}],[\"添加一个hash类型的数据进行存储\",{\"1\":{\"363\":1}}],[\"添加请求配置\",{\"1\":{\"613\":1}}],[\"添加事务注解\",{\"0\":{\"552\":1}}],[\"添加摘要信息\",{\"1\":{\"471\":1}}],[\"添加以下内容\",{\"1\":{\"406\":1}}],[\"添加以下内容即可不再提示该警告\",{\"1\":{\"120\":1}}],[\"添加依赖\",{\"1\":{\"399\":1,\"406\":1,\"589\":1}}],[\"添加消息到末尾\",{\"1\":{\"356\":1}}],[\"添加指定元素到\",{\"1\":{\"354\":1}}],[\"添加地理位置的坐标\",{\"1\":{\"353\":1}}],[\"添加到该集合中的指定位置上\",{\"1\":{\"315\":1}}],[\"添加动态路由\",{\"1\":{\"225\":1}}],[\"添加动态参数\",{\"1\":{\"204\":1}}],[\"添加编辑路由\",{\"1\":{\"225\":1}}],[\"添加失败\",{\"1\":{\"224\":1}}],[\"添加成功之后\",{\"1\":{\"224\":1}}],[\"添加成功后重新拉取数据\",{\"1\":{\"188\":1}}],[\"添加人物信息\",{\"1\":{\"224\":1}}],[\"添加数据\",{\"1\":{\"224\":1}}],[\"添加的接口地址\",{\"1\":{\"224\":1}}],[\"添加点击事件和方法\",{\"1\":{\"224\":1}}],[\"添加功能的实现\",{\"1\":{\"224\":1}}],[\"添加hash\",{\"1\":{\"223\":2}}],[\"添加方法中调用新增接口\",{\"1\":{\"188\":1}}],[\"添加商品\",{\"0\":{\"188\":1},\"1\":{\"188\":1,\"504\":1}}],[\"添加\",{\"1\":{\"158\":1,\"185\":1,\"225\":1}}],[\"添加配置类\",{\"1\":{\"113\":1}}],[\"添加用户\",{\"0\":{\"82\":1}}],[\"添加聚合条件\",{\"1\":{\"77\":1}}],[\"添加索引和映射\",{\"1\":{\"76\":1}}],[\"添加view视图\",{\"1\":{\"20\":1}}],[\"案例优化\",{\"0\":{\"227\":1,\"228\":1,\"229\":1}}],[\"案例\",{\"0\":{\"74\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":1,\"397\":1,\"498\":1,\"619\":1,\"652\":1}}],[\"获取目标对象的\",{\"1\":{\"663\":1}}],[\"获取要被代理的对象\",{\"1\":{\"663\":1}}],[\"获取默认执行责任练\",{\"1\":{\"642\":1}}],[\"获取加密内容使用base64进行编码\",{\"1\":{\"622\":1}}],[\"获取公钥\",{\"1\":{\"622\":1}}],[\"获取私钥\",{\"1\":{\"622\":1}}],[\"获取密钥对\",{\"1\":{\"622\":1}}],[\"获取模板输入流\",{\"1\":{\"619\":1}}],[\"获取响应头\",{\"1\":{\"612\":1}}],[\"获取的\",{\"1\":{\"480\":1,\"481\":1}}],[\"获取的数据赋值给list列表\",{\"1\":{\"186\":1}}],[\"获取信号量\",{\"1\":{\"454\":1}}],[\"获取header\",{\"1\":{\"438\":1}}],[\"获取hash表中所有数据\",{\"1\":{\"327\":1}}],[\"获取hash值\",{\"1\":{\"201\":1}}],[\"获取集合指定位置的值\",{\"1\":{\"363\":1}}],[\"获取集合的成员数\",{\"1\":{\"346\":1}}],[\"获取指定区间的值\",{\"1\":{\"363\":1}}],[\"获取指定\",{\"1\":{\"363\":1}}],[\"获取指定key的值string\",{\"1\":{\"363\":1}}],[\"获取某个\",{\"1\":{\"363\":1}}],[\"获取某个key下所有的value\",{\"1\":{\"363\":1}}],[\"获取当前用户redis\",{\"1\":{\"480\":1}}],[\"获取当前key下所有的键值对\",{\"1\":{\"363\":1}}],[\"获取当前路由对象的动态参数\",{\"1\":{\"204\":1}}],[\"获取变量中值的长度\",{\"1\":{\"363\":1}}],[\"获取变量中的值\",{\"1\":{\"363\":1}}],[\"获取过期时间\",{\"1\":{\"363\":1}}],[\"获取为空\",{\"1\":{\"363\":1}}],[\"获取消息列表\",{\"1\":{\"356\":1}}],[\"获取流包含的元素数量\",{\"1\":{\"356\":1}}],[\"获取地理位置的坐标\",{\"1\":{\"353\":1}}],[\"获取有序集合的成员数\",{\"1\":{\"351\":1}}],[\"获取哈希表中字段的数量\",{\"1\":{\"349\":1}}],[\"获取哈希表中所有的值\",{\"1\":{\"349\":1}}],[\"获取哈希表中的所有字段\",{\"1\":{\"349\":1}}],[\"获取在哈希表中指定\",{\"1\":{\"349\":1}}],[\"获取存储在哈希表中指定字段的值\",{\"1\":{\"349\":1}}],[\"获取列表中的元素\",{\"0\":{\"342\":1}}],[\"获取key的长度\",{\"1\":{\"341\":1}}],[\"获取key的value值返回\",{\"1\":{\"337\":1}}],[\"获取key关联的value\",{\"1\":{\"339\":1}}],[\"获取命令\",{\"1\":{\"337\":1}}],[\"获取排序后所有的key\",{\"1\":{\"327\":1}}],[\"获取所有给定字段的值\",{\"1\":{\"349\":1}}],[\"获取所有给定的key的值\",{\"1\":{\"338\":1}}],[\"获取所有属性\",{\"1\":{\"303\":1}}],[\"获取所有的响应头\",{\"1\":{\"612\":1}}],[\"获取所有的\",{\"1\":{\"298\":1}}],[\"获取所有权限的属性\",{\"1\":{\"296\":1}}],[\"获取所有权限的方法\",{\"1\":{\"295\":1}}],[\"获取所有权限的构造器\",{\"1\":{\"294\":1}}],[\"获取它的\",{\"1\":{\"298\":1}}],[\"获取它的构造器\",{\"1\":{\"293\":1,\"294\":2}}],[\"获取属性\",{\"1\":{\"296\":1}}],[\"获取方法\",{\"1\":{\"295\":1}}],[\"获取方法是\",{\"1\":{\"266\":1}}],[\"获取并使用\",{\"1\":{\"294\":1}}],[\"获取并使用带参构造器\",{\"1\":{\"294\":1}}],[\"获取并使用带参构造器创建对象\",{\"0\":{\"294\":1}}],[\"获取并使用无参构造器创建对象\",{\"0\":{\"293\":1}}],[\"获取到所有的\",{\"1\":{\"298\":1}}],[\"获取到一个\",{\"1\":{\"298\":1}}],[\"获取到\",{\"1\":{\"293\":1,\"294\":2,\"295\":1,\"296\":1}}],[\"获取任意一个类的结构\",{\"1\":{\"288\":1}}],[\"获取从此socket发送的数据包的ip头中的流量类或服务类型\",{\"1\":{\"281\":1}}],[\"获取此\",{\"1\":{\"281\":2}}],[\"获取套接字绑定的本地地址\",{\"1\":{\"281\":1}}],[\"获取一组数据\",{\"1\":{\"266\":1}}],[\"获取一个\",{\"1\":{\"86\":1,\"89\":1,\"94\":1,\"97\":1,\"100\":1}}],[\"获取临时密码\",{\"1\":{\"243\":1}}],[\"获取动态参数id\",{\"1\":{\"226\":1}}],[\"获取数据并赋值给表单对象\",{\"1\":{\"225\":1}}],[\"获取数据赋值list列表\",{\"1\":{\"221\":1}}],[\"获取英雄数据\",{\"1\":{\"225\":1}}],[\"获取\",{\"0\":{\"291\":1},\"1\":{\"185\":1,\"295\":3,\"296\":2,\"303\":1,\"304\":1,\"363\":3,\"389\":1,\"520\":1}}],[\"获取dom的value值\",{\"1\":{\"179\":1}}],[\"获取dom\",{\"0\":{\"179\":1},\"1\":{\"179\":1}}],[\"获取文件大小\",{\"1\":{\"113\":1}}],[\"获取文件输入流\",{\"1\":{\"113\":1}}],[\"获取链接\",{\"1\":{\"85\":1,\"86\":1,\"87\":1,\"520\":1}}],[\"获取原始内容的⽬的是为了索引\",{\"1\":{\"29\":1}}],[\"获得文件后缀名\",{\"1\":{\"113\":1}}],[\"获得⼩于等于指定值的数据\",{\"1\":{\"73\":1}}],[\"获得指定范围的数据\",{\"1\":{\"73\":1}}],[\"⽰例\",{\"1\":{\"73\":1}}],[\"关系\",{\"1\":{\"511\":1,\"537\":1}}],[\"关键字\",{\"1\":{\"73\":1}}],[\"关键词\",{\"1\":{\"73\":1}}],[\"关闭链接\",{\"1\":{\"520\":1}}],[\"关闭状态\",{\"1\":{\"456\":1}}],[\"关闭\",{\"1\":{\"368\":1,\"382\":1}}],[\"关闭redis服务命令\",{\"1\":{\"332\":1}}],[\"关闭流\",{\"1\":{\"303\":1}}],[\"关闭此套接字\",{\"1\":{\"281\":1}}],[\"关闭nodejs版本控制\",{\"1\":{\"262\":1}}],[\"关闭窗口\",{\"1\":{\"146\":1}}],[\"关闭客户端\",{\"1\":{\"62\":1,\"63\":2}}],[\"关闭补全菜单\",{\"1\":{\"54\":1}}],[\"女护士\",{\"1\":{\"68\":1}}],[\"美丽的女护士\",{\"1\":{\"67\":1}}],[\"跪地女护士\",{\"1\":{\"76\":1}}],[\"跪地救人\",{\"1\":{\"76\":1}}],[\"跪地\",{\"1\":{\"66\":1,\"76\":4}}],[\"产品\",{\"1\":{\"637\":2}}],[\"产品高度\",{\"1\":{\"636\":1}}],[\"产品宽度\",{\"1\":{\"636\":1}}],[\"产品长度\",{\"1\":{\"636\":1}}],[\"产品目录索引\",{\"1\":{\"31\":1}}],[\"产生于\",{\"1\":{\"631\":1}}],[\"产生\",{\"1\":{\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1}}],[\"总和中找到\",{\"1\":{\"332\":1}}],[\"总文件上传大小\",{\"1\":{\"113\":1}}],[\"总数\",{\"1\":{\"77\":2}}],[\"总行数\",{\"1\":{\"65\":1,\"70\":1,\"71\":1}}],[\"总之\",{\"1\":{\"39\":1}}],[\"重启也会导致服务暂时不可⽤\",{\"1\":{\"404\":1}}],[\"重启服务\",{\"1\":{\"234\":1}}],[\"重试机制等能够进⾏组合使⽤\",{\"1\":{\"381\":1}}],[\"重试机制\",{\"1\":{\"381\":1}}],[\"重复的键会覆盖\",{\"1\":{\"363\":1}}],[\"重复代码提取\",{\"0\":{\"65\":1}}],[\"重写相关⽅法\",{\"1\":{\"437\":1}}],[\"重写\",{\"1\":{\"270\":1}}],[\"重定向\",{\"0\":{\"206\":1},\"1\":{\"427\":1}}],[\"重新设计它们之间的关系\",{\"1\":{\"628\":1}}],[\"重新拉取数据\",{\"1\":{\"188\":1}}],[\"重新调用拉取数据\",{\"1\":{\"187\":1}}],[\"重新组织\",{\"1\":{\"28\":1}}],[\"重要\",{\"0\":{\"156\":1}}],[\"重点\",{\"1\":{\"146\":2}}],[\"重回队列\",{\"1\":{\"107\":1}}],[\"把一个臃肿的接口变为两个独立的接口所依赖的原则就是接口隔离原则\",{\"1\":{\"630\":1}}],[\"把展现细节的任务交给它们的实现类去完成\",{\"1\":{\"629\":1}}],[\"把最后一个参数值放到指定集合的第一个出现中间参数的前面\",{\"1\":{\"363\":1}}],[\"把集合中的元素\",{\"1\":{\"314\":1}}],[\"把给定的对象在当前集合中删除\",{\"1\":{\"314\":1}}],[\"把给定的对象添加到当前集合中\",{\"1\":{\"314\":1}}],[\"把原数组元素根据索引\",{\"1\":{\"310\":1}}],[\"把允许插入和删除的一端称为栈顶\",{\"1\":{\"308\":1}}],[\"把以前用到axios的地方\",{\"1\":{\"227\":1}}],[\"把修改的数据带上\",{\"1\":{\"226\":1}}],[\"把id传进去\",{\"1\":{\"222\":1}}],[\"把路由业务抽取到router\",{\"1\":{\"220\":1}}],[\"把router实例挂载到vue实例上\",{\"1\":{\"203\":2}}],[\"把返回值赋值给list列表\",{\"1\":{\"189\":1}}],[\"把消息路由到不同的队列\",{\"1\":{\"99\":1}}],[\"把消息交给符合routing\",{\"1\":{\"91\":1}}],[\"把消息交给符合指定routing\",{\"1\":{\"91\":1}}],[\"把队列绑定交换机\",{\"1\":{\"94\":1,\"97\":1}}],[\"把amqp的基本组件划分到一个虚拟的分组中\",{\"1\":{\"80\":1}}],[\"把article对象转换成json格式的字符串\",{\"1\":{\"63\":1}}],[\"把查询结果直接转为聚合page\",{\"1\":{\"77\":1}}],[\"把⽂档写⼊索引库\",{\"1\":{\"76\":1}}],[\"把文档对象添加到索引库\",{\"1\":{\"62\":1,\"63\":1}}],[\"江⻄变质营养餐事件已致24⼈就医\",{\"1\":{\"63\":1}}],[\"+ex\",{\"1\":{\"545\":1}}],[\"+result\",{\"1\":{\"545\":1}}],[\"+massage\",{\"1\":{\"505\":1}}],[\"+username\",{\"1\":{\"266\":1}}],[\"+uage\",{\"1\":{\"266\":1}}],[\"+创建项目时\",{\"1\":{\"213\":1}}],[\"+1\",{\"1\":{\"135\":1}}],[\"+inf\",{\"1\":{\"351\":1}}],[\"+item\",{\"1\":{\"89\":1,\"94\":1,\"225\":1}}],[\"+id\",{\"1\":{\"24\":4,\"25\":4}}],[\"+avg\",{\"1\":{\"77\":1}}],[\"+\",{\"1\":{\"63\":3,\"65\":1,\"70\":1,\"71\":3,\"73\":3,\"76\":2,\"77\":6,\"86\":1,\"89\":1,\"94\":1,\"105\":2,\"156\":5,\"176\":2,\"185\":1,\"187\":1,\"189\":1,\"211\":4,\"222\":1,\"225\":1,\"226\":1,\"244\":4,\"303\":1,\"304\":1,\"326\":1,\"327\":9,\"356\":2,\"382\":1,\"384\":1,\"386\":1,\"389\":5,\"392\":2,\"393\":2,\"410\":1,\"437\":4,\"438\":3,\"443\":2,\"444\":1,\"475\":1,\"480\":1,\"491\":2,\"541\":1,\"545\":4,\"619\":1,\"622\":5}}],[\"⼥护⼠路遇昏迷男⼦跪地抢救\",{\"1\":{\"63\":1,\"76\":1}}],[\"测试代理的结果\",{\"1\":{\"660\":1}}],[\"测试是否可行\",{\"0\":{\"656\":1}}],[\"测试是否启用了\",{\"1\":{\"281\":4}}],[\"测试用户名\",{\"1\":{\"619\":1}}],[\"测试生成\",{\"1\":{\"619\":1}}],[\"测试下是否成功\",{\"0\":{\"564\":1}}],[\"测试依赖\",{\"1\":{\"517\":1,\"589\":2,\"590\":2}}],[\"测试返回⻚⾯代码\",{\"1\":{\"424\":1}}],[\"测试环境版本\",{\"1\":{\"405\":1}}],[\"测试性能\",{\"0\":{\"333\":1}}],[\"测试时请不要使用该参数\",{\"1\":{\"327\":1}}],[\"测试部门3\",{\"1\":{\"128\":2,\"139\":1,\"140\":1}}],[\"测试部门2\",{\"1\":{\"128\":4,\"139\":2,\"140\":2}}],[\"测试顶级部门\",{\"1\":{\"128\":8,\"139\":4,\"140\":4}}],[\"测试消息可靠性投递\",{\"1\":{\"105\":1,\"106\":1}}],[\"测试\",{\"1\":{\"63\":2,\"71\":1,\"333\":1,\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"590\":1}}],[\"客机在某某机场被隔离\",{\"1\":{\"62\":1}}],[\"客户端不应该被迫依赖于它不使用的方法\",{\"1\":{\"630\":1}}],[\"客户端的请求先经过pre类型的\",{\"1\":{\"436\":1}}],[\"客户端向\",{\"1\":{\"413\":1}}],[\"客户端接收响应\",{\"1\":{\"396\":1}}],[\"客户端接收到了\",{\"1\":{\"284\":1}}],[\"客户端发送⼀个请求\",{\"1\":{\"396\":1}}],[\"客户端发送请求至服务器\",{\"1\":{\"265\":1}}],[\"客户端与服务器程序\",{\"1\":{\"276\":1}}],[\"客户端上传的文件最终存储在\",{\"1\":{\"112\":1}}],[\"客户端请求\",{\"1\":{\"112\":1}}],[\"客户端\",{\"0\":{\"284\":1},\"1\":{\"59\":1,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"373\":1}}],[\"客户数据索引\",{\"1\":{\"31\":1}}],[\"北方入秋速度明显加快\",{\"1\":{\"62\":1}}],[\"北京东城区\",{\"1\":{\"57\":1}}],[\"北京\",{\"1\":{\"57\":1}}],[\"给整体项目带来无法预料的风险\",{\"1\":{\"630\":1}}],[\"给指定\",{\"1\":{\"363\":1}}],[\"给一个key设置所有相应的属性\",{\"1\":{\"363\":1}}],[\"给一个指定的\",{\"1\":{\"363\":1}}],[\"给key设置一个新的value值并将旧值返回回去\",{\"1\":{\"337\":1}}],[\"给排序的列表添加当前的为一值\",{\"1\":{\"327\":1}}],[\"给排行榜添加一个人员内部自动判断是否可以存在于排行榜中\",{\"1\":{\"327\":1}}],[\"给定一个过期时间\",{\"1\":{\"327\":1}}],[\"给redis中push一条排行榜数据\",{\"1\":{\"327\":1}}],[\"给hashset中存放自定义类型元素时\",{\"1\":{\"318\":1}}],[\"给默认值后\",{\"1\":{\"272\":1}}],[\"给axios中的baseurl设置常态值\",{\"1\":{\"228\":1}}],[\"给\",{\"1\":{\"225\":1}}],[\"给添加确定注册一个事件\",{\"1\":{\"224\":1}}],[\"给确定按钮\",{\"1\":{\"224\":1}}],[\"给列表组件的添加按钮\",{\"1\":{\"223\":2}}],[\"给元素定义ref属性\",{\"1\":{\"179\":1}}],[\"给当前消费者绑定消费队列和交换机\",{\"1\":{\"95\":2,\"98\":2,\"101\":2}}],[\"给某个索引添加文档\",{\"1\":{\"76\":1}}],[\"给索引创建\",{\"1\":{\"60\":1}}],[\"给客户端创建连接节点\",{\"1\":{\"59\":1,\"60\":1,\"62\":1,\"63\":1,\"65\":1}}],[\"your\",{\"1\":{\"631\":1}}],[\"yum\",{\"1\":{\"232\":1,\"233\":1,\"236\":1,\"238\":1,\"239\":1,\"246\":2,\"332\":1}}],[\"yyyy\",{\"1\":{\"178\":1,\"466\":2}}],[\"y\",{\"1\":{\"177\":2,\"233\":1,\"244\":4,\"246\":1}}],[\"yml的配置\",{\"0\":{\"406\":1}}],[\"yml⽂件\",{\"1\":{\"404\":1}}],[\"yml中添加以下内容\",{\"1\":{\"399\":1}}],[\"yml\",{\"1\":{\"367\":1,\"368\":1,\"369\":1,\"375\":1,\"378\":1,\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"391\":1,\"400\":1,\"405\":6,\"406\":1,\"407\":1,\"409\":1,\"410\":1,\"445\":1,\"504\":1,\"505\":1}}],[\"yml配置⽂件\",{\"1\":{\"405\":1}}],[\"yml配置\",{\"1\":{\"113\":1}}],[\"yml如下\",{\"1\":{\"74\":1}}],[\"yes\",{\"1\":{\"60\":3,\"332\":1}}],[\"ysepan\",{\"1\":{\"13\":1}}],[\"要代理的对象\",{\"1\":{\"664\":1}}],[\"要为各个类建立它们需要的专用接口\",{\"1\":{\"630\":1}}],[\"要面向接口编程\",{\"1\":{\"629\":1}}],[\"要比父类更严格\",{\"1\":{\"628\":1}}],[\"要比父类方法的输入参数更宽松\",{\"1\":{\"628\":1}}],[\"要与代码中调用者\",{\"1\":{\"537\":1}}],[\"要引用的标签\",{\"1\":{\"524\":1}}],[\"要遍历的集合\",{\"1\":{\"524\":1}}],[\"要求\",{\"1\":{\"523\":1}}],[\"要求是每个元素的唯一值\",{\"1\":{\"163\":1}}],[\"要么有\",{\"1\":{\"537\":1}}],[\"要么缓冲区等待\",{\"1\":{\"460\":1}}],[\"要么丢弃\",{\"1\":{\"460\":1}}],[\"要么一起失败\",{\"1\":{\"338\":1}}],[\"要么一起成功\",{\"1\":{\"338\":1}}],[\"要能通过链路追踪\",{\"1\":{\"448\":1}}],[\"要被增强的对象\",{\"1\":{\"540\":1}}],[\"要被调用的服务\",{\"1\":{\"392\":1}}],[\"要被过期的名称\",{\"1\":{\"336\":1}}],[\"要取的key值\",{\"1\":{\"363\":1}}],[\"要弹出的key\",{\"1\":{\"363\":1}}],[\"要将它前面的元素取出后才能去除该元素\",{\"1\":{\"309\":1}}],[\"要将后面的元素取出后才能取出该元素\",{\"1\":{\"308\":1}}],[\"要返回对象的\",{\"1\":{\"304\":1}}],[\"要填充的字符按\",{\"1\":{\"303\":1,\"304\":1}}],[\"要执行的\",{\"1\":{\"303\":1,\"304\":1}}],[\"要添加在\",{\"1\":{\"263\":1}}],[\"要跳转回列表页\",{\"1\":{\"224\":1}}],[\"要查询的字段名\",{\"1\":{\"134\":1}}],[\"要查询的表\",{\"1\":{\"128\":6,\"137\":2,\"138\":2,\"139\":2,\"140\":2}}],[\"要查询的\",{\"1\":{\"75\":5}}],[\"要创建的索引名\",{\"1\":{\"59\":1}}],[\"要是\",{\"1\":{\"55\":1}}],[\"需修改配置文件\",{\"1\":{\"332\":1}}],[\"需要导入jar\",{\"1\":{\"665\":1}}],[\"需要导入依赖\",{\"1\":{\"372\":1}}],[\"需要从三个方面进行检查\",{\"1\":{\"634\":1}}],[\"需要检查一个产品的是否合格\",{\"1\":{\"634\":1}}],[\"需要校验的class\",{\"1\":{\"599\":1}}],[\"需要校验的行头是第几行\",{\"1\":{\"599\":1}}],[\"需要通知\",{\"1\":{\"545\":1}}],[\"需要通过连接的节点\",{\"1\":{\"311\":1}}],[\"需要快速失败并返回给客户端\",{\"1\":{\"439\":1}}],[\"需要实现gatewayfilter\",{\"1\":{\"438\":1}}],[\"需要⼿动修改配置⽂件并且重启应⽤才能⽣效\",{\"1\":{\"404\":1}}],[\"需要调⽤多个微服务\",{\"1\":{\"396\":1}}],[\"需要在方法上添加\",{\"1\":{\"576\":1}}],[\"需要在此插入\",{\"1\":{\"561\":1}}],[\"需要在引用属性上联合使用注解\",{\"1\":{\"538\":1}}],[\"需要在引用属性上使用注解\",{\"1\":{\"538\":1}}],[\"需要在属性上使用注解\",{\"1\":{\"538\":1}}],[\"需要在springboot启动类上添加\",{\"1\":{\"497\":1}}],[\"需要在\",{\"1\":{\"372\":1}}],[\"需要再后面拼接本场考试是谁的数据也就是\",{\"1\":{\"327\":1}}],[\"需要重写对象中的hashcode和equals方法\",{\"1\":{\"318\":1}}],[\"需要创建一个新数组\",{\"1\":{\"310\":1}}],[\"需要新建一个新数组\",{\"1\":{\"310\":1}}],[\"需要\",{\"1\":{\"294\":1}}],[\"需要安装\",{\"1\":{\"246\":1}}],[\"需要使用sqlsessionfactorybuilder对象的build\",{\"1\":{\"514\":1}}],[\"需要使用\",{\"1\":{\"327\":1,\"578\":1}}],[\"需要使用简单密码时需要另做修改\",{\"1\":{\"243\":1,\"256\":1}}],[\"需要使用下面命令进行升级\",{\"1\":{\"233\":1}}],[\"需要用到动态路由这一概念\",{\"1\":{\"204\":1}}],[\"需要对普通\",{\"1\":{\"181\":1}}],[\"需要改变的\",{\"1\":{\"165\":1}}],[\"需要提供一个属性\",{\"1\":{\"163\":1}}],[\"需要放开的接口请求\",{\"1\":{\"122\":1}}],[\"需要设置为\",{\"1\":{\"109\":1}}],[\"需要设置类型为topic的交换机\",{\"1\":{\"102\":1}}],[\"需要设置类型为direct的交换机\",{\"1\":{\"102\":1}}],[\"需要设置类型为fanout的交换机\",{\"1\":{\"102\":1}}],[\"需要传入\",{\"1\":{\"59\":1,\"497\":1}}],[\"需额外引入\",{\"1\":{\"20\":1}}],[\"名指定\",{\"1\":{\"504\":1}}],[\"名为\",{\"1\":{\"419\":1}}],[\"名词解释\",{\"1\":{\"308\":1}}],[\"名称\",{\"1\":{\"105\":1,\"106\":1,\"179\":1}}],[\"名创建一个设置\",{\"1\":{\"59\":1}}],[\"名字为\",{\"1\":{\"589\":1}}],[\"名字\",{\"1\":{\"31\":1}}],[\"=null\",{\"1\":{\"545\":1}}],[\"=new\",{\"1\":{\"155\":1}}],[\"=>\",{\"1\":{\"171\":1,\"185\":2,\"186\":1,\"187\":1,\"188\":1,\"189\":2,\"196\":4,\"211\":1,\"212\":2,\"219\":1,\"221\":1,\"222\":1,\"224\":1,\"225\":1,\"226\":1}}],[\"==>\",{\"1\":{\"499\":5}}],[\"===\",{\"1\":{\"156\":2,\"222\":1,\"224\":1,\"226\":1}}],[\"==\",{\"1\":{\"156\":1,\"188\":1,\"327\":1,\"363\":5,\"492\":2,\"520\":1,\"599\":4,\"637\":1,\"646\":1}}],[\"=\",{\"1\":{\"59\":2,\"60\":3,\"62\":3,\"63\":9,\"65\":7,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":6,\"71\":7,\"74\":10,\"76\":4,\"77\":26,\"84\":8,\"86\":6,\"87\":5,\"89\":5,\"90\":6,\"94\":7,\"95\":6,\"97\":7,\"98\":6,\"100\":8,\"101\":6,\"107\":2,\"109\":1,\"110\":2,\"113\":13,\"122\":1,\"128\":8,\"134\":2,\"137\":2,\"138\":2,\"139\":4,\"140\":2,\"146\":1,\"154\":2,\"156\":1,\"171\":1,\"186\":1,\"188\":1,\"189\":1,\"203\":4,\"204\":1,\"213\":1,\"219\":1,\"221\":1,\"225\":2,\"226\":1,\"227\":1,\"228\":1,\"243\":1,\"252\":3,\"263\":1,\"266\":13,\"283\":9,\"284\":4,\"290\":3,\"291\":4,\"293\":3,\"294\":6,\"295\":5,\"296\":5,\"298\":4,\"303\":21,\"304\":18,\"326\":1,\"327\":26,\"362\":2,\"363\":14,\"373\":2,\"376\":8,\"382\":5,\"384\":5,\"385\":2,\"386\":4,\"389\":4,\"392\":3,\"393\":1,\"410\":1,\"437\":1,\"438\":2,\"441\":1,\"444\":1,\"454\":1,\"466\":11,\"467\":3,\"471\":1,\"472\":1,\"475\":1,\"480\":8,\"481\":4,\"482\":1,\"486\":2,\"487\":3,\"491\":2,\"492\":3,\"493\":1,\"498\":1,\"504\":2,\"505\":2,\"520\":8,\"521\":3,\"522\":3,\"532\":2,\"534\":2,\"535\":1,\"545\":8,\"552\":2,\"561\":1,\"564\":1,\"589\":1,\"590\":2,\"599\":21,\"600\":3,\"605\":7,\"606\":7,\"612\":4,\"613\":5,\"614\":3,\"618\":2,\"619\":13,\"622\":44,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"640\":1,\"641\":4,\"642\":3,\"646\":2,\"647\":1,\"655\":3,\"660\":5,\"663\":5,\"664\":3,\"665\":3}}],[\"6<\",{\"1\":{\"517\":1,\"558\":2}}],[\"6所示\",{\"1\":{\"408\":1,\"461\":1}}],[\"6379\",{\"1\":{\"332\":1,\"333\":1}}],[\"64\",{\"1\":{\"233\":2,\"242\":4}}],[\"60000\",{\"1\":{\"382\":2}}],[\"60000d\",{\"1\":{\"77\":1}}],[\"60\",{\"1\":{\"113\":2}}],[\"6model\",{\"1\":{\"80\":1}}],[\"6l\",{\"1\":{\"77\":1}}],[\"6\",{\"0\":{\"232\":1},\"1\":{\"58\":2,\"84\":1,\"113\":1,\"123\":1,\"146\":1,\"219\":1,\"221\":1,\"224\":1,\"233\":2,\"234\":1,\"243\":1,\"248\":5,\"606\":7,\"619\":2,\"631\":2}}],[\"65\",{\"1\":{\"45\":1,\"59\":1,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"74\":1,\"84\":1,\"105\":1,\"107\":1,\"504\":1,\"505\":1,\"589\":1,\"590\":1}}],[\"操作\",{\"0\":{\"58\":1},\"1\":{\"181\":1,\"211\":1}}],[\"⾄少有⼀个查询条件匹配\",{\"1\":{\"57\":1}}],[\"⾄于⼀个分⽚怎样分布\",{\"1\":{\"39\":1}}],[\"范围查询\",{\"1\":{\"57\":1}}],[\"李\",{\"1\":{\"57\":1}}],[\"李老六来自四川成都\",{\"1\":{\"57\":1}}],[\"李老六\",{\"1\":{\"57\":1}}],[\"李四\",{\"1\":{\"57\":1}}],[\"杭州\",{\"1\":{\"57\":3}}],[\"王老五来自杭州某乡\",{\"1\":{\"57\":2}}],[\"王老五\",{\"1\":{\"57\":2}}],[\"王一来自陕西东部\",{\"1\":{\"57\":1}}],[\"王一\",{\"1\":{\"57\":1}}],[\"黄河\",{\"1\":{\"57\":1}}],[\"张三来自黄河流域\",{\"1\":{\"57\":1}}],[\"张三\",{\"1\":{\"57\":1,\"294\":2,\"296\":1}}],[\"陕西\",{\"1\":{\"57\":1}}],[\"多数人知晓的\",{\"1\":{\"625\":1}}],[\"多于一个\",{\"1\":{\"537\":1}}],[\"多少秒后过期\",{\"1\":{\"336\":1}}],[\"多次读写都是在一个cpu上的\",{\"1\":{\"334\":1}}],[\"多样的数据类型\",{\"1\":{\"331\":1}}],[\"多线程的上下文切换本身就是耗时操作\",{\"1\":{\"334\":1}}],[\"多线程的客户端与服务器之间的交互\",{\"0\":{\"282\":1}}],[\"多线程\",{\"1\":{\"334\":1}}],[\"多线程启动方法\",{\"1\":{\"283\":1}}],[\"多了一个exchange角色\",{\"1\":{\"91\":1}}],[\"多条结果\",{\"1\":{\"75\":3}}],[\"多名官员被调查\",{\"1\":{\"63\":1}}],[\"多地降温明显\",{\"1\":{\"62\":1}}],[\"多个单词\",{\"1\":{\"589\":1}}],[\"多个单词之间以\",{\"1\":{\"99\":1}}],[\"多个任意字符\",{\"1\":{\"541\":1}}],[\"多个线程操作的话是不安全的\",{\"1\":{\"508\":1}}],[\"多个元素数组\",{\"1\":{\"363\":2}}],[\"多个\",{\"1\":{\"363\":1,\"418\":1}}],[\"多个结点之间\",{\"1\":{\"311\":1}}],[\"多个过滤器用\",{\"1\":{\"177\":1}}],[\"多个消费者\",{\"1\":{\"102\":1}}],[\"多个消费者示例\",{\"0\":{\"90\":1}}],[\"多个消费者同时消费时\",{\"1\":{\"88\":1}}],[\"多个查询条件的相反匹配\",{\"1\":{\"57\":1}}],[\"多个查询条件的完全匹配\",{\"1\":{\"57\":1}}],[\"多个词条查询\",{\"1\":{\"57\":1}}],[\"多添加几条\",{\"1\":{\"57\":1}}],[\"多平台文本编辑器\",{\"1\":{\"7\":1}}],[\"多平台\",{\"1\":{\"7\":2}}],[\"域名以及端⼝号与当前域⼀致\",{\"1\":{\"443\":1}}],[\"域名\",{\"1\":{\"443\":1}}],[\"域\",{\"1\":{\"57\":1}}],[\"域中存储内容\",{\"1\":{\"29\":1}}],[\"新添加的令牌被丢弃或拒绝\",{\"1\":{\"460\":1}}],[\"新的内容不会⾃动刷新过来\",{\"1\":{\"408\":1}}],[\"新的线程的阻塞时间\",{\"1\":{\"384\":1}}],[\"新成员会从头部进行插入\",{\"1\":{\"351\":1}}],[\"新建此\",{\"1\":{\"368\":1,\"405\":1,\"445\":1}}],[\"新建add\",{\"1\":{\"223\":1}}],[\"新建vue文件\",{\"1\":{\"218\":1}}],[\"新增功能完善\",{\"0\":{\"224\":1}}],[\"新增\",{\"1\":{\"210\":1}}],[\"新增鞋子\",{\"1\":{\"97\":2,\"100\":1}}],[\"新增文档数据\",{\"1\":{\"57\":1}}],[\"新增一个索引\",{\"1\":{\"57\":1}}],[\"新版本的ikanalyzer3\",{\"1\":{\"51\":1}}],[\"结束时间点增加⼀个时间点\",{\"1\":{\"462\":1}}],[\"结束区间\",{\"1\":{\"363\":1}}],[\"结束值\",{\"1\":{\"356\":2}}],[\"结束删除之前备份数据\",{\"1\":{\"244\":1}}],[\"结果缓存\",{\"1\":{\"381\":1}}],[\"结果集取出后以\",{\"1\":{\"304\":1}}],[\"结果图如下\",{\"1\":{\"57\":2}}],[\"结构型模式\",{\"0\":{\"686\":1}}],[\"结构\",{\"1\":{\"215\":1,\"354\":1}}],[\"结合词典分词和⽂法分析算法的中⽂分词组件\",{\"1\":{\"51\":1}}],[\"选用的事务\",{\"1\":{\"523\":1}}],[\"选择一个版本进行使用\",{\"1\":{\"261\":1}}],[\"选择模式\",{\"1\":{\"213\":1}}],[\"选择emptyactivity\",{\"1\":{\"17\":1}}],[\"选填\",{\"1\":{\"213\":1}}],[\"选项中声明初始值\",{\"1\":{\"170\":1}}],[\"选中项⾃动补全\",{\"1\":{\"54\":1}}],[\"提高了模块的相对独立性\",{\"1\":{\"631\":1}}],[\"提高了消费效率\",{\"1\":{\"88\":1}}],[\"提高模块的相对独立性\",{\"1\":{\"631\":1}}],[\"提高内聚\",{\"1\":{\"630\":1}}],[\"提高系统的灵活性和可维护性\",{\"1\":{\"630\":1}}],[\"提高系统的可维护性\",{\"1\":{\"627\":1}}],[\"提高类的可读性\",{\"1\":{\"627\":1}}],[\"提高其内聚性\",{\"1\":{\"627\":1}}],[\"提出\",{\"1\":{\"626\":1,\"631\":1}}],[\"提交事务\",{\"1\":{\"660\":2,\"664\":1}}],[\"提交内容不能为空\",{\"1\":{\"226\":1}}],[\"提交功能\",{\"0\":{\"226\":1}}],[\"提交信息不能为空\",{\"1\":{\"224\":1}}],[\"提交请求\",{\"1\":{\"54\":1}}],[\"提取到类上作为一级请求使用\",{\"1\":{\"579\":1}}],[\"提取公共字段\",{\"0\":{\"466\":1}}],[\"提取公共组件\",{\"0\":{\"218\":1}}],[\"提取路由模块\",{\"0\":{\"220\":1}}],[\"提取为一个公共方法方便重用\",{\"1\":{\"86\":1,\"87\":1}}],[\"提示的文字\",{\"1\":{\"146\":3}}],[\"提供代理对象\",{\"1\":{\"665\":1}}],[\"提供目标对象的子类对象\",{\"1\":{\"665\":1}}],[\"提供\",{\"1\":{\"530\":1}}],[\"提供框架的基本组成部分\",{\"1\":{\"530\":1}}],[\"提供面向切面编程\",{\"1\":{\"529\":1}}],[\"提供的持久层框架包括\",{\"1\":{\"511\":1}}],[\"提供服务的地址\",{\"1\":{\"368\":1}}],[\"提供服务时\",{\"1\":{\"80\":1}}],[\"提供了不同的映射器实现不同的映射方式\",{\"1\":{\"570\":1}}],[\"提供了对第三方集成到\",{\"1\":{\"530\":1}}],[\"提供了很多首尾操作的方法\",{\"1\":{\"316\":1}}],[\"提供了\",{\"1\":{\"210\":1,\"545\":1}}],[\"提供了⾼可⽤性\",{\"1\":{\"39\":1}}],[\"提供文件上传服务\",{\"1\":{\"112\":1}}],[\"⾃定义过滤器\",{\"0\":{\"436\":1}}],[\"⾃动重试\",{\"1\":{\"381\":1}}],[\"⾃动缩进\",{\"1\":{\"54\":1}}],[\"⾃我保护模式\",{\"1\":{\"368\":1}}],[\"⾃⾝带有分布式协调管理功能\",{\"1\":{\"29\":1}}],[\"快速释放资源\",{\"1\":{\"456\":1}}],[\"快速生成swagger注释\",{\"1\":{\"8\":1}}],[\"快捷键\",{\"1\":{\"54\":1}}],[\"查找叶子元素最少和最多次数不多于二倍\",{\"1\":{\"312\":1}}],[\"查找元素慢\",{\"1\":{\"311\":1}}],[\"查找元素快\",{\"1\":{\"310\":1}}],[\"查看流和消费者组的相关信息\",{\"1\":{\"357\":1}}],[\"查看哈希表\",{\"1\":{\"349\":1}}],[\"查看key的长度\",{\"1\":{\"337\":1}}],[\"查看key是否存在的命令\",{\"1\":{\"336\":1}}],[\"查看key所存储的类型\",{\"1\":{\"336\":1}}],[\"查看key还有多长时间过期\",{\"1\":{\"336\":1}}],[\"查看过期时间命令\",{\"1\":{\"336\":1}}],[\"查看库内所有的key\",{\"1\":{\"336\":1}}],[\"查看库数据大小命令\",{\"1\":{\"334\":1}}],[\"查看数据库现在有多少key\",{\"1\":{\"336\":1}}],[\"查看所有的key命令\",{\"1\":{\"334\":1}}],[\"查看redis进程是否开启命令\",{\"1\":{\"332\":1}}],[\"查看当前的版本\",{\"1\":{\"262\":1}}],[\"查看当前系统的位数和当前nodejs的位数\",{\"1\":{\"262\":1}}],[\"查看和设置代理\",{\"1\":{\"262\":1}}],[\"查看已经安装的版本\",{\"1\":{\"262\":2}}],[\"查看已安装的node版本\",{\"1\":{\"261\":1}}],[\"查看网络可以安装的版本\",{\"1\":{\"261\":1,\"262\":1}}],[\"查看nvm版本号\",{\"1\":{\"261\":1}}],[\"查看服务是否关闭\",{\"1\":{\"248\":1}}],[\"查看端口是否被占用\",{\"1\":{\"248\":1}}],[\"查看是否存在安装包\",{\"1\":{\"243\":1}}],[\"查看与卸载原有的包\",{\"1\":{\"243\":1}}],[\"查看脚手架版本号\",{\"1\":{\"212\":1}}],[\"查看版本\",{\"1\":{\"212\":1}}],[\"查看\",{\"1\":{\"54\":1}}],[\"查询序列最大值\",{\"1\":{\"135\":1}}],[\"查询条件的构建器\",{\"1\":{\"77\":1}}],[\"查询结果集\",{\"1\":{\"303\":1}}],[\"查询结果\",{\"1\":{\"75\":3,\"303\":2,\"304\":2}}],[\"查询结果高亮代码实现\",{\"0\":{\"71\":1}}],[\"查询\",{\"0\":{\"69\":1},\"1\":{\"57\":7}}],[\"查询所有表中是否存在某个字段\",{\"0\":{\"134\":1}}],[\"查询所有文档\",{\"1\":{\"76\":1}}],[\"查询所有\",{\"1\":{\"57\":1}}],[\"查询所有数据\",{\"1\":{\"57\":1}}],[\"查询所有索引\",{\"1\":{\"57\":1}}],[\"查询⽂档\",{\"0\":{\"49\":1,\"50\":1}}],[\"查询文档操作\",{\"0\":{\"64\":1}}],[\"查询文档title的请求\",{\"1\":{\"53\":1}}],[\"查询文档\",{\"0\":{\"48\":1},\"1\":{\"76\":1}}],[\"设计复杂化\",{\"1\":{\"630\":1}}],[\"设计模式之代理模式\",{\"0\":{\"659\":1}}],[\"设计模式有六大原则\",{\"1\":{\"625\":1}}],[\"设计模式\",{\"0\":{\"625\":1,\"684\":1},\"1\":{\"625\":1},\"2\":{\"632\":1,\"633\":1,\"643\":1,\"644\":1,\"648\":1,\"649\":1,\"657\":1,\"658\":1,\"666\":1,\"667\":1}}],[\"设计⽤于和\",{\"1\":{\"54\":1}}],[\"设定样式\",{\"1\":{\"209\":1}}],[\"设置下一级处理器\",{\"1\":{\"637\":1}}],[\"设置请求头\",{\"1\":{\"613\":2}}],[\"设置请求头信息\",{\"1\":{\"434\":1}}],[\"设置请求体\",{\"1\":{\"613\":1}}],[\"设置请求参数\",{\"1\":{\"613\":1}}],[\"设置请求方式\",{\"1\":{\"613\":1}}],[\"设置标题\",{\"1\":{\"471\":1}}],[\"设置true\",{\"1\":{\"382\":1,\"440\":1}}],[\"设置type\",{\"1\":{\"62\":1}}],[\"设置值为value\",{\"1\":{\"349\":1}}],[\"设置一个key\",{\"1\":{\"337\":1}}],[\"设置一张hash表数据\",{\"1\":{\"327\":1}}],[\"设置变量\",{\"1\":{\"327\":1}}],[\"设置数据\",{\"1\":{\"295\":1,\"296\":1}}],[\"设置数据即可\",{\"1\":{\"295\":1}}],[\"设置忽略检查\",{\"1\":{\"295\":1}}],[\"设置应用程序的客户端套接字实现工厂\",{\"1\":{\"281\":1}}],[\"设置此套接字的性能首选项\",{\"1\":{\"281\":1}}],[\"设置套接字选项的值\",{\"1\":{\"281\":1}}],[\"设置响应内容\",{\"1\":{\"266\":1}}],[\"设置cookie存值\",{\"1\":{\"266\":1}}],[\"设置字符集编码\",{\"1\":{\"266\":1}}],[\"设置和查看root路径\",{\"1\":{\"262\":1}}],[\"设置或者查看setting\",{\"1\":{\"262\":2}}],[\"设置mysql的安装目录\",{\"1\":{\"252\":1}}],[\"设置简单密码\",{\"1\":{\"243\":1}}],[\"设置配置文件\",{\"1\":{\"234\":1}}],[\"设置完常态值\",{\"1\":{\"228\":1}}],[\"设置共享的方法\",{\"1\":{\"228\":1}}],[\"设置baseurl\",{\"0\":{\"228\":1}}],[\"设置html中的内容\",{\"1\":{\"203\":2}}],[\"设置队列的长度限制\",{\"1\":{\"110\":1}}],[\"设置队列的过期时间\",{\"1\":{\"110\":1}}],[\"设置交换机处理失败的模式\",{\"1\":{\"106\":1}}],[\"设置为false则需要手动确认\",{\"1\":{\"85\":1,\"87\":1}}],[\"设置为true为表示消息接收到自动向mq回复接收到了\",{\"1\":{\"85\":1,\"87\":1}}],[\"设置权限\",{\"1\":{\"83\":1}}],[\"设置对象的属性\",{\"1\":{\"63\":1}}],[\"设置文档信息\",{\"1\":{\"62\":1,\"63\":1}}],[\"设置id\",{\"1\":{\"62\":1}}],[\"设置索引名称\",{\"1\":{\"62\":1}}],[\"设置\",{\"0\":{\"55\":1},\"1\":{\"44\":1,\"106\":2,\"109\":1,\"281\":2,\"537\":1}}],[\"设置方式与线性布局相似\",{\"1\":{\"26\":1}}],[\"成为朋友关系\",{\"1\":{\"631\":1}}],[\"成员的分数值\",{\"1\":{\"351\":1}}],[\"成员不能重复\",{\"1\":{\"346\":1}}],[\"成员\",{\"1\":{\"271\":1}}],[\"成员之⼀\",{\"1\":{\"54\":1}}],[\"成立\",{\"1\":{\"156\":1}}],[\"成功后返回上面的\",{\"1\":{\"389\":1}}],[\"成功以后\",{\"1\":{\"224\":1,\"226\":1}}],[\"成功返回状态码是201\",{\"1\":{\"224\":1}}],[\"成功接收消息\",{\"1\":{\"105\":1}}],[\"成功\",{\"1\":{\"105\":1,\"156\":1}}],[\"成功截图\",{\"1\":{\"46\":1}}],[\"成功示例图\",{\"1\":{\"17\":1}}],[\"钢索\",{\"1\":{\"53\":1}}],[\"基数统计\",{\"0\":{\"354\":1}}],[\"基本⼯作单元\",{\"1\":{\"396\":1}}],[\"基本术语\",{\"1\":{\"396\":1}}],[\"基本使用\",{\"0\":{\"190\":1}}],[\"基本用法就是给我们需要动画的标签外面嵌套\",{\"1\":{\"210\":1}}],[\"基本用法\",{\"1\":{\"185\":1,\"190\":1}}],[\"基本和\",{\"1\":{\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2}}],[\"基础路由配置⽅式\",{\"0\":{\"415\":1}}],[\"基础知识\",{\"0\":{\"334\":1}}],[\"基础用法\",{\"0\":{\"170\":1}}],[\"基础布局容易\",{\"1\":{\"20\":1}}],[\"基于java的持久层框架\",{\"1\":{\"511\":1}}],[\"基于java语⾔开发的轻量级的中⽂分词⼯具包\",{\"1\":{\"51\":1}}],[\"基于过滤器实现\",{\"1\":{\"436\":1}}],[\"基于代码的路由配置方式\",{\"0\":{\"416\":1}}],[\"基于\",{\"1\":{\"413\":1}}],[\"基于访问数量的滑动窗⼝统计了最近n次调⽤的返回结果\",{\"1\":{\"382\":1}}],[\"基于反射\",{\"1\":{\"298\":1}}],[\"基于浏览器的界⾯便于您快速创建和分享动态数据仪表板来追踪\",{\"1\":{\"54\":1}}],[\"基于restful\",{\"1\":{\"46\":1,\"53\":1}}],[\"删除listkey中最右侧的元素\",{\"1\":{\"363\":1}}],[\"删除成功的\",{\"1\":{\"363\":1}}],[\"删除指定\",{\"1\":{\"363\":1}}],[\"删除消费者组\",{\"1\":{\"357\":1}}],[\"删除消费者\",{\"1\":{\"357\":1}}],[\"删除消息\",{\"1\":{\"356\":1}}],[\"删除一个或多个哈希表字段\",{\"1\":{\"349\":1}}],[\"删除一个文档\",{\"1\":{\"76\":1}}],[\"删除命令\",{\"1\":{\"336\":1}}],[\"删除元素\",{\"1\":{\"311\":1}}],[\"删除功能\",{\"0\":{\"222\":1}}],[\"删除完成后重新调用获取数据\",{\"1\":{\"187\":1}}],[\"删除方法中调用删除接口\",{\"1\":{\"187\":1}}],[\"删除方法中传入id\",{\"1\":{\"187\":1}}],[\"删除商品\",{\"0\":{\"187\":1},\"1\":{\"504\":1}}],[\"删除\",{\"1\":{\"185\":1}}],[\"删除文件\",{\"1\":{\"113\":2}}],[\"删除鞋子\",{\"1\":{\"100\":1}}],[\"删除某个索引\",{\"1\":{\"57\":1}}],[\"删除⽂档document\",{\"0\":{\"47\":1}}],[\"删除索引\",{\"0\":{\"45\":1}}],[\"删除的时候都需要使用这个标识\",{\"1\":{\"31\":1}}],[\"格式化需要借助第三方插件\",{\"1\":{\"178\":1}}],[\"格式输出\",{\"1\":{\"52\":1}}],[\"格式的请求体\",{\"1\":{\"42\":1}}],[\"格式来表⽰\",{\"1\":{\"35\":1}}],[\"9411\",{\"1\":{\"399\":1,\"400\":1}}],[\"902\",{\"1\":{\"427\":1}}],[\"90\",{\"1\":{\"324\":7,\"367\":1}}],[\"9000\",{\"1\":{\"435\":2}}],[\"90000d\",{\"1\":{\"77\":1}}],[\"9006\",{\"1\":{\"405\":1,\"406\":3}}],[\"9001服务器上\",{\"1\":{\"419\":2}}],[\"9001\",{\"1\":{\"391\":1,\"417\":1,\"419\":1,\"425\":1,\"428\":2,\"429\":1,\"430\":1,\"431\":1,\"435\":2,\"438\":1,\"440\":1}}],[\"9005\",{\"1\":{\"367\":4,\"417\":1,\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":2,\"429\":1,\"430\":2,\"431\":2,\"440\":1,\"445\":1}}],[\"9003\",{\"1\":{\"367\":4}}],[\"9004\",{\"1\":{\"113\":1,\"367\":5,\"368\":2,\"369\":1,\"405\":1,\"417\":1,\"440\":1,\"445\":1}}],[\"9008\",{\"1\":{\"113\":1}}],[\"9l\",{\"1\":{\"77\":1}}],[\"9300\",{\"1\":{\"59\":1,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"74\":1,\"401\":2}}],[\"9\",{\"1\":{\"58\":1,\"123\":1,\"204\":1,\"219\":1,\"236\":3,\"354\":1,\"551\":1,\"558\":1}}],[\"9200\",{\"1\":{\"42\":1,\"43\":1,\"44\":2,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"52\":2,\"53\":3,\"401\":4}}],[\"9100\",{\"1\":{\"41\":1}}],[\"代码设计经验的总结\",{\"1\":{\"625\":1}}],[\"代码示例如下\",{\"1\":{\"410\":1}}],[\"代码如下\",{\"0\":{\"441\":1},\"1\":{\"405\":1,\"431\":1,\"437\":1,\"444\":1}}],[\"代码使用\",{\"1\":{\"382\":1}}],[\"代码规范配置文件\",{\"1\":{\"214\":1}}],[\"代码编译\",{\"1\":{\"211\":1}}],[\"代码实现\",{\"1\":{\"77\":1}}],[\"代表的就是\",{\"1\":{\"545\":1}}],[\"代表不传参数\",{\"1\":{\"504\":1}}],[\"代表在\",{\"1\":{\"499\":1}}],[\"代表在指定的范围内触发\",{\"1\":{\"499\":1}}],[\"代表在指定的秒数触发\",{\"1\":{\"499\":1}}],[\"代表5秒触发1次\",{\"1\":{\"499\":1}}],[\"代表从0秒钟开始\",{\"1\":{\"499\":1}}],[\"代表从25秒开始触发到45秒结束触发\",{\"1\":{\"499\":1}}],[\"代表触发步进\",{\"1\":{\"499\":1}}],[\"代表0秒\",{\"1\":{\"499\":1}}],[\"代表每隔1秒钟触发\",{\"1\":{\"499\":1}}],[\"代表为永久有效\",{\"1\":{\"363\":1}}],[\"代表正无穷\",{\"1\":{\"351\":1}}],[\"代表负无穷\",{\"1\":{\"351\":1}}],[\"代表要移除的个数\",{\"1\":{\"343\":2}}],[\"代表它的\",{\"1\":{\"215\":1}}],[\"代表其\",{\"1\":{\"192\":1}}],[\"代表本地机器上的节点\",{\"1\":{\"42\":1}}],[\"代理类实现\",{\"1\":{\"664\":1}}],[\"代理类\",{\"1\":{\"660\":1,\"664\":1}}],[\"代理的目标对象\",{\"1\":{\"659\":1}}],[\"代理模式有两种\",{\"1\":{\"659\":1}}],[\"代理\",{\"0\":{\"663\":1,\"664\":1},\"1\":{\"42\":1,\"540\":1,\"665\":1}}],[\"前端控制接收到视图地址和数据后\",{\"1\":{\"574\":1}}],[\"前端控制器接收到来自处理适配器的结果后\",{\"1\":{\"574\":1}}],[\"前端控制器dispatcherservlet接收到此请求后\",{\"1\":{\"574\":1}}],[\"前端控制器的后端控制器\",{\"1\":{\"571\":1}}],[\"前端控制器\",{\"1\":{\"569\":1}}],[\"前端路由功能\",{\"1\":{\"202\":1}}],[\"前面的值代表初始值\",{\"1\":{\"499\":1}}],[\"前置\",{\"1\":{\"664\":1}}],[\"前置通知\",{\"1\":{\"540\":1,\"541\":1,\"545\":2}}],[\"前置不需要打码的长度\",{\"1\":{\"493\":1}}],[\"前置逻辑\",{\"1\":{\"437\":4}}],[\"前⾯我们只是使⽤了\",{\"1\":{\"418\":1}}],[\"前⾯提到通过profile机制来管理不同环境下的配置\",{\"1\":{\"404\":1}}],[\"前⾯有⼀个\",{\"1\":{\"42\":1}}],[\"前或后插入value\",{\"1\":{\"341\":1}}],[\"前台向后台传输数据\",{\"1\":{\"266\":1}}],[\"前四个写法需要注意\",{\"1\":{\"128\":1}}],[\"前提是我们要对域的内容进⾏查询\",{\"1\":{\"29\":1}}],[\"谓词\",{\"1\":{\"42\":1}}],[\"适当的\",{\"1\":{\"42\":1}}],[\"参考学过的jdbc\",{\"1\":{\"518\":1}}],[\"参考官⽅⽂档\",{\"1\":{\"407\":1}}],[\"参看端口是否关闭\",{\"1\":{\"248\":1}}],[\"参数类型和参数个数\",{\"1\":{\"541\":1}}],[\"参数是集合类型\",{\"1\":{\"524\":1}}],[\"参数是配置文件名车\",{\"1\":{\"520\":1}}],[\"参数值\",{\"1\":{\"481\":1}}],[\"参数集合\",{\"1\":{\"481\":1}}],[\"参数则会报\",{\"1\":{\"423\":1}}],[\"参数为使用指令的dom\",{\"1\":{\"181\":1}}],[\"参数5\",{\"1\":{\"86\":1,\"87\":1}}],[\"参数4\",{\"1\":{\"85\":1,\"86\":2,\"87\":1}}],[\"参数3\",{\"1\":{\"85\":2,\"86\":2,\"87\":2,\"94\":1,\"97\":1}}],[\"参数2\",{\"1\":{\"85\":2,\"86\":2,\"87\":2,\"94\":2,\"97\":2,\"100\":1,\"181\":1}}],[\"参数1\",{\"1\":{\"85\":2,\"86\":2,\"87\":2,\"94\":2,\"97\":2,\"100\":1,\"181\":1}}],[\"参数\",{\"1\":{\"42\":1,\"181\":1,\"269\":1,\"541\":1}}],[\"参与集群的索引和搜索功能\",{\"1\":{\"38\":1}}],[\"接加入该事务\",{\"1\":{\"552\":1}}],[\"接着数据包被发送到⽹络上\",{\"1\":{\"460\":1}}],[\"接下来定义局部过滤器\",{\"1\":{\"438\":1}}],[\"接受⼀个输⼊参数\",{\"1\":{\"415\":1,\"419\":1}}],[\"接收的路由key为\",{\"1\":{\"590\":1}}],[\"接收的路由名称为\",{\"1\":{\"590\":1}}],[\"接收的第一个参数永远是前面传递过来的过滤值\",{\"1\":{\"177\":1}}],[\"接收⼀个匹配路径的参数来判断是否路由\",{\"1\":{\"425\":1}}],[\"接收⼀组参数\",{\"1\":{\"423\":1}}],[\"接收数据实体类\",{\"0\":{\"326\":1}}],[\"接收tcp紧急数据\",{\"1\":{\"281\":1}}],[\"接收所有请求并处理\",{\"1\":{\"266\":1}}],[\"接收\",{\"1\":{\"266\":3}}],[\"接收转换消息\",{\"1\":{\"110\":1}}],[\"接收生产者发送的消息\",{\"1\":{\"91\":1}}],[\"接收到的消息为\",{\"1\":{\"505\":1}}],[\"接收到的消息\",{\"1\":{\"87\":1,\"90\":2,\"95\":2,\"98\":2,\"101\":2}}],[\"接收消息实体类实现\",{\"1\":{\"108\":1}}],[\"接收消息的文件\",{\"1\":{\"590\":1}}],[\"接收消息的示例对象\",{\"1\":{\"107\":1}}],[\"接收消息的案例\",{\"0\":{\"87\":1}}],[\"接收消息失败\",{\"1\":{\"105\":1}}],[\"接收消息时使用的时\",{\"1\":{\"85\":1}}],[\"接收消息不需要关闭资源因为需要监听最新的消息进行消费\",{\"1\":{\"85\":1}}],[\"接收消息\",{\"1\":{\"85\":1,\"87\":1,\"91\":1}}],[\"接收和分发消息的应用\",{\"1\":{\"80\":1}}],[\"接口拆分的标准就不同深入了解业务逻辑\",{\"1\":{\"630\":1}}],[\"接口尽量小\",{\"1\":{\"630\":1}}],[\"接口隔离提高了系统的内聚性\",{\"1\":{\"630\":1}}],[\"接口隔离的优点\",{\"1\":{\"630\":1}}],[\"接口隔离原则的实现方法\",{\"1\":{\"630\":1}}],[\"接口隔离原则是为了约束接口\",{\"1\":{\"630\":1}}],[\"接口隔离原则主要约束接口\",{\"1\":{\"630\":1}}],[\"接口隔离原则和单一职责都是为了提高类的内聚性\",{\"1\":{\"630\":1}}],[\"接口隔离原则要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口\",{\"1\":{\"630\":1}}],[\"接口隔离原则\",{\"0\":{\"630\":1},\"1\":{\"625\":1,\"630\":1}}],[\"接口有两个常用的实现类\",{\"1\":{\"533\":1}}],[\"接口实现类最常见的是org\",{\"1\":{\"532\":1}}],[\"接口是\",{\"1\":{\"530\":1}}],[\"接口和映射文件同包同名\",{\"1\":{\"523\":1}}],[\"接口对象是线程不安全的\",{\"1\":{\"515\":1}}],[\"接口对象是一个重量级对象\",{\"1\":{\"515\":1}}],[\"接口注入数据\",{\"0\":{\"481\":1}}],[\"接口放开以下接口的访问\",{\"1\":{\"472\":1}}],[\"接口中每个方法的参数\",{\"1\":{\"662\":1}}],[\"接口中元素无序\",{\"1\":{\"317\":1}}],[\"接口中的方法基本一致\",{\"1\":{\"317\":1}}],[\"接口不同的是\",{\"1\":{\"317\":1}}],[\"接口更加严格了\",{\"1\":{\"317\":1}}],[\"接口进行功能上的扩充\",{\"1\":{\"317\":1}}],[\"接口继承关系中\",{\"1\":{\"271\":1}}],[\"接口\",{\"0\":{\"320\":1},\"1\":{\"108\":1,\"544\":1,\"580\":1,\"662\":2}}],[\"接口语法\",{\"1\":{\"42\":1}}],[\"接口访问\",{\"0\":{\"42\":1}}],[\"接近实时\",{\"0\":{\"36\":1}}],[\"根节点是黑色的\",{\"1\":{\"312\":1}}],[\"根组件\",{\"1\":{\"197\":1}}],[\"根据list顺序生成责任链并返回第一个\",{\"1\":{\"642\":1}}],[\"根据原子和抽象编程可以提高代码的可复用性\",{\"1\":{\"626\":1}}],[\"根据服务负载情况\",{\"1\":{\"448\":1}}],[\"根据value从一个set中查询\",{\"1\":{\"363\":1}}],[\"根据key获取值\",{\"1\":{\"363\":1}}],[\"根据key\",{\"1\":{\"363\":2}}],[\"根据正则匹配key获取所有对应的key\",{\"1\":{\"363\":1}}],[\"根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合\",{\"1\":{\"353\":1}}],[\"根据用户给定的经纬度坐标来获取指定范围内的地理位置集合\",{\"1\":{\"353\":1}}],[\"根据考试id获取对应的排行版数据\",{\"1\":{\"327\":1}}],[\"根据业务场景调整页面模板\",{\"1\":{\"223\":2}}],[\"根据数据渲染列表\",{\"1\":{\"221\":2}}],[\"根据对象path跳转\",{\"1\":{\"205\":1}}],[\"根据对象name跳转\",{\"1\":{\"205\":1}}],[\"根据值的不同\",{\"1\":{\"201\":1}}],[\"根据子集获取从父级到当前子集的组织拼接\",{\"0\":{\"140\":1}}],[\"根据子视图宽高自适应自己的宽高\",{\"1\":{\"21\":1}}],[\"根据父级获取子父级的组织拼接\",{\"0\":{\"139\":1}}],[\"根据异常情况确认\",{\"1\":{\"107\":1}}],[\"根据分发规则\",{\"1\":{\"80\":1}}],[\"根据文档id\",{\"1\":{\"76\":1}}],[\"根据field获得补集数据\",{\"1\":{\"73\":1}}],[\"根据field获得数据\",{\"1\":{\"73\":1}}],[\"根据field1或field2获得数据\",{\"1\":{\"73\":1}}],[\"根据field1和field2获得数据\",{\"1\":{\"73\":1}}],[\"根据\",{\"1\":{\"57\":1,\"59\":1,\"75\":3,\"76\":1,\"504\":1}}],[\"根据id发送axios请求\",{\"1\":{\"225\":1}}],[\"根据id\",{\"0\":{\"69\":1},\"1\":{\"57\":1}}],[\"根据id查询\",{\"0\":{\"48\":1}}],[\"根据以下图片进行配置索引\",{\"1\":{\"55\":1}}],[\"根据语义进行最粗粒度的分词\",{\"1\":{\"52\":1}}],[\"根目录下运行下面命令\",{\"1\":{\"41\":1}}],[\"本监听器智能校验参数是否必填\",{\"1\":{\"600\":1}}],[\"本次需校验的数据\",{\"1\":{\"599\":1}}],[\"本次使用的数据库需要自己创建\",{\"1\":{\"516\":1}}],[\"本次下载包所用的是清华大学镜像站中提供的mysql包\",{\"1\":{\"242\":1}}],[\"本是\",{\"1\":{\"511\":1}}],[\"本文记录了\",{\"1\":{\"528\":1}}],[\"本文使用的是knife4j\",{\"1\":{\"470\":1}}],[\"本文学习狂神说来的\",{\"1\":{\"331\":1}}],[\"本身是有一个\",{\"1\":{\"355\":1}}],[\"本质上是一个链表\",{\"1\":{\"341\":1}}],[\"本地图片所在地址\",{\"1\":{\"619\":1}}],[\"本地配置数据\",{\"0\":{\"407\":1}}],[\"本地⽂件等作为存储\",{\"1\":{\"404\":1}}],[\"本地文件引入vue\",{\"1\":{\"202\":1}}],[\"本地文件\",{\"1\":{\"202\":1}}],[\"本地\",{\"1\":{\"175\":1}}],[\"本⽂档采⽤本地安装⽅式进⾏head插件的安装\",{\"1\":{\"41\":1}}],[\"本⾝更注重于核⼼功能\",{\"1\":{\"29\":1}}],[\"本⾝扩展性很好\",{\"1\":{\"29\":1}}],[\"之后所要做的事情就是通知\",{\"1\":{\"540\":1}}],[\"之后\",{\"1\":{\"200\":1}}],[\"之前的链路数据全部丢失\",{\"1\":{\"401\":1}}],[\"之前\",{\"1\":{\"176\":1,\"263\":1}}],[\"之间\",{\"1\":{\"146\":1,\"399\":1}}],[\"之间虚拟链接\",{\"1\":{\"80\":1}}],[\"之间是完全隔离的\",{\"1\":{\"80\":1}}],[\"之间的\",{\"1\":{\"80\":1}}],[\"之别\",{\"1\":{\"39\":1}}],[\"之上进⾏分布式的\",{\"1\":{\"39\":1}}],[\"主键列使用\",{\"1\":{\"524\":1}}],[\"主入口文件\",{\"1\":{\"214\":1}}],[\"主体\",{\"1\":{\"60\":1}}],[\"主分⽚的拷贝\",{\"1\":{\"39\":1}}],[\"主要针对目标对象接口中的方法进行增强\",{\"1\":{\"662\":1}}],[\"主要针对抽象和程序整体框架的构建\",{\"1\":{\"630\":1}}],[\"主要作用如下\",{\"1\":{\"628\":1}}],[\"主要有下⾯⼏点\",{\"1\":{\"404\":1}}],[\"主要有两⽅⾯的原因\",{\"1\":{\"39\":1}}],[\"主要加载java\",{\"1\":{\"289\":1}}],[\"主要负载加载java\",{\"1\":{\"289\":1}}],[\"主要用于消息队列\",{\"1\":{\"355\":1}}],[\"主要用于存储地理位置信息\",{\"1\":{\"353\":1}}],[\"主要用于\",{\"1\":{\"269\":1}}],[\"主要\",{\"1\":{\"39\":1}}],[\"或jsonobject\",{\"1\":{\"605\":1}}],[\"或是实现类\",{\"1\":{\"537\":1}}],[\"或是将消息丢弃\",{\"1\":{\"91\":1}}],[\"或之后\",{\"1\":{\"413\":1}}],[\"或参数\",{\"1\":{\"413\":1}}],[\"或rxjava\",{\"1\":{\"381\":1}}],[\"或这些\",{\"1\":{\"358\":1}}],[\"或多个\",{\"1\":{\"358\":1}}],[\"或多次\",{\"1\":{\"39\":1}}],[\"或发现一个元素可以弹出\",{\"1\":{\"344\":1}}],[\"或\",{\"1\":{\"42\":1,\"75\":1,\"415\":1,\"419\":1,\"524\":1}}],[\"或者两者都具备\",{\"1\":{\"629\":1}}],[\"或者curlhttp\",{\"1\":{\"423\":1}}],[\"或者下⾯命令\",{\"1\":{\"400\":1}}],[\"或者使⽤spring\",{\"1\":{\"381\":1}}],[\"或者调⽤是出现错误\",{\"1\":{\"376\":1}}],[\"或者更新已存在成员的分数\",{\"1\":{\"351\":1}}],[\"或者是在运行时可以通过反射访问\",{\"1\":{\"271\":1}}],[\"或者是一个dom对象\",{\"1\":{\"153\":1}}],[\"或者执行\",{\"1\":{\"236\":1}}],[\"或者v\",{\"1\":{\"176\":1}}],[\"或者删除\",{\"1\":{\"158\":1}}],[\"或者在指令表达式中使用\",{\"1\":{\"155\":1}}],[\"或者没有符合路由规则的队列\",{\"1\":{\"91\":1}}],[\"或者⽤\",{\"1\":{\"42\":1}}],[\"或者\",{\"1\":{\"42\":2,\"99\":1,\"161\":1,\"401\":1,\"499\":1}}],[\"或者直接叫复制\",{\"1\":{\"39\":1}}],[\"或者由于任何原因消失了\",{\"1\":{\"39\":1}}],[\"或者单个节点处理搜索请求\",{\"1\":{\"39\":1}}],[\"有效保护我们的微服务系统\",{\"1\":{\"451\":1}}],[\"有多种⽅式可以绕开同源策略\",{\"1\":{\"443\":1}}],[\"有pre和post两种⽅式的\",{\"1\":{\"436\":1}}],[\"有通过header\",{\"1\":{\"419\":1}}],[\"有它的⼀套访问规则\",{\"1\":{\"405\":1}}],[\"有了信息表\",{\"1\":{\"390\":1}}],[\"有三个普通状态\",{\"1\":{\"382\":1}}],[\"有三种确认方式\",{\"1\":{\"107\":1}}],[\"有没有指定的\",{\"1\":{\"363\":1}}],[\"有序集成员按分数值递减\",{\"1\":{\"351\":1}}],[\"有序集合中对指定成员的分数加上增量\",{\"1\":{\"352\":1}}],[\"有序集合\",{\"0\":{\"351\":1}}],[\"有序存储\",{\"1\":{\"320\":1}}],[\"有结果则忽略此步骤\",{\"1\":{\"248\":1}}],[\"有两种使⽤⽅式\",{\"1\":{\"390\":1}}],[\"有两种模式\",{\"1\":{\"213\":1}}],[\"有两个节点\",{\"1\":{\"39\":1}}],[\"有两个主要原因\",{\"1\":{\"39\":1}}],[\"有且只要一个根元素\",{\"1\":{\"192\":1}}],[\"有更高的初始渲染开销\",{\"1\":{\"158\":1}}],[\"有更高的切换开销\",{\"1\":{\"158\":1}}],[\"有⼀个故障转移机制是⾮常有⽤并且是强烈推荐的\",{\"1\":{\"39\":1}}],[\"云的环境⾥\",{\"1\":{\"39\":1}}],[\"云盘资源搜索\",{\"1\":{\"13\":1}}],[\"量\",{\"1\":{\"39\":1}}],[\"吞吐量\",{\"1\":{\"39\":1}}],[\"吞吐\",{\"1\":{\"39\":1}}],[\"进程id\",{\"1\":{\"248\":1}}],[\"进入上传的地址\",{\"1\":{\"233\":1}}],[\"进入的\",{\"1\":{\"210\":3}}],[\"进入\",{\"1\":{\"210\":1}}],[\"进行动态代理\",{\"1\":{\"664\":1}}],[\"进行代理\",{\"1\":{\"663\":1}}],[\"进行限定的\",{\"1\":{\"579\":1}}],[\"进行封装才可以转发\",{\"1\":{\"578\":1}}],[\"进行渲染将处理结果通过页面展示给用户\",{\"1\":{\"573\":1}}],[\"进行分割\",{\"1\":{\"546\":1}}],[\"进行分词\",{\"0\":{\"53\":1}}],[\"进行比较而实现自动注入的\",{\"1\":{\"537\":1}}],[\"进行配置时\",{\"1\":{\"374\":1}}],[\"进行导入\",{\"1\":{\"301\":1}}],[\"进行了封装\",{\"1\":{\"298\":1}}],[\"进行链接获取\",{\"1\":{\"284\":1}}],[\"进行文件上传\",{\"1\":{\"112\":1}}],[\"进行判断\",{\"1\":{\"96\":1}}],[\"进行通信\",{\"1\":{\"80\":1}}],[\"进行查询\",{\"1\":{\"76\":1}}],[\"进⼊elasticsearch\",{\"1\":{\"41\":1}}],[\"进⽽提⾼性能\",{\"1\":{\"39\":1}}],[\"进⾏处理\",{\"1\":{\"419\":1}}],[\"进⾏了简单的条件匹配\",{\"1\":{\"418\":1}}],[\"进⾏⼆次处理\",{\"1\":{\"413\":1}}],[\"进⾏索引\",{\"1\":{\"30\":1}}],[\"进⾏分布式管理\",{\"1\":{\"29\":1}}],[\"位置\",{\"1\":{\"545\":1}}],[\"位置作为参考系摆放位置\",{\"1\":{\"22\":1}}],[\"位于链接地址\",{\"1\":{\"200\":1}}],[\"位于多个节点上\",{\"1\":{\"39\":1}}],[\"潜在地\",{\"1\":{\"39\":1}}],[\"当实现这个接口的时候\",{\"1\":{\"630\":1}}],[\"当子类的方法实现父类的抽象方法时\",{\"1\":{\"628\":1}}],[\"当子类覆盖或实现父类的方法时\",{\"1\":{\"628\":1}}],[\"当修改一个功能时\",{\"1\":{\"627\":1}}],[\"当客户端需要该对象的某一个职责时\",{\"1\":{\"627\":1}}],[\"当循环行时在一列中生成多个图片\",{\"1\":{\"619\":1}}],[\"当循环行中某一列中需要渲染多个图片\",{\"1\":{\"619\":1}}],[\"当一个对象存在多个图片时处理\",{\"1\":{\"619\":1}}],[\"当我们仅转换一个对象时我们使用\",{\"1\":{\"605\":1}}],[\"当较多的通知增强方法使用相同的\",{\"1\":{\"545\":1}}],[\"当配置文件中被调用者\",{\"1\":{\"537\":1}}],[\"当参数为\",{\"1\":{\"515\":1}}],[\"当⼀个n个字节⼤⼩的数据包到达\",{\"1\":{\"460\":1}}],[\"当⼀定时间内失败请求百分⽐达到阈值\",{\"1\":{\"456\":1}}],[\"当桶满时\",{\"1\":{\"460\":1}}],[\"当桶的数据存到75\",{\"1\":{\"320\":1}}],[\"当下游的服务因为某种原因突然变得不可⽤或响应过慢\",{\"1\":{\"456\":1}}],[\"当拿不到信号量的时候直接拒接因此不会出现超时占⽤其他⼯作线程的情况\",{\"1\":{\"454\":1}}],[\"当主机名为\",{\"1\":{\"419\":1}}],[\"当请求出现异常时抛出ioexception\",{\"1\":{\"614\":3}}],[\"当请求路径为gate\",{\"1\":{\"419\":1}}],[\"当请求返回客户端\",{\"1\":{\"396\":1}}],[\"当此服务接收到\",{\"1\":{\"416\":1}}],[\"当访问地址\",{\"1\":{\"415\":1}}],[\"当拦截到\",{\"1\":{\"389\":1}}],[\"当达到并发调⽤数量时\",{\"1\":{\"384\":1}}],[\"当慢调⽤⽐例⼤于阈值\",{\"1\":{\"382\":1,\"440\":1}}],[\"当慢调用比例大于等于阈值时\",{\"1\":{\"382\":1}}],[\"当circuitbreaker处于half\",{\"1\":{\"382\":1,\"440\":1}}],[\"当断路器关闭时\",{\"1\":{\"382\":1}}],[\"当失败率等于或大于阈值时\",{\"1\":{\"382\":1}}],[\"当经过⼀段时间后\",{\"1\":{\"382\":1}}],[\"当熔断器关闭时\",{\"1\":{\"382\":1}}],[\"当熔断器打开\",{\"1\":{\"376\":1}}],[\"当hystrix处于半开状态时\",{\"1\":{\"381\":1}}],[\"当其他服务想要向\",{\"1\":{\"369\":1}}],[\"当source不存在元素时\",{\"1\":{\"344\":1}}],[\"当列表中存在元素时会直接从尾部移除一位元素\",{\"1\":{\"344\":1}}],[\"当列表中存在元素时会直接从头部移除一位\",{\"1\":{\"344\":1}}],[\"当索引不存在时也不执行\",{\"1\":{\"341\":1}}],[\"当添加多个值的时候\",{\"1\":{\"341\":1}}],[\"当所有key都不存在时成功\",{\"1\":{\"338\":1}}],[\"当key不存在时会报错\",{\"1\":{\"341\":1}}],[\"当key不存在时设置key的值\",{\"1\":{\"337\":1}}],[\"当key不存在\",{\"1\":{\"341\":1}}],[\"当key存在时不会设置\",{\"1\":{\"337\":1}}],[\"当链表长度超过阈值\",{\"1\":{\"318\":1}}],[\"当使用\",{\"1\":{\"294\":1}}],[\"当有很多超过规定响应时间的请求时\",{\"1\":{\"381\":1}}],[\"当有\",{\"1\":{\"294\":1}}],[\"当创建对象时需要出入\",{\"1\":{\"283\":1}}],[\"当前对象所创建的对象\",{\"1\":{\"631\":1}}],[\"当前对象本身\",{\"1\":{\"631\":1}}],[\"当前对象的成员对象\",{\"1\":{\"631\":1}}],[\"当前对象的方法参数\",{\"1\":{\"631\":1}}],[\"当前对象的\",{\"1\":{\"303\":1,\"304\":1}}],[\"当前行数据据\",{\"1\":{\"599\":1}}],[\"当前行头数据\",{\"1\":{\"599\":2}}],[\"当前注解可以使用在类或成员变量上\",{\"1\":{\"595\":1}}],[\"当前没有事务的\",{\"1\":{\"552\":2}}],[\"当前没有事务的时候就抛出异常\",{\"1\":{\"548\":1}}],[\"当前没有事务的时候就以非事务方式执行\",{\"1\":{\"548\":1}}],[\"当前没有事务的时候\",{\"1\":{\"548\":1,\"552\":1}}],[\"当前xml中唯一不可重复\",{\"1\":{\"524\":3}}],[\"当前发起请求的域与该请求指向的资源所在的域不⼀样\",{\"1\":{\"443\":1}}],[\"当前\",{\"1\":{\"357\":1,\"524\":1}}],[\"当前路由在导航中是拥有激活class样式的\",{\"1\":{\"208\":1}}],[\"当前vue实例所管理的html视图\",{\"1\":{\"153\":1}}],[\"当path不同却需要对应同一个组件时\",{\"1\":{\"204\":1}}],[\"当数据对象中\",{\"1\":{\"183\":1}}],[\"当标签上的属性是变量\",{\"1\":{\"165\":1}}],[\"当触发xx事件时执行的语句\",{\"1\":{\"159\":1}}],[\"当查询的数据为2时则是查询name中包含2的数据就会返回\",{\"1\":{\"127\":1}}],[\"当在使用fastjson2时\",{\"1\":{\"606\":1}}],[\"当在where作为条件时则是会返回满足条件的数据\",{\"1\":{\"127\":1}}],[\"当在select时会如果搜索值在strlist中存在那么会返回查询的值\",{\"1\":{\"127\":1}}],[\"当消息被拒收时要设置为\",{\"1\":{\"110\":1}}],[\"当消息成为dead\",{\"1\":{\"110\":1}}],[\"当消息一旦被consumer接收到\",{\"1\":{\"107\":1}}],[\"当交换机没找到消息\",{\"1\":{\"105\":1}}],[\"当\",{\"1\":{\"105\":1,\"342\":1,\"584\":1,\"597\":1,\"598\":1}}],[\"当发送消息到交换机后\",{\"1\":{\"102\":3}}],[\"当没有\",{\"1\":{\"86\":1,\"87\":1}}],[\"当多个不同的用户使用同一个i额\",{\"1\":{\"80\":1}}],[\"当你创建⼀个索引的时候\",{\"1\":{\"39\":1}}],[\"当然只有⼀个这种请求\",{\"1\":{\"439\":1}}],[\"当然可以选择不执行\",{\"1\":{\"238\":1}}],[\"当然你也可以去看\",{\"1\":{\"236\":1}}],[\"当然\",{\"1\":{\"35\":1}}],[\"当然也可以为评论数据定义另⼀个类型\",{\"1\":{\"32\":1}}],[\"为java本身的工具类所以不需要担心兼容问题但是jdk应该是需要1\",{\"1\":{\"655\":1}}],[\"为java8和函数式编程所设计的轻量级容错框架\",{\"1\":{\"381\":1}}],[\"为依赖接口的类定制服务\",{\"1\":{\"630\":1}}],[\"为什么要单独列出来\",{\"1\":{\"628\":1}}],[\"为什么在⽹关上请求失败需要快速返回给客户端\",{\"1\":{\"439\":1}}],[\"为引用类型属性进行隐式自动注入\",{\"1\":{\"537\":1}}],[\"为访问git的分⽀\",{\"1\":{\"406\":1}}],[\"为git配置⽂件的后缀\",{\"1\":{\"406\":1}}],[\"为产生\",{\"1\":{\"391\":1}}],[\"为消费者组设置新的最后递送消息id\",{\"1\":{\"357\":1}}],[\"为哈希表\",{\"1\":{\"350\":2}}],[\"为已存在的列表的尾部添加值\",{\"1\":{\"341\":1}}],[\"为从此socket发送的数据包的ip标头设置流量类或服务类型八位字节\",{\"1\":{\"281\":1}}],[\"为关键字\",{\"1\":{\"213\":1}}],[\"为模板名称\",{\"1\":{\"213\":1}}],[\"为data的属性\",{\"1\":{\"169\":1}}],[\"为data中的数据\",{\"1\":{\"156\":2}}],[\"为class名字\",{\"1\":{\"167\":1}}],[\"为对象\",{\"1\":{\"162\":1}}],[\"为我们提供了两种方式用来控制消息的投递可靠性模式\",{\"1\":{\"104\":1}}],[\"为其设置参数\",{\"1\":{\"84\":1}}],[\"为上面创建的\",{\"1\":{\"83\":1}}],[\"为查询准备数据\",{\"1\":{\"63\":1}}],[\"为了避免开发的应⽤受到限制\",{\"1\":{\"443\":1}}],[\"为了解决不同环境下服务连接配置等信息的差异\",{\"1\":{\"404\":1}}],[\"为了解决这个问题\",{\"1\":{\"39\":1}}],[\"为了确保库的引用可以之心下面两行\",{\"1\":{\"238\":1}}],[\"为了提升性能\",{\"1\":{\"163\":1}}],[\"为了方便使用我们将jdbc封装成一个工具类\",{\"0\":{\"302\":1}}],[\"为了方便使用\",{\"1\":{\"84\":1}}],[\"为了一行方便查数据\",{\"1\":{\"57\":1}}],[\"为\",{\"1\":{\"57\":1,\"415\":1,\"480\":1,\"481\":1,\"487\":1,\"504\":3}}],[\"为此⽬的\",{\"1\":{\"39\":1}}],[\"为博客数据定义另⼀个类型\",{\"1\":{\"32\":1}}],[\"会自动提交\",{\"1\":{\"515\":1,\"520\":1}}],[\"会自动过滤已经删除的消息\",{\"1\":{\"356\":1}}],[\"会开启一个事务\",{\"1\":{\"515\":1}}],[\"会路由到上游地址https\",{\"1\":{\"415\":1}}],[\"会阻塞指定的秒数\",{\"1\":{\"344\":2}}],[\"会从红黑二叉树转换为链表\",{\"1\":{\"320\":1}}],[\"会从链表转换为红黑二叉树\",{\"1\":{\"320\":1}}],[\"会话层\",{\"1\":{\"277\":1}}],[\"会导致\",{\"1\":{\"204\":1}}],[\"会存储在页面地址上\",{\"1\":{\"200\":1}}],[\"会来到这\",{\"1\":{\"185\":2}}],[\"会忽略所有表单元素的\",{\"1\":{\"170\":1}}],[\"会将该方法放到专门的方法栈中\",{\"1\":{\"584\":1}}],[\"会将所有的资源都请求到页面\",{\"1\":{\"199\":1}}],[\"会将绑定的数据实时的显示出来\",{\"1\":{\"156\":1}}],[\"会将⽂本做最细粒度的拆分\",{\"1\":{\"52\":1}}],[\"会有返回值\",{\"1\":{\"146\":1}}],[\"会有抖动效果\",{\"1\":{\"146\":1}}],[\"会报错\",{\"1\":{\"109\":1}}],[\"会一直等待消息到来\",{\"1\":{\"91\":1}}],[\"会默认创建并加⼊⼀个叫做\",{\"1\":{\"38\":1}}],[\"会为具有⼀组共同字段的⽂档定义⼀个类型\",{\"1\":{\"32\":1}}],[\"只暴露应该暴露的方法\",{\"1\":{\"631\":1}}],[\"只依赖应该依赖的对象\",{\"1\":{\"631\":1}}],[\"只与你的直接朋友交谈\",{\"1\":{\"631\":1}}],[\"只提供调用者需要的方法\",{\"1\":{\"630\":1}}],[\"只需要保持运行就可以接收到\",{\"1\":{\"590\":1}}],[\"只需要在\",{\"1\":{\"545\":1}}],[\"只需要通过配置就可以完成对事务的管理\",{\"1\":{\"529\":1}}],[\"只需要修改连接下个元素的地址即可\",{\"1\":{\"311\":2}}],[\"只需要修改\",{\"1\":{\"108\":1}}],[\"只引⼊需要的依赖即可\",{\"1\":{\"381\":1}}],[\"只记录请求⽅法和\",{\"1\":{\"378\":1}}],[\"只接受新消息\",{\"1\":{\"357\":1}}],[\"只允许在表的一端进行插入\",{\"1\":{\"309\":1}}],[\"只加载一次驱动\",{\"1\":{\"303\":1,\"304\":1}}],[\"只保留guest\",{\"1\":{\"233\":1}}],[\"只要绑定不同的队列接收即可\",{\"1\":{\"590\":1}}],[\"只要请求中包含\",{\"1\":{\"420\":1}}],[\"只要调用\",{\"1\":{\"183\":1}}],[\"只要你想\",{\"1\":{\"38\":1}}],[\"只执行一次\",{\"1\":{\"159\":1}}],[\"只触发一次回调\",{\"1\":{\"159\":1}}],[\"只是比collection\",{\"1\":{\"317\":1}}],[\"只是根据样式来决定\",{\"1\":{\"158\":1}}],[\"只是多了一个或多个消费者\",{\"1\":{\"88\":1}}],[\"只是多个消费者消费一个生产者生产的消息\",{\"1\":{\"88\":1}}],[\"只不过在\",{\"1\":{\"576\":1}}],[\"只不过每个结点上都最多只能有两个子结点\",{\"1\":{\"312\":1}}],[\"只不过\",{\"1\":{\"99\":1}}],[\"只有\",{\"1\":{\"419\":1}}],[\"只有在滑动窗⼝内\",{\"1\":{\"382\":1,\"440\":1}}],[\"只有在键不存在时\",{\"1\":{\"363\":1}}],[\"只有当前分数大于redis中存储的分数或分数一直且时长更短时才更新数据\",{\"1\":{\"327\":1}}],[\"只有到父类加载器反馈自己无法完成这个加载请求\",{\"1\":{\"289\":1}}],[\"只有到达指定时间后才会被消费\",{\"1\":{\"111\":1}}],[\"只有value可以不用指定属性名传参\",{\"1\":{\"272\":1}}],[\"只有签收一个后才会处理下一个\",{\"1\":{\"108\":1}}],[\"只有队列的\",{\"1\":{\"96\":1}}],[\"只有索引⽅可搜索到\",{\"1\":{\"29\":1}}],[\"只负责转发消息\",{\"1\":{\"91\":1}}],[\"只能由该方法进行创建\",{\"1\":{\"646\":1}}],[\"只能修改代码\",{\"1\":{\"645\":1}}],[\"只能使用\",{\"1\":{\"579\":1}}],[\"只能匹配\",{\"1\":{\"99\":1}}],[\"只能有一个\",{\"1\":{\"86\":1,\"87\":1,\"537\":1}}],[\"只能用在\",{\"1\":{\"57\":1}}],[\"你的索引将会有5个主分⽚和另外5个复制分⽚\",{\"1\":{\"39\":1}}],[\"你会去确定⽹络中的哪些服务器对应于elasticsearch集群中的哪些节点\",{\"1\":{\"38\":1}}],[\"你可以选择基于调⽤数量的滑动窗⼝或者基于时间的滑动窗⼝\",{\"1\":{\"382\":1}}],[\"你可以根据需要选择特定的装饰器\",{\"1\":{\"381\":1}}],[\"你可以在函数式接⼝\",{\"1\":{\"381\":1}}],[\"你可以在任何时候动态地改变复制的数量\",{\"1\":{\"39\":1}}],[\"你可以使⽤其中的⼀个或多个装饰器对函数式接⼝\",{\"1\":{\"381\":1}}],[\"你可以指定你想要的分⽚的数量\",{\"1\":{\"39\":1}}],[\"你可以存储任意多的⽂档\",{\"1\":{\"35\":1}}],[\"你可以拥有某⼀个客户的⽂档\",{\"1\":{\"35\":1}}],[\"你可以定义⼀种或多种类型\",{\"1\":{\"32\":1}}],[\"你可以对⽂档\",{\"1\":{\"30\":1}}],[\"和在\",{\"1\":{\"576\":1}}],[\"和视图解析器也需要此依赖\",{\"1\":{\"558\":1}}],[\"和远程调用等\",{\"1\":{\"530\":1}}],[\"和依赖注入功能\",{\"1\":{\"530\":1}}],[\"和mapper\",{\"1\":{\"522\":1}}],[\"和微服务本质上都是服务化思想的⼀种体现\",{\"1\":{\"448\":1}}],[\"和注册中⼼相结合的路由配置⽅式\",{\"0\":{\"417\":1}}],[\"和zuul的路由配置模块类似\",{\"1\":{\"413\":1,\"414\":1}}],[\"和zuul的过滤器在概念上类似\",{\"1\":{\"413\":1}}],[\"和zookeeper类似\",{\"1\":{\"366\":1}}],[\"和限流\",{\"1\":{\"413\":1}}],[\"和cassandra数据库中\",{\"1\":{\"401\":1}}],[\"和令牌桶限流算法\",{\"1\":{\"386\":1}}],[\"和其他的netflix公司的服务组件\",{\"1\":{\"366\":1}}],[\"和我们预期结果一致\",{\"1\":{\"324\":1}}],[\"和上面等价\",{\"1\":{\"212\":1}}],[\"和配置\",{\"1\":{\"211\":1}}],[\"和死信交换机\",{\"1\":{\"110\":1}}],[\"和交换机\",{\"1\":{\"110\":1}}],[\"和映射\",{\"0\":{\"43\":1}}],[\"和\",{\"0\":{\"158\":1,\"278\":1},\"1\":{\"42\":1,\"75\":1,\"80\":2,\"105\":1,\"107\":1,\"112\":1,\"158\":1,\"183\":1,\"198\":1,\"212\":1,\"224\":1,\"312\":1,\"382\":1,\"413\":4,\"421\":1,\"437\":1,\"448\":1,\"481\":1,\"499\":1,\"511\":2,\"518\":1,\"578\":1,\"597\":1,\"598\":1,\"631\":1}}],[\"和复制分⽚\",{\"1\":{\"39\":1}}],[\"和集群类似\",{\"1\":{\"38\":1}}],[\"和nexus\",{\"1\":{\"18\":1}}],[\"节点可以是红色的或者黑色的\",{\"1\":{\"312\":1}}],[\"节点失败的情况下\",{\"1\":{\"39\":1}}],[\"节点不知怎么的就处于离线状态\",{\"1\":{\"39\":1}}],[\"节点\",{\"0\":{\"38\":1}}],[\"因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多\",{\"1\":{\"629\":1}}],[\"因此在时间临界点左右的极短时间段内容易遭到攻击\",{\"1\":{\"461\":1}}],[\"因此b服务就不会出现级联故障\",{\"1\":{\"453\":1}}],[\"因此微服务与容器化技术的结合更加紧密\",{\"1\":{\"448\":1}}],[\"因此微服务在我看来并不是⼀个新的概念\",{\"1\":{\"448\":1}}],[\"因此要对⼀些服务和⻚⾯进⾏有策略的降级\",{\"1\":{\"439\":1}}],[\"因此会有⼤量的请求进⼊⽹关\",{\"1\":{\"439\":1}}],[\"因此具有良好的存取和查找性能\",{\"1\":{\"318\":1}}],[\"因此所有的类加载请求都应该传递到最顶层的\",{\"1\":{\"289\":1}}],[\"因此可以反射性地读取它们\",{\"1\":{\"272\":1}}],[\"因此如果没有任何队列与exchange绑定\",{\"1\":{\"91\":1}}],[\"因此才需要建⽴映射\",{\"1\":{\"34\":1}}],[\"因为是在使用时才会进行创建\",{\"1\":{\"646\":1}}],[\"因为是广播模式所以不用传\",{\"1\":{\"94\":1,\"97\":1}}],[\"因为可以通过接口的继承\",{\"1\":{\"630\":1}}],[\"因为原有的测试代码仍然能够正常运行\",{\"1\":{\"626\":1}}],[\"因为我们需要转换为指定的对象而不是list<object>\",{\"1\":{\"606\":1}}],[\"因为我这边使用的是knife4j的4\",{\"1\":{\"122\":1}}],[\"因为接收的内容都一致就不在重复分开的写接收内容了\",{\"1\":{\"590\":1}}],[\"因为最终的是不能被修改的\",{\"1\":{\"540\":1}}],[\"因为spring只支持方法类型的连接点\",{\"1\":{\"540\":1}}],[\"因为拦截器优先级较高\",{\"1\":{\"467\":1}}],[\"因为服务粒度细化之后使得开发运维变得更加重要\",{\"1\":{\"448\":1}}],[\"因为域不⼀致\",{\"1\":{\"443\":1}}],[\"因为资源路径的协议\",{\"1\":{\"443\":1}}],[\"因为当⼀个客户端请求发⽣故障的时候\",{\"1\":{\"439\":1}}],[\"因为发送链路数据的⽅式type=rabbit\",{\"1\":{\"400\":1}}],[\"因为本地搭建eureka\",{\"1\":{\"367\":1}}],[\"因为这个命令是向列表头部添加一个值\",{\"1\":{\"341\":1}}],[\"因为这个原因\",{\"1\":{\"39\":1}}],[\"因为删除需要id\",{\"1\":{\"222\":1}}],[\"因为前端操作几乎感受不到网络的延迟\",{\"1\":{\"199\":1}}],[\"因为没有人用它的返回值\",{\"1\":{\"190\":1}}],[\"因为没有这个所以了\",{\"1\":{\"57\":1}}],[\"因为有人用它的返回值\",{\"1\":{\"190\":1}}],[\"因为过滤可以使⽤缓存\",{\"1\":{\"57\":1}}],[\"因为\",{\"1\":{\"50\":1,\"558\":1}}],[\"因为搜索可以在所有的复制上并⾏运⾏\",{\"1\":{\"39\":1}}],[\"因为在这个管理过程中\",{\"1\":{\"38\":1}}],[\"因为⼀个节点只能通过指定某个集群的名字\",{\"1\":{\"37\":1}}],[\"并对其进行增强\",{\"1\":{\"662\":1}}],[\"并对存储的信息进行操作\",{\"1\":{\"353\":1}}],[\"并以utf\",{\"1\":{\"622\":1}}],[\"并绑定上述两个队列\",{\"1\":{\"589\":1}}],[\"并生成代理\",{\"1\":{\"545\":1}}],[\"并按通知类型与切入点\",{\"1\":{\"545\":1}}],[\"并交给\",{\"1\":{\"539\":1}}],[\"并调用它们的生命周期方法\",{\"1\":{\"532\":1}}],[\"并通过java对象和statement中的sql的动态参数进行映射生成最终执行的sql语句\",{\"1\":{\"511\":1}}],[\"并通过该地址调⽤服务提供者的接⼝\",{\"1\":{\"366\":1}}],[\"并进⾏服务降级\",{\"1\":{\"382\":1,\"440\":1}}],[\"并进行服务降级\",{\"1\":{\"382\":2}}],[\"并增加慢调⽤⽐例\",{\"1\":{\"382\":1,\"440\":1}}],[\"并增加慢调用比例\",{\"1\":{\"382\":1}}],[\"并重新计算失败率\",{\"1\":{\"382\":1}}],[\"并赋值该\",{\"1\":{\"363\":2}}],[\"并赋值给全局vue对象的原型\",{\"1\":{\"227\":1}}],[\"并存储在新的\",{\"1\":{\"351\":1}}],[\"并集\",{\"0\":{\"348\":1}}],[\"并将结果直接映射为java对象\",{\"1\":{\"511\":1}}],[\"并将该元素添加到destination列表的头部\",{\"1\":{\"343\":1}}],[\"并将key的过期时间设置为seconds\",{\"1\":{\"337\":1}}],[\"并将相应\",{\"1\":{\"107\":1}}],[\"并提供多种语言的api\",{\"1\":{\"331\":1}}],[\"并没有对\",{\"1\":{\"317\":1}}],[\"并在此空间中存放元素\",{\"1\":{\"310\":1}}],[\"并为其实现增强功能\",{\"1\":{\"659\":1}}],[\"并为其设置忽略权限\",{\"1\":{\"296\":1}}],[\"并为\",{\"1\":{\"295\":1}}],[\"并接受它\",{\"1\":{\"283\":1}}],[\"并注重高可用\",{\"1\":{\"112\":1}}],[\"并配置映射关系\",{\"1\":{\"76\":1,\"77\":1}}],[\"并⾏的操作\",{\"1\":{\"39\":1}}],[\"并假定它们能够相互发现彼此\",{\"1\":{\"38\":1}}],[\"并⼀起提供索引和搜索功能\",{\"1\":{\"37\":1}}],[\"并且读取顺序为从第一行顺序向下读取\",{\"1\":{\"655\":1}}],[\"并且添加了国际化\",{\"1\":{\"530\":1}}],[\"并且改名为mybatis\",{\"1\":{\"511\":1}}],[\"并且随着时间移动\",{\"1\":{\"462\":1}}],[\"并且注册到spring容器中\",{\"1\":{\"438\":1}}],[\"并且通过负载均衡进⾏服务的路由\",{\"1\":{\"417\":1}}],[\"并且对下游的响应\",{\"1\":{\"413\":1}}],[\"并且基于\",{\"1\":{\"413\":1}}],[\"并且可以把配置和依赖从实际编码逻辑中解耦\",{\"1\":{\"530\":1}}],[\"并且可以git\",{\"1\":{\"404\":1}}],[\"并且可以指定平台\",{\"1\":{\"262\":1}}],[\"并且运⾏在客户端的进程⾥\",{\"1\":{\"390\":1}}],[\"并且不需要调用来触发转换\",{\"1\":{\"382\":1}}],[\"并且不会记录事件的成功或者失败\",{\"1\":{\"382\":1}}],[\"并且不把消息重新放入原目标队列\",{\"1\":{\"110\":1}}],[\"并且需要在当前服务的启动器上添加注解\",{\"1\":{\"369\":1}}],[\"并且需要思考如何建⽴映射才能对性能更好\",{\"1\":{\"34\":1}}],[\"并且带有以下三个重要的保证\",{\"1\":{\"358\":1}}],[\"并且是很小的\",{\"1\":{\"354\":1}}],[\"并且都会以某种规则保证存入的元素不出现重复\",{\"1\":{\"317\":1}}],[\"并且套接字上收到的tcp紧急数据将被静默丢弃\",{\"1\":{\"281\":1}}],[\"并且在运行时由\",{\"1\":{\"272\":1}}],[\"并且设置name属性\",{\"1\":{\"210\":1}}],[\"并且指定通配符方式的routing\",{\"1\":{\"102\":1}}],[\"并且指定routingkey\",{\"1\":{\"102\":1}}],[\"并且交换机和队列进行绑定\",{\"1\":{\"102\":1}}],[\"并且当我们要对对应于这个索引中的文档进行索引\",{\"1\":{\"31\":1}}],[\"赋予⼀个索引的type\",{\"1\":{\"35\":1}}],[\"⽂档必须被索引\",{\"1\":{\"35\":1}}],[\"⽂档以json\",{\"1\":{\"35\":1}}],[\"⽂档\",{\"0\":{\"35\":1}}],[\"⽂档中包括⼀个⼀个的域\",{\"1\":{\"29\":1}}],[\"其目的是降低类之间的耦合度\",{\"1\":{\"631\":1}}],[\"其含义是\",{\"1\":{\"631\":1}}],[\"其颗粒度会变得很粗\",{\"1\":{\"627\":1}}],[\"其逻辑肯定要比负责多项职责简单得多\",{\"1\":{\"627\":1}}],[\"其稳定性高和延续性强\",{\"1\":{\"626\":1}}],[\"其工作原理是\",{\"1\":{\"546\":1}}],[\"其用法是\",{\"1\":{\"545\":1}}],[\"其就会自动扫描到\",{\"1\":{\"545\":1}}],[\"其内部提供了对各种优秀框架\",{\"1\":{\"529\":1}}],[\"其它标签引用时使用\",{\"1\":{\"524\":1}}],[\"其它就是处理es⾥⾯数据的⼀些使⽤规则设置也叫做映射\",{\"1\":{\"34\":1}}],[\"其有很多方法通过加载并解析资源文件\",{\"1\":{\"513\":1}}],[\"其实这就是已经在使用历史替换原则了\",{\"1\":{\"628\":1}}],[\"其实我们可以把⽤户服务拆分的更细\",{\"1\":{\"448\":1}}],[\"其实\",{\"1\":{\"418\":1}}],[\"其实就是根据对象的hashcode和equals方法来决定的\",{\"1\":{\"318\":1}}],[\"其实就是复制一份消费者1\",{\"1\":{\"90\":1}}],[\"其余的命令依然被执行\",{\"1\":{\"358\":1}}],[\"其主要功能在于交互式地浏览和修改数据\",{\"1\":{\"265\":1}}],[\"其他无法处理\",{\"1\":{\"600\":1}}],[\"其他列使用\",{\"1\":{\"524\":1}}],[\"其他占位符都要具有具体的时间含义\",{\"1\":{\"499\":1}}],[\"其他服务不可避免的会出现调⽤失败\",{\"1\":{\"439\":1}}],[\"其他存储⽅式\",{\"1\":{\"407\":1}}],[\"其他客户端提交的命令请求不会插入到事务执行命令序列中\",{\"1\":{\"358\":1}}],[\"其他\",{\"1\":{\"211\":1,\"663\":2}}],[\"其中全局过滤器myauthfilter中判断令牌是否存在\",{\"1\":{\"437\":1}}],[\"其中backenda断路器配置基于default配置\",{\"1\":{\"382\":1}}],[\"其中\",{\"1\":{\"161\":1}}],[\"其中自动确认是指\",{\"1\":{\"107\":1}}],[\"其语义完全由你来定\",{\"1\":{\"32\":1}}],[\"默认交换机类型为direct\",{\"1\":{\"589\":1}}],[\"默认返回的是对象而不是请求或转发的页面\",{\"1\":{\"578\":1}}],[\"默认事务超时时限\",{\"1\":{\"548\":1}}],[\"默认读取那个\",{\"1\":{\"523\":1}}],[\"默认的事务隔离级别\",{\"1\":{\"547\":1}}],[\"默认的\",{\"1\":{\"515\":1}}],[\"默认localhost\",{\"1\":{\"406\":1}}],[\"默认会提供⼀个application\",{\"1\":{\"404\":1}}],[\"默认限制为50\",{\"1\":{\"327\":1}}],[\"默认不配置或数值为负数时表示客户端第一次请求servlet时再加载\",{\"1\":{\"266\":1}}],[\"默认数据库引擎\",{\"1\":{\"252\":1}}],[\"默认模式\",{\"1\":{\"213\":2}}],[\"默认\",{\"1\":{\"213\":1,\"378\":1}}],[\"默认安装的4\",{\"1\":{\"212\":1}}],[\"默认安装的最新版本\",{\"1\":{\"212\":1}}],[\"默认第一个参数为event事件参数\",{\"1\":{\"159\":1}}],[\"默认90秒\",{\"1\":{\"113\":1}}],[\"默认30秒\",{\"1\":{\"113\":1}}],[\"默认单位为毫秒\",{\"1\":{\"109\":1}}],[\"默认为一年\",{\"1\":{\"327\":1}}],[\"默认为\",{\"1\":{\"109\":1,\"369\":2,\"515\":1}}],[\"默认情况\",{\"1\":{\"106\":1}}],[\"默认情况下\",{\"1\":{\"38\":2,\"39\":1,\"281\":1}}],[\"默认是数据库的隔离级别\",{\"1\":{\"552\":1}}],[\"默认是按名称注入\",{\"1\":{\"538\":1}}],[\"默认是不自动注入引用类型属性\",{\"1\":{\"537\":1}}],[\"默认是\",{\"1\":{\"42\":1,\"405\":1}}],[\"默认值即可\",{\"1\":{\"135\":1}}],[\"默认值\",{\"1\":{\"34\":1,\"382\":1}}],[\"默认以屏幕左上角\",{\"1\":{\"22\":1}}],[\"如需其他处理请可以复制当前监听器后重写即可\",{\"1\":{\"600\":1}}],[\"如12\",{\"1\":{\"461\":1}}],[\"如图4\",{\"1\":{\"461\":1,\"462\":1}}],[\"如图1\",{\"1\":{\"448\":1}}],[\"如⽹络连接中断\",{\"1\":{\"451\":1}}],[\"如服务发现注册\",{\"1\":{\"448\":1}}],[\"如服务名\",{\"1\":{\"366\":1}}],[\"如下图所示\",{\"1\":{\"418\":1}}],[\"如下例就是会返回1\",{\"1\":{\"127\":1}}],[\"如eureka\",{\"1\":{\"417\":1}}],[\"如何使用反射\",{\"0\":{\"290\":1}}],[\"如何注册一个全局过滤器\",{\"1\":{\"175\":1,\"176\":1}}],[\"如\",{\"1\":{\"159\":2,\"266\":1,\"529\":1,\"535\":1,\"548\":1}}],[\"如相册网站\",{\"1\":{\"112\":1}}],[\"如某个字段的数据类型\",{\"1\":{\"34\":1}}],[\"如果两个软件实体无须直接通信\",{\"1\":{\"631\":1}}],[\"如果定义太大\",{\"1\":{\"630\":1}}],[\"如果定义过小\",{\"1\":{\"630\":1}}],[\"如果接口的粒度大小定义合理\",{\"1\":{\"630\":1}}],[\"如果程序违背了里氏替换原则\",{\"1\":{\"628\":1}}],[\"如果通过重写父类的方法来完成新的功能\",{\"1\":{\"628\":1}}],[\"如果每一个类型s的对象o1\",{\"1\":{\"628\":1}}],[\"如果每一次访问\",{\"1\":{\"80\":1}}],[\"如果单一职责原则遵守得好\",{\"1\":{\"627\":1}}],[\"如果遵循单一职责原则将有以下优点\",{\"1\":{\"627\":1}}],[\"如果走到这里就是没有在导入类上添加\",{\"1\":{\"599\":2}}],[\"如果多行请求头\",{\"1\":{\"599\":2}}],[\"如果一个方法处理的事情太多\",{\"1\":{\"627\":1}}],[\"如果一个对象承担了太多的职责\",{\"1\":{\"627\":1}}],[\"如果一个类加载器收到了一个类加载请求\",{\"1\":{\"289\":1}}],[\"如果一次执行的是多条查询语句\",{\"1\":{\"549\":1}}],[\"如果用户需要使用spring的声明式事务管理\",{\"1\":{\"548\":1}}],[\"如果需要的话可以在后置通知的方法中修改结果\",{\"1\":{\"545\":2}}],[\"如果需要非常频繁地切换\",{\"1\":{\"158\":1}}],[\"如果传入的是\",{\"1\":{\"524\":1}}],[\"如果使用这个注解后想要转发页面\",{\"1\":{\"578\":1}}],[\"如果使用\",{\"1\":{\"524\":1}}],[\"如果使用此\",{\"1\":{\"304\":1}}],[\"如果是mysql5的话\",{\"1\":{\"518\":1}}],[\"如果是time\",{\"1\":{\"382\":1}}],[\"如果想要避免不安全\",{\"1\":{\"508\":1}}],[\"如果想要获得熔断降级的异常信息\",{\"1\":{\"376\":1}}],[\"如果处理类型为空且正则表达式和替换字符串都为空那么根据前缀不脱敏长度和后缀不脱敏长度进行处理\",{\"1\":{\"492\":1}}],[\"如果处理类型为空那么根据正则表达式和替换字符串进行处理\",{\"1\":{\"492\":1}}],[\"如果处理类型不为空那么根据处理类型进行处理\",{\"1\":{\"492\":1}}],[\"如果值为空那么直接退出不再处理\",{\"1\":{\"492\":1}}],[\"如果bean为null那么直接设置为null\",{\"1\":{\"492\":1}}],[\"如果失败了则是\",{\"1\":{\"487\":1}}],[\"如果失败率低于阈值\",{\"1\":{\"382\":1}}],[\"如果失败率超过阈值\",{\"1\":{\"382\":1}}],[\"如果失败率超过设定的阈值\",{\"1\":{\"382\":1}}],[\"如果⽤户在上个时间间隔结束前请求\",{\"1\":{\"461\":1}}],[\"如果桶中的令牌不⾜n个\",{\"1\":{\"460\":1}}],[\"如果桶是空的\",{\"1\":{\"459\":1}}],[\"如果流⼊⽔滴超出了桶的容量\",{\"1\":{\"459\":1}}],[\"如果⽬标服务情况好转则恢复调⽤\",{\"1\":{\"456\":1}}],[\"如果此时c服务宕机了就算⼤量的请求过来\",{\"1\":{\"453\":1}}],[\"如果soa是⾯向服务开发的思想的雏形\",{\"1\":{\"448\":1}}],[\"如果ss的时间戳减去sr时间戳\",{\"1\":{\"396\":1}}],[\"如果发起⼀个资源路径为bbb\",{\"1\":{\"443\":1}}],[\"如果⼀个请求就能造成整个系统瘫痪\",{\"1\":{\"439\":1}}],[\"如果令牌不存在\",{\"1\":{\"437\":1}}],[\"如果去掉\",{\"1\":{\"422\":1}}],[\"如果没有匹配结果那么我应该直接报错回去\",{\"1\":{\"655\":1}}],[\"如果没有匹配上则不执⾏\",{\"1\":{\"422\":1}}],[\"如果没有指定则使用默认\",{\"1\":{\"85\":1,\"86\":1}}],[\"如果匹配上就会执⾏路由\",{\"1\":{\"422\":1}}],[\"如果请求路径符合要求\",{\"1\":{\"425\":1}}],[\"如果请求的⽬标地址\",{\"1\":{\"415\":1}}],[\"如果请求需要的话\",{\"1\":{\"42\":1}}],[\"如果断⾔为真\",{\"1\":{\"413\":1,\"414\":1}}],[\"如果项⽬是以分⽀做区分也是可以的\",{\"1\":{\"405\":1}}],[\"如果git仓库是公开仓库\",{\"1\":{\"405\":1}}],[\"如果cr的时间戳减去cs时间戳便可以得到整个请求所消耗的时间\",{\"1\":{\"396\":1}}],[\"如果centos8使用tar包进行安装可能会遇到下面的错误\",{\"0\":{\"239\":1}}],[\"如果将其sr减去cs时间戳便可得到⽹络传输的时间\",{\"1\":{\"396\":1}}],[\"如果出断言返回false\",{\"1\":{\"382\":1}}],[\"如果出现网络断开\",{\"1\":{\"355\":1}}],[\"如果出现异常\",{\"1\":{\"107\":1}}],[\"如果异常应计为失败\",{\"1\":{\"382\":1}}],[\"如果指定异常列表\",{\"1\":{\"382\":1}}],[\"如果设置为false\",{\"1\":{\"382\":1}}],[\"如果设置为true\",{\"1\":{\"382\":1}}],[\"如果设置了手动确认方式\",{\"1\":{\"107\":1}}],[\"如果只有单条的查询语句\",{\"1\":{\"549\":1}}],[\"如果只记录了9次调用\",{\"1\":{\"382\":1}}],[\"如果只对于具体feignclient配置\",{\"1\":{\"374\":1}}],[\"如果minimumnumberofcalls为10\",{\"1\":{\"382\":1}}],[\"如果滑动窗口类型是count\",{\"1\":{\"382\":1}}],[\"如果剔除掉这个服务实例过了⼀段时间\",{\"1\":{\"366\":1}}],[\"如果eureka与某微服务⻓时间⽆法通信\",{\"1\":{\"366\":1}}],[\"如果exam\",{\"1\":{\"327\":1}}],[\"如果超过等待的时间仍没有元素则退出\",{\"1\":{\"363\":2}}],[\"如果中间参数值存在的话\",{\"1\":{\"363\":1}}],[\"如果该\",{\"1\":{\"363\":2}}],[\"如果在这个注解的类中想要返回对象\",{\"1\":{\"576\":1}}],[\"如果在每个节点中都维护⼀个配置⽂件\",{\"1\":{\"404\":1}}],[\"如果在事务执行之前这个\",{\"1\":{\"358\":1}}],[\"如果在运行时条件很少改变\",{\"1\":{\"158\":1}}],[\"如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止\",{\"1\":{\"344\":3}}],[\"如果列表不包含元素\",{\"1\":{\"316\":1}}],[\"如果移除了所有值\",{\"1\":{\"341\":1}}],[\"如果key存在时新值会覆盖旧值\",{\"1\":{\"338\":1}}],[\"如果当前对象的成员对象是一个集合\",{\"1\":{\"631\":1}}],[\"如果当前要读取的类没有表头校验注解\",{\"1\":{\"599\":1}}],[\"如果当前有事务\",{\"1\":{\"552\":3}}],[\"如果当前有事务就直接加入该事务\",{\"1\":{\"548\":3}}],[\"如果当前分数大于redis中存储的分数或分数一致且时长更短时移除当前redis中的数据且将当前数据存入redis中\",{\"1\":{\"327\":1}}],[\"如果当前redis不存在相同key且未超过排行榜最大人数时直接放入redis即可\",{\"1\":{\"327\":1}}],[\"如果当前为空那么直接将本次数据添加进去即可\",{\"1\":{\"327\":1}}],[\"如果当前你的⽹络中没有运⾏任何\",{\"1\":{\"38\":1}}],[\"如果要扩展\",{\"1\":{\"645\":1}}],[\"如果要转换的json字符串是数组\",{\"1\":{\"606\":1}}],[\"如果要查询数据\",{\"1\":{\"311\":1}}],[\"如果要使用\",{\"1\":{\"202\":1}}],[\"如果未连接则返回\",{\"1\":{\"281\":1}}],[\"如果有多个拦截器的时候\",{\"1\":{\"585\":1}}],[\"如果有多个则以逗号分隔\",{\"1\":{\"487\":1}}],[\"如果有一级请求的情况下\",{\"1\":{\"579\":1}}],[\"如果有mybatis的单独配置文件\",{\"1\":{\"561\":1}}],[\"如果有\",{\"1\":{\"280\":1,\"281\":1}}],[\"如果不能使用父类或者接口\",{\"1\":{\"628\":1}}],[\"如果不需要可以不创建\",{\"1\":{\"560\":1}}],[\"如果不是string类型或者当前属性没有脱敏注解那么直接设置为原始处理的beanproperty\",{\"1\":{\"492\":1}}],[\"如果不存在user\",{\"1\":{\"438\":1}}],[\"如果不存在就创建\",{\"1\":{\"357\":1}}],[\"如果不设置的话默认的是\",{\"1\":{\"262\":1}}],[\"如果不设置的默认是\",{\"1\":{\"262\":1}}],[\"如果不配置则不启⽤此过滤器规则\",{\"1\":{\"438\":1}}],[\"如果不配置\",{\"1\":{\"105\":1,\"106\":1}}],[\"如果已经安装了node请先卸载\",{\"1\":{\"259\":1}}],[\"如果之前已经存在过mysql服务需要先删除掉\",{\"1\":{\"255\":1}}],[\"如果查不到结果后执行\",{\"1\":{\"248\":1}}],[\"如果这个类处理的请求方法是\",{\"1\":{\"579\":1}}],[\"如果这一步报\",{\"1\":{\"238\":1}}],[\"如果这里执行后没有\",{\"1\":{\"76\":1,\"77\":1}}],[\"如果输出\",{\"1\":{\"238\":1}}],[\"如果\",{\"1\":{\"233\":1,\"363\":2}}],[\"如果存在\",{\"1\":{\"209\":1}}],[\"如果网络差\",{\"1\":{\"199\":1}}],[\"如果遇到jsonp请求\",{\"1\":{\"184\":1}}],[\"如果data并没有发生变化\",{\"1\":{\"183\":1}}],[\"如果注册一个局部过滤器\",{\"1\":{\"176\":1}}],[\"如果我们直接进行判断的话后续如果产品又添加了其他检查类型\",{\"1\":{\"634\":1}}],[\"如果我们往集合中存放自定义的对象\",{\"1\":{\"318\":1}}],[\"如果我们不将所有请求拦截就不会出现这些个情况\",{\"1\":{\"122\":1}}],[\"如果我们把document看做是数据库中⼀条记录的话\",{\"1\":{\"29\":1}}],[\"如果消息没有路由到queue\",{\"1\":{\"106\":2}}],[\"如果投递失败会出发\",{\"1\":{\"105\":1}}],[\"如果配置了那么正常情况下使用\",{\"1\":{\"105\":1,\"106\":1}}],[\"如果应用支持多线程\",{\"1\":{\"80\":1}}],[\"如果你在\",{\"1\":{\"42\":1}}],[\"如果你在你的⽹络中启动了若⼲个节点\",{\"1\":{\"38\":1}}],[\"如果你的集群中⾄少\",{\"1\":{\"39\":1}}],[\"如果字典没有⾳节表和部⾸检字表\",{\"1\":{\"28\":1}}],[\"映射器找到相应的处理类时\",{\"1\":{\"574\":1}}],[\"映射直接执行下面那行就可以了\",{\"1\":{\"76\":1,\"77\":1}}],[\"映射\",{\"0\":{\"34\":1},\"1\":{\"57\":1,\"511\":1}}],[\"通俗的说\",{\"1\":{\"631\":1}}],[\"通知定义切入的时间\",{\"1\":{\"540\":1}}],[\"通知定义了增强代码切入到目标代码的时间点\",{\"1\":{\"540\":1}}],[\"通知的类型\",{\"1\":{\"540\":1}}],[\"通知类型不同\",{\"1\":{\"540\":1}}],[\"通知\",{\"1\":{\"540\":1}}],[\"通信\",{\"1\":{\"366\":1}}],[\"通配符规则\",{\"1\":{\"99\":1}}],[\"通配符模式\",{\"0\":{\"99\":1},\"1\":{\"102\":1}}],[\"通配符\",{\"1\":{\"91\":1,\"589\":1}}],[\"通过代理对象访问对象\",{\"1\":{\"659\":1}}],[\"通过class获获取需要必填校验的字段\",{\"1\":{\"599\":2}}],[\"通过cookie匹配\",{\"0\":{\"422\":1}}],[\"通过传入要校验的必填字段来判断都是那些字段需要进行校验\",{\"1\":{\"599\":1}}],[\"通过扩展处理器适配器\",{\"1\":{\"572\":1}}],[\"通过注解方式实现事务\",{\"1\":{\"561\":1}}],[\"通过切入点指定一组方法\",{\"1\":{\"540\":1}}],[\"通过这种⽅式可以巧妙的避开计数器的临界点的问题\",{\"1\":{\"462\":1}}],[\"通过熔断\",{\"1\":{\"448\":1}}],[\"通过模板设置路径\",{\"1\":{\"427\":1}}],[\"通过请求路径匹配\",{\"0\":{\"425\":1}}],[\"通过请求⽅式匹配\",{\"0\":{\"424\":1}}],[\"通过请求参数匹配\",{\"0\":{\"420\":1}}],[\"通过host匹配\",{\"0\":{\"423\":1}}],[\"通过header匹配\",{\"0\":{\"421\":1}}],[\"通过负载均衡策略将请求分摊给多个服务提供者\",{\"1\":{\"390\":1}}],[\"通过负载均衡策略\",{\"1\":{\"390\":1}}],[\"通过给定的key求2个set变量的差值\",{\"1\":{\"363\":1}}],[\"通过分数返回有序集合指定区间内的成员\",{\"1\":{\"351\":1}}],[\"通过字典区间返回有序集合的成员\",{\"1\":{\"351\":1}}],[\"通过指定的配置文件启动服务\",{\"1\":{\"332\":1}}],[\"通过key值依次查找的效率较低\",{\"1\":{\"318\":1}}],[\"通过元素的equals方法\",{\"1\":{\"315\":1}}],[\"通过索引\",{\"1\":{\"351\":1}}],[\"通过索引区间返回有序集合指定区间内的成员\",{\"1\":{\"351\":1}}],[\"通过索引获取列表中的元素\",{\"1\":{\"342\":1}}],[\"通过索引设置列表指定位置的值\",{\"1\":{\"341\":1}}],[\"通过索引就可以精确的操作集合中的元素\",{\"1\":{\"315\":1}}],[\"通过索引快速访问指定位置的元素\",{\"1\":{\"310\":1}}],[\"通过地址进行连接\",{\"1\":{\"311\":1}}],[\"通过内省获取\",{\"1\":{\"298\":1}}],[\"通过类获取\",{\"1\":{\"296\":1}}],[\"通过参数获取id\",{\"1\":{\"225\":1}}],[\"通过id获取英雄数据\",{\"1\":{\"225\":1}}],[\"通过$router\",{\"1\":{\"225\":1}}],[\"通过上一个小节内容可以得出\",{\"1\":{\"201\":1}}],[\"通过计算属性实现字符串的翻转\",{\"1\":{\"183\":1}}],[\"通过界面可以更改数据\",{\"1\":{\"170\":1}}],[\"通过窗口id\",{\"1\":{\"146\":1}}],[\"通过\",{\"1\":{\"86\":1,\"89\":1,\"94\":1,\"97\":1,\"100\":1,\"112\":2,\"156\":1,\"266\":1,\"293\":1,\"294\":2,\"520\":1,\"530\":1,\"572\":1}}],[\"通常是id选择器\",{\"1\":{\"153\":1}}],[\"通常是1秒以内\",{\"1\":{\"36\":1}}],[\"通常多个\",{\"1\":{\"80\":1}}],[\"通常的规则是\",{\"1\":{\"57\":1}}],[\"通常\",{\"1\":{\"32\":1}}],[\"通灵义码\",{\"1\":{\"8\":1}}],[\"类进行的动态代理\",{\"1\":{\"662\":1}}],[\"类与类之间的耦合越弱\",{\"1\":{\"631\":1}}],[\"类之间的耦合越弱\",{\"1\":{\"631\":1}}],[\"类都有自己的属性和方法\",{\"1\":{\"628\":1}}],[\"类的某引用类型属性类型同源\",{\"1\":{\"537\":1}}],[\"类的属性名相同时\",{\"1\":{\"537\":1}}],[\"类\",{\"1\":{\"513\":1}}],[\"类全路径\",{\"1\":{\"291\":1}}],[\"类名\",{\"1\":{\"291\":1}}],[\"类通常是按需加载\",{\"1\":{\"289\":1}}],[\"类加载器\",{\"0\":{\"289\":1}}],[\"类实现接口时不会继承任何接口中定义的注解\",{\"1\":{\"271\":1}}],[\"类似与二级请求也就是\",{\"1\":{\"579\":1}}],[\"类似与网络中的\",{\"1\":{\"80\":1}}],[\"类似\",{\"1\":{\"389\":1,\"436\":1}}],[\"类似于网格布局\",{\"1\":{\"20\":1}}],[\"类型exchange\",{\"1\":{\"99\":1}}],[\"类型与\",{\"1\":{\"99\":1}}],[\"类型\",{\"0\":{\"32\":1},\"1\":{\"109\":1,\"266\":1,\"389\":1,\"417\":1}}],[\"更像bio模式\",{\"1\":{\"508\":1}}],[\"更多的时候是需要在粒度和团队之间找平衡的\",{\"1\":{\"448\":1}}],[\"更换数据库\",{\"1\":{\"336\":1}}],[\"更倾向于使用ip地址\",{\"1\":{\"113\":1}}],[\"更改为true\",{\"1\":{\"520\":1}}],[\"更改其\",{\"1\":{\"106\":1}}],[\"更改了gradle存放位置的在更改后的位置中找到caches清空即可\",{\"1\":{\"17\":1}}],[\"更新商品\",{\"1\":{\"504\":1}}],[\"更新和插入时都进行处理\",{\"1\":{\"466\":1}}],[\"更新时间\",{\"1\":{\"466\":1}}],[\"更新人\",{\"1\":{\"466\":1}}],[\"更新标签中局部的内容\",{\"1\":{\"157\":1}}],[\"更新标签中的内容\",{\"1\":{\"157\":2}}],[\"更新鞋子\",{\"1\":{\"100\":1}}],[\"更新\",{\"1\":{\"31\":1,\"157\":1}}],[\"示例listener\",{\"0\":{\"600\":1}}],[\"示例如下\",{\"1\":{\"304\":1,\"369\":1,\"391\":1}}],[\"示例\",{\"0\":{\"588\":1},\"1\":{\"31\":1,\"32\":1,\"127\":2,\"181\":1,\"183\":1,\"304\":3,\"393\":1}}],[\"示例图\",{\"1\":{\"17\":1,\"43\":1}}],[\"索引位置\",{\"1\":{\"363\":1}}],[\"索引操作\",{\"0\":{\"57\":1}}],[\"索引进行分析和搜索也可以用于配置字段\",{\"1\":{\"55\":1}}],[\"索引用于标识\",{\"1\":{\"55\":1}}],[\"索引中的数据进⾏搜索\",{\"1\":{\"54\":1}}],[\"索引\",{\"0\":{\"31\":1},\"1\":{\"39\":2}}],[\"索引库就是存储索引的保存在磁盘上的⼀系列的⽂件\",{\"1\":{\"29\":1}}],[\"索引库\",{\"1\":{\"29\":1}}],[\"表达无意义的信息之外\",{\"1\":{\"499\":1}}],[\"表达式的原型\",{\"1\":{\"541\":1}}],[\"表达式语言\",{\"1\":{\"530\":1}}],[\"表达式格式\",{\"1\":{\"499\":1}}],[\"表达式可以在\",{\"1\":{\"497\":1}}],[\"表达式\",{\"1\":{\"497\":1}}],[\"表达式替换\",{\"1\":{\"493\":1}}],[\"表现层\",{\"1\":{\"277\":1}}],[\"表示该字段不必须\",{\"1\":{\"597\":1}}],[\"表示切入点表达式\",{\"1\":{\"545\":2}}],[\"表示包\",{\"1\":{\"541\":1}}],[\"表示任意个参数\",{\"1\":{\"541\":1}}],[\"表示可选的部分\",{\"1\":{\"541\":1}}],[\"表示增强的功能\",{\"1\":{\"540\":1}}],[\"表示实体类中的对应的属性名\",{\"1\":{\"524\":1}}],[\"表示数据库表中的列名\",{\"1\":{\"524\":1}}],[\"表示自定义自己的注解privacyencrypt\",{\"1\":{\"493\":1}}],[\"表示自定义注解可以使用在方法上\",{\"1\":{\"272\":1}}],[\"表示自定义注解可以使用在类上\",{\"1\":{\"272\":1}}],[\"表示业务调用成功\",{\"1\":{\"487\":1}}],[\"表示没有权限访问\",{\"1\":{\"437\":1}}],[\"表示愿路径\",{\"1\":{\"427\":1}}],[\"表示使⽤本地配置存储\",{\"1\":{\"407\":1}}],[\"表示\",{\"1\":{\"405\":1}}],[\"表示信号量隔离\",{\"1\":{\"384\":1}}],[\"表示⾃动从open变成half\",{\"1\":{\"440\":1}}],[\"表示⾃动从\",{\"1\":{\"382\":1}}],[\"表示10个请求\",{\"1\":{\"382\":1,\"440\":1}}],[\"表示从微服务注册中⼼\",{\"1\":{\"417\":1}}],[\"表示从头消费\",{\"1\":{\"357\":1}}],[\"表示从尾部开始消费\",{\"1\":{\"357\":1}}],[\"表示最大值\",{\"1\":{\"356\":2}}],[\"表示最小值\",{\"1\":{\"356\":2}}],[\"表示已经过期\",{\"1\":{\"336\":1}}],[\"表示当前方法的返回值是对象\",{\"1\":{\"577\":1}}],[\"表示当前接口及其实现类\",{\"1\":{\"541\":1}}],[\"表示当前及其子类\",{\"1\":{\"541\":1}}],[\"表示当前及其子包路径\",{\"1\":{\"541\":1}}],[\"表示当前\",{\"1\":{\"266\":1}}],[\"表示运行系统命令\",{\"1\":{\"244\":1}}],[\"表示消费端收到消息后的确认方式\",{\"1\":{\"107\":1}}],[\"表格案例\",{\"0\":{\"178\":1,\"186\":1,\"187\":1,\"188\":1,\"189\":1}}],[\"表格及地图对数据进⾏多元化的分析和呈现\",{\"1\":{\"54\":1}}],[\"表单进行绑定\",{\"1\":{\"224\":1}}],[\"表单中设置value值没用\",{\"1\":{\"170\":1}}],[\"表单元素绑定的数据改变\",{\"1\":{\"171\":1}}],[\"表单元素会将\",{\"1\":{\"170\":1}}],[\"表单元素的绑定\",{\"1\":{\"170\":1}}],[\"表名称\",{\"1\":{\"135\":1}}],[\"表的列\",{\"1\":{\"30\":1}}],[\"表记录\",{\"1\":{\"30\":1}}],[\"对特殊方法无法处理\",{\"1\":{\"665\":1}}],[\"对其所有的方法进行增强\",{\"1\":{\"665\":1}}],[\"对其加上忽略权限\",{\"1\":{\"294\":1}}],[\"对方法进行参数注入\",{\"1\":{\"663\":1}}],[\"对方法加锁\",{\"1\":{\"646\":1}}],[\"对方法中的某几行的代码进行开启提交回滚\",{\"1\":{\"549\":1}}],[\"对软件测试的影响\",{\"1\":{\"626\":1}}],[\"对修改关闭\",{\"1\":{\"626\":1}}],[\"对数据分段解密\",{\"1\":{\"622\":1}}],[\"对数据分段加密\",{\"1\":{\"622\":1}}],[\"对相应的处理器发起处理\",{\"1\":{\"574\":1}}],[\"对处理器进行执行\",{\"1\":{\"572\":1}}],[\"对具体的用户请求进行处理\",{\"1\":{\"571\":1}}],[\"对整个方法进行开启提交回滚\",{\"1\":{\"549\":1}}],[\"对jdbc进行了封装\",{\"1\":{\"511\":1}}],[\"对列\",{\"1\":{\"504\":1}}],[\"对系统进⾏有效的保护\",{\"1\":{\"448\":1}}],[\"对指定的路由⽣效\",{\"1\":{\"436\":1}}],[\"对所有路由⽣效\",{\"1\":{\"436\":1}}],[\"对所有的请求添加过滤器\",{\"1\":{\"435\":1}}],[\"对所有的请求路径添加前缀\",{\"1\":{\"428\":1}}],[\"对所有\",{\"1\":{\"374\":1}}],[\"对一个\",{\"1\":{\"363\":2}}],[\"对一个列表进行修建\",{\"1\":{\"345\":1}}],[\"对流进行修剪\",{\"1\":{\"356\":1}}],[\"对分数进行指定增量\",{\"0\":{\"352\":1}}],[\"对key所存储的值减去指定的减量值\",{\"1\":{\"340\":1}}],[\"对key中存储的数字值减一\",{\"1\":{\"340\":1}}],[\"对key的值加上指定的浮点增值量\",{\"1\":{\"340\":1}}],[\"对key的值加上指定的增值量\",{\"1\":{\"340\":1}}],[\"对于引用类型属性的注入\",{\"1\":{\"537\":1}}],[\"对于服务之间的负载调⽤\",{\"1\":{\"448\":1}}],[\"对于请求头user\",{\"1\":{\"438\":1}}],[\"对于统⼀配置中⼼上的数据的变更需要推送到相应的服务节点实现动态跟新\",{\"1\":{\"404\":1}}],[\"对于反射的操作\",{\"1\":{\"298\":1}}],[\"对于作为⽤户的你来说\",{\"1\":{\"39\":1}}],[\"对高亮进行标注\",{\"1\":{\"71\":1}}],[\"对象type\",{\"1\":{\"518\":1}}],[\"对象分析\",{\"0\":{\"512\":1}}],[\"对象中要实现inserted方法\",{\"1\":{\"181\":1}}],[\"对象\",{\"0\":{\"62\":1,\"162\":1,\"166\":1,\"168\":1},\"1\":{\"62\":1,\"163\":1,\"291\":1,\"293\":1,\"303\":1,\"304\":1,\"389\":1,\"515\":1}}],[\"对\",{\"0\":{\"541\":1},\"1\":{\"54\":1,\"303\":1,\"304\":1,\"529\":1,\"664\":1}}],[\"对⽂档数据根据不同属性进⾏的分类标识\",{\"1\":{\"33\":1}}],[\"对应到配置⽂件上来就是以\",{\"1\":{\"405\":1}}],[\"对应到配置⽂件上来\",{\"1\":{\"405\":1}}],[\"对应的set方法名\",{\"1\":{\"304\":3}}],[\"对应\",{\"1\":{\"30\":4}}],[\"对每⼀个字的解释是⾮结构化的\",{\"1\":{\"28\":1}}],[\"数\",{\"1\":{\"382\":1}}],[\"数量\",{\"1\":{\"356\":4,\"363\":2}}],[\"数值越小\",{\"1\":{\"266\":1}}],[\"数组+链表实现\",{\"1\":{\"318\":1}}],[\"数组是在内存中开辟一段连续的空间\",{\"1\":{\"310\":1}}],[\"数组中的值\",{\"1\":{\"197\":1}}],[\"数组\",{\"0\":{\"161\":1,\"167\":1,\"169\":1,\"310\":1},\"1\":{\"163\":1}}],[\"数据填充\",{\"1\":{\"584\":1}}],[\"数据源\",{\"1\":{\"518\":1}}],[\"数据源的名称\",{\"1\":{\"518\":1}}],[\"数据监控等\",{\"1\":{\"448\":1}}],[\"数据结构\",{\"0\":{\"307\":1}}],[\"数据链路层\",{\"1\":{\"277\":1}}],[\"数据\",{\"1\":{\"175\":2,\"176\":1,\"192\":1}}],[\"数据发生变化可以更新到界面\",{\"1\":{\"170\":1}}],[\"数据驱动视图\",{\"1\":{\"154\":1}}],[\"数据对象\",{\"1\":{\"154\":1}}],[\"数据截图\",{\"1\":{\"46\":1}}],[\"数据表\",{\"1\":{\"30\":1}}],[\"数据库连接配置文件\",{\"0\":{\"559\":1}}],[\"数据库中的类型column的类型\",{\"1\":{\"524\":1}}],[\"数据库配置\",{\"0\":{\"519\":1}}],[\"数据库字段名\",{\"1\":{\"304\":3}}],[\"数据库不存在时创建\",{\"1\":{\"129\":1}}],[\"数据库\",{\"1\":{\"30\":1},\"2\":{\"130\":1,\"144\":1}}],[\"数学科学计算器\",{\"1\":{\"11\":1}}],[\"搜索功能\",{\"0\":{\"189\":1}}],[\"搜索或者其它任何需要影响\",{\"1\":{\"57\":1}}],[\"搜索分词器\",{\"1\":{\"57\":1}}],[\"搜索数据\",{\"1\":{\"55\":1}}],[\"搜索服务器\",{\"1\":{\"49\":1,\"50\":1}}],[\"搜索\",{\"1\":{\"30\":1,\"31\":1,\"53\":1}}],[\"还是之后执行等\",{\"1\":{\"540\":1}}],[\"还是编入class文件中\",{\"1\":{\"271\":1}}],[\"还添加了对\",{\"1\":{\"533\":1}}],[\"还可以将\",{\"1\":{\"420\":1}}],[\"还可以限定\",{\"1\":{\"419\":1}}],[\"还可以填充整个剩余空间\",{\"1\":{\"21\":1}}],[\"还有本地⽂件存储\",{\"1\":{\"407\":1}}],[\"还有两个特殊状态\",{\"1\":{\"382\":1}}],[\"还原命令\",{\"1\":{\"244\":1}}],[\"还支持一个可选的第二个参数\",{\"1\":{\"161\":1}}],[\"还会索引\",{\"1\":{\"30\":1}}],[\"的研究项目\",{\"1\":{\"631\":1}}],[\"的定义是\",{\"1\":{\"630\":1}}],[\"的链接数据\",{\"1\":{\"589\":1}}],[\"的延申标签\",{\"1\":{\"579\":1}}],[\"的控制下\",{\"1\":{\"571\":1}}],[\"的存在降低了组件之间的耦合性\",{\"1\":{\"569\":1}}],[\"的大脑\",{\"1\":{\"569\":1}}],[\"的启动配置里选择\",{\"1\":{\"564\":1}}],[\"的启动器添加当前服务是\",{\"1\":{\"368\":1}}],[\"的默认为repeatable\",{\"1\":{\"547\":1}}],[\"的注解适配自动代理生成器\",{\"1\":{\"546\":1}}],[\"的标识方法\",{\"1\":{\"545\":1}}],[\"的自动代理生成器\",{\"1\":{\"545\":1}}],[\"的代理对象\",{\"1\":{\"545\":1}}],[\"的方法是不能作为连接点与切入点的\",{\"1\":{\"540\":1}}],[\"的方式\",{\"1\":{\"159\":1,\"538\":1}}],[\"的value属性用于指定要匹配的bean的id值\",{\"1\":{\"538\":1}}],[\"的配置文件时\",{\"1\":{\"535\":1}}],[\"的区别是\",{\"1\":{\"535\":1}}],[\"的所有功能\",{\"1\":{\"533\":1}}],[\"的所有字段和值\",{\"1\":{\"349\":1}}],[\"的子接口\",{\"1\":{\"533\":1}}],[\"的子标签\",{\"1\":{\"523\":5}}],[\"的工厂\",{\"1\":{\"532\":1}}],[\"的功能\",{\"1\":{\"530\":1}}],[\"的功能很强⼤\",{\"1\":{\"418\":1}}],[\"的使用难度\",{\"1\":{\"529\":1}}],[\"的直接支持\",{\"1\":{\"529\":1}}],[\"的提交和回滚\",{\"1\":{\"518\":1}}],[\"的持久层框架\",{\"1\":{\"511\":1}}],[\"的组合\",{\"1\":{\"511\":1,\"578\":1}}],[\"的一个名为迪米特\",{\"1\":{\"631\":1}}],[\"的一个开源项目\",{\"1\":{\"511\":1}}],[\"的一部分\",{\"1\":{\"289\":1}}],[\"的交换机\",{\"1\":{\"504\":1}}],[\"的值以键值对的⽅式进⾏配置\",{\"1\":{\"420\":1}}],[\"的值进行加减操作\",{\"1\":{\"363\":2}}],[\"的表单才会被匹配到进行请求转发\",{\"1\":{\"419\":1}}],[\"的表单或者满足正则\",{\"1\":{\"419\":1}}],[\"的特性实现了各种路由匹配规则\",{\"1\":{\"419\":1}}],[\"的特性来进行前端路由切换\",{\"1\":{\"201\":1}}],[\"的设计就可以看出来\",{\"1\":{\"418\":1}}],[\"的⽬标\",{\"1\":{\"413\":1}}],[\"的⼀个全新项⽬\",{\"1\":{\"413\":1}}],[\"的机制来实现不同的环境的切换\",{\"1\":{\"404\":1}}],[\"的客户端\",{\"1\":{\"373\":1}}],[\"的依赖\",{\"1\":{\"369\":1}}],[\"的服务在\",{\"1\":{\"391\":1}}],[\"的服务\",{\"1\":{\"368\":1,\"389\":1}}],[\"的监视\",{\"1\":{\"358\":1}}],[\"的基数估算值\",{\"1\":{\"354\":1}}],[\"的优点是\",{\"1\":{\"354\":1}}],[\"的成员\",{\"1\":{\"346\":1}}],[\"的实现\",{\"0\":{\"541\":1},\"1\":{\"659\":1}}],[\"的实现类之一\",{\"1\":{\"316\":1}}],[\"的实例化工作\",{\"1\":{\"534\":1}}],[\"的实时数据变化\",{\"1\":{\"54\":1}}],[\"的源码路径\",{\"1\":{\"248\":2}}],[\"的包上传到\",{\"1\":{\"248\":1}}],[\"的路由表上面加上\",{\"1\":{\"229\":1}}],[\"的封装组件\",{\"1\":{\"210\":1}}],[\"的核心深度集成\",{\"1\":{\"202\":1}}],[\"的过期时间\",{\"1\":{\"109\":1,\"363\":1}}],[\"的消息缓存中移除\",{\"1\":{\"107\":1}}],[\"的时候\",{\"1\":{\"104\":1}}],[\"的时候使用通配符\",{\"1\":{\"99\":1}}],[\"的队列\",{\"1\":{\"91\":2}}],[\"的分发依据\",{\"1\":{\"80\":1}}],[\"的第一站\",{\"1\":{\"80\":1}}],[\"的开销\",{\"1\":{\"80\":1}}],[\"的开销将是巨大的\",{\"1\":{\"80\":1}}],[\"的搜索\",{\"1\":{\"57\":1}}],[\"的终端路径\",{\"1\":{\"42\":1}}],[\"的集群\",{\"1\":{\"38\":1}}],[\"的集群中\",{\"1\":{\"38\":2}}],[\"的fields\",{\"1\":{\"30\":1}}],[\"的文档\",{\"1\":{\"30\":1}}],[\"的类型\",{\"1\":{\"30\":1}}],[\"的索引\",{\"1\":{\"30\":1}}],[\"的\",{\"1\":{\"30\":1,\"105\":1,\"158\":1,\"192\":1,\"293\":2,\"294\":4,\"295\":1,\"296\":1,\"354\":1,\"363\":2,\"413\":1,\"418\":1,\"532\":1,\"537\":3,\"545\":1,\"558\":1}}],[\"术语解释\",{\"0\":{\"156\":1},\"1\":{\"413\":1,\"540\":1}}],[\"术语\",{\"0\":{\"30\":1}}],[\"但两者是不同的\",{\"1\":{\"630\":1}}],[\"但不能改变父类原有的功能\",{\"1\":{\"628\":1}}],[\"但这样的同源的被调用\",{\"1\":{\"537\":1}}],[\"但没有超过限制\",{\"1\":{\"461\":1}}],[\"但本质上是有区别的\",{\"1\":{\"448\":1}}],[\"但有时同源策略会对我们的合理⽤途造成影响\",{\"1\":{\"443\":1}}],[\"但\",{\"1\":{\"363\":2}}],[\"但它有个缺点就是消息无法持久化\",{\"1\":{\"355\":1}}],[\"但对于内存系统来说没有上下文切换效率就是最高的\",{\"1\":{\"334\":1}}],[\"但绝大多数情况下servlet只用来扩展基于http协议的web服务器\",{\"1\":{\"265\":1}}],[\"但是要有限度\",{\"1\":{\"630\":1}}],[\"但是要和elasticsearch的安装⽬录区别开\",{\"1\":{\"41\":1}}],[\"但是整个继承体系的可复用性会比较差\",{\"1\":{\"628\":1}}],[\"但是含义不同\",{\"1\":{\"579\":1}}],[\"但是他是springmvc运转历程中的重要的一个控制器\",{\"1\":{\"570\":1}}],[\"但是仍然存在时间⽚段的概念\",{\"1\":{\"462\":1}}],[\"但是将间隔临界的⼀段时间内的请求就会超过系统限制\",{\"1\":{\"461\":1}}],[\"但是效果不错也⽀持超时失败\",{\"1\":{\"455\":1}}],[\"但是代价就是线程上下⽂切换的\",{\"1\":{\"455\":1}}],[\"但是管理⼤量的微服务也会越复杂\",{\"1\":{\"448\":1}}],[\"但是⽹关上堆积多了就会给⽹关乃⾄整个服务都造成巨⼤的压⼒\",{\"1\":{\"439\":1}}],[\"但是在项⽬开发阶段\",{\"1\":{\"407\":1}}],[\"但是在实际业务处理中\",{\"1\":{\"107\":1}}],[\"但是\",{\"1\":{\"382\":1,\"443\":1,\"630\":1,\"631\":1}}],[\"但是当位于一个桶中的元素较多\",{\"1\":{\"318\":1}}],[\"但是企业很多还在用2\",{\"1\":{\"212\":1}}],[\"但是必须得return\",{\"1\":{\"183\":1}}],[\"但是不会合并重复的\",{\"1\":{\"166\":1}}],[\"但是不再发送到队列中\",{\"1\":{\"91\":1}}],[\"但是我们是不能放开所有请求的\",{\"1\":{\"122\":1}}],[\"但是可以使用\",{\"1\":{\"111\":1}}],[\"但是如果我们换成刚才查询使用的\",{\"1\":{\"53\":1}}],[\"但是你事后不能改变分⽚的数量\",{\"1\":{\"39\":1}}],[\"但是它的⽬的是通过简单的restful\",{\"1\":{\"29\":1}}],[\"但在处理实时搜索应⽤时效率明显低于\",{\"1\":{\"29\":1}}],[\"官⽹对版本进⾏如下解释\",{\"1\":{\"448\":1}}],[\"官⽅推荐使⽤resilience4j代替hystrix\",{\"1\":{\"381\":1}}],[\"官⽅提供的功能更多\",{\"1\":{\"29\":1}}],[\"官方自带的性能测试工具\",{\"1\":{\"333\":1}}],[\"官方文档\",{\"1\":{\"236\":1}}],[\"官方的路由管理器\",{\"1\":{\"202\":1}}],[\"官方\",{\"0\":{\"151\":1}}],[\"官网地址\",{\"1\":{\"617\":1}}],[\"官网地址为\",{\"1\":{\"146\":1}}],[\"官网下载地址为\",{\"1\":{\"251\":1}}],[\"官网对应模式介绍\",{\"1\":{\"80\":1}}],[\"官网\",{\"1\":{\"7\":1,\"331\":1}}],[\"⽽紧接着跨⼊下⼀个计数周期\",{\"1\":{\"461\":1}}],[\"⽽12\",{\"1\":{\"461\":1}}],[\"⽽漏桶容量是不变的\",{\"1\":{\"459\":1}}],[\"⽽不是显式地去创建线程池\",{\"1\":{\"455\":1}}],[\"⽽信号量隔离⾮常轻量级\",{\"1\":{\"455\":1}}],[\"⽽重⽤性关注的是服务的复⽤\",{\"1\":{\"448\":1}}],[\"⽽webflux框架底层则使⽤了⾼性能的reactor模式通信框架netty\",{\"1\":{\"413\":1}}],[\"⽽为了提升⽹关的性能\",{\"1\":{\"413\":1}}],[\"⽽spring\",{\"1\":{\"404\":1}}],[\"⽽r4j允许执⾏可配置次数的请求\",{\"1\":{\"381\":1}}],[\"⽽r4j提供了⼀些⾼阶函数\",{\"1\":{\"381\":1}}],[\"⽽archaius需要更多的外部依赖\",{\"1\":{\"381\":1}}],[\"⽽任⼀节点都没有这样⼤的磁盘空间\",{\"1\":{\"39\":1}}],[\"⽽且还有很多不确定因素引起雪\",{\"1\":{\"451\":1}}],[\"⽽且\",{\"1\":{\"38\":1}}],[\"⽽json是⼀个到处存在的互联⽹数据交互格式\",{\"1\":{\"35\":1}}],[\"⽽⾮成⾏成列的数据\",{\"1\":{\"30\":1}}],[\"⽽\",{\"1\":{\"29\":3}}],[\"它强调以下两点\",{\"1\":{\"631\":1}}],[\"它要求一个对象应该对其他对象有最少的了解\",{\"1\":{\"631\":1}}],[\"它针对的是程序中的实现和细节\",{\"1\":{\"630\":1}}],[\"它降低了客户与实现模块之间的耦合\",{\"1\":{\"629\":1}}],[\"它克服了继承中重写父类造成的可复用性变差的缺点\",{\"1\":{\"628\":1}}],[\"它为良好的继承定义了一个规范\",{\"1\":{\"628\":1}}],[\"它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性\",{\"1\":{\"626\":1}}],[\"它就相当于\",{\"1\":{\"569\":1}}],[\"它可以获取类路径之外的资源\",{\"1\":{\"535\":1}}],[\"它可以近乎实时的存储\",{\"1\":{\"29\":1}}],[\"它与\",{\"1\":{\"535\":1}}],[\"它与collection\",{\"1\":{\"317\":1}}],[\"它主要负责初始化各种\",{\"1\":{\"532\":1}}],[\"它以一种类似于\",{\"1\":{\"530\":1}}],[\"它移除了编码式单例的需要\",{\"1\":{\"530\":1}}],[\"它会创建有如下特性的\",{\"1\":{\"515\":1}}],[\"它利⽤spring\",{\"1\":{\"448\":1}}],[\"它发起⼀个资源路径为aaa\",{\"1\":{\"443\":1}}],[\"它通过参数中的主机地址作为匹配规则\",{\"1\":{\"423\":1}}],[\"它旨在为微服务架构提供⼀种简单有效的统⼀的\",{\"1\":{\"413\":1}}],[\"它旨在是编写http客户端变得更加容易\",{\"1\":{\"372\":1}}],[\"它不仅提供了\",{\"1\":{\"533\":1}}],[\"它不会自己去尝试加载这个类\",{\"1\":{\"289\":1}}],[\"它不在android的基础api包里\",{\"1\":{\"20\":1}}],[\"它的内部封装了jdbc\",{\"1\":{\"511\":1}}],[\"它的父加载器为ext\",{\"1\":{\"289\":1}}],[\"它的父加载器是bootstrapclassloader\",{\"1\":{\"289\":1}}],[\"它的⽂档怎样聚合回搜索请求\",{\"1\":{\"39\":1}}],[\"它和\",{\"1\":{\"202\":1}}],[\"它对文件进行管理\",{\"1\":{\"112\":1}}],[\"它包含⼀下操作符\",{\"1\":{\"57\":1}}],[\"它很简单\",{\"1\":{\"54\":1}}],[\"它是动作正确性的保证\",{\"1\":{\"628\":1}}],[\"它是根据\",{\"1\":{\"532\":1}}],[\"它是一个带有索引的集合\",{\"1\":{\"315\":1}}],[\"它是一个元素存取有序的集合\",{\"1\":{\"315\":1}}],[\"它是\",{\"1\":{\"54\":1}}],[\"它是以开源项⽬lucene为应⽤主体的\",{\"1\":{\"51\":1}}],[\"它提供了⼀个分布式多⽤户能⼒的全⽂搜索引擎\",{\"1\":{\"46\":1,\"53\":1}}],[\"它们将会⾃动地形成并加⼊到⼀个叫做\",{\"1\":{\"38\":1}}],[\"它们共同持有整个的数据\",{\"1\":{\"37\":1}}],[\"它存储数据\",{\"1\":{\"38\":1}}],[\"简易的示例监听器\",{\"1\":{\"600\":1}}],[\"简易模板\",{\"1\":{\"212\":1}}],[\"简化开发\",{\"1\":{\"529\":1}}],[\"简化模板代码\",{\"0\":{\"215\":1}}],[\"简称\",{\"1\":{\"625\":1}}],[\"简称队\",{\"1\":{\"309\":1}}],[\"简称spa\",{\"0\":{\"199\":1}}],[\"简称为es\",{\"1\":{\"29\":1}}],[\"简写为\",{\"1\":{\"625\":6}}],[\"简写\",{\"1\":{\"165\":1}}],[\"简单点说就是是\",{\"1\":{\"626\":1}}],[\"简单说\",{\"1\":{\"404\":1}}],[\"简单测试下\",{\"1\":{\"333\":1}}],[\"简单的理解\",{\"1\":{\"312\":1}}],[\"简单业务\",{\"1\":{\"212\":1}}],[\"简单使用\",{\"0\":{\"604\":1},\"1\":{\"146\":1}}],[\"简单模式差不多一样的代码注释可以在简单模式案例中查看\",{\"1\":{\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2}}],[\"简单模式可以传递队列名称\",{\"1\":{\"85\":1,\"86\":1}}],[\"简单模式\",{\"0\":{\"85\":1},\"1\":{\"80\":1,\"102\":1}}],[\"简单来说就是\",{\"1\":{\"30\":1,\"659\":1}}],[\"简介\",{\"0\":{\"288\":1,\"298\":1},\"1\":{\"29\":1,\"51\":1,\"54\":1,\"80\":1,\"104\":1,\"107\":1,\"110\":1,\"111\":1,\"112\":1,\"304\":1,\"366\":1,\"372\":1,\"381\":1,\"382\":1,\"389\":1,\"390\":1,\"393\":1,\"404\":1,\"413\":1,\"414\":1,\"419\":1,\"443\":1,\"448\":2,\"451\":1,\"458\":1,\"511\":1,\"625\":1,\"659\":1,\"660\":1,\"661\":1,\"662\":1,\"665\":1}}],[\"凡是将来要从document中获取的field都要存储\",{\"1\":{\"29\":1}}],[\"⾝份证号不⽤分词但也要索引\",{\"1\":{\"29\":1}}],[\"商品简介分析后进⾏索引\",{\"1\":{\"29\":1}}],[\"商品名称\",{\"1\":{\"29\":2}}],[\"将要扫描的文件全路径写入到对应文件\",{\"1\":{\"655\":1}}],[\"将每个检查流程进行分隔处理且互相不影响各自的执行\",{\"1\":{\"634\":1}}],[\"将每个具体的业务服务构成可独⽴运⾏的微服务\",{\"1\":{\"448\":1}}],[\"将引用其他对象的次数降到最低\",{\"1\":{\"631\":1}}],[\"将臃肿庞大的接口分解为多个粒度小的接口\",{\"1\":{\"630\":1}}],[\"将对象解耦\",{\"1\":{\"627\":1}}],[\"将结果交给视图解析器viewresolver进行解析\",{\"1\":{\"574\":1}}],[\"将结果直接返回给前端控制器dispathcherservlet\",{\"1\":{\"574\":1}}],[\"将结果返回给前端控制器dispatcherservlet\",{\"1\":{\"574\":1}}],[\"将这些包中添加注解之后对象的创建权限交给spring容器\",{\"1\":{\"561\":1}}],[\"将这个目录下的\",{\"1\":{\"239\":1}}],[\"将遍历的结果用\",{\"1\":{\"524\":1}}],[\"将sqlsession和线程进行绑定\",{\"1\":{\"520\":1}}],[\"将source尾部移除一个值\",{\"1\":{\"344\":1}}],[\"将本次使用的\",{\"1\":{\"520\":1}}],[\"将从由当前环境配置的\",{\"1\":{\"515\":1}}],[\"将从桶中删除n个令牌\",{\"1\":{\"460\":1}}],[\"将一个复杂对象的构建与它的表示分离\",{\"1\":{\"514\":1}}],[\"将队列绑定到交换机中\",{\"1\":{\"504\":1}}],[\"将拦截器进行注册\",{\"0\":{\"482\":1}}],[\"将⽹关路由包装在断路器中\",{\"1\":{\"439\":1}}],[\"将链路数据发送给rabbitmq\",{\"1\":{\"400\":1}}],[\"将链表转换为红黑树\",{\"1\":{\"318\":1}}],[\"将请求转发到不同的执⾏单元上\",{\"1\":{\"390\":1}}],[\"将请求的结果和配置的阈值进⾏⽐较来决定是否关闭断路器\",{\"1\":{\"381\":1}}],[\"将允许处理的最⼤请求重置为2\",{\"1\":{\"386\":1}}],[\"将会统计记录最近slidingwindowsize秒的调用结果\",{\"1\":{\"382\":1}}],[\"将会统计记录最近slidingwindowsize次调用的结果\",{\"1\":{\"382\":1}}],[\"将调用的结果记录在滑动窗口中\",{\"1\":{\"382\":1}}],[\"将⾃⼰的⽹络地址等信息注册到eureka\",{\"1\":{\"366\":1}}],[\"将数据放入set缓存\",{\"1\":{\"363\":1}}],[\"将数据发送刀另一台计算机的软件中的过程\",{\"1\":{\"277\":1}}],[\"将报错\",{\"1\":{\"363\":2}}],[\"将创建一个key\",{\"1\":{\"363\":2}}],[\"将值放入缓存并设置时间\",{\"1\":{\"363\":1}}],[\"将值放入缓存\",{\"1\":{\"363\":1}}],[\"将消息标记为\",{\"1\":{\"357\":1}}],[\"将消息交给所有绑定到交换机的队列\",{\"1\":{\"91\":1}}],[\"将多个\",{\"1\":{\"354\":1}}],[\"将哈希表key中的字段field的值不存在时\",{\"1\":{\"349\":1}}],[\"将哈希表key中的字段field的值设置为value\",{\"1\":{\"349\":1}}],[\"将弹出的元素插入到另外一个列表中并返回它\",{\"1\":{\"344\":1}}],[\"将key中存储的数字值增1\",{\"1\":{\"340\":1}}],[\"将key的value进行覆写\",{\"1\":{\"339\":1}}],[\"将key从当前数据库移动至指定数据库中\",{\"1\":{\"336\":1}}],[\"将key从redis中删除\",{\"1\":{\"336\":1}}],[\"将当前数据库清空\",{\"1\":{\"336\":1}}],[\"将当前序列值设置为当前表最大id值\",{\"1\":{\"135\":1}}],[\"将参数修改为yes\",{\"1\":{\"332\":1}}],[\"将redis配置文件复制到\",{\"1\":{\"332\":1}}],[\"将安装包上传到linux服务器上并解压\",{\"1\":{\"332\":1}}],[\"将元素推入此列表所表示的堆栈\",{\"1\":{\"316\":1}}],[\"将指定的元素\",{\"1\":{\"315\":1}}],[\"将指定的元素追加到此列表的末尾\",{\"1\":{\"315\":1,\"316\":1}}],[\"将指定新元素存储在指定索引位置\",{\"1\":{\"310\":1}}],[\"将节点插入后\",{\"1\":{\"312\":1}}],[\"将\",{\"1\":{\"283\":1,\"284\":1,\"303\":1,\"346\":1,\"545\":1}}],[\"将此套接字转换为\",{\"1\":{\"281\":1}}],[\"将此套接字的输入流放在\",{\"1\":{\"281\":1}}],[\"将此套接字连接到服务器\",{\"1\":{\"281\":1}}],[\"将套接字绑定到本地地址\",{\"1\":{\"281\":1}}],[\"将下载好的\",{\"1\":{\"248\":1}}],[\"将下面这个定时任务写进去\",{\"1\":{\"244\":1}}],[\"将项目所需样式导入到项目中\",{\"1\":{\"217\":1}}],[\"将2\",{\"1\":{\"212\":1}}],[\"将value放置于第一个该值前\",{\"1\":{\"363\":1}}],[\"将value关联到key\",{\"1\":{\"337\":1}}],[\"将v\",{\"1\":{\"173\":1}}],[\"将不会按照期望指向\",{\"1\":{\"155\":1}}],[\"将自增序列以下面这种形式弄好后\",{\"1\":{\"135\":1}}],[\"将其织入\",{\"1\":{\"545\":1}}],[\"将其发送到\",{\"1\":{\"413\":1}}],[\"将其唯一值设置为外部列表进行存储且使用这个来进行存储\",{\"1\":{\"324\":1}}],[\"将其替换为字节公共库中的资源就可以打开\",{\"1\":{\"123\":1}}],[\"将其提取为一个工具类\",{\"1\":{\"84\":1}}],[\"将上面的划分桶\",{\"1\":{\"77\":1}}],[\"将实体类转换\",{\"0\":{\"63\":1}}],[\"将格式化地输出\",{\"1\":{\"42\":1}}],[\"将返回集群中⽂档数量\",{\"1\":{\"42\":1}}],[\"将elasticsearch\",{\"1\":{\"41\":1}}],[\"将field值存储在⽂档中\",{\"1\":{\"29\":1}}],[\"将field分析后的词或整个field值进⾏索引\",{\"1\":{\"29\":1}}],[\"将⾮结构化数据中的⼀部分信息提取出来\",{\"1\":{\"28\":1}}],[\"⼀般微服务容错组件提供了限流\",{\"1\":{\"451\":1}}],[\"⼀般需要查询的字段都是⽂本类型的\",{\"1\":{\"29\":1}}],[\"⼀但服务规模扩⼤就意味着服务的构建\",{\"1\":{\"448\":1}}],[\"⼀组匹配的域名列表\",{\"1\":{\"423\":1}}],[\"⼀组断⾔和⼀组过滤器定义\",{\"1\":{\"413\":1,\"414\":1}}],[\"⼀样\",{\"1\":{\"421\":1}}],[\"⼀旦配置⽂件中的某个属性需要修改\",{\"1\":{\"404\":1}}],[\"⼀旦程序重启\",{\"1\":{\"401\":1}}],[\"⼀旦复制了\",{\"1\":{\"39\":1}}],[\"⼀些核⼼注解⽤来定义⼀个请求的开始和结束\",{\"1\":{\"396\":1}}],[\"⼀系列span组成的⼀个树状结构\",{\"1\":{\"396\":1}}],[\"⼀种是和resttemplate相结合\",{\"1\":{\"390\":1}}],[\"⼀种独⽴进程单元\",{\"1\":{\"390\":1}}],[\"⼀起使⽤熔断器库\",{\"1\":{\"439\":1}}],[\"⼀起\",{\"1\":{\"366\":1}}],[\"⼀个固定容量的漏桶\",{\"1\":{\"459\":1}}],[\"⼀个请求满⾜多个路由的断⾔条件时\",{\"1\":{\"426\":1}}],[\"⼀个是正则表达式\",{\"1\":{\"422\":1}}],[\"⼀个是\",{\"1\":{\"422\":1}}],[\"⼀个是属性名⼀个为属性值\",{\"1\":{\"420\":1}}],[\"⼀个header\",{\"1\":{\"421\":1}}],[\"⼀个⽬标\",{\"1\":{\"414\":1}}],[\"⼀个⽬标uri\",{\"1\":{\"413\":1}}],[\"⼀个route模块由⼀个\",{\"1\":{\"413\":1,\"414\":1}}],[\"⼀个服务既可以是服务消费者\",{\"1\":{\"366\":1}}],[\"⼀个\",{\"1\":{\"42\":1}}],[\"⼀个具有10亿⽂档的索引占据1tb的磁盘空间\",{\"1\":{\"39\":1}}],[\"⼀个节点可以通过配置集群名称的⽅式来加⼊⼀个指定的集群\",{\"1\":{\"38\":1}}],[\"⼀个节点也是由⼀个名字来标识的\",{\"1\":{\"38\":1}}],[\"⼀个节点是集群中的⼀个服务器\",{\"1\":{\"38\":1}}],[\"⼀个集群由⼀个唯⼀的名字标识\",{\"1\":{\"37\":1}}],[\"⼀个集群就是由⼀个或多个节点组织在⼀起\",{\"1\":{\"37\":1}}],[\"⼀个集群中\",{\"1\":{\"31\":1}}],[\"⼀个⽂档是⼀个可被索引的基础信息单元\",{\"1\":{\"35\":1}}],[\"⼀个类型是你的索引的⼀个逻辑上的分类\",{\"1\":{\"32\":1}}],[\"⼀个索引也可以被复制0次\",{\"1\":{\"39\":1}}],[\"⼀个索引可以存储超出单个结点硬件限制的⼤量数据\",{\"1\":{\"39\":1}}],[\"⼀个索引就是⼀个拥有⼏分相似特征的⽂档的集合\",{\"1\":{\"31\":1}}],[\"⼀个索引库相当于数据库中的⼀张表\",{\"1\":{\"29\":1}}],[\"就越有利于实现可复用的目标\",{\"1\":{\"631\":1}}],[\"就能在项目中满足这个规则\",{\"1\":{\"629\":1}}],[\"就能完成对数据的持久化操作\",{\"1\":{\"511\":1}}],[\"就抛出异常\",{\"1\":{\"552\":1}}],[\"就以非事务方式执行\",{\"1\":{\"552\":1}}],[\"就直接加入该事务\",{\"1\":{\"552\":2}}],[\"就直\",{\"1\":{\"552\":1}}],[\"就叫做声明式事务管理\",{\"1\":{\"548\":1}}],[\"就称为事务传播行为\",{\"1\":{\"548\":1}}],[\"就产生一个结果代理类\",{\"1\":{\"540\":1}}],[\"就不再去写测试方法调用了\",{\"1\":{\"522\":1}}],[\"就不必非要传参\",{\"1\":{\"272\":1}}],[\"就跟去景点排队买票和去银⾏办理业务排队等号道理相同\",{\"1\":{\"458\":1}}],[\"就只好排队限流了\",{\"1\":{\"458\":1}}],[\"就需要限流\",{\"1\":{\"458\":1}}],[\"就需要提供多个视图容器\",{\"1\":{\"209\":1}}],[\"就必须在⽹关上做熔断\",{\"1\":{\"439\":1}}],[\"就必须复写hashcode和equals方法建立属于当前对象的比较方式\",{\"1\":{\"318\":1}}],[\"就可以得到服务器请求的时间\",{\"1\":{\"396\":1}}],[\"就可以根据不同的hash值进行不同的\",{\"1\":{\"200\":1}}],[\"就会创建一个新的事务\",{\"1\":{\"548\":1,\"552\":1}}],[\"就会产⽣⼀个span\",{\"1\":{\"396\":1}}],[\"就会执行签收\",{\"1\":{\"107\":1}}],[\"就是指我们的\",{\"1\":{\"571\":1}}],[\"就是一些代码完成的某个功能\",{\"1\":{\"540\":1}}],[\"就是一个大工厂\",{\"1\":{\"529\":1}}],[\"就是一种类似于我们生活中树的结构\",{\"1\":{\"312\":1}}],[\"就是数据库中的一张表\",{\"1\":{\"511\":1}}],[\"就是我们在redis中存储的数据\",{\"1\":{\"480\":1}}],[\"就是限制最⼤流量\",{\"1\":{\"458\":1}}],[\"就是为了实现⼀组匹配规则\",{\"1\":{\"419\":1}}],[\"就是配置⽂件的版本\",{\"1\":{\"405\":1}}],[\"就是配置⽂件的名称部分\",{\"1\":{\"405\":1}}],[\"就是应⽤名称\",{\"1\":{\"405\":1}}],[\"就是上一行命令的地址\",{\"1\":{\"263\":1}}],[\"就是针对我们的\",{\"1\":{\"215\":1}}],[\"就是\",{\"1\":{\"80\":1}}],[\"就是分词查\",{\"1\":{\"76\":1}}],[\"就是⽂档id\",{\"1\":{\"29\":1}}],[\"就有10个分⽚\",{\"1\":{\"39\":1}}],[\"就⽐较结构化\",{\"1\":{\"28\":1}}],[\"每次编写一个目标对象时都需要重新编写一个代理类\",{\"1\":{\"659\":1}}],[\"每次只读取一个消息进行处理\",{\"1\":{\"108\":1}}],[\"每三分钟触发一次\",{\"1\":{\"500\":1}}],[\"每小时的第0分0秒开始\",{\"1\":{\"500\":1}}],[\"每小时的10分30秒触发任务\",{\"1\":{\"500\":1}}],[\"每分钟的15秒到30秒之间开始触发\",{\"1\":{\"500\":1}}],[\"每分钟的每15秒开始触发\",{\"1\":{\"500\":1}}],[\"每秒都触发任务\",{\"1\":{\"500\":1}}],[\"每15秒\",{\"1\":{\"500\":1}}],[\"每年10月20号1点10分30秒触发任务\",{\"1\":{\"500\":1}}],[\"每月20号1点10分30秒触发任务\",{\"1\":{\"500\":1}}],[\"每天1点10分30秒触发任务\",{\"1\":{\"500\":1}}],[\"每天零点5分调用\",{\"1\":{\"498\":1}}],[\"每半分钟触发任务\",{\"1\":{\"500\":1}}],[\"每隔5秒触发一次\",{\"1\":{\"500\":2}}],[\"每隔20秒钟触发1次\",{\"1\":{\"499\":1}}],[\"每隔1秒触发1次\",{\"1\":{\"499\":1}}],[\"每一个层次的类加载器都是如此\",{\"1\":{\"289\":1}}],[\"每个对象都必然会和其他对象有耦合关系\",{\"1\":{\"631\":1}}],[\"每个项目或产品都有选定的环境因素\",{\"1\":{\"630\":1}}],[\"每个类尽量提供接口或抽象类\",{\"1\":{\"629\":1}}],[\"每个月第三周的星期四的10点15分0秒触发任务\",{\"1\":{\"500\":1}}],[\"每个月最后一个星期四的10点15分0秒触发任务\",{\"1\":{\"500\":1}}],[\"每个月最后一个工作日的10点15分0秒触发任务\",{\"1\":{\"500\":1}}],[\"每个月最后一天的10点15分0秒触发任务\",{\"1\":{\"500\":1}}],[\"每个微服务只关注某个特定的功能\",{\"1\":{\"448\":1}}],[\"每个滑动窗口周期\",{\"1\":{\"382\":1}}],[\"每个红色节点的子节点都是黑色的\",{\"1\":{\"312\":1}}],[\"每个结点包括两个部分\",{\"1\":{\"311\":1}}],[\"每个页面及其内容都需要从服务器一次次请求\",{\"1\":{\"199\":1}}],[\"每个组件都是\",{\"1\":{\"192\":1}}],[\"每个过滤器用管道符分隔\",{\"1\":{\"175\":1}}],[\"每个virtualhost之间是相互隔离的\",{\"1\":{\"83\":1}}],[\"每个virtual\",{\"1\":{\"83\":1}}],[\"每个用爱自己的\",{\"1\":{\"80\":1}}],[\"每个索引就有了主分⽚\",{\"1\":{\"39\":1}}],[\"每个索引可以被分成多个分⽚\",{\"1\":{\"39\":1}}],[\"每个分⽚本⾝也是⼀个功能完善并且独⽴的\",{\"1\":{\"39\":1}}],[\"每个节点都会被安排加⼊到⼀个叫做\",{\"1\":{\"38\":1}}],[\"每个⽂档的内容使之可以被搜索\",{\"1\":{\"30\":1}}],[\"每个⽂档都有⼀个唯⼀的编号\",{\"1\":{\"29\":1}}],[\"每⼀项读⾳都指向此字的详细解释的页数\",{\"1\":{\"28\":1}}],[\"⾥⾯存储了建⽴好的索引信息以及⽂档对象\",{\"1\":{\"29\":1}}],[\"相应的处理器类接收到指令后\",{\"1\":{\"574\":1}}],[\"相应数据\",{\"1\":{\"487\":1}}],[\"相似只不过参数变为了使用\",{\"1\":{\"127\":1}}],[\"相比\",{\"1\":{\"99\":1}}],[\"相关配置信息\",{\"1\":{\"105\":1}}],[\"相关性得分\",{\"1\":{\"57\":1}}],[\"相关概念\",{\"0\":{\"29\":1}}],[\"相当于是\",{\"1\":{\"569\":1}}],[\"相当于是数据表的字段\",{\"1\":{\"33\":1}}],[\"相当于window\",{\"1\":{\"186\":2,\"221\":1}}],[\"相当于\",{\"1\":{\"57\":3}}],[\"相对来说效率会低一点\",{\"1\":{\"341\":1}}],[\"相对于兄弟元素的对齐方式\",{\"0\":{\"25\":1}}],[\"相对于兄弟元素\",{\"0\":{\"24\":1}}],[\"相对于父元素\",{\"0\":{\"23\":1}}],[\"相对父容器居中显示\",{\"1\":{\"23\":1}}],[\"相对父容器垂直居中显示\",{\"1\":{\"23\":1}}],[\"相对父容器水平居中显示\",{\"1\":{\"23\":1}}],[\"相对布局在摆放子视图位置时\",{\"1\":{\"22\":1}}],[\"相对布局relativelayout\",{\"0\":{\"22\":1}}],[\"便可找到我们的⾮结构化数据\",{\"1\":{\"28\":1}}],[\"于\",{\"1\":{\"627\":1}}],[\"于是将读⾳拿出来按⼀定的顺序排列\",{\"1\":{\"28\":1}}],[\"于android\",{\"1\":{\"20\":1}}],[\"分钟\",{\"1\":{\"499\":2}}],[\"分布式会话等\",{\"1\":{\"448\":1}}],[\"分别对应各个请求\",{\"1\":{\"579\":1}}],[\"分别处理前置逻辑和后置逻辑\",{\"1\":{\"436\":1}}],[\"分别只有⼏种可以⼀⼀列举\",{\"1\":{\"28\":1}}],[\"分隔的模板\",{\"1\":{\"423\":1}}],[\"分⽀\",{\"1\":{\"405\":2}}],[\"分数从高到低排序\",{\"1\":{\"351\":1}}],[\"分数从高到低\",{\"1\":{\"351\":1}}],[\"分类\",{\"1\":{\"181\":1}}],[\"分割的字符串\",{\"1\":{\"127\":1}}],[\"分割\",{\"1\":{\"99\":1,\"177\":1,\"524\":1}}],[\"分发消息到queue\",{\"1\":{\"80\":1}}],[\"分页接口\",{\"1\":{\"75\":1}}],[\"分页\",{\"0\":{\"70\":1},\"1\":{\"561\":1}}],[\"分页实现\",{\"1\":{\"57\":1}}],[\"分词的字符串\",{\"1\":{\"52\":1}}],[\"分词模式\",{\"1\":{\"52\":1}}],[\"分词\",{\"0\":{\"52\":1}}],[\"分词器\",{\"0\":{\"51\":1},\"1\":{\"57\":1}}],[\"分⽚置于同⼀节点上是⾮常重要的\",{\"1\":{\"39\":1}}],[\"分⽚很重要\",{\"1\":{\"39\":1}}],[\"分⽚和复制的数量可以在索引创建的时候指定\",{\"1\":{\"39\":1}}],[\"分⽚和复制\",{\"0\":{\"39\":1}}],[\"分析器\",{\"1\":{\"34\":1}}],[\"分区\",{\"1\":{\"32\":1}}],[\"分声母和韵母\",{\"1\":{\"28\":1}}],[\"然⽽它不仅仅是存储\",{\"1\":{\"30\":1}}],[\"然⽽字的某些信息可以提取出来进⾏结构化处理\",{\"1\":{\"28\":1}}],[\"然后编码实现\",{\"1\":{\"628\":1}}],[\"然后将请求转发到具体的业务服务\",{\"1\":{\"436\":1}}],[\"然后prefixpath过滤器加上⼀个\",{\"1\":{\"429\":1}}],[\"然后返回\",{\"1\":{\"413\":1}}],[\"然后在\",{\"1\":{\"413\":1}}],[\"然后\",{\"1\":{\"404\":1}}],[\"然后才能计算失败率\",{\"1\":{\"382\":1}}],[\"然后就可以在当前template中引入\",{\"1\":{\"215\":1}}],[\"然后通过$refs\",{\"1\":{\"179\":1}}],[\"然后按其指向的页数\",{\"1\":{\"28\":1}}],[\"然后对此有⼀定结构的数\",{\"1\":{\"28\":1}}],[\"字符\",{\"1\":{\"525\":1}}],[\"字符串范围获取或替换\",{\"0\":{\"339\":1}}],[\"字符串\",{\"0\":{\"337\":1}}],[\"字符串的解释\",{\"1\":{\"141\":1}}],[\"字体\",{\"1\":{\"214\":1}}],[\"字节公共库地址\",{\"1\":{\"123\":1}}],[\"字节跳动静态资源公共库\",{\"1\":{\"1\":1}}],[\"字段添加指定增量\",{\"0\":{\"350\":1}}],[\"字段\",{\"0\":{\"33\":1},\"1\":{\"363\":1}}],[\"字典的拼⾳表和部⾸检字表就相当于字典的索引\",{\"1\":{\"28\":1}}],[\"这⾥的域指的是这样的⼀个概念\",{\"1\":{\"443\":1}}],[\"这⾥介绍下本地⽂件存储\",{\"1\":{\"407\":1}}],[\"这⾥表示100\",{\"1\":{\"399\":1}}],[\"这两个状态不会⽣成熔断器事件\",{\"1\":{\"382\":1}}],[\"这两个的属性的值可以是自定的值\",{\"1\":{\"21\":1}}],[\"这么做的优点在于\",{\"1\":{\"381\":1}}],[\"这么做的优点是你可以选择所需要的装饰器进⾏装饰\",{\"1\":{\"381\":1}}],[\"这时其修正方法是取消原来的继承关系\",{\"1\":{\"628\":1}}],[\"这时系统所依赖的服务的稳定性对系统的影响⾮常⼤\",{\"1\":{\"451\":1}}],[\"这时仅有⼀定数量的请求会被放⼊\",{\"1\":{\"382\":1}}],[\"这时所有的请求都会被拒绝\",{\"1\":{\"382\":1}}],[\"这时候就会用到自定义指令\",{\"1\":{\"181\":1}}],[\"这时启动⼀个节点\",{\"1\":{\"38\":1}}],[\"这是适配器模式的应用\",{\"1\":{\"572\":1}}],[\"这是⼀个\",{\"1\":{\"413\":1}}],[\"这是⼀个美丽的⼥护⼠妹妹\",{\"1\":{\"76\":1}}],[\"这是一个原子性的操作\",{\"1\":{\"338\":1}}],[\"这是固定格式\",{\"1\":{\"266\":1}}],[\"这是语句\",{\"1\":{\"156\":1}}],[\"这里是自己手动去设置责任链调用\",{\"1\":{\"641\":1}}],[\"这里是使用默认写好的内置责任链来使用\",{\"1\":{\"641\":1}}],[\"这里是按时间顺序的熔断降级\",{\"1\":{\"382\":1}}],[\"这里是按数据进行熔断降级\",{\"1\":{\"382\":1}}],[\"这里的抽象指的是接口或者抽象类\",{\"1\":{\"629\":1}}],[\"这里的职责是指类变化的原因\",{\"1\":{\"627\":1}}],[\"这里的优点是没有线程监视所有断路器的状态\",{\"1\":{\"382\":1}}],[\"这里就不写了\",{\"1\":{\"619\":1}}],[\"这里我将简单的请求进行了一些封装\",{\"1\":{\"609\":1}}],[\"这里我们可以打开导出的html文件找多两个js引用\",{\"1\":{\"123\":1}}],[\"这里路由键和队列同名\",{\"1\":{\"589\":1}}],[\"这里可以同时配置多个拦截器\",{\"1\":{\"585\":1}}],[\"这里所说的\",{\"1\":{\"571\":1}}],[\"这里切记使用的是new而不是spring管理的实体\",{\"1\":{\"482\":1}}],[\"这里获取的是复选框中的数据\",{\"1\":{\"266\":1}}],[\"这里需要注意的是\",{\"1\":{\"263\":1}}],[\"这里附带上我下载好的所有安装包\",{\"1\":{\"246\":1}}],[\"这里示例展示我这边找到的文件替换的js\",{\"1\":{\"123\":1}}],[\"这里使用的是内置方法\",{\"1\":{\"76\":1}}],[\"这样写起来虽然简单\",{\"1\":{\"628\":1}}],[\"这样用户只需指定需要建造的类型就可以得到具体产品\",{\"1\":{\"514\":1}}],[\"这样只要当请求中包含\",{\"1\":{\"420\":1}}],[\"这样在请求过来时会对属性值和正则进⾏匹配\",{\"1\":{\"420\":1}}],[\"这样配置\",{\"1\":{\"420\":1}}],[\"这样大大减少了查找时间\",{\"1\":{\"318\":1}}],[\"这样是可以查出来的\",{\"1\":{\"53\":1}}],[\"这样的话每个索引总共\",{\"1\":{\"39\":1}}],[\"这种关系有很多比如组合\",{\"1\":{\"631\":1}}],[\"这种就可以把\",{\"1\":{\"579\":1}}],[\"这种方式实现了对事务控制的最大程度的解耦\",{\"1\":{\"548\":1}}],[\"这种实现计数器限流⽅式由于是在⼀个时间间隔内进⾏限制\",{\"1\":{\"461\":1}}],[\"这种请求会受到同源策略限制\",{\"1\":{\"443\":1}}],[\"这种请求时进行处理\",{\"1\":{\"389\":1}}],[\"这种⽅式对于⽇常维护来说也⽐较繁琐\",{\"1\":{\"404\":1}}],[\"这种⽅式效率太低\",{\"1\":{\"404\":1}}],[\"这种在运行状态获取信息以及动态调用对象方法的功能被称为java语言的反射机制\",{\"1\":{\"288\":1}}],[\"这种情况下\",{\"1\":{\"39\":1}}],[\"这种先建⽴索引\",{\"1\":{\"28\":1}}],[\"这个工具类其实可以不要用上面的建造者模式的httprequestbuilder生成出httprequest后之间进行执行也可以\",{\"1\":{\"614\":1}}],[\"这个使用\",{\"1\":{\"545\":1}}],[\"这个代理是由容器自动生成的\",{\"1\":{\"545\":1}}],[\"这个属性不常用\",{\"1\":{\"523\":1}}],[\"这个属性值和正则表达式匹配则执⾏\",{\"1\":{\"421\":1}}],[\"这个请求会⼀直堆积在⽹关上\",{\"1\":{\"439\":1}}],[\"这个模板是⼀个\",{\"1\":{\"423\":1}}],[\"这个问题⾮常麻烦\",{\"1\":{\"408\":1}}],[\"这个注解可以理解为\",{\"1\":{\"578\":1}}],[\"这个注解描述了这个span的开始\",{\"1\":{\"396\":1}}],[\"这个注解表示当前服务为\",{\"1\":{\"368\":1}}],[\"这个api接⼝\",{\"1\":{\"396\":1}}],[\"这个区间是个闭区间\",{\"1\":{\"345\":1}}],[\"这个就是最佳的方案\",{\"1\":{\"334\":1}}],[\"这个方法\",{\"1\":{\"227\":1}}],[\"这个交换机就是dlx\",{\"1\":{\"110\":1}}],[\"这个字段进行倒序排序\",{\"1\":{\"57\":1}}],[\"这个索引添加\",{\"1\":{\"57\":1}}],[\"这个词的时候就搜不出来了\",{\"1\":{\"53\":1}}],[\"这个\",{\"1\":{\"39\":1}}],[\"这个名字对于管理⼯作来说挺重要的\",{\"1\":{\"38\":1}}],[\"这个名字会在启动的时候赋予节点\",{\"1\":{\"38\":1}}],[\"这个名字是⼀个随机的漫威漫画⾓⾊的名字\",{\"1\":{\"38\":1}}],[\"这个名字是重要的\",{\"1\":{\"37\":1}}],[\"这个名字默认就是\",{\"1\":{\"37\":1}}],[\"这意味着隔离机制\",{\"1\":{\"381\":1}}],[\"这意味着\",{\"1\":{\"36\":1,\"38\":1,\"39\":1}}],[\"这意味着它可以存储整个对象或⽂档\",{\"1\":{\"30\":1}}],[\"这些常量均是以\",{\"1\":{\"547\":1}}],[\"这些点指的是方法\",{\"1\":{\"540\":1}}],[\"这些配置也可以在mybaits\",{\"1\":{\"519\":1}}],[\"这些请求都是正常的\",{\"1\":{\"461\":1}}],[\"这些⼯作都可以借助spring\",{\"1\":{\"448\":1}}],[\"这些\",{\"1\":{\"418\":1}}],[\"这些注解包括以下\",{\"1\":{\"396\":1}}],[\"这些⽅法在resttemplate类对应的⽅法为headforheaders\",{\"1\":{\"389\":1}}],[\"这些函数作为装饰器对函数式接⼝\",{\"1\":{\"381\":1}}],[\"这些拷贝叫做复制分⽚\",{\"1\":{\"39\":1}}],[\"这些都是透明的\",{\"1\":{\"39\":1}}],[\"这些都是映射⾥⾯可以设置的\",{\"1\":{\"34\":1}}],[\"这些份就叫做分⽚\",{\"1\":{\"39\":1}}],[\"这些将来都要作为查询条件\",{\"1\":{\"29\":1}}],[\"这部分从⾮结构化数据中提取出的然后重新组织的信息\",{\"1\":{\"28\":1}}],[\"从被依赖者的角度说\",{\"1\":{\"631\":1}}],[\"从依赖者的角度来说\",{\"1\":{\"631\":1}}],[\"从迪米特法则的定义和特点可知\",{\"1\":{\"631\":1}}],[\"从而增加系统的复杂性\",{\"1\":{\"631\":1}}],[\"从而提高了类的可复用率和系统的扩展性\",{\"1\":{\"631\":1}}],[\"从而造成冗余代码或代码的浪费\",{\"1\":{\"627\":1}}],[\"从而易于扩展和维护\",{\"1\":{\"626\":1}}],[\"从而可以使一个建造过程生成具有不同的内部表象的产品\",{\"1\":{\"514\":1}}],[\"从0开始\",{\"1\":{\"599\":1}}],[\"从threadlocal中获取\",{\"1\":{\"520\":2}}],[\"从名字上来看\",{\"1\":{\"448\":1}}],[\"从open到half\",{\"1\":{\"382\":2,\"440\":2}}],[\"从连接建立时开始应用\",{\"1\":{\"374\":1}}],[\"从连接建⽴时开始应⽤\",{\"1\":{\"374\":1}}],[\"从redis中删除指定的一个key\",{\"1\":{\"363\":1}}],[\"从rabbitmq\",{\"1\":{\"107\":1}}],[\"从大到小\",{\"1\":{\"351\":1,\"356\":1}}],[\"从列表中弹出一个值\",{\"1\":{\"344\":1}}],[\"从偏移量\",{\"1\":{\"339\":1}}],[\"从此列表所表示的堆栈处弹出一个元素\",{\"1\":{\"316\":1}}],[\"从\",{\"0\":{\"406\":1},\"1\":{\"301\":1,\"389\":2,\"520\":1,\"523\":1}}],[\"从套接字中获取输入流\",{\"1\":{\"284\":1}}],[\"从套接字中获取输出流\",{\"1\":{\"283\":1}}],[\"从一台计算机的软件中\",{\"1\":{\"277\":1}}],[\"从实现上讲\",{\"1\":{\"265\":1}}],[\"从github中找到nvm所在仓库进行下载\",{\"1\":{\"259\":1}}],[\"从聚合的结果中获取所有的桶信息\",{\"1\":{\"77\":1}}],[\"从所有的聚合中获取对应名称的聚合\",{\"1\":{\"77\":1}}],[\"从2006年12⽉推出1\",{\"1\":{\"51\":1}}],[\"从索引⼀个⽂档直到这个⽂档能够被搜索到有⼀个轻微的延迟\",{\"1\":{\"36\":1}}],[\"从⽽造成后台处理请求过载的情况\",{\"1\":{\"461\":1}}],[\"从⽽达到负载均衡的⽬的\",{\"1\":{\"390\":1}}],[\"从⽽达到搜索相对较快的⽬的\",{\"1\":{\"28\":1}}],[\"从⽽让全⽂搜索变得简单\",{\"1\":{\"29\":1}}],[\"从⽂档对象中拆分出来的每个单词叫做⼀个term\",{\"1\":{\"29\":1}}],[\"从国内镜像源中找到对应的gradle包直接将其下载下来\",{\"1\":{\"17\":1}}],[\"据进⾏搜索\",{\"1\":{\"28\":1}}],[\"使模块之间的通信效率降低\",{\"1\":{\"631\":1}}],[\"使接口用最少的方法去完成最多的事情\",{\"1\":{\"630\":1}}],[\"使\",{\"1\":{\"630\":1}}],[\"使这些\",{\"1\":{\"529\":1}}],[\"使得同样的构建过程可以创建不同的表示\",{\"1\":{\"514\":1}}],[\"使⽤\",{\"1\":{\"410\":1,\"421\":1,\"422\":1,\"423\":1,\"424\":1}}],[\"使⽤git存储还是很不⽅便\",{\"1\":{\"407\":1}}],[\"使⽤docker安装elasticsearch和kibana\",{\"1\":{\"401\":1}}],[\"使⽤elasticsearch存储链路数据\",{\"0\":{\"401\":1}}],[\"使⽤elasticsearch提供的api进⾏访问\",{\"1\":{\"40\":1}}],[\"使⽤elasticsearch提供的restful接⼜直接访问\",{\"1\":{\"40\":1}}],[\"使⽤rabbitmq传输链路数据\",{\"0\":{\"400\":1}}],[\"使⽤这个名字来从eureka服务列表中得到相应的服务\",{\"1\":{\"373\":1}}],[\"使⽤client对象把⽂档写⼊索引库\",{\"1\":{\"63\":1}}],[\"使⽤查询\",{\"1\":{\"57\":1}}],[\"使其更简单的的使用\",{\"1\":{\"659\":1}}],[\"使其更容易阅读\",{\"1\":{\"42\":1}}],[\"使其变得有⼀定结构\",{\"1\":{\"28\":1}}],[\"使用静态代理类将切面类中增强的方法进行围绕实现\",{\"1\":{\"660\":1}}],[\"使用serviceloader扫描相关对象时我们需要在meta\",{\"1\":{\"655\":1}}],[\"使用spring\",{\"1\":{\"74\":1}}],[\"使用工厂创建对应形状\",{\"0\":{\"655\":1}}],[\"使用多个专门的接口还能够体现对象的层次\",{\"1\":{\"630\":1}}],[\"使用继承时结合里氏替换原则\",{\"1\":{\"629\":1}}],[\"使用接口或者抽象类的目的是制定好规范和契约\",{\"1\":{\"629\":1}}],[\"使用设计模式是为了可重用代码\",{\"1\":{\"625\":1}}],[\"使用时可以自己定义\",{\"1\":{\"622\":1}}],[\"使用时代码流程\",{\"1\":{\"85\":1}}],[\"使用反射获取实体类的excel表头\",{\"1\":{\"599\":1}}],[\"使用反射获取并使用属性\",{\"0\":{\"296\":1}}],[\"使用反射获取并使用方法\",{\"0\":{\"295\":1}}],[\"使用广播模式发送消息\",{\"1\":{\"589\":1}}],[\"使用简单模式\",{\"1\":{\"589\":1}}],[\"使用这个注解后\",{\"1\":{\"578\":1}}],[\"使用构造器设置依赖关系\",{\"1\":{\"537\":1}}],[\"使用资源束\",{\"1\":{\"530\":1}}],[\"使用相对于类路径的资源\",{\"1\":{\"523\":1}}],[\"使用的mapper接口的完全限定名\",{\"1\":{\"523\":1}}],[\"使用的连接池\",{\"1\":{\"523\":1}}],[\"使用的是\",{\"1\":{\"266\":1}}],[\"使用数据库的连接池\",{\"1\":{\"518\":1}}],[\"使用jedis\",{\"1\":{\"508\":1}}],[\"使用java来实现排行榜\",{\"0\":{\"325\":1}}],[\"使用java\",{\"1\":{\"77\":1}}],[\"使用中\",{\"1\":{\"466\":1}}],[\"使用断路器需要在\",{\"1\":{\"382\":1}}],[\"使用gzip解码器解码响应数据\",{\"1\":{\"377\":1}}],[\"使用上面的\",{\"1\":{\"373\":1}}],[\"使用模糊查询获取当前场考试所有用户的key\",{\"1\":{\"327\":1}}],[\"使用redis客户端进行链接\",{\"1\":{\"332\":1}}],[\"使用redis客户端进行链接测试\",{\"1\":{\"332\":1}}],[\"使用redis先试思路可行性\",{\"0\":{\"324\":1}}],[\"使用router\",{\"1\":{\"219\":1}}],[\"使用内省获取\",{\"1\":{\"298\":1}}],[\"使用返回获取构造器\",{\"0\":{\"292\":1}}],[\"使用指定的超时启用\",{\"1\":{\"281\":1}}],[\"使用指定的超时值将此套接字连接到服务器\",{\"1\":{\"281\":1}}],[\"使用指定的延迟时间\",{\"1\":{\"281\":1}}],[\"使用用户指定的socketimpl创建未连接的socket\",{\"1\":{\"280\":1}}],[\"使用datagramsocket代替udp传输\",{\"1\":{\"280\":2}}],[\"使用组件\",{\"1\":{\"193\":1}}],[\"使用计算属性\",{\"1\":{\"183\":1}}],[\"使用场景\",{\"1\":{\"181\":1}}],[\"使用过滤器\",{\"1\":{\"178\":1}}],[\"使用过滤器完成日期格式处理\",{\"0\":{\"178\":1}}],[\"使用v\",{\"1\":{\"163\":1}}],[\"使用fastdfs很容易搭建一套高性能的文件服务器集群提供文件上传\",{\"1\":{\"112\":1}}],[\"使用回退模式发送\",{\"1\":{\"106\":1}}],[\"使用退回模式的\",{\"1\":{\"106\":1}}],[\"使用默认的交换机\",{\"1\":{\"102\":2}}],[\"使用匿名内部类\",{\"1\":{\"87\":1}}],[\"使用示例图\",{\"1\":{\"384\":1}}],[\"使用示例\",{\"0\":{\"373\":1},\"1\":{\"77\":1,\"385\":1,\"386\":1}}],[\"使用本地\",{\"1\":{\"76\":1}}],[\"使用自定义指令\",{\"1\":{\"181\":2}}],[\"使用自定义分页查询方法\",{\"1\":{\"76\":1}}],[\"使用自定义查询方法\",{\"1\":{\"76\":1}}],[\"使用标准分词的时候是一个字一个词进行分词的\",{\"1\":{\"49\":1}}],[\"使用\",{\"0\":{\"42\":1,\"53\":1,\"56\":1,\"63\":1,\"368\":1,\"445\":1},\"1\":{\"41\":1,\"57\":2,\"60\":1,\"62\":1,\"63\":1,\"84\":1,\"105\":1,\"158\":1,\"159\":1,\"175\":1,\"183\":1,\"266\":1,\"291\":3,\"293\":1,\"294\":2,\"295\":3,\"296\":3,\"298\":2,\"333\":1,\"363\":1,\"372\":1,\"389\":1,\"518\":2,\"546\":1,\"663\":1}}],[\"使用方式与\",{\"1\":{\"127\":1}}],[\"使用方式\",{\"1\":{\"9\":1}}],[\"上面方法中名词解释\",{\"1\":{\"662\":1}}],[\"上面示例中\",{\"1\":{\"579\":1}}],[\"上面的词语解释\",{\"1\":{\"405\":1}}],[\"上的分页插件\",{\"1\":{\"558\":1}}],[\"上下文的支持\",{\"1\":{\"530\":1}}],[\"上游服务为了保证⾃⼰整体服务的可⽤性\",{\"1\":{\"456\":1}}],[\"上⾯这段配置的意思是\",{\"1\":{\"415\":1}}],[\"上⾯配置了2个断路器\",{\"1\":{\"382\":1}}],[\"上\",{\"1\":{\"248\":1,\"284\":1}}],[\"上传到docker所在的虚拟机\",{\"1\":{\"400\":1}}],[\"上传目录为\",{\"1\":{\"332\":1}}],[\"上传失败\",{\"1\":{\"113\":1}}],[\"上传\",{\"1\":{\"113\":1}}],[\"上传文件控制器\",{\"1\":{\"113\":1}}],[\"上传文件\",{\"1\":{\"113\":1}}],[\"上侧外间距\",{\"1\":{\"26\":1}}],[\"上海交通大学linux用户资源\",{\"1\":{\"5\":1}}],[\"水平垂直居中\",{\"1\":{\"26\":1}}],[\"水平排列\",{\"1\":{\"21\":1}}],[\"帧布局framelayout\",{\"0\":{\"26\":1}}],[\"该对象一加载就会创建对象\",{\"1\":{\"647\":1}}],[\"该单例对象必须由单例类自行创建\",{\"1\":{\"645\":1}}],[\"该原则还有另外一个定义\",{\"1\":{\"630\":1}}],[\"该原则有两个定义\",{\"1\":{\"628\":1}}],[\"该原则提出对象不应该承担太多职责\",{\"1\":{\"627\":1}}],[\"该字段只可以使用在字段上\",{\"1\":{\"597\":1,\"598\":1}}],[\"该字符串需要进行拼接\",{\"1\":{\"327\":1}}],[\"该方法可以为任何实现接口的目标对象提供代理对象\",{\"1\":{\"662\":1}}],[\"该方法在处理器方法执行之后执行\",{\"1\":{\"583\":1}}],[\"该方法在处理器方法执行之前执行\",{\"1\":{\"582\":1}}],[\"该方法表示接收到消息的回调\",{\"1\":{\"87\":1}}],[\"该类从类路径\",{\"1\":{\"534\":1}}],[\"该标签用于处理数据库字段与实体类字段不一致的情况\",{\"1\":{\"524\":1}}],[\"该属性存在时是指定读取的\",{\"1\":{\"523\":1}}],[\"该注解在字段上使用会将其认为不需要进行校验的行头参数\",{\"1\":{\"598\":1}}],[\"该注解可以使用在字段上\",{\"1\":{\"597\":1}}],[\"该注解可以定义在类上\",{\"1\":{\"579\":1}}],[\"该注解创建的对象可以作为处理器接收用户的请求\",{\"1\":{\"539\":1}}],[\"该注解默认使用按类型自动装配\",{\"1\":{\"538\":1}}],[\"该注解的value属性用于指定要注入的值\",{\"1\":{\"538\":1}}],[\"该注解使用序列化的方式\",{\"1\":{\"493\":1}}],[\"该注解表明请求处理的完成\",{\"1\":{\"396\":1}}],[\"该接⼝包含多种默认⽅法来将\",{\"1\":{\"415\":1,\"419\":1}}],[\"该项⽬是基于\",{\"1\":{\"413\":1}}],[\"该功能在\",{\"1\":{\"353\":1}}],[\"该命令后续已经移除\",{\"1\":{\"349\":1}}],[\"该树仍然是一颗二叉查找树\",{\"1\":{\"312\":1}}],[\"该加载器是用c++语言写的\",{\"1\":{\"289\":1}}],[\"该值是平台在此\",{\"1\":{\"281\":1}}],[\"该模式是一种竞争模式\",{\"1\":{\"88\":1}}],[\"该创建\",{\"1\":{\"59\":1}}],[\"该控件的下边沿与指定控件的下边沿对齐\",{\"1\":{\"25\":1}}],[\"该控件的上边沿与指定控件的上边沿对齐\",{\"1\":{\"25\":1}}],[\"该控件的右边沿与指定控件的右边对齐\",{\"1\":{\"25\":1}}],[\"该控件的左边沿与指定控件的左边对齐\",{\"1\":{\"25\":1}}],[\"该容器纵向方向上相对它的父容器居中显示\",{\"1\":{\"21\":1}}],[\"该容器横向方向上相对它的父容器居中显示\",{\"1\":{\"21\":1}}],[\"该容器相对于它的父容器居中显示\",{\"1\":{\"21\":1}}],[\"是因为里氏替换原则是不可以反过来用的\",{\"1\":{\"628\":1}}],[\"是我自己写的一个异常用于抛出并全局捕获\",{\"1\":{\"622\":1}}],[\"是继\",{\"1\":{\"571\":1}}],[\"是整个流程控制的中心\",{\"1\":{\"569\":1}}],[\"是基于\",{\"1\":{\"546\":1}}],[\"是基础类型的\",{\"1\":{\"532\":1}}],[\"是指把增强应用到目标对象来创建新的代理对象的过程\",{\"1\":{\"540\":1}}],[\"是目标方法执行之前执行\",{\"1\":{\"540\":1}}],[\"是切入点和通知的结合\",{\"1\":{\"540\":1}}],[\"是对\",{\"1\":{\"539\":1}}],[\"是线程安全的\",{\"1\":{\"515\":1}}],[\"是一套被反复使用\",{\"1\":{\"625\":1}}],[\"是一种对象的创建模式\",{\"1\":{\"514\":1}}],[\"是一个管理\",{\"1\":{\"532\":1}}],[\"是一个基于\",{\"1\":{\"511\":1}}],[\"是一个压力测试工具\",{\"1\":{\"333\":1}}],[\"是一个开源的使用ansi\",{\"1\":{\"331\":1}}],[\"是一个有序map集合\",{\"1\":{\"320\":1}}],[\"是一个\",{\"1\":{\"211\":1}}],[\"是业务数据\",{\"1\":{\"487\":1}}],[\"是通过包装其它公司产品来实现的\",{\"1\":{\"448\":1}}],[\"是通过\",{\"1\":{\"418\":1,\"537\":1}}],[\"是单个的uri资源路径\",{\"1\":{\"415\":1}}],[\"是单线程的\",{\"1\":{\"334\":1}}],[\"是将负载均衡逻辑封装到客户端中\",{\"1\":{\"390\":1}}],[\"是服务名\",{\"1\":{\"373\":1}}],[\"是用来做基数统计的算法\",{\"1\":{\"354\":1}}],[\"是当下最热门的nosql技术之一\",{\"1\":{\"331\":1}}],[\"是什么\",{\"1\":{\"331\":1}}],[\"是二叉树存储\",{\"1\":{\"320\":1}}],[\"是根据对象的哈希值来确定元素在集合中的存储位置\",{\"1\":{\"318\":1}}],[\"是黑色的\",{\"1\":{\"312\":1}}],[\"是每个结点不超过2的有序树\",{\"1\":{\"312\":1}}],[\"是允许删除的一端\",{\"1\":{\"309\":1}}],[\"是允许插入的一端\",{\"1\":{\"309\":1}}],[\"是运算受到限制的一种线性表\",{\"1\":{\"309\":1}}],[\"是由sun\",{\"1\":{\"289\":1}}],[\"是java运行时环境\",{\"1\":{\"289\":1}}],[\"是只在代码中\",{\"1\":{\"271\":1}}],[\"是⽤java编写的服务器端程序\",{\"1\":{\"265\":1}}],[\"是来源于外部组件的数据<\",{\"1\":{\"197\":1}}],[\"是自己的data中的数据count\",{\"1\":{\"197\":1}}],[\"是com\",{\"1\":{\"195\":1}}],[\"是count值\",{\"1\":{\"177\":1}}],[\"是parent\",{\"1\":{\"195\":1}}],[\"是\",{\"1\":{\"177\":1,\"202\":1,\"224\":1,\"316\":1,\"355\":1,\"413\":1,\"419\":1,\"515\":1,\"523\":5,\"533\":1}}],[\"是源数据数组\",{\"1\":{\"161\":1}}],[\"是直接决定元素\",{\"1\":{\"158\":1}}],[\"是响应式数据\",{\"1\":{\"154\":1}}],[\"是执行\",{\"1\":{\"59\":1}}],[\"是⼀款开源的数据分析和可视化平台\",{\"1\":{\"54\":1}}],[\"是不分词查找所以是在当前案例中是没有结果的\",{\"1\":{\"50\":1}}],[\"是完全由elasticsearch管理的\",{\"1\":{\"39\":1}}],[\"是否验签通过\",{\"1\":{\"622\":1}}],[\"是否只读\",{\"1\":{\"552\":1}}],[\"是否删除\",{\"1\":{\"466\":1}}],[\"是否存在\",{\"1\":{\"363\":1}}],[\"是否存储\",{\"1\":{\"29\":1}}],[\"是否在服务启动时就加载此\",{\"1\":{\"266\":1}}],[\"是否在不使用的时候自动删除队列\",{\"1\":{\"86\":1,\"87\":1}}],[\"是否成功\",{\"1\":{\"222\":1,\"303\":1,\"304\":1}}],[\"是否成功找到了消息\",{\"1\":{\"105\":1}}],[\"是否拒绝多个消息\",{\"1\":{\"107\":1}}],[\"是否独占本次连接\",{\"1\":{\"86\":1,\"87\":1}}],[\"是否定义持久化队列\",{\"1\":{\"86\":1,\"87\":1}}],[\"是否自动确认\",{\"1\":{\"85\":1,\"87\":1}}],[\"是否被索引等等\",{\"1\":{\"34\":1}}],[\"是否索引\",{\"1\":{\"29\":1}}],[\"是否对域的内容进⾏分词处理\",{\"1\":{\"29\":1}}],[\"是否分词\",{\"1\":{\"29\":1}}],[\"是否让控件相对于父容器右边对齐\",{\"1\":{\"23\":1}}],[\"是否让控件相对于父容器左边对齐\",{\"1\":{\"23\":1}}],[\"是否让控件相对于父容器底部对齐\",{\"1\":{\"23\":1}}],[\"是否让控件相对于父容器顶部对齐\",{\"1\":{\"23\":1}}],[\"是android中控件的必要属性\",{\"1\":{\"21\":1}}],[\"按当前示例这么做就可以\",{\"1\":{\"619\":1}}],[\"按照配置前后逆序执行\",{\"1\":{\"585\":2}}],[\"按照配置前后顺序执行\",{\"1\":{\"585\":1}}],[\"按照常量固定速率流出⽔滴\",{\"1\":{\"459\":1}}],[\"按照指定的参考系来摆放子视图的位置\",{\"1\":{\"22\":1}}],[\"按着最优规则处理数据对性能提⾼很⼤\",{\"1\":{\"34\":1}}],[\"按比例分配父容器剩余的宽度或高度\",{\"1\":{\"21\":1}}],[\"省略\",{\"1\":{\"21\":1,\"63\":1,\"74\":1,\"77\":1,\"290\":1}}],[\"子包下的所有类\",{\"1\":{\"541\":1}}],[\"子标签的属性是一样的所以这里就写到一起了\",{\"1\":{\"524\":1}}],[\"子标签和\",{\"1\":{\"524\":1}}],[\"子标签\",{\"1\":{\"524\":2}}],[\"子类继承父类时\",{\"1\":{\"628\":1}}],[\"子类可以扩展父类的功能\",{\"1\":{\"628\":1}}],[\"子类当然也不例外\",{\"1\":{\"628\":1}}],[\"子类中可以增加自己特有的方法\",{\"1\":{\"628\":1}}],[\"子类必须完全实现父类的方法\",{\"1\":{\"628\":1}}],[\"子类\",{\"1\":{\"537\":1}}],[\"子类加载器才会尝试自己去加载\",{\"1\":{\"289\":1}}],[\"子类会继承父类使用的注解中被\",{\"1\":{\"271\":1}}],[\"子接口不会继承父接口中的任何注解\",{\"1\":{\"271\":1}}],[\"子路由配置\",{\"1\":{\"209\":1}}],[\"子组件\",{\"1\":{\"197\":1}}],[\"子组件的\",{\"1\":{\"197\":1}}],[\"子组件到父组件\",{\"1\":{\"196\":1}}],[\"子级递归查询父级\",{\"0\":{\"138\":1}}],[\"子集id\",{\"1\":{\"128\":2,\"138\":1,\"140\":1}}],[\"子id递归查询父级\",{\"1\":{\"128\":1}}],[\"子视图相对父视图居中显示\",{\"1\":{\"21\":1}}],[\"子控件自动根据行列数进行分配位置\",{\"1\":{\"20\":1}}],[\">秒数\",{\"1\":{\"499\":1}}],[\">分钟\",{\"1\":{\"499\":1}}],[\">小时\",{\"1\":{\"499\":1}}],[\">小米电视<\",{\"1\":{\"204\":1}}],[\">日期\",{\"1\":{\"499\":1}}],[\">月\",{\"1\":{\"499\":1}}],[\">=\",{\"1\":{\"492\":1,\"525\":2}}],[\">r\",{\"1\":{\"416\":1}}],[\">rabbitmq\",{\"1\":{\"104\":1}}],[\">sortscore\",{\"1\":{\"324\":1}}],[\">>\",{\"1\":{\"233\":1,\"244\":7,\"304\":5,\"599\":2,\"600\":1}}],[\">编辑<\",{\"1\":{\"225\":1}}],[\">确定<\",{\"1\":{\"224\":1}}],[\">性别<\",{\"1\":{\"223\":1}}],[\">用户名<\",{\"1\":{\"223\":1}}],[\">用户管理<\",{\"1\":{\"203\":1}}],[\">添加人物<\",{\"1\":{\"223\":2}}],[\">添加<\",{\"1\":{\"223\":1}}],[\">删除<\",{\"1\":{\"222\":1}}],[\">edit<\",{\"1\":{\"221\":1}}],[\">exchange\",{\"1\":{\"104\":1}}],[\">英雄列表<\",{\"1\":{\"219\":1}}],[\">北京<\",{\"1\":{\"208\":1}}],[\">体育<\",{\"1\":{\"205\":1}}],[\">delete<\",{\"1\":{\"221\":1}}],[\">ddd<\",{\"1\":{\"205\":1}}],[\">data中的数据一旦发生变化\",{\"1\":{\"154\":1}}],[\">ccc<\",{\"1\":{\"205\":1}}],[\">consumer\",{\"1\":{\"104\":1}}],[\">bbb<\",{\"1\":{\"205\":1}}],[\">aaa<\",{\"1\":{\"205\":1}}],[\">alert函数<\",{\"1\":{\"146\":1}}],[\">华为电视<\",{\"1\":{\"204\":1}}],[\">首页展示<\",{\"1\":{\"203\":1}}],[\">内容<\",{\"1\":{\"166\":1,\"167\":1}}],[\">阻止默认事件<\",{\"1\":{\"159\":1}}],[\">只执行一次<\",{\"1\":{\"159\":1}}],[\">按钮<\",{\"1\":{\"159\":2}}],[\">视图中使用该数据的位置就会发生变化\",{\"1\":{\"154\":1}}],[\">当午<\",{\"1\":{\"146\":1}}],[\">tips函数<\",{\"1\":{\"146\":1}}],[\">load函数\",{\"1\":{\"146\":1}}],[\">msg函数\",{\"1\":{\"146\":2}}],[\">测试部门1\",{\"1\":{\"128\":6,\"139\":3,\"140\":3}}],[\"><\",{\"1\":{\"123\":2,\"146\":2,\"150\":1,\"165\":2,\"168\":1,\"169\":1,\"175\":1,\"197\":1,\"210\":1,\"585\":2}}],[\">queue\",{\"1\":{\"104\":2}}],[\">\",{\"1\":{\"21\":2,\"30\":8,\"65\":1,\"70\":1,\"71\":1,\"74\":4,\"84\":1,\"105\":15,\"106\":15,\"107\":11,\"108\":11,\"109\":6,\"110\":17,\"113\":5,\"128\":8,\"139\":4,\"140\":4,\"146\":2,\"156\":11,\"161\":4,\"162\":2,\"163\":5,\"165\":2,\"168\":1,\"169\":2,\"170\":3,\"171\":1,\"174\":1,\"179\":1,\"194\":1,\"197\":1,\"203\":2,\"205\":10,\"210\":1,\"219\":4,\"221\":1,\"223\":4,\"224\":1,\"244\":2,\"266\":3,\"291\":1,\"295\":2,\"301\":1,\"303\":4,\"304\":6,\"327\":5,\"363\":1,\"382\":2,\"385\":1,\"437\":3,\"470\":2,\"475\":3,\"487\":5,\"492\":2,\"504\":2,\"505\":2,\"511\":3,\"517\":6,\"518\":18,\"521\":6,\"524\":4,\"525\":2,\"543\":1,\"546\":7,\"553\":11,\"558\":12,\"561\":29,\"562\":11,\"563\":3,\"585\":8,\"589\":37,\"590\":21,\"599\":5,\"609\":1,\"613\":2,\"614\":1,\"617\":2,\"619\":5,\"622\":4,\"642\":2,\"662\":2,\"665\":1}}],[\"<web\",{\"1\":{\"563\":1}}],[\"<where>\",{\"1\":{\"521\":1}}],[\"<value>\",{\"1\":{\"561\":1}}],[\"<version>3\",{\"1\":{\"517\":1,\"665\":1}}],[\"<version>8\",{\"1\":{\"301\":1,\"517\":1,\"551\":1,\"558\":1}}],[\"<version>$\",{\"1\":{\"84\":1,\"113\":1,\"369\":1,\"470\":1,\"551\":2,\"558\":10}}],[\"<version>0\",{\"1\":{\"74\":1,\"113\":1,\"551\":1,\"617\":1}}],[\"<version>4\",{\"1\":{\"58\":1,\"517\":1,\"589\":1,\"590\":1}}],[\"<version>1\",{\"1\":{\"58\":3,\"113\":1,\"383\":1,\"386\":1,\"504\":1,\"505\":1,\"517\":1,\"609\":1,\"617\":2}}],[\"<version>2\",{\"1\":{\"58\":1,\"63\":3,\"74\":1,\"113\":1,\"504\":1,\"505\":1,\"558\":1,\"589\":1,\"590\":1,\"603\":1}}],[\"<version>5\",{\"1\":{\"58\":2,\"517\":3,\"543\":2,\"589\":2,\"590\":2,\"609\":1}}],[\"<junit\",{\"1\":{\"558\":1}}],[\"<jackson\",{\"1\":{\"558\":1}}],[\"<java\",{\"1\":{\"74\":1,\"113\":1,\"369\":1}}],[\"<>\",{\"1\":{\"525\":2}}],[\"<foreach\",{\"1\":{\"524\":1}}],[\"<form>\",{\"1\":{\"223\":1}}],[\"<<\",{\"1\":{\"233\":1}}],[\"<lombok\",{\"1\":{\"558\":2}}],[\"<log4j\",{\"1\":{\"558\":1}}],[\"<label\",{\"1\":{\"223\":2}}],[\"<listener\",{\"1\":{\"563\":1}}],[\"<listener>\",{\"1\":{\"563\":1}}],[\"<li\",{\"1\":{\"161\":2,\"163\":2}}],[\"<linearlayout\",{\"1\":{\"21\":1}}],[\"<array>\",{\"1\":{\"561\":1}}],[\"<artifactid>cglib<\",{\"1\":{\"665\":1}}],[\"<artifactid>c3p0<\",{\"1\":{\"551\":1}}],[\"<artifactid>ooxml\",{\"1\":{\"617\":2}}],[\"<artifactid>poi\",{\"1\":{\"617\":4}}],[\"<artifactid>pagehelper<\",{\"1\":{\"558\":1}}],[\"<artifactid>httpclient5<\",{\"1\":{\"609\":1}}],[\"<artifactid>fastjson2<\",{\"1\":{\"603\":1}}],[\"<artifactid>fastdfs\",{\"1\":{\"113\":1}}],[\"<artifactid>tomcat7\",{\"1\":{\"558\":1}}],[\"<artifactid>transport<\",{\"1\":{\"58\":1}}],[\"<artifactid>druid<\",{\"1\":{\"558\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"517\":1,\"558\":1,\"609\":1}}],[\"<artifactid>log4j<\",{\"1\":{\"58\":1}}],[\"<artifactid>log4j\",{\"1\":{\"58\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"558\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"517\":1,\"558\":1}}],[\"<artifactid>mysql\",{\"1\":{\"301\":1,\"517\":1,\"551\":1,\"558\":1}}],[\"<artifactid>knife4j\",{\"1\":{\"470\":1}}],[\"<artifactid>resilience4j\",{\"1\":{\"383\":1,\"386\":1}}],[\"<artifactid>upload\",{\"1\":{\"113\":1}}],[\"<artifactid>amqp\",{\"1\":{\"84\":1}}],[\"<artifactid>es\",{\"1\":{\"74\":1}}],[\"<artifactid>elasticsearch<\",{\"1\":{\"58\":1}}],[\"<artifactid>springboot\",{\"1\":{\"504\":1,\"505\":1}}],[\"<artifactid>spring\",{\"1\":{\"74\":4,\"113\":6,\"369\":2,\"372\":1,\"375\":1,\"382\":1,\"399\":2,\"400\":1,\"406\":1,\"409\":2,\"410\":1,\"439\":1,\"504\":3,\"505\":3,\"517\":3,\"543\":2,\"551\":2,\"558\":3,\"589\":3,\"590\":3}}],[\"<artifactid>slf4j\",{\"1\":{\"58\":2}}],[\"<artifactid>javax\",{\"1\":{\"558\":1}}],[\"<artifactid>jackson\",{\"1\":{\"63\":3,\"558\":1}}],[\"<artifactid>junit<\",{\"1\":{\"58\":1,\"517\":1,\"589\":1,\"590\":1}}],[\"<aop\",{\"1\":{\"546\":1}}],[\"<appsilder><\",{\"1\":{\"219\":1}}],[\"<appheader><\",{\"1\":{\"219\":1}}],[\"<a\",{\"1\":{\"208\":1,\"219\":1,\"221\":2,\"222\":1,\"223\":1}}],[\"<configuration>\",{\"1\":{\"518\":1,\"558\":1}}],[\"<content\",{\"1\":{\"193\":1}}],[\"<context\",{\"1\":{\"105\":1,\"106\":1,\"107\":2,\"108\":2,\"546\":1,\"561\":2,\"562\":1,\"563\":1,\"589\":1,\"590\":1}}],[\"<child\",{\"1\":{\"195\":4,\"197\":1}}],[\"<z\",{\"1\":{\"194\":1}}],[\"<init\",{\"1\":{\"563\":1}}],[\"<insert\",{\"1\":{\"524\":1}}],[\"<input\",{\"1\":{\"170\":1,\"171\":1,\"174\":1,\"179\":1,\"181\":2,\"182\":1,\"223\":2}}],[\"<if\",{\"1\":{\"521\":1}}],[\"<id>aliyunmaven<\",{\"1\":{\"116\":1}}],[\"<id>huaweicloud<\",{\"1\":{\"116\":1}}],[\"<druid\",{\"1\":{\"558\":1}}],[\"<datasource\",{\"1\":{\"518\":1}}],[\"<div>我是商品详情页\",{\"1\":{\"204\":1}}],[\"<div>我是child\",{\"1\":{\"195\":2}}],[\"<div>这是用户管理内容<\",{\"1\":{\"203\":1}}],[\"<div>这是home内容<\",{\"1\":{\"203\":1}}],[\"<div>\",{\"1\":{\"195\":1,\"197\":1,\"219\":1,\"223\":1}}],[\"<div\",{\"1\":{\"169\":1,\"173\":1,\"175\":1,\"194\":1,\"197\":1,\"210\":1,\"219\":2,\"223\":2}}],[\"<description>demo\",{\"1\":{\"74\":1,\"113\":1}}],[\"<dependencymanagement>\",{\"1\":{\"113\":1,\"369\":1}}],[\"<dependency>\",{\"1\":{\"58\":7,\"63\":3,\"74\":2,\"84\":1,\"113\":5,\"301\":1,\"369\":2,\"372\":1,\"375\":1,\"382\":1,\"383\":1,\"386\":1,\"399\":2,\"400\":1,\"406\":1,\"409\":2,\"410\":1,\"439\":1,\"470\":1,\"504\":2,\"505\":2,\"517\":7,\"543\":2,\"551\":4,\"558\":11,\"589\":4,\"590\":4,\"603\":1,\"609\":2,\"617\":3,\"665\":1}}],[\"<dependencies>\",{\"1\":{\"58\":1,\"74\":1,\"84\":1,\"113\":2,\"369\":2,\"504\":1,\"505\":1,\"517\":1,\"558\":1,\"589\":1,\"590\":1}}],[\"<url\",{\"1\":{\"563\":1}}],[\"<url>https\",{\"1\":{\"116\":2}}],[\"<uriencoding>utf\",{\"1\":{\"558\":1}}],[\"<ul>\",{\"1\":{\"161\":2}}],[\"<tx\",{\"1\":{\"553\":1,\"561\":1}}],[\"<t>\",{\"1\":{\"303\":6,\"304\":6,\"487\":6,\"599\":4}}],[\"<time\",{\"1\":{\"244\":1}}],[\"<title>title<\",{\"1\":{\"146\":1}}],[\"<td>\",{\"1\":{\"221\":4}}],[\"<transactionmanager\",{\"1\":{\"518\":1}}],[\"<transition\",{\"1\":{\"210\":1}}],[\"<tr\",{\"1\":{\"221\":1}}],[\"<type>pom<\",{\"1\":{\"113\":1,\"369\":1}}],[\"<h2\",{\"1\":{\"223\":1}}],[\"<head>\",{\"1\":{\"146\":1}}],[\"<html\",{\"1\":{\"146\":1}}],[\"<host>\",{\"1\":{\"42\":1}}],[\"<mvc\",{\"1\":{\"562\":2,\"585\":5}}],[\"<mybatis\",{\"1\":{\"558\":2}}],[\"<mysql\",{\"1\":{\"558\":1}}],[\"<mapper\",{\"1\":{\"521\":1}}],[\"<mappers>\",{\"1\":{\"518\":1}}],[\"<maven\",{\"1\":{\"505\":2,\"558\":2}}],[\"<meta\",{\"1\":{\"146\":1}}],[\"<mirrorof>\",{\"1\":{\"116\":2}}],[\"<mirror>\",{\"1\":{\"116\":2}}],[\"<modelversion>4\",{\"1\":{\"74\":1,\"113\":1,\"504\":1,\"505\":1}}],[\"<servlet>\",{\"1\":{\"563\":1}}],[\"<servlet\",{\"1\":{\"558\":1,\"563\":4}}],[\"<select\",{\"1\":{\"521\":1}}],[\"<segment>\",{\"1\":{\"430\":1}}],[\"<sys\",{\"1\":{\"244\":1}}],[\"<stdlib\",{\"1\":{\"244\":1}}],[\"<studio\",{\"1\":{\"244\":1}}],[\"<style>\",{\"1\":{\"173\":1}}],[\"<script>\",{\"1\":{\"146\":1}}],[\"<script\",{\"1\":{\"123\":2,\"146\":2,\"150\":1}}],[\"<scope>provided<\",{\"1\":{\"558\":1}}],[\"<scope>import<\",{\"1\":{\"113\":1,\"369\":1}}],[\"<scope>test<\",{\"1\":{\"74\":1,\"113\":1}}],[\"<spring\",{\"1\":{\"113\":1,\"369\":1,\"558\":1}}],[\"<name>阿里云公共仓库<\",{\"1\":{\"116\":1}}],[\"<name>upload\",{\"1\":{\"113\":1}}],[\"<name>es\",{\"1\":{\"74\":1}}],[\"<exclusion>\",{\"1\":{\"617\":3}}],[\"<exclusions>\",{\"1\":{\"617\":2}}],[\"<environment\",{\"1\":{\"518\":1}}],[\"<environments\",{\"1\":{\"518\":1}}],[\"<entry\",{\"1\":{\"109\":1,\"110\":4}}],[\"<em>\",{\"1\":{\"71\":1}}],[\"<router\",{\"1\":{\"203\":3,\"204\":3,\"205\":6,\"219\":2,\"225\":1}}],[\"<rabbit\",{\"1\":{\"105\":7,\"106\":7,\"107\":3,\"108\":3,\"109\":5,\"110\":9,\"589\":18,\"590\":8}}],[\"<rabbitmq\",{\"1\":{\"84\":1}}],[\"<relativepath\",{\"1\":{\"74\":1,\"113\":1}}],[\"<=\",{\"1\":{\"76\":1,\"89\":1,\"94\":1,\"525\":2}}],[\"<bean\",{\"1\":{\"553\":2,\"561\":5,\"562\":1,\"585\":2,\"590\":1}}],[\"<beans\",{\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"589\":1,\"590\":1}}],[\"<br\",{\"1\":{\"487\":2,\"619\":5}}],[\"<button\",{\"1\":{\"146\":5,\"159\":4,\"223\":1,\"224\":1}}],[\"<build>\",{\"1\":{\"74\":1,\"113\":1,\"558\":1}}],[\"<body>\",{\"1\":{\"42\":1,\"146\":1}}],[\"<groupid>javax\",{\"1\":{\"558\":1}}],[\"<groupid>junit<\",{\"1\":{\"58\":1,\"517\":1,\"589\":1,\"590\":1}}],[\"<groupid>cglib<\",{\"1\":{\"665\":1}}],[\"<groupid>cn\",{\"1\":{\"504\":1}}],[\"<groupid>com\",{\"1\":{\"63\":3,\"74\":1,\"84\":1,\"113\":2,\"470\":1,\"505\":1,\"551\":1,\"558\":3,\"603\":1,\"617\":2}}],[\"<groupid>io\",{\"1\":{\"383\":1,\"386\":1,\"617\":1}}],[\"<groupid>mysql<\",{\"1\":{\"301\":1,\"517\":1,\"551\":1,\"558\":1}}],[\"<groupid>log4j<\",{\"1\":{\"58\":1}}],[\"<groupid>org\",{\"1\":{\"58\":5,\"74\":4,\"113\":6,\"369\":2,\"372\":1,\"375\":1,\"382\":1,\"399\":2,\"400\":1,\"406\":1,\"409\":2,\"410\":1,\"439\":1,\"504\":3,\"505\":3,\"517\":5,\"543\":2,\"551\":2,\"558\":7,\"589\":3,\"590\":3,\"609\":2,\"617\":3}}],[\"<query\",{\"1\":{\"42\":1}}],[\"<p\",{\"1\":{\"165\":2,\"166\":1,\"167\":1,\"168\":1,\"174\":1,\"487\":1}}],[\"<p>\",{\"1\":{\"146\":1,\"156\":6,\"170\":1,\"171\":1,\"177\":1,\"327\":2,\"363\":1,\"466\":2,\"520\":3,\"595\":2,\"597\":2,\"598\":1}}],[\"<plugin>\",{\"1\":{\"74\":1,\"113\":1,\"558\":1}}],[\"<plugins>\",{\"1\":{\"74\":1,\"113\":1,\"558\":1}}],[\"<param\",{\"1\":{\"563\":4}}],[\"<parent>\",{\"1\":{\"74\":1,\"113\":1,\"504\":1,\"505\":1}}],[\"<pagehelper\",{\"1\":{\"558\":1}}],[\"<packaging>war<\",{\"1\":{\"558\":1}}],[\"<package\",{\"1\":{\"518\":1}}],[\"<path>\",{\"1\":{\"42\":1,\"558\":1}}],[\"<property\",{\"1\":{\"518\":4,\"553\":5,\"561\":11,\"562\":2}}],[\"<properties\",{\"1\":{\"518\":1}}],[\"<properties>\",{\"1\":{\"74\":1,\"84\":1,\"113\":1,\"369\":1,\"505\":1,\"558\":1}}],[\"<project\",{\"1\":{\"74\":1,\"113\":1,\"504\":1,\"505\":1,\"558\":1}}],[\"<protocol>\",{\"1\":{\"42\":1}}],[\"<port>80<\",{\"1\":{\"558\":1}}],[\"<port>\",{\"1\":{\"42\":1}}],[\"<\",{\"1\":{\"21\":2,\"58\":8,\"63\":4,\"71\":1,\"74\":10,\"84\":5,\"105\":10,\"106\":10,\"107\":7,\"108\":7,\"109\":6,\"110\":14,\"113\":18,\"116\":5,\"146\":9,\"156\":14,\"161\":6,\"162\":2,\"163\":5,\"165\":2,\"168\":1,\"169\":2,\"170\":3,\"171\":1,\"173\":2,\"174\":1,\"177\":1,\"193\":1,\"194\":2,\"195\":2,\"197\":2,\"203\":2,\"204\":2,\"205\":10,\"210\":1,\"219\":5,\"221\":5,\"223\":4,\"224\":1,\"244\":2,\"301\":2,\"303\":2,\"304\":1,\"327\":3,\"369\":7,\"372\":1,\"375\":1,\"382\":1,\"383\":1,\"386\":1,\"399\":2,\"400\":1,\"406\":1,\"409\":2,\"410\":1,\"439\":1,\"466\":2,\"470\":4,\"504\":6,\"505\":7,\"517\":14,\"518\":13,\"521\":7,\"524\":4,\"525\":2,\"543\":3,\"546\":5,\"551\":6,\"553\":5,\"558\":40,\"561\":19,\"562\":6,\"563\":9,\"585\":9,\"589\":29,\"590\":17,\"599\":3,\"603\":1,\"609\":3,\"617\":10,\"619\":1,\"665\":1}}],[\"决定该容器相对它的父容器的位置\",{\"1\":{\"21\":1}}],[\"决定子控件相对该父容器的位置\",{\"1\":{\"21\":1}}],[\"所谓事务传播行为是指\",{\"1\":{\"548\":1}}],[\"所谓通知是指拦截到\",{\"1\":{\"540\":1}}],[\"所谓连接点是指那些被拦截到的点\",{\"1\":{\"540\":1}}],[\"所处的线程封闭到\",{\"1\":{\"520\":1}}],[\"所在地址\",{\"1\":{\"304\":1}}],[\"所在元素的dom对象\",{\"1\":{\"181\":1}}],[\"所有引用基类的地方必须能透明地使用其子类对象\",{\"1\":{\"628\":1}}],[\"所有队列都能收到消息\",{\"1\":{\"589\":1}}],[\"所有我们也就针对方法进行事务的控制\",{\"1\":{\"549\":1}}],[\"所有请求都会被降级\",{\"1\":{\"456\":1}}],[\"所有请求都正常访问\",{\"1\":{\"456\":1}}],[\"所有由这个请求产⽣的span组成了这个trace\",{\"1\":{\"396\":1}}],[\"所有的请求都会通过熔断器\",{\"1\":{\"382\":1}}],[\"所有的实例都直接共享拥有了\",{\"1\":{\"227\":1}}],[\"所有\",{\"1\":{\"363\":1}}],[\"所有给定集合的并集存储在\",{\"1\":{\"348\":1}}],[\"所有单列集合的顶级父接口\",{\"1\":{\"314\":1}}],[\"所有属性提供get\",{\"1\":{\"298\":1}}],[\"所有属性私有\",{\"1\":{\"298\":1}}],[\"所有字段\",{\"1\":{\"57\":1}}],[\"所有子视图横向摆放\",{\"1\":{\"21\":1}}],[\"所有子视图的纵向方向上相对父容器居中显示\",{\"1\":{\"21\":1}}],[\"所有子视图相对于父容器居中显示\",{\"1\":{\"21\":1}}],[\"所有子容器的横向方向上相对父容器居中显示\",{\"1\":{\"21\":1}}],[\"所以是直接加载型单例\",{\"1\":{\"647\":1}}],[\"所以时懒加载\",{\"1\":{\"646\":1}}],[\"所以在运用迪米特法则时要注意以下\",{\"1\":{\"631\":1}}],[\"所以该方法可以修改处理器方法的处理结果数据\",{\"1\":{\"583\":1}}],[\"所以一般情况需要程序员根据业务需求开发\",{\"1\":{\"571\":1}}],[\"所以一个应用只需要一个该对象即可\",{\"1\":{\"515\":1}}],[\"所以每次数据库会话结束前需要马上调用其\",{\"1\":{\"515\":1}}],[\"所以使用时必须指定type\",{\"1\":{\"493\":1}}],[\"所以实施微服务的前提是软件交付链路及基础设施的成熟化\",{\"1\":{\"448\":1}}],[\"所以微服务架构中\",{\"1\":{\"404\":1}}],[\"所以resttemplate的主要⽅法都与rest的http协议的⼀些⽅法紧密相连\",{\"1\":{\"389\":1}}],[\"所以需要⽹关上请求失败需要快速返回给客户端\",{\"1\":{\"439\":1}}],[\"所以需要修改本地的host⽂件\",{\"1\":{\"367\":1}}],[\"所以需要动态路由\",{\"1\":{\"225\":1}}],[\"所以说使用单线程去操作效率就是最高的\",{\"1\":{\"334\":1}}],[\"所以说持久化很重要\",{\"1\":{\"331\":1}}],[\"所以说不能写异步请求\",{\"1\":{\"190\":1}}],[\"所以也可以作为堆栈或队列使用\",{\"1\":{\"316\":1}}],[\"所以定义删除方法的时候\",{\"1\":{\"222\":1}}],[\"所以原来属于一个个页面的工作被归类为一个个\",{\"1\":{\"199\":1}}],[\"所以应该在\",{\"1\":{\"170\":1}}],[\"所以我们在实际编程中只要遵循以下4点\",{\"1\":{\"629\":1}}],[\"所以我们必创建返回completablefuture类型的⽅法\",{\"1\":{\"385\":1}}],[\"所以我们需要在全局配置中进行配置\",{\"1\":{\"122\":1}}],[\"所以我们查询不同的词也可以查询出该结果例如\",{\"1\":{\"49\":1}}],[\"所以\",{\"1\":{\"80\":1,\"155\":1,\"455\":1,\"631\":1}}],[\"所以有的可能需要去上面修改的存放地址下找wrapper\",{\"1\":{\"17\":1}}],[\"填充的字段\",{\"1\":{\"303\":1,\"304\":1}}],[\"填充字段\",{\"1\":{\"303\":1,\"304\":1}}],[\"填充背景色\",{\"1\":{\"21\":1}}],[\"填充父容器的剩余空间\",{\"1\":{\"21\":1}}],[\"也称为中央控制器或者核心控制器\",{\"1\":{\"569\":1}}],[\"也可不在配置文件中显示的注入\",{\"1\":{\"537\":1}}],[\"也可以定义方法上\",{\"1\":{\"579\":1}}],[\"也可以去\",{\"1\":{\"564\":1}}],[\"也可以使用空格进行分割\",{\"1\":{\"546\":1}}],[\"也可以使⽤url属性指定服务的url\",{\"1\":{\"373\":1}}],[\"也可以完全停⽌所有不重要的功能\",{\"1\":{\"457\":1}}],[\"也可以是服务发现者\",{\"1\":{\"366\":1}}],[\"也可以拥有某个订单的⼀个⽂档\",{\"1\":{\"35\":1}}],[\"也可以根据内容自适应\",{\"1\":{\"21\":1}}],[\"也被称为应用上下文\",{\"1\":{\"533\":1}}],[\"也被人称之为结构化数据库\",{\"1\":{\"331\":1}}],[\"也不会批量处理更新\",{\"1\":{\"515\":1}}],[\"也是接收\",{\"1\":{\"421\":1}}],[\"也代表不存在\",{\"1\":{\"341\":1}}],[\"也就意味着\",{\"1\":{\"312\":1}}],[\"也就是在整个程序运行时\",{\"1\":{\"645\":1}}],[\"也就是说\",{\"1\":{\"628\":1,\"631\":1}}],[\"也就是子类出现的地方\",{\"1\":{\"628\":1}}],[\"也就是\",{\"1\":{\"579\":1}}],[\"也就是我们所说的\",{\"1\":{\"570\":1}}],[\"也就是需要配置\",{\"1\":{\"563\":1}}],[\"也就是不自动提交\",{\"1\":{\"515\":1}}],[\"也就是使用了建造者设计模式\",{\"1\":{\"514\":1}}],[\"也就是指定的索引位也包含在内\",{\"1\":{\"345\":1}}],[\"也就是多个值时\",{\"1\":{\"341\":1}}],[\"也就是安装时配置的目录\",{\"1\":{\"260\":1}}],[\"也就是创建链接\",{\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"589\":1,\"590\":1}}],[\"也就是要发送消息的程序\",{\"1\":{\"91\":1}}],[\"也就是这个线性布局到底是水平还是垂直方向逐个排列\",{\"1\":{\"21\":1}}],[\"也需要通过npm去安装下载\",{\"1\":{\"212\":1}}],[\"也叫组件之间的通信\",{\"1\":{\"196\":1}}],[\"也必须指定消息的\",{\"1\":{\"96\":1}}],[\"也即对字的解释\",{\"1\":{\"28\":1}}],[\"垂直排列\",{\"1\":{\"21\":1}}],[\"属性表示\",{\"1\":{\"545\":2}}],[\"属性指定的类\",{\"1\":{\"537\":1}}],[\"属性其他表中嵌套是用于指定当前\",{\"1\":{\"524\":1}}],[\"属性是由\",{\"1\":{\"579\":1}}],[\"属性是\",{\"1\":{\"524\":1}}],[\"属性是传入的参数类型\",{\"1\":{\"524\":2}}],[\"属性是在实体类与数据库表字段不符时使用的\",{\"1\":{\"524\":1}}],[\"属性是指定要返回的java实体类\",{\"1\":{\"524\":1}}],[\"属性是这个\",{\"1\":{\"524\":3}}],[\"属性名\",{\"1\":{\"523\":1}}],[\"属性并且参数值是以\",{\"1\":{\"420\":1}}],[\"属性的参数即可匹配路由\",{\"1\":{\"420\":1}}],[\"属性的方式即可调用\",{\"1\":{\"227\":1}}],[\"属性赋值\",{\"0\":{\"205\":1}}],[\"属性值均\",{\"1\":{\"545\":1}}],[\"属性值可以是正则表达式\",{\"1\":{\"420\":1}}],[\"属性值是一个数组\",{\"1\":{\"197\":1}}],[\"属性值\",{\"1\":{\"168\":1,\"523\":1,\"537\":1}}],[\"属性\",{\"1\":{\"21\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"30\":1,\"73\":1,\"296\":1,\"552\":1}}],[\"可读性提高\",{\"1\":{\"627\":1}}],[\"可重复读\",{\"1\":{\"547\":1}}],[\"可使用该方法名作为切入点\",{\"1\":{\"545\":1}}],[\"可使用byname\",{\"1\":{\"537\":1}}],[\"可不导入\",{\"1\":{\"517\":1}}],[\"可快速⼿动或⾃动进⾏节点增加和减少\",{\"1\":{\"448\":1}}],[\"可快速回滚应⽤\",{\"1\":{\"448\":1}}],[\"可快速搭建大型网页应用\",{\"1\":{\"211\":1}}],[\"可想⽽知\",{\"1\":{\"404\":1}}],[\"可⽤连续三个连字号\",{\"1\":{\"367\":1}}],[\"可用用于高速缓存\",{\"1\":{\"331\":1}}],[\"可基于内存亦可持久化的日志型\",{\"1\":{\"331\":1}}],[\"可选\",{\"1\":{\"356\":1}}],[\"可选操作\",{\"1\":{\"315\":1}}],[\"可选值\",{\"1\":{\"21\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1}}],[\"可通过\",{\"1\":{\"212\":1}}],[\"可从中获取消息id\",{\"1\":{\"87\":1}}],[\"可能会出现io错误\",{\"1\":{\"618\":1}}],[\"可能导致系统被压垮\",{\"1\":{\"461\":1}}],[\"可能包含多个组件\",{\"1\":{\"42\":1}}],[\"可能需要先关闭android\",{\"1\":{\"17\":1}}],[\"可以预防外来变更的扩散\",{\"1\":{\"630\":1}}],[\"可以有自己独有的内容\",{\"1\":{\"628\":1}}],[\"可以显著降低对其他功能的影响\",{\"1\":{\"627\":1}}],[\"可以提高代理对象\",{\"1\":{\"665\":1}}],[\"可以提高代码的可复用性\",{\"1\":{\"626\":1}}],[\"可以提高软件的可维护性\",{\"1\":{\"626\":1}}],[\"可以添加到方法上\",{\"1\":{\"577\":1}}],[\"可以方便地实现对程序进行权限拦截和运行监控等功能\",{\"1\":{\"529\":1}}],[\"可以省略事务\",{\"1\":{\"549\":1}}],[\"可以省略\",{\"1\":{\"524\":1}}],[\"可以允许固定数量的请求进⼊\",{\"1\":{\"461\":1}}],[\"可以以任意速率流⼊⽔滴到漏桶\",{\"1\":{\"459\":1}}],[\"可以只提供部分功能\",{\"1\":{\"457\":1}}],[\"可以只加载所需部分\",{\"1\":{\"199\":1}}],[\"可以针对某个资源的线程池去进⾏处理⽽不影响其它资源\",{\"1\":{\"455\":1}}],[\"可以\",{\"1\":{\"451\":1}}],[\"可以正常获取到⻚⾯返回值\",{\"1\":{\"425\":1}}],[\"可以接收两个参数\",{\"1\":{\"422\":1}}],[\"可以⽤于接⼝请求参数校验\",{\"1\":{\"419\":1}}],[\"可以⽤来合并多个条件查询结果的布尔逻辑\",{\"1\":{\"57\":1}}],[\"可以限制并发执⾏的数量\",{\"1\":{\"383\":1}}],[\"可以把default换成具体的feignclient的名字\",{\"1\":{\"374\":1}}],[\"可以把注释注释到jvm的机制\",{\"1\":{\"269\":1}}],[\"可以不写\",{\"1\":{\"369\":2}}],[\"可以当成栈\",{\"1\":{\"341\":1}}],[\"可以用来存储多个数据\",{\"1\":{\"312\":1}}],[\"可以继承\",{\"1\":{\"272\":1}}],[\"可以配置多个映射\",{\"1\":{\"266\":1}}],[\"可以指定渲染成什么html元素\",{\"1\":{\"219\":1}}],[\"可以指定行数列数\",{\"1\":{\"20\":1}}],[\"可以根据自己的需求选择需要的工具和模式\",{\"1\":{\"213\":1}}],[\"可以为开发者提供一个\",{\"1\":{\"211\":1}}],[\"可以为⽤户数据定义⼀个类型\",{\"1\":{\"32\":1}}],[\"可以给任何元素和组件添加进入\",{\"1\":{\"210\":1}}],[\"可以发现\",{\"1\":{\"208\":1}}],[\"可以通过第三方转发该调用\",{\"1\":{\"631\":1}}],[\"可以通过为标签\",{\"1\":{\"537\":1}}],[\"可以通过注解方便地测试\",{\"1\":{\"529\":1}}],[\"可以通过⽹关统⼀配置跨域访问\",{\"1\":{\"444\":1}}],[\"可以通过是\",{\"1\":{\"424\":1}}],[\"可以通过basedir属性改变\",{\"1\":{\"405\":1}}],[\"可以通过指定\",{\"1\":{\"391\":1}}],[\"可以通过\",{\"1\":{\"200\":1}}],[\"可以通过页面地址的锚链接来实现spa\",{\"1\":{\"200\":1}}],[\"可以解决\",{\"1\":{\"199\":1}}],[\"可以由各种模块组成\",{\"1\":{\"198\":1}}],[\"可以在最⼤程度上避免共享业务的重复建设\",{\"1\":{\"448\":1}}],[\"可以在任何地方使用\",{\"1\":{\"184\":1}}],[\"可以在视图中通过\",{\"1\":{\"154\":1}}],[\"可以一次性\",{\"1\":{\"173\":1}}],[\"可以渲染内容中的html标签\",{\"1\":{\"157\":1}}],[\"可以直接通过\",{\"1\":{\"155\":1}}],[\"可以参考官网json\",{\"1\":{\"141\":1}}],[\"可以将所有对象的创建和依赖关系的维护交给\",{\"1\":{\"529\":1}}],[\"可以将一个产品的内部表象与产品的生成过程分割开来\",{\"1\":{\"514\":1}}],[\"可以将storage称为存储服务器\",{\"1\":{\"112\":1}}],[\"可以将\",{\"1\":{\"112\":1}}],[\"可以被重新发送到另一个交换机\",{\"1\":{\"110\":1}}],[\"可以被放置到集群中的任何节点上\",{\"1\":{\"39\":1}}],[\"可以让队列在绑定\",{\"1\":{\"99\":1}}],[\"可以划分出多个\",{\"1\":{\"80\":1}}],[\"可以使用npm\",{\"1\":{\"263\":1}}],[\"可以使用插件\",{\"1\":{\"184\":1}}],[\"可以使用\",{\"1\":{\"128\":1,\"499\":1}}],[\"可以使⼤数据通俗易懂\",{\"1\":{\"54\":1}}],[\"可以使⽤它来匹配来⾃\",{\"1\":{\"413\":1}}],[\"可以使⽤它拦截和修改请求\",{\"1\":{\"413\":1}}],[\"可以使⽤相对路径⽐如classpath\",{\"1\":{\"407\":1}}],[\"可以使⽤\",{\"1\":{\"54\":1}}],[\"可以很⽅便的利⽤图表\",{\"1\":{\"54\":1}}],[\"可以拥有任意多个节点\",{\"1\":{\"38\":1}}],[\"可以定义任意多的索引\",{\"1\":{\"31\":1}}],[\"可以扩展到上百台服务器\",{\"1\":{\"29\":1}}],[\"可以设置上下左右的对齐\",{\"1\":{\"26\":1}}],[\"以我的为例文件名就是\",{\"1\":{\"655\":1}}],[\"以参数形式传入到当前对象方法中的对象\",{\"1\":{\"631\":1}}],[\"以后所有的\",{\"1\":{\"545\":1}}],[\"以后遇到其他标签在进行补充吧\",{\"1\":{\"524\":1}}],[\"以保证核⼼业务的正常运⾏\",{\"1\":{\"439\":1}}],[\"以此缓解服务器资源的的压⼒\",{\"1\":{\"439\":1}}],[\"以此类推\",{\"1\":{\"168\":1,\"499\":1}}],[\"以其他⽅式\",{\"1\":{\"424\":1}}],[\"以方法形式配置路径\",{\"1\":{\"416\":1}}],[\"以及进度id\",{\"1\":{\"396\":1}}],[\"以及响应状态码和执⾏时间\",{\"1\":{\"378\":1}}],[\"以下写法的意思是\",{\"1\":{\"391\":1}}],[\"以便在waitdurationinopenstate之后将它们转换为半开状态\",{\"1\":{\"382\":1}}],[\"以百分比的方式配置\",{\"1\":{\"382\":1}}],[\"以百分比配置失败率阈值\",{\"1\":{\"382\":1}}],[\"以阻塞或非阻塞方式获取消息列表\",{\"1\":{\"356\":1}}],[\"以多线程形式运行服务中的\",{\"1\":{\"283\":1}}],[\"以秒为单位\",{\"1\":{\"281\":1,\"337\":1}}],[\"以对应路由表\",{\"1\":{\"223\":2}}],[\"以上两个定义的含义是\",{\"1\":{\"630\":1}}],[\"以上\",{\"1\":{\"128\":1}}],[\"以上版本安装head需要安装node和grunt\",{\"1\":{\"41\":1}}],[\"以毫秒为单位\",{\"1\":{\"109\":1,\"281\":1}}],[\"以\",{\"1\":{\"105\":1,\"107\":1}}],[\"以一个tablerow标签定义为一行或一列\",{\"1\":{\"20\":1}}],[\"以屏幕左上角为参考系\",{\"1\":{\"20\":1}}],[\"以同级或上级为参考系定位位置\",{\"1\":{\"20\":1}}],[\"横着或竖着按顺序排列\",{\"1\":{\"20\":1}}],[\"文字时按这种方式可以循环渲染\",{\"1\":{\"619\":1}}],[\"文字时\",{\"1\":{\"619\":1}}],[\"文字内容\",{\"1\":{\"146\":2}}],[\"文件其他都交给\",{\"1\":{\"560\":1}}],[\"文件名\",{\"1\":{\"559\":1}}],[\"文件名可自定义\",{\"1\":{\"518\":1}}],[\"文件时需要注意以下几点\",{\"1\":{\"522\":1}}],[\"文件的完全限定名\",{\"1\":{\"521\":1}}],[\"文件中添加一下内容\",{\"1\":{\"369\":1}}],[\"文件不存在\",{\"1\":{\"244\":1}}],[\"文件目路径不能有中文\",{\"1\":{\"213\":1}}],[\"文件下载\",{\"1\":{\"112\":1}}],[\"文件上传\",{\"0\":{\"113\":1},\"1\":{\"112\":1}}],[\"文件访问\",{\"1\":{\"112\":1}}],[\"文件同步\",{\"1\":{\"112\":1}}],[\"文件存储\",{\"1\":{\"112\":1}}],[\"文件就可以了\",{\"1\":{\"108\":1}}],[\"文件内容\",{\"1\":{\"107\":1}}],[\"文件\",{\"1\":{\"18\":1,\"106\":1,\"367\":1,\"518\":1,\"523\":1,\"590\":2}}],[\"文档分析\",{\"0\":{\"183\":1}}],[\"文档id\",{\"1\":{\"76\":1}}],[\"文档内容\",{\"1\":{\"71\":1}}],[\"文档属性\",{\"1\":{\"65\":1,\"70\":1}}],[\"文档输出\",{\"1\":{\"65\":1,\"70\":1,\"71\":1}}],[\"文档\",{\"0\":{\"202\":1},\"1\":{\"4\":1}}],[\"文档地址\",{\"0\":{\"4\":1},\"1\":{\"172\":1,\"603\":1}}],[\"在一个对象上增加一些功能\",{\"1\":{\"659\":1}}],[\"在一个方法上添加\",{\"1\":{\"497\":1}}],[\"在内存中生成一个该目标对象的子类\",{\"1\":{\"665\":1}}],[\"在内存里只有一个实例\",{\"1\":{\"645\":1}}],[\"在内存情况下\",{\"1\":{\"334\":1}}],[\"在对其他类的引用上\",{\"1\":{\"631\":1}}],[\"在釆用迪米特法则时需要反复权衡\",{\"1\":{\"631\":1}}],[\"在具体应用接口隔离原则时\",{\"1\":{\"630\":1}}],[\"在类的设计上\",{\"1\":{\"631\":1}}],[\"在类的结构设计上\",{\"1\":{\"631\":1}}],[\"在类的划分上\",{\"1\":{\"631\":1}}],[\"在类中调用其他类时务必要使用父类或接口\",{\"1\":{\"628\":1}}],[\"在类上时类似与一级请求\",{\"1\":{\"579\":1}}],[\"在以t定义的所有程序p中将所有的对象o2都替换为o1\",{\"1\":{\"628\":1}}],[\"在面向对象的程序设计中\",{\"1\":{\"626\":1}}],[\"在成员变量上使用时表示当前成员变量需要进行必填校验\",{\"1\":{\"595\":1}}],[\"在头部使用时表示当前所有成员变量都需要进行必填校验\",{\"1\":{\"595\":1}}],[\"在方法上时不指定\",{\"1\":{\"579\":1}}],[\"在方法上时\",{\"1\":{\"579\":1}}],[\"在当前类中\",{\"1\":{\"578\":1}}],[\"在当前服务的\",{\"1\":{\"369\":1}}],[\"在dispatcherservlet\",{\"1\":{\"571\":1}}],[\"在data中设置msg\",{\"1\":{\"170\":1}}],[\"在调用执行期间事务的维护情况\",{\"1\":{\"548\":1}}],[\"在目标方法执行出现异常的时候才会别调用的通知\",{\"1\":{\"545\":1}}],[\"在目标方法执行之后被调用的通知\",{\"1\":{\"545\":1}}],[\"在目标方法执行之前被调用的通知\",{\"1\":{\"545\":1}}],[\"在定义好切面\",{\"1\":{\"545\":1}}],[\"在数据持久化对象中使用\",{\"1\":{\"539\":1}}],[\"在读取\",{\"1\":{\"535\":1}}],[\"在此标签中不常用\",{\"1\":{\"524\":1}}],[\"在此列表的开头插入指定的元素\",{\"1\":{\"316\":1}}],[\"在建造者模式中\",{\"1\":{\"514\":1}}],[\"在12\",{\"1\":{\"461\":1}}],[\"在各⾃的时间间隔内\",{\"1\":{\"461\":1}}],[\"在固定的时间窗⼝内\",{\"1\":{\"461\":1}}],[\"在⾼并发访问下\",{\"1\":{\"451\":1}}],[\"在分布式系统中\",{\"1\":{\"439\":1}}],[\"在分⽚\",{\"1\":{\"39\":1}}],[\"在请求路径前加上\",{\"1\":{\"427\":1}}],[\"在某个时间段之间的请求才会被转发\",{\"1\":{\"419\":1}}],[\"在某个时间之后的请求才会被转发\",{\"1\":{\"419\":1}}],[\"在某个时间之前的请求才会被转发到\",{\"1\":{\"419\":1}}],[\"在某个分⽚\",{\"1\":{\"39\":1}}],[\"在uri的schema协议部分为⾃定义的lb\",{\"1\":{\"417\":1}}],[\"在微服务架构中设计服务较多需要对于配置⽂件统⼀管理\",{\"1\":{\"448\":1}}],[\"在微服务架构中\",{\"1\":{\"408\":1}}],[\"在微服务架构中某些核⼼服务为了保证⾼性能会部署上百个节点\",{\"1\":{\"404\":1}}],[\"在上述案例中\",{\"1\":{\"408\":1}}],[\"在git仓库中\",{\"1\":{\"405\":1}}],[\"在配置文件中配置\",{\"0\":{\"585\":1}}],[\"在配置文件中配置即可\",{\"1\":{\"548\":1}}],[\"在配置文件中添加\",{\"1\":{\"405\":1}}],[\"在配置⽂件中进⾏配置\",{\"1\":{\"438\":1}}],[\"在配置类中配置logger\",{\"1\":{\"378\":1}}],[\"在传统模式下\",{\"1\":{\"404\":1}}],[\"在传统的搜索应⽤中表现好于\",{\"1\":{\"29\":1}}],[\"在实际应⽤会有动态更新位置的需求\",{\"1\":{\"404\":1}}],[\"在实例视图中使用组件\",{\"1\":{\"194\":2}}],[\"在实例选项compoents中定义局部组件名字\",{\"1\":{\"194\":1}}],[\"在实例的filter选项中定义局部过滤器\",{\"1\":{\"176\":1}}],[\"在spring中\",{\"1\":{\"540\":1}}],[\"在spring\",{\"1\":{\"390\":1,\"404\":1,\"413\":1}}],[\"在style里面加给v\",{\"1\":{\"173\":1}}],[\"在远程系统没有响应和引发异常之前\",{\"1\":{\"381\":1}}],[\"在返回响应时间过长时触发\",{\"1\":{\"374\":1}}],[\"在返回响应时间过⻓时触发\",{\"1\":{\"374\":1}}],[\"在使⽤resilience4j的过程中\",{\"1\":{\"381\":1}}],[\"在使⽤feign时提供负载均衡和熔断降级的功能\",{\"1\":{\"372\":1}}],[\"在使用\",{\"1\":{\"104\":1}}],[\"在yaml单⼀配置⽂件中\",{\"1\":{\"367\":1}}],[\"在软件领域\",{\"1\":{\"366\":1}}],[\"在变量左边添加元素值\",{\"1\":{\"363\":1}}],[\"在事务执行过程\",{\"1\":{\"358\":1}}],[\"在输入元素的数量或者体积非常非常大时\",{\"1\":{\"354\":1}}],[\"在有序集合中计算指定字典区间内成员数量\",{\"1\":{\"351\":1}}],[\"在列表的元素前或后插入元素\",{\"1\":{\"341\":1}}],[\"在key的后面追加上value的值\",{\"1\":{\"337\":1}}],[\"在reids根目录执行\",{\"1\":{\"332\":1}}],[\"在rabbitmq中并未提供延迟队列功能\",{\"1\":{\"111\":1}}],[\"在rabbitmq中可以虚拟消息服务器virtual\",{\"1\":{\"83\":1}}],[\"在hashmap和linkedset中分别存储一份\",{\"1\":{\"320\":1}}],[\"在单向链表中\",{\"1\":{\"311\":1}}],[\"在它的搜索范围没有找到这个类\",{\"1\":{\"289\":1}}],[\"在套接字上发送一个字节的紧急数据\",{\"1\":{\"281\":1}}],[\"在jdk1\",{\"1\":{\"269\":1,\"318\":1}}],[\"在运行时的名称\",{\"1\":{\"266\":1}}],[\"在用户变量中添加\",{\"1\":{\"263\":1}}],[\"在nvm安装根目录\",{\"1\":{\"260\":1}}],[\"在入口main\",{\"1\":{\"227\":1}}],[\"在入口处引入js文件\",{\"1\":{\"217\":1}}],[\"在路由表中配置添加功能的路由\",{\"1\":{\"223\":2}}],[\"在最后一行把router对象暴露出去\",{\"1\":{\"220\":1}}],[\"在main\",{\"1\":{\"219\":1,\"220\":1}}],[\"在mounted事件中\",{\"1\":{\"225\":1}}],[\"在mounted事件\",{\"1\":{\"221\":1}}],[\"在mounted\",{\"1\":{\"186\":1}}],[\"在app\",{\"1\":{\"218\":2,\"219\":1}}],[\"在保存代码的时候开启eslint代码检查机制\",{\"1\":{\"213\":1}}],[\"在开发模式下\",{\"1\":{\"213\":1}}],[\"在相对应的一级导航路由配置选项children里面\",{\"1\":{\"209\":1}}],[\"在原有的一级导航的template里面\",{\"1\":{\"209\":1}}],[\"在组件内部可以使用$route\",{\"1\":{\"204\":1}}],[\"在组件名字相对应的对象中定义选项\",{\"1\":{\"194\":2}}],[\"在子组件的template中就可以使用\",{\"1\":{\"197\":1}}],[\"在监听函数中\",{\"1\":{\"189\":1}}],[\"在vue\",{\"1\":{\"213\":1,\"219\":1}}],[\"在vue中实现发送网络请求\",{\"0\":{\"184\":1}}],[\"在vue实例选项中\",{\"1\":{\"183\":1}}],[\"在视图中通过\",{\"1\":{\"176\":1}}],[\"在创建时字符集选为utf8mb4排序规则选为utf8mb4\",{\"1\":{\"516\":1}}],[\"在创建\",{\"1\":{\"176\":1,\"181\":1,\"522\":1}}],[\"在文件上传时可以根据一些策略找到storage\",{\"1\":{\"112\":1}}],[\"在生产者一端\",{\"1\":{\"109\":1}}],[\"在订阅模型中\",{\"1\":{\"91\":1}}],[\"在config⽬录中创建\",{\"1\":{\"405\":1}}],[\"在cli开发模式下\",{\"1\":{\"215\":1}}],[\"在children选项\",{\"1\":{\"209\":1}}],[\"在channel\",{\"1\":{\"87\":1}}],[\"在c盘中找到c\",{\"1\":{\"18\":1}}],[\"在消息量大的时候建立\",{\"1\":{\"80\":1}}],[\"在电信领域使用广泛\",{\"1\":{\"80\":1}}],[\"在那些字段中查找匹配字符\",{\"1\":{\"57\":1}}],[\"在\",{\"1\":{\"41\":1,\"43\":1,\"105\":1,\"109\":1,\"110\":1,\"239\":1,\"266\":1,\"304\":1,\"354\":1,\"367\":1,\"368\":2,\"378\":1,\"400\":1,\"405\":2,\"419\":1,\"445\":2,\"504\":1,\"505\":1,\"546\":1}}],[\"在索引创建之后\",{\"1\":{\"39\":1}}],[\"在索引前需要将原始内容创建成⽂档\",{\"1\":{\"29\":1}}],[\"在⼀个刷新周期内\",{\"1\":{\"386\":1}}],[\"在⼀个⽹络\",{\"1\":{\"39\":1}}],[\"在⼀个集群⾥\",{\"1\":{\"38\":1}}],[\"在⼀个index\",{\"1\":{\"35\":1}}],[\"在⼀个索引中\",{\"1\":{\"32\":1}}],[\"在这个索引中\",{\"1\":{\"32\":1}}],[\"在elasticsearch中\",{\"1\":{\"30\":1}}],[\"在茫茫辞海中找⼀个字只能顺序扫描\",{\"1\":{\"28\":1}}],[\"在线程池排队\",{\"1\":{\"455\":1}}],[\"在线cdn引入的方式\",{\"1\":{\"150\":1}}],[\"在线cron生成器\",{\"1\":{\"11\":1}}],[\"在线安装和本地安装\",{\"1\":{\"41\":1}}],[\"在线代码高亮\",{\"1\":{\"11\":1}}],[\"一书中提出的\",{\"1\":{\"627\":1}}],[\"一词来源于\",{\"1\":{\"511\":1}}],[\"一星期的最后一天\",{\"1\":{\"499\":1}}],[\"一星期的第一天\",{\"1\":{\"499\":1}}],[\"一定比单线程效率高\",{\"1\":{\"334\":1}}],[\"一定要先引入vue\",{\"1\":{\"202\":1}}],[\"一般会把异常发生的时间\",{\"1\":{\"545\":1}}],[\"一般是类中的业务方法\",{\"1\":{\"540\":1}}],[\"一般是业务逻辑类的对象\",{\"1\":{\"540\":1}}],[\"一般省略\",{\"1\":{\"524\":1}}],[\"一般称为hashkey\",{\"1\":{\"363\":1}}],[\"一般情况下\",{\"1\":{\"265\":1}}],[\"一般都是有一个或多个单词组成\",{\"1\":{\"99\":1}}],[\"一切准备的工作交给vue\",{\"1\":{\"215\":1}}],[\"一切正常的话应该如下图一样\",{\"1\":{\"17\":1}}],[\"一种标准的模板\",{\"1\":{\"213\":1}}],[\"一种选择模式\",{\"1\":{\"213\":1}}],[\"一种\",{\"1\":{\"213\":1}}],[\"一方面\",{\"1\":{\"91\":1}}],[\"一个处在弱耦合的类被修改\",{\"1\":{\"631\":1}}],[\"一个接口只服务于一个子模块或业务逻辑\",{\"1\":{\"630\":1}}],[\"一个方法应该尽可能做好一件事情\",{\"1\":{\"627\":1}}],[\"一个类应该只关心内部逻辑\",{\"1\":{\"645\":1}}],[\"一个类应该对自己需要耦合或调用的类知道的最少\",{\"1\":{\"631\":1}}],[\"一个类对另一个类的依赖应该建立在最小的接口上\",{\"1\":{\"630\":1}}],[\"一个类只负责一项职责\",{\"1\":{\"627\":1}}],[\"一个类被\",{\"1\":{\"540\":1}}],[\"一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力\",{\"1\":{\"627\":1}}],[\"一个软件产品在它的生命周期内一般都会发生变化\",{\"1\":{\"626\":1}}],[\"一个软件实体应该通过扩展来实现变化\",{\"1\":{\"626\":1}}],[\"一个单词\",{\"1\":{\"589\":1}}],[\"一个自定义断言\",{\"1\":{\"382\":1}}],[\"一个class样式\",{\"1\":{\"229\":1}}],[\"一个\",{\"1\":{\"211\":1,\"215\":1}}],[\"一个消费者\",{\"1\":{\"102\":1}}],[\"一个消息可以被多个消费者都收到\",{\"1\":{\"93\":1}}],[\"一个生产者\",{\"1\":{\"102\":2}}],[\"一个中文字符一个词\",{\"1\":{\"52\":1}}],[\"一个索引由一个名字来标识\",{\"1\":{\"31\":1}}],[\"一层压着一层\",{\"1\":{\"20\":1,\"26\":1}}],[\"一类叫做view视图\",{\"1\":{\"20\":1}}],[\"一类叫做viewgroup容器\",{\"1\":{\"20\":1}}],[\"一直堆积在c盘会很容易爆满\",{\"1\":{\"18\":1}}],[\"我就知道你提供的public方法就好\",{\"1\":{\"631\":1}}],[\"我经常用的是\",{\"1\":{\"523\":1}}],[\"我这里使用的是5\",{\"1\":{\"609\":1}}],[\"我这里使用的是包扫描所以不需要自己一个个进行注册\",{\"1\":{\"522\":1}}],[\"我这里就定义为\",{\"1\":{\"518\":1}}],[\"我这里迁移到了d\",{\"1\":{\"18\":1}}],[\"我是父组件\",{\"1\":{\"197\":1}}],[\"我是子组件\",{\"1\":{\"197\":1}}],[\"我们先准备切面的接口\",{\"1\":{\"664\":1}}],[\"我们以前做过的项目中\",{\"1\":{\"628\":1}}],[\"我们不需要自己控制该类\",{\"1\":{\"570\":1}}],[\"我们在使用httpclient有时候会不知道该怎么使用\",{\"1\":{\"609\":1}}],[\"我们在\",{\"1\":{\"523\":1}}],[\"我们在其他地方写好了一个组件\",{\"1\":{\"215\":1}}],[\"我们也可以拦截自定义的异常类\",{\"1\":{\"475\":1}}],[\"我们认为若协议\",{\"1\":{\"443\":1}}],[\"我们仅仅通过\",{\"1\":{\"418\":1}}],[\"我们⾃定义的路由\",{\"1\":{\"415\":1}}],[\"我们的项⽬有开发版本\",{\"1\":{\"405\":1}}],[\"我们通过这套规则在浏览器上直接访问就可以\",{\"1\":{\"405\":1}}],[\"我们是基于linux学习\",{\"1\":{\"331\":1}}],[\"我们使用sort将其进行排序后输出key\",{\"1\":{\"324\":1}}],[\"我们使用hash来将各个数据进行存储\",{\"1\":{\"324\":1}}],[\"我们使用拦截器后需要注册\",{\"1\":{\"122\":1}}],[\"我们称其为\",{\"1\":{\"298\":1}}],[\"我们称之索引\",{\"1\":{\"28\":1}}],[\"我们配置的默认使用的用户是\",{\"1\":{\"234\":1}}],[\"我们可以根据情况来创建绘画形状为需求来说明并实现工厂模式\",{\"1\":{\"652\":1}}],[\"我们可以把soa看成微服务的超集\",{\"1\":{\"448\":1}}],[\"我们可以把⼀些全局性的配置或者需要动态维护的配置写⼊改⽂件\",{\"1\":{\"404\":1}}],[\"我们可以在启动类\",{\"1\":{\"416\":1}}],[\"我们可以使⽤spring\",{\"1\":{\"408\":1}}],[\"我们可以使用插件方便操作\",{\"1\":{\"184\":1}}],[\"我们可以去\",{\"1\":{\"236\":1}}],[\"我们可以获取到\",{\"1\":{\"200\":1}}],[\"我们可以通过安装elasticsearch的head插件\",{\"1\":{\"41\":1}}],[\"我们搜索时按结构化的拼⾳搜到读⾳\",{\"1\":{\"28\":1}}],[\"我们想\",{\"1\":{\"18\":1}}],[\"我们需要先将这个虚拟手机迁移到一个固定位置\",{\"1\":{\"18\":1}}],[\"我的小站\",{\"1\":{\"13\":1}}],[\"清除资源\",{\"1\":{\"584\":1}}],[\"清空所有数据库\",{\"1\":{\"336\":1}}],[\"清空全部数据库内容命令\",{\"1\":{\"334\":1}}],[\"清空当前数据库命令\",{\"1\":{\"334\":1}}],[\"清空集合中所有的元素\",{\"1\":{\"314\":1}}],[\"清空文本框\",{\"1\":{\"188\":1}}],[\"清空输入框\",{\"1\":{\"188\":1}}],[\"清空该文件夹即可\",{\"1\":{\"17\":1}}],[\"清华大学镜像站\",{\"1\":{\"2\":1}}],[\"knowledge\",{\"1\":{\"631\":1}}],[\"knowing\",{\"1\":{\"628\":1}}],[\"knife4j使用html导出接口出现打不开问题解决\",{\"0\":{\"123\":1}}],[\"knife4j\",{\"0\":{\"121\":1},\"1\":{\"4\":1,\"470\":2,\"471\":1}}],[\"kill\",{\"1\":{\"248\":1}}],[\"kibana必须至少配置一个索引\",{\"1\":{\"55\":1}}],[\"kibana\",{\"0\":{\"54\":1,\"55\":1,\"56\":1},\"1\":{\"54\":3,\"401\":4}}],[\"keep\",{\"1\":{\"420\":1}}],[\"keepalive\",{\"1\":{\"281\":2}}],[\"kernel\",{\"1\":{\"232\":1}}],[\"keybytes\",{\"1\":{\"622\":4}}],[\"keypairgenerator\",{\"1\":{\"622\":2}}],[\"keypair\",{\"1\":{\"622\":5}}],[\"keyfactory\",{\"1\":{\"622\":11}}],[\"keyconstant\",{\"1\":{\"480\":4,\"481\":1}}],[\"key3=\",{\"1\":{\"410\":1}}],[\"key3\",{\"1\":{\"405\":1,\"410\":3}}],[\"keyandvalue\",{\"1\":{\"363\":4}}],[\"key序列化方式\",{\"1\":{\"362\":1}}],[\"key队列名称\",{\"1\":{\"356\":1}}],[\"key存在新增内容\",{\"1\":{\"341\":1}}],[\"key2=\",{\"1\":{\"410\":1}}],[\"key2\",{\"1\":{\"338\":1,\"344\":2,\"346\":1,\"347\":2,\"348\":2,\"405\":1,\"410\":3}}],[\"key1=\",{\"1\":{\"410\":1}}],[\"key1=v11\",{\"1\":{\"408\":1}}],[\"key1\",{\"1\":{\"338\":3,\"344\":2,\"346\":1,\"347\":2,\"348\":2,\"405\":1,\"410\":3}}],[\"keyspec\",{\"1\":{\"622\":8}}],[\"keys\",{\"1\":{\"334\":1,\"336\":1,\"363\":2}}],[\"keysetvie\",{\"1\":{\"317\":1}}],[\"keyset\",{\"1\":{\"304\":1}}],[\"key属性的值\",{\"1\":{\"163\":1}}],[\"key属性\",{\"0\":{\"163\":1}}],[\"key为当前属性名\",{\"1\":{\"162\":1}}],[\"key=value\",{\"1\":{\"613\":1}}],[\"key=\",{\"1\":{\"105\":1,\"106\":1,\"109\":1,\"110\":4,\"163\":2,\"221\":1}}],[\"key将消息发送到对应的队列\",{\"1\":{\"102\":2}}],[\"key的队列\",{\"1\":{\"96\":1}}],[\"key\",{\"0\":{\"336\":1},\"1\":{\"80\":2,\"91\":1,\"96\":3,\"99\":1,\"102\":1,\"109\":1,\"110\":2,\"162\":1,\"163\":1,\"266\":2,\"327\":16,\"331\":1,\"336\":7,\"337\":8,\"338\":2,\"339\":2,\"340\":5,\"341\":7,\"342\":2,\"343\":4,\"345\":1,\"346\":9,\"349\":15,\"350\":4,\"351\":22,\"352\":1,\"353\":10,\"354\":3,\"356\":10,\"357\":8,\"358\":5,\"362\":1,\"363\":145,\"480\":6,\"481\":1,\"589\":1,\"622\":4}}],[\"k\",{\"1\":{\"163\":2,\"599\":4,\"613\":2}}],[\"kt修改为国内镜像源\",{\"1\":{\"17\":1}}],[\"8以上\",{\"1\":{\"655\":1}}],[\"8为标准转化成字符串\",{\"1\":{\"622\":1}}],[\"86400\",{\"1\":{\"480\":1}}],[\"88\",{\"1\":{\"421\":1}}],[\"8888\",{\"1\":{\"406\":1}}],[\"83\",{\"1\":{\"324\":2}}],[\"82\",{\"1\":{\"324\":1}}],[\"81\",{\"1\":{\"324\":3}}],[\"8引入红黑树大程度优化了hashmap的性能\",{\"1\":{\"318\":1}}],[\"8中\",{\"1\":{\"318\":1}}],[\"8之前\",{\"1\":{\"318\":1}}],[\"8版本之前的也需要设置\",{\"1\":{\"266\":1}}],[\"8版及以上\",{\"1\":{\"210\":2}}],[\"8001\",{\"1\":{\"427\":1,\"471\":1}}],[\"80000d\",{\"1\":{\"77\":1}}],[\"8080\",{\"1\":{\"415\":1,\"423\":1}}],[\"80\",{\"1\":{\"248\":1,\"324\":3}}],[\"8l\",{\"1\":{\"77\":1}}],[\"8<\",{\"1\":{\"58\":2,\"74\":1,\"113\":1,\"369\":1,\"558\":4}}],[\"8\",{\"1\":{\"17\":2,\"20\":1,\"21\":1,\"74\":1,\"87\":1,\"90\":2,\"95\":2,\"98\":2,\"101\":2,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":1,\"128\":1,\"146\":1,\"204\":1,\"242\":4,\"247\":1,\"248\":3,\"252\":1,\"266\":1,\"318\":1,\"354\":1,\"363\":1,\"413\":1,\"419\":2,\"504\":1,\"505\":1,\"518\":1,\"519\":1,\"521\":1,\"546\":1,\"553\":1,\"559\":1,\"561\":1,\"562\":1,\"563\":1,\"589\":2,\"590\":3,\"612\":1,\"622\":1}}],[\"镜像源地址\",{\"1\":{\"17\":1}}],[\"镜像站\",{\"0\":{\"2\":1},\"1\":{\"263\":1}}],[\"32<\",{\"1\":{\"609\":1}}],[\"39<\",{\"1\":{\"603\":1}}],[\"3<\",{\"1\":{\"369\":1,\"558\":2,\"617\":2}}],[\"31536000\",{\"1\":{\"327\":1}}],[\"3306\",{\"1\":{\"303\":1,\"304\":1,\"559\":1}}],[\"33\",{\"1\":{\"242\":4}}],[\"3版本所以放开的有一些多\",{\"1\":{\"122\":1}}],[\"3l\",{\"1\":{\"76\":1,\"77\":1}}],[\"3\",{\"0\":{\"232\":1},\"1\":{\"21\":3,\"40\":1,\"57\":1,\"59\":1,\"63\":1,\"69\":1,\"85\":1,\"86\":1,\"87\":1,\"93\":1,\"106\":1,\"110\":6,\"127\":3,\"154\":1,\"156\":1,\"194\":1,\"203\":1,\"213\":1,\"217\":2,\"219\":2,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"233\":4,\"234\":1,\"252\":1,\"266\":1,\"291\":1,\"353\":1,\"382\":1,\"401\":1,\"440\":1,\"448\":2,\"491\":1,\"500\":2,\"518\":2,\"521\":2,\"558\":1,\"606\":7,\"617\":1,\"628\":1,\"629\":1,\"630\":1,\"631\":2,\"641\":1}}],[\"30秒\",{\"1\":{\"500\":1}}],[\"30秒触发1次\",{\"1\":{\"499\":1}}],[\"300\",{\"1\":{\"437\":1}}],[\"3000\",{\"1\":{\"185\":5,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"221\":1,\"222\":1,\"224\":1,\"225\":1,\"226\":1,\"228\":2}}],[\"30000d\",{\"1\":{\"77\":2}}],[\"30t01\",{\"1\":{\"243\":1}}],[\"30px\",{\"1\":{\"168\":1,\"169\":1}}],[\"30\",{\"1\":{\"18\":6,\"57\":3,\"89\":1,\"367\":1,\"382\":2,\"440\":2,\"500\":10}}],[\"37\",{\"1\":{\"17\":1}}],[\"34\",{\"1\":{\"17\":1,\"248\":2}}],[\"35\",{\"1\":{\"17\":1}}],[\"创建型\",{\"0\":{\"685\":1}}],[\"创建型模式之单例模式\",{\"0\":{\"645\":1}}],[\"创建相应形状类\",{\"0\":{\"654\":1}}],[\"创建相关注解\",{\"0\":{\"594\":1}}],[\"创建枚举\",{\"1\":{\"653\":1}}],[\"创建高度处理器\",{\"0\":{\"640\":1}}],[\"创建宽度处理器\",{\"0\":{\"639\":1}}],[\"创建长度处理器\",{\"0\":{\"638\":1}}],[\"创建责任链抽象类\",{\"0\":{\"637\":1}}],[\"创建产品实体类\",{\"0\":{\"636\":1}}],[\"创建输出时案例对象\",{\"1\":{\"619\":1}}],[\"创建word文档\",{\"1\":{\"618\":1}}],[\"创建mvc的配置文件\",{\"0\":{\"562\":1}}],[\"创建spring配置文件application\",{\"0\":{\"561\":1}}],[\"创建sqlsession需要使用sqlsessionfactory接口的的\",{\"1\":{\"515\":1}}],[\"创建新事务\",{\"1\":{\"548\":1,\"552\":1}}],[\"创建新的链表\",{\"1\":{\"341\":1}}],[\"创建业务接口与实现类\",{\"0\":{\"544\":1}}],[\"创建对应的mapper和mapper\",{\"0\":{\"521\":1}}],[\"创建对象\",{\"1\":{\"288\":1}}],[\"创建工厂接口\",{\"0\":{\"653\":1}}],[\"创建工厂\",{\"1\":{\"520\":1}}],[\"创建消息监听\",{\"1\":{\"505\":1}}],[\"创建消费者组\",{\"1\":{\"357\":1}}],[\"创建配置文件\",{\"0\":{\"518\":1},\"1\":{\"504\":1}}],[\"创建配置文件和启动器\",{\"1\":{\"504\":1,\"505\":1}}],[\"创建脱敏注解\",{\"0\":{\"493\":1}}],[\"创建脱敏注解处理类\",{\"0\":{\"492\":1}}],[\"创建脱敏枚举\",{\"0\":{\"491\":1}}],[\"创建拦截器\",{\"0\":{\"480\":1}}],[\"创建注解\",{\"0\":{\"479\":1}}],[\"创建api\",{\"1\":{\"471\":1}}],[\"创建人\",{\"1\":{\"466\":1}}],[\"创建⼀个全局过滤器\",{\"0\":{\"441\":1}}],[\"创建⼀个article对象\",{\"1\":{\"63\":1,\"76\":1}}],[\"创建config⽬录\",{\"1\":{\"405\":1}}],[\"创建⾃定义的⽹络\",{\"1\":{\"401\":1}}],[\"创建时间\",{\"1\":{\"304\":1,\"466\":1}}],[\"创建线程池\",{\"1\":{\"283\":1}}],[\"创建套接字并将其连接到指定远程端口上的指定远程地址\",{\"1\":{\"280\":1}}],[\"创建套接字并将其连接到指定远程端口上的指定远程主机\",{\"1\":{\"280\":1}}],[\"创建流套接字并将其连接到指定ip地址处的指定端口号\",{\"1\":{\"280\":1}}],[\"创建流套接字并将其连接到指定主机上的指定端口号\",{\"1\":{\"280\":1}}],[\"创建文件夹\",{\"1\":{\"244\":1}}],[\"创建文档的请求url\",{\"1\":{\"53\":1}}],[\"创建文档\",{\"0\":{\"46\":1,\"61\":1}}],[\"创建的项目名称\",{\"1\":{\"213\":1}}],[\"创建组件\",{\"1\":{\"203\":1}}],[\"创建路由对应的组件\",{\"1\":{\"203\":1}}],[\"创建数据库\",{\"1\":{\"129\":1,\"518\":1}}],[\"创建队列\",{\"1\":{\"85\":1,\"86\":1,\"87\":1}}],[\"创建频道\",{\"1\":{\"85\":1,\"86\":2,\"87\":1,\"89\":1,\"94\":1,\"97\":1,\"100\":1}}],[\"创建链接工厂\",{\"1\":{\"84\":1}}],[\"创建链接节点\",{\"1\":{\"59\":1}}],[\"创建单独的\",{\"1\":{\"80\":1}}],[\"创建\",{\"0\":{\"75\":1,\"563\":1},\"1\":{\"77\":2,\"83\":1,\"86\":1,\"87\":1,\"105\":1,\"107\":1,\"213\":3,\"589\":1,\"590\":1}}],[\"创建实体类\",{\"1\":{\"74\":1}}],[\"创建一个线程来监视断路器的所有实例\",{\"1\":{\"382\":1}}],[\"创建一个\",{\"0\":{\"564\":1},\"1\":{\"283\":1}}],[\"创建一个未连接的套接字\",{\"1\":{\"280\":2}}],[\"创建一个文档对象\",{\"1\":{\"62\":1}}],[\"创建一个项目\",{\"0\":{\"17\":1}}],[\"创建映射\",{\"0\":{\"60\":1}}],[\"创建客户端\",{\"1\":{\"59\":1}}],[\"创建索引不添加映射\",{\"1\":{\"59\":1}}],[\"创建索引请求url\",{\"1\":{\"53\":1}}],[\"创建索引\",{\"0\":{\"43\":1,\"59\":1},\"1\":{\"44\":1,\"59\":1,\"76\":1,\"77\":1}}],[\"创建好后不要打开这个虚拟手机\",{\"1\":{\"18\":1}}],[\"创建虚拟手机\",{\"0\":{\"18\":1}}],[\"创建项目\",{\"0\":{\"213\":1},\"1\":{\"17\":1}}],[\"创建后缀为dio\",{\"1\":{\"9\":1}}],[\"配置的顺序就是拦截器的拦截顺序\",{\"1\":{\"585\":1}}],[\"配置的动态更新\",{\"1\":{\"404\":1}}],[\"配置数据库链接数据源\",{\"1\":{\"561\":1}}],[\"配置数据如图\",{\"1\":{\"384\":1}}],[\"配置spring\",{\"0\":{\"560\":1}}],[\"配置sdk和gradle相关的存放地址\",{\"0\":{\"16\":1}}],[\"配置包扫描\",{\"1\":{\"546\":1}}],[\"配置time\",{\"1\":{\"440\":1}}],[\"配置了⼀个\",{\"1\":{\"415\":1}}],[\"配置中⼼\",{\"1\":{\"448\":3}}],[\"配置中⼼客户端\",{\"0\":{\"410\":1}}],[\"配置中⼼也是⼀个核⼼组件\",{\"1\":{\"404\":1}}],[\"配置中心服务端\",{\"0\":{\"409\":1}}],[\"配置不能⾃动刷新\",{\"1\":{\"408\":1}}],[\"配置解释\",{\"1\":{\"406\":1}}],[\"配置仓库\",{\"1\":{\"405\":1}}],[\"配置⽂件实例如下\",{\"1\":{\"415\":1}}],[\"配置⽂件分⽀\",{\"1\":{\"405\":1}}],[\"配置⽂件所在⽬录\",{\"1\":{\"405\":1}}],[\"配置⽂件所在的git仓库\",{\"1\":{\"405\":1}}],[\"配置多节点维护\",{\"1\":{\"404\":1}}],[\"配置如图\",{\"1\":{\"385\":1,\"386\":1}}],[\"配置count\",{\"1\":{\"382\":1,\"440\":1}}],[\"配置滑动窗口的大小\",{\"1\":{\"382\":1}}],[\"配置滑动窗口的类型\",{\"1\":{\"382\":1}}],[\"配置是0时表示断路器会一直处于半开状态\",{\"1\":{\"382\":1}}],[\"配置调用时间的阈值\",{\"1\":{\"382\":1}}],[\"配置属性\",{\"1\":{\"382\":1}}],[\"配置feignloggerlevel\",{\"1\":{\"378\":1}}],[\"配置初始化参数\",{\"1\":{\"266\":1}}],[\"配置npm下载包时的全局包路径\",{\"1\":{\"263\":1}}],[\"配置nvm下载源\",{\"1\":{\"260\":1}}],[\"配置全局npm\",{\"0\":{\"263\":1}}],[\"配置全局默认设置\",{\"1\":{\"16\":1}}],[\"配置完成后如下图所示\",{\"1\":{\"260\":1}}],[\"配置下载源\",{\"0\":{\"260\":1}}],[\"配置mysql默认编码\",{\"1\":{\"252\":1}}],[\"配置mysql\",{\"0\":{\"252\":1}}],[\"配置等等\",{\"1\":{\"233\":1}}],[\"配置路由\",{\"1\":{\"223\":1}}],[\"配置路由规则\",{\"1\":{\"203\":2}}],[\"配置router\",{\"1\":{\"219\":1}}],[\"配置类\",{\"1\":{\"120\":1}}],[\"配置阿里云镜像官网指南\",{\"1\":{\"116\":1}}],[\"配置华为云镜像官方文档地址\",{\"1\":{\"116\":1}}],[\"配置文件中开启事务\",{\"0\":{\"553\":1}}],[\"配置文件中注册一个基于\",{\"1\":{\"545\":1}}],[\"配置文件中被调用者\",{\"1\":{\"537\":1}}],[\"配置文件中的定义装配bean\",{\"1\":{\"532\":1}}],[\"配置文件中是有顺序的如果顺序错误也会报错\",{\"1\":{\"523\":1}}],[\"配置文件中添加以下内容\",{\"1\":{\"504\":1,\"505\":1}}],[\"配置文件标签\",{\"0\":{\"523\":1}}],[\"配置文件的\",{\"1\":{\"105\":1}}],[\"配置文件\",{\"0\":{\"440\":1},\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"214\":1,\"391\":1,\"438\":1,\"534\":1,\"561\":1,\"563\":1,\"589\":1,\"590\":1}}],[\"配置映射关系\",{\"1\":{\"76\":1,\"77\":1}}],[\"配置\",{\"1\":{\"59\":1,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"209\":2,\"213\":1,\"382\":1,\"400\":1,\"518\":1,\"561\":2}}],[\"配置app名称等相关配置\",{\"1\":{\"17\":1}}],[\"配置android\",{\"1\":{\"16\":2}}],[\"配置gradle下载存放位置\",{\"1\":{\"16\":1}}],[\"05\",{\"1\":{\"618\":1,\"619\":1}}],[\"0~23\",{\"1\":{\"499\":1}}],[\"0~59\",{\"1\":{\"499\":1}}],[\"0之前的⾮reactor模式的⽼版本\",{\"1\":{\"413\":1}}],[\"0以上最新⾼性能版本进⾏集成\",{\"1\":{\"413\":1}}],[\"0以上版本中\",{\"1\":{\"413\":1}}],[\"0返回意味着该选项被禁用\",{\"1\":{\"281\":1}}],[\"0或正数表示启动应用就加载\",{\"1\":{\"266\":1}}],[\"0后该命令支持设置多个field\",{\"1\":{\"349\":1}}],[\"0后支持注解\",{\"1\":{\"266\":1}}],[\"0后新增进api中\",{\"1\":{\"20\":1}}],[\"00时间段内突然并发100次请求\",{\"1\":{\"461\":1}}],[\"00\",{\"1\":{\"244\":1,\"260\":1,\"419\":4,\"461\":5}}],[\"0000\",{\"1\":{\"232\":1,\"246\":1}}],[\"064\",{\"1\":{\"520\":1}}],[\"06\",{\"1\":{\"243\":1,\"333\":1}}],[\"0下创建项目\",{\"1\":{\"213\":1}}],[\"0的特性\",{\"1\":{\"213\":1}}],[\"0的功能补齐到目前的脚手架\",{\"1\":{\"212\":1}}],[\"0创建项目的命令是不一样的\",{\"1\":{\"212\":1}}],[\"0和4\",{\"1\":{\"212\":1}}],[\"0+版本\",{\"1\":{\"212\":1}}],[\"0+\",{\"1\":{\"212\":2}}],[\"0<\",{\"1\":{\"74\":1,\"84\":1,\"113\":2,\"383\":1,\"386\":1,\"504\":1,\"505\":1}}],[\"0则发展为\",{\"1\":{\"51\":1}}],[\"0版开始\",{\"1\":{\"51\":1}}],[\"0\",{\"0\":{\"303\":1,\"304\":2},\"1\":{\"21\":1,\"22\":2,\"57\":1,\"70\":1,\"74\":9,\"80\":1,\"89\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"110\":1,\"113\":14,\"123\":1,\"128\":1,\"139\":2,\"146\":3,\"156\":1,\"176\":2,\"212\":2,\"213\":2,\"236\":3,\"242\":4,\"248\":1,\"252\":2,\"301\":1,\"303\":6,\"304\":6,\"320\":1,\"327\":1,\"355\":1,\"357\":2,\"363\":1,\"367\":6,\"368\":2,\"369\":3,\"382\":1,\"389\":1,\"399\":1,\"405\":2,\"413\":3,\"417\":4,\"420\":2,\"421\":1,\"425\":2,\"426\":1,\"428\":4,\"429\":2,\"430\":2,\"431\":2,\"435\":4,\"438\":2,\"440\":4,\"445\":2,\"448\":3,\"466\":1,\"467\":2,\"471\":4,\"492\":2,\"493\":2,\"498\":2,\"499\":3,\"500\":7,\"504\":9,\"505\":9,\"517\":1,\"518\":2,\"521\":3,\"541\":1,\"546\":1,\"551\":1,\"553\":1,\"558\":3,\"561\":1,\"562\":1,\"563\":3,\"589\":1,\"590\":1,\"599\":1,\"603\":1,\"619\":1,\"622\":8,\"642\":2}}],[\"03\",{\"1\":{\"17\":1}}],[\"02\",{\"1\":{\"17\":1,\"259\":1}}],[\"01内⼜有100次请求\",{\"1\":{\"461\":1}}],[\"010454\",{\"1\":{\"243\":1}}],[\"01\",{\"1\":{\"15\":1,\"146\":1,\"303\":1,\"419\":4,\"461\":3,\"619\":1}}],[\"07\",{\"1\":{\"15\":1,\"17\":5,\"259\":1,\"260\":2,\"261\":1,\"419\":4}}],[\"14<\",{\"1\":{\"558\":1}}],[\"14l\",{\"1\":{\"77\":1}}],[\"1代表星期天\",{\"1\":{\"499\":1}}],[\"1~7\",{\"1\":{\"499\":1}}],[\"1~31\",{\"1\":{\"499\":1}}],[\"1的uri代理规则\",{\"1\":{\"415\":1}}],[\"117\",{\"1\":{\"622\":1}}],[\"11\",{\"1\":{\"511\":1}}],[\"110\",{\"1\":{\"409\":1,\"410\":1}}],[\"11l\",{\"1\":{\"77\":1}}],[\"1s\",{\"1\":{\"386\":2}}],[\"1为无期限\",{\"1\":{\"363\":1}}],[\"1时会取出全部\",{\"1\":{\"342\":1}}],[\"1n\",{\"1\":{\"248\":1}}],[\"1c\",{\"1\":{\"238\":3,\"248\":1}}],[\"18\",{\"1\":{\"233\":1,\"261\":3,\"324\":1,\"517\":1,\"558\":1,\"609\":1,\"619\":2}}],[\"15到45秒内\",{\"1\":{\"500\":1}}],[\"15秒和45秒时触发任务\",{\"1\":{\"499\":1}}],[\"15672\",{\"1\":{\"234\":1,\"400\":2}}],[\"15\",{\"1\":{\"233\":1,\"294\":1,\"499\":1,\"500\":9,\"517\":3,\"558\":1,\"638\":1,\"639\":1,\"640\":1,\"641\":1}}],[\"150\",{\"1\":{\"113\":2}}],[\"15l\",{\"1\":{\"77\":1}}],[\"1l\",{\"1\":{\"76\":1,\"77\":1,\"466\":1}}],[\"10<\",{\"1\":{\"558\":1}}],[\"10ms\",{\"1\":{\"384\":1}}],[\"10mb\",{\"1\":{\"113\":1}}],[\"103\",{\"1\":{\"363\":1}}],[\"1024\",{\"1\":{\"622\":1}}],[\"102\",{\"1\":{\"363\":1}}],[\"101\",{\"1\":{\"363\":1}}],[\"10l\",{\"1\":{\"77\":1}}],[\"10\",{\"1\":{\"76\":1,\"94\":1,\"110\":1,\"146\":1,\"156\":2,\"219\":1,\"243\":1,\"272\":1,\"283\":2,\"295\":1,\"324\":3,\"382\":3,\"440\":2,\"454\":1,\"491\":1,\"499\":2,\"500\":16,\"617\":1,\"619\":2}}],[\"1000ms\",{\"1\":{\"368\":1}}],[\"1000\",{\"1\":{\"367\":1,\"368\":1}}],[\"10000l\",{\"1\":{\"382\":1,\"384\":1,\"385\":1,\"386\":1}}],[\"100000请求\",{\"1\":{\"333\":1}}],[\"100000\",{\"1\":{\"326\":1,\"333\":1}}],[\"10000\",{\"1\":{\"109\":1,\"110\":1}}],[\"10000d\",{\"1\":{\"77\":2}}],[\"100个并发链接\",{\"1\":{\"333\":1}}],[\"100\",{\"1\":{\"63\":1,\"154\":1,\"197\":1,\"333\":1,\"363\":1,\"382\":3,\"437\":1,\"619\":6}}],[\"10多名乘客病倒\",{\"1\":{\"62\":1}}],[\"1<\",{\"1\":{\"58\":1,\"63\":3,\"113\":1,\"517\":1,\"558\":1,\"609\":1}}],[\"120s\",{\"1\":{\"440\":1}}],[\"12\",{\"1\":{\"248\":2,\"399\":1,\"400\":2,\"461\":3}}],[\"123请求被发送到http\",{\"1\":{\"428\":1}}],[\"123\",{\"1\":{\"385\":1,\"428\":1,\"429\":1,\"430\":2,\"431\":2}}],[\"123456\",{\"1\":{\"243\":1,\"256\":1,\"266\":1}}],[\"12306\",{\"1\":{\"213\":1}}],[\"127\",{\"1\":{\"113\":2,\"303\":1,\"304\":1,\"367\":3,\"368\":1,\"369\":1,\"405\":1,\"417\":2,\"425\":1,\"428\":2,\"429\":1,\"430\":1,\"431\":1,\"435\":2,\"438\":1,\"440\":2,\"445\":1,\"471\":1}}],[\"12l\",{\"1\":{\"77\":1}}],[\"12<\",{\"1\":{\"58\":2,\"558\":1,\"589\":1,\"590\":1}}],[\"128\",{\"1\":{\"45\":1,\"59\":1,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"74\":1,\"84\":1,\"105\":1,\"107\":1,\"504\":1,\"505\":1,\"589\":1,\"590\":1,\"622\":1}}],[\"122\",{\"1\":{\"20\":1}}],[\"1个完全拷贝\",{\"1\":{\"39\":1}}],[\"1\",{\"0\":{\"303\":2,\"304\":1},\"1\":{\"21\":4,\"39\":1,\"40\":1,\"46\":2,\"47\":1,\"48\":1,\"53\":2,\"57\":1,\"59\":1,\"60\":1,\"62\":1,\"63\":2,\"65\":1,\"74\":3,\"76\":3,\"80\":1,\"85\":1,\"86\":1,\"87\":1,\"93\":1,\"94\":5,\"95\":3,\"97\":1,\"105\":1,\"106\":2,\"107\":1,\"108\":3,\"110\":5,\"113\":4,\"123\":3,\"127\":6,\"135\":4,\"146\":2,\"154\":1,\"156\":5,\"176\":2,\"181\":1,\"185\":2,\"193\":1,\"194\":1,\"205\":1,\"210\":2,\"213\":1,\"219\":1,\"221\":1,\"222\":1,\"224\":1,\"225\":1,\"233\":5,\"238\":14,\"242\":4,\"244\":2,\"248\":12,\"266\":1,\"291\":1,\"303\":3,\"304\":4,\"324\":15,\"327\":2,\"363\":3,\"367\":3,\"368\":1,\"369\":1,\"385\":3,\"389\":1,\"399\":2,\"400\":1,\"405\":1,\"415\":2,\"417\":2,\"425\":3,\"428\":2,\"429\":1,\"430\":1,\"431\":1,\"435\":2,\"438\":1,\"440\":2,\"445\":2,\"448\":3,\"466\":1,\"471\":3,\"486\":1,\"500\":6,\"504\":2,\"505\":2,\"518\":1,\"520\":1,\"521\":1,\"546\":1,\"553\":1,\"558\":1,\"561\":1,\"562\":1,\"563\":1,\"589\":8,\"590\":5,\"599\":1,\"606\":7,\"609\":1,\"619\":2,\"627\":1,\"628\":1,\"629\":1,\"630\":1,\"631\":3,\"641\":1,\"642\":3,\"660\":1,\"661\":1}}],[\"163\",{\"1\":{\"471\":1}}],[\"168\",{\"1\":{\"45\":1,\"59\":1,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"74\":1,\"84\":1,\"105\":1,\"107\":1,\"113\":1,\"399\":1,\"400\":2,\"409\":1,\"410\":1,\"504\":1,\"505\":1,\"589\":1,\"590\":1}}],[\"16\",{\"1\":{\"17\":1,\"74\":1,\"146\":1,\"150\":1,\"320\":1,\"558\":1,\"618\":1}}],[\"17<\",{\"1\":{\"558\":1}}],[\"17\",{\"1\":{\"17\":1,\"333\":1}}],[\"132\",{\"1\":{\"113\":1}}],[\"13l\",{\"1\":{\"77\":1}}],[\"136\",{\"1\":{\"20\":1}}],[\"13\",{\"1\":{\"15\":1,\"63\":3,\"401\":3,\"517\":1,\"543\":2}}],[\"1357310795\",{\"1\":{\"7\":1}}],[\"1987\",{\"1\":{\"631\":1}}],[\"1988\",{\"1\":{\"626\":1}}],[\"1970~2099\",{\"1\":{\"499\":1}}],[\"192\",{\"1\":{\"45\":1,\"59\":1,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"74\":1,\"84\":1,\"113\":1,\"399\":1,\"400\":2,\"409\":1,\"410\":1,\"504\":1,\"505\":1}}],[\"19\",{\"1\":{\"15\":1,\"17\":6,\"259\":1,\"260\":1,\"324\":1}}],[\"2<\",{\"1\":{\"551\":1,\"558\":1,\"665\":1}}],[\"2s\",{\"1\":{\"382\":3,\"440\":2}}],[\"21\",{\"1\":{\"248\":5}}],[\"21<\",{\"1\":{\"58\":1}}],[\"28<\",{\"1\":{\"301\":1,\"517\":1,\"551\":1,\"558\":2}}],[\"28\",{\"1\":{\"243\":1,\"618\":1}}],[\"2l\",{\"1\":{\"62\":1,\"77\":1}}],[\"20秒触发1次\",{\"1\":{\"499\":1}}],[\"20t17\",{\"1\":{\"419\":4}}],[\"20ms\",{\"1\":{\"384\":1}}],[\"20mb\",{\"1\":{\"113\":1}}],[\"2048\",{\"1\":{\"377\":1}}],[\"2020\",{\"1\":{\"448\":2}}],[\"202306301501\",{\"1\":{\"244\":2}}],[\"2023\",{\"1\":{\"243\":1,\"618\":1,\"619\":2}}],[\"2024\",{\"1\":{\"15\":1,\"17\":5,\"259\":1,\"260\":1,\"261\":1,\"333\":1}}],[\"2013\",{\"1\":{\"511\":1}}],[\"2010\",{\"1\":{\"511\":1}}],[\"2011年10月每周日1点10分30秒触发任务\",{\"1\":{\"500\":1}}],[\"2011年10月每天1点10分30秒触发任务\",{\"1\":{\"500\":1}}],[\"2011年10月20号1点10分30秒触发任务\",{\"1\":{\"500\":1}}],[\"2011\",{\"1\":{\"500\":3}}],[\"2017\",{\"1\":{\"419\":1}}],[\"201\",{\"1\":{\"188\":1,\"224\":2}}],[\"2006\",{\"1\":{\"324\":4}}],[\"2005\",{\"1\":{\"324\":4}}],[\"2004\",{\"1\":{\"324\":4}}],[\"2003\",{\"1\":{\"324\":4}}],[\"2002\",{\"1\":{\"324\":4,\"630\":1}}],[\"200\",{\"1\":{\"154\":1,\"222\":1,\"226\":1,\"437\":1,\"486\":1}}],[\"2000\",{\"1\":{\"146\":1}}],[\"20000d\",{\"1\":{\"77\":2}}],[\"2007年\",{\"1\":{\"80\":1}}],[\"2001\",{\"1\":{\"74\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":1,\"324\":4,\"504\":1,\"505\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"563\":1,\"589\":1,\"590\":1}}],[\"20\",{\"1\":{\"57\":5,\"261\":2,\"324\":1,\"384\":1,\"499\":4,\"500\":3}}],[\"243\",{\"1\":{\"113\":1}}],[\"24<\",{\"1\":{\"58\":1,\"517\":1,\"558\":1}}],[\"24\",{\"1\":{\"57\":3,\"243\":1}}],[\"25秒触发1次\",{\"1\":{\"499\":1}}],[\"256\",{\"1\":{\"332\":1}}],[\"25\",{\"1\":{\"57\":1,\"499\":1}}],[\"26\",{\"1\":{\"57\":1,\"113\":1,\"333\":2}}],[\"220\",{\"1\":{\"399\":1,\"400\":2}}],[\"22122\",{\"1\":{\"113\":1}}],[\"22\",{\"1\":{\"57\":2,\"259\":1,\"260\":1,\"261\":1}}],[\"222\",{\"1\":{\"20\":1}}],[\"2\",{\"1\":{\"21\":3,\"39\":1,\"40\":1,\"57\":2,\"58\":1,\"59\":1,\"60\":1,\"62\":2,\"63\":1,\"65\":1,\"69\":1,\"85\":1,\"86\":1,\"87\":1,\"93\":1,\"94\":4,\"95\":3,\"97\":1,\"106\":1,\"110\":5,\"123\":1,\"127\":5,\"150\":1,\"154\":1,\"156\":2,\"181\":1,\"194\":1,\"203\":1,\"210\":2,\"212\":2,\"213\":2,\"219\":2,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"233\":1,\"248\":4,\"261\":2,\"291\":1,\"327\":1,\"336\":1,\"353\":1,\"354\":1,\"382\":2,\"385\":2,\"386\":1,\"398\":6,\"400\":6,\"401\":4,\"413\":5,\"421\":1,\"440\":2,\"448\":7,\"471\":1,\"517\":3,\"520\":1,\"543\":2,\"558\":3,\"589\":4,\"590\":1,\"605\":3,\"606\":7,\"609\":2,\"619\":2,\"627\":1,\"628\":1,\"629\":1,\"630\":1,\"631\":3,\"660\":1,\"661\":1,\"665\":1}}],[\"2后废弃\",{\"1\":{\"20\":1}}],[\"23\",{\"1\":{\"15\":1,\"17\":5,\"57\":1,\"398\":3,\"400\":3,\"401\":2}}],[\"下一级处理器\",{\"1\":{\"637\":1}}],[\"下\",{\"1\":{\"363\":1,\"416\":1}}],[\"下指定hashkey的值\",{\"1\":{\"363\":1}}],[\"下的\",{\"1\":{\"298\":1,\"363\":1}}],[\"下的npm\",{\"1\":{\"263\":1}}],[\"下找到配置文件\",{\"1\":{\"260\":1}}],[\"下面的\",{\"1\":{\"363\":1}}],[\"下面时这俩个对象的常用方法\",{\"1\":{\"266\":1}}],[\"下面是一个异常类的demo\",{\"1\":{\"475\":1}}],[\"下面是常用注解\",{\"1\":{\"266\":1}}],[\"下面是设置简单密码\",{\"1\":{\"256\":1}}],[\"下面命令可以查看当前有的定时任务\",{\"1\":{\"244\":1}}],[\"下面发送消息是错误发送演示\",{\"1\":{\"106\":1}}],[\"下即可解决\",{\"1\":{\"239\":1}}],[\"下侧外间距\",{\"1\":{\"26\":1}}],[\"下载安装包\",{\"0\":{\"251\":1},\"1\":{\"332\":1}}],[\"下载好jar导入或者使用\",{\"1\":{\"301\":1}}],[\"下载好\",{\"1\":{\"248\":1}}],[\"下载包时需要下载四个类型的rpm文件\",{\"1\":{\"242\":1}}],[\"下载所需要的安装包\",{\"0\":{\"242\":1}}],[\"下载对应的安装包可以去\",{\"1\":{\"236\":1}}],[\"下载地址\",{\"1\":{\"150\":1,\"246\":1,\"247\":1,\"248\":2}}],[\"下载等服务\",{\"1\":{\"112\":1}}],[\"下载nodejs\",{\"1\":{\"41\":1}}],[\"下载head插件\",{\"1\":{\"41\":1}}],[\"下载\",{\"0\":{\"15\":1},\"1\":{\"112\":1,\"398\":1}}],[\"下次一定网\",{\"1\":{\"11\":1}}],[\"阿里云盘资源共享站\",{\"1\":{\"13\":1}}],[\"阿里云maven仓库\",{\"1\":{\"3\":1}}],[\"资源访问\",{\"1\":{\"533\":1}}],[\"资源加载和透明地创建上下文\",{\"1\":{\"530\":1}}],[\"资源连接瓶颈瓶颈等问题\",{\"1\":{\"448\":1}}],[\"资源分享\",{\"0\":{\"13\":1}}],[\"资源下载\",{\"1\":{\"5\":1}}],[\"feign已经默认集成了loadbalancer\",{\"1\":{\"390\":1}}],[\"feignloggerlevel\",{\"1\":{\"378\":1}}],[\"feign熔断降级类\",{\"1\":{\"376\":1}}],[\"feignname\",{\"1\":{\"374\":1}}],[\"feignclient的fallback属性指定讲解的类\",{\"1\":{\"376\":1}}],[\"feignclient\",{\"1\":{\"373\":1,\"374\":1,\"376\":3}}],[\"feign\",{\"0\":{\"374\":1,\"375\":1,\"377\":1,\"378\":1},\"1\":{\"373\":3,\"374\":2,\"375\":1,\"377\":1,\"378\":2}}],[\"feign是⼀个声明式的http客户端组件\",{\"1\":{\"372\":1}}],[\"fetch\",{\"1\":{\"367\":1,\"368\":1,\"369\":1}}],[\"fetchsourcefilter\",{\"1\":{\"77\":2}}],[\"flushall\",{\"1\":{\"334\":1,\"336\":1}}],[\"flushdb\",{\"1\":{\"334\":1,\"336\":1}}],[\"flush\",{\"1\":{\"243\":1,\"612\":1,\"619\":1}}],[\"fmtdate\",{\"1\":{\"178\":1}}],[\"fos\",{\"1\":{\"612\":3,\"619\":4}}],[\"fossils\",{\"1\":{\"248\":1}}],[\"foundation\",{\"1\":{\"511\":1}}],[\"found\",{\"1\":{\"238\":1,\"668\":1}}],[\"fooconfiguration\",{\"1\":{\"378\":1}}],[\"foo\",{\"1\":{\"219\":4,\"426\":1,\"432\":1}}],[\"focus>\",{\"1\":{\"181\":1,\"182\":1}}],[\"focus\",{\"1\":{\"181\":2,\"182\":2}}],[\"font\",{\"1\":{\"168\":1}}],[\"fontsize\",{\"1\":{\"168\":2,\"169\":1}}],[\"forname\",{\"1\":{\"291\":2,\"303\":1,\"304\":1}}],[\"forward\",{\"1\":{\"266\":3,\"440\":1}}],[\"forced\",{\"1\":{\"382\":2,\"630\":1}}],[\"force\",{\"1\":{\"233\":1,\"243\":1}}],[\"for时\",{\"1\":{\"163\":1}}],[\"for=\",{\"1\":{\"161\":2,\"162\":2,\"163\":2,\"221\":1,\"223\":2}}],[\"formdata\",{\"1\":{\"224\":4,\"225\":1,\"226\":3}}],[\"form>\",{\"1\":{\"223\":1}}],[\"format\",{\"1\":{\"178\":1,\"327\":12}}],[\"forms\",{\"1\":{\"172\":1}}],[\"form\",{\"1\":{\"113\":1,\"223\":4}}],[\"foreach>\",{\"1\":{\"524\":1}}],[\"foreach标签\",{\"1\":{\"524\":1}}],[\"foreach\",{\"1\":{\"76\":7,\"522\":1,\"599\":2,\"613\":1}}],[\"for\",{\"0\":{\"160\":1,\"161\":1,\"162\":1,\"163\":1},\"1\":{\"63\":1,\"71\":1,\"74\":1,\"76\":1,\"77\":1,\"89\":1,\"94\":1,\"113\":1,\"161\":3,\"243\":1,\"244\":1,\"266\":1,\"298\":1,\"303\":3,\"304\":2,\"327\":2,\"545\":1,\"599\":7,\"619\":1,\"627\":1,\"628\":3,\"655\":1}}],[\"fn\",{\"1\":{\"156\":1,\"159\":4,\"171\":2}}],[\"fn为methods中的方法\",{\"1\":{\"156\":1}}],[\"fn2\",{\"1\":{\"155\":2}}],[\"fn1\",{\"1\":{\"155\":1}}],[\"f12打开devtools中网络请求时发现vue\",{\"1\":{\"123\":1}}],[\"fdfsclientconfig\",{\"1\":{\"113\":2}}],[\"fdfs\",{\"1\":{\"113\":2}}],[\"fsatdfs\",{\"1\":{\"113\":1}}],[\"fixedthreadpoolbulkhead只对completablefuture⽅法有效\",{\"1\":{\"385\":1}}],[\"fixedthreadpoolbulkhead使⽤了有界队列和固定⼤⼩线程池\",{\"1\":{\"383\":1}}],[\"fi\",{\"1\":{\"244\":3}}],[\"fill\",{\"1\":{\"466\":4}}],[\"fileoutputstream\",{\"1\":{\"612\":3,\"619\":3}}],[\"filevalue\",{\"1\":{\"599\":6}}],[\"filenamepath\",{\"1\":{\"612\":2}}],[\"filename\",{\"1\":{\"599\":2}}],[\"filenameutils\",{\"1\":{\"113\":3}}],[\"filesystemxmlapplicationcontext使用示例\",{\"1\":{\"535\":1}}],[\"filesystemxmlapplicationcontext\",{\"0\":{\"535\":1},\"1\":{\"533\":1,\"535\":2}}],[\"filesystemresource\",{\"1\":{\"532\":4,\"534\":2}}],[\"files\",{\"1\":{\"247\":1}}],[\"filepathname\",{\"1\":{\"113\":3}}],[\"filecontroller\",{\"1\":{\"113\":1}}],[\"fileurl\",{\"1\":{\"113\":3}}],[\"filedfsutil\",{\"1\":{\"113\":6}}],[\"file\",{\"1\":{\"113\":6,\"244\":1,\"612\":5,\"619\":2}}],[\"filterconfig\",{\"1\":{\"437\":1}}],[\"filters\",{\"0\":{\"427\":1,\"435\":1},\"1\":{\"57\":1,\"175\":2,\"176\":1,\"177\":1,\"413\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"435\":1,\"438\":1,\"440\":1}}],[\"filter\",{\"1\":{\"57\":3,\"175\":1,\"176\":2,\"178\":1,\"413\":3,\"436\":3,\"437\":10,\"438\":2,\"441\":2}}],[\"finchley\",{\"1\":{\"448\":3}}],[\"finally\",{\"1\":{\"660\":3,\"663\":1,\"664\":2,\"665\":1}}],[\"final\",{\"1\":{\"84\":5,\"86\":1,\"89\":1,\"94\":3,\"97\":3,\"100\":3,\"122\":2,\"266\":1,\"283\":4,\"303\":3,\"304\":3,\"327\":6,\"466\":1,\"467\":1,\"472\":3,\"480\":5,\"482\":3,\"486\":2,\"487\":3,\"491\":2,\"504\":2,\"520\":2,\"540\":1,\"589\":2,\"600\":2,\"622\":3,\"647\":1,\"660\":2,\"664\":1,\"665\":2}}],[\"findnullvalueserializer\",{\"1\":{\"492\":2}}],[\"findmatchingkeys\",{\"1\":{\"327\":1,\"363\":1}}],[\"findrankbyexamid\",{\"1\":{\"327\":1}}],[\"find\",{\"0\":{\"127\":1},\"1\":{\"127\":3,\"664\":3,\"665\":3}}],[\"findall\",{\"1\":{\"76\":2}}],[\"findbyid\",{\"1\":{\"76\":2}}],[\"findbypricelessthan\",{\"1\":{\"73\":1}}],[\"findbypricebetween\",{\"1\":{\"73\":1}}],[\"findbyfieldlessthan\",{\"1\":{\"73\":1}}],[\"findbyfieldbetween\",{\"1\":{\"73\":1}}],[\"findbyfieldnot\",{\"1\":{\"73\":1}}],[\"findbyfield\",{\"1\":{\"73\":1}}],[\"findbyfield1orfield2\",{\"1\":{\"73\":1}}],[\"findbyfield1andfield2\",{\"1\":{\"73\":1}}],[\"findbytitlepage\",{\"1\":{\"76\":1}}],[\"findbytitlelikeorcontent\",{\"1\":{\"76\":1}}],[\"findbytitlelike\",{\"1\":{\"76\":1}}],[\"findbytitleandandcontent\",{\"1\":{\"75\":1}}],[\"findbytitleandcontent\",{\"1\":{\"73\":1}}],[\"findbytitlenot\",{\"1\":{\"73\":1}}],[\"findbytitle\",{\"1\":{\"73\":1,\"75\":1,\"76\":2}}],[\"findbytitleorcontent\",{\"1\":{\"73\":1,\"75\":1,\"76\":3}}],[\"fire<\",{\"1\":{\"74\":1,\"113\":1,\"504\":1,\"505\":1}}],[\"fire\",{\"1\":{\"59\":1,\"60\":1,\"62\":1,\"63\":2,\"65\":1,\"74\":2,\"75\":2,\"76\":2,\"77\":5,\"84\":4,\"86\":2,\"87\":2,\"89\":2,\"90\":4,\"94\":2,\"95\":4,\"97\":2,\"98\":4,\"100\":2,\"101\":4,\"105\":4,\"106\":1,\"107\":7,\"108\":1,\"113\":2,\"283\":2,\"284\":1,\"304\":1,\"504\":6,\"505\":7,\"589\":4,\"590\":6}}],[\"fieldnames\",{\"1\":{\"599\":8,\"600\":3}}],[\"fieldrequired注解放在class上是才起作用\",{\"1\":{\"597\":1}}],[\"fieldrequired注解存在时\",{\"1\":{\"597\":1}}],[\"fieldrequired注解搭配使用\",{\"1\":{\"597\":1}}],[\"fieldrequired\",{\"0\":{\"595\":1},\"1\":{\"595\":1,\"599\":5}}],[\"fieldfill\",{\"1\":{\"466\":9}}],[\"field2\",{\"1\":{\"349\":3}}],[\"field1\",{\"1\":{\"349\":3}}],[\"fielddata\",{\"1\":{\"77\":2}}],[\"fieldtype\",{\"1\":{\"74\":4,\"77\":6}}],[\"fields\",{\"1\":{\"30\":1,\"57\":1,\"303\":4,\"599\":13}}],[\"field的还有如下属性\",{\"1\":{\"29\":1}}],[\"field的数据类型⼤致可以分为数值类型和⽂本类型\",{\"1\":{\"29\":1}}],[\"field是索引库中存储数据的最⼩单位\",{\"1\":{\"29\":1}}],[\"field相当于是记录中的字段\",{\"1\":{\"29\":1}}],[\"field对象\",{\"1\":{\"29\":1}}],[\"field\",{\"0\":{\"33\":1},\"1\":{\"29\":1,\"49\":1,\"57\":2,\"60\":8,\"62\":3,\"71\":1,\"74\":4,\"77\":11,\"296\":8,\"303\":5,\"349\":4,\"350\":2,\"356\":3,\"493\":1,\"595\":1,\"597\":1,\"598\":1,\"599\":37}}],[\"full\",{\"1\":{\"28\":1,\"378\":2}}],[\"functions\",{\"1\":{\"628\":1}}],[\"functionallnterface\",{\"1\":{\"270\":1}}],[\"function\",{\"1\":{\"146\":7,\"155\":1,\"175\":2,\"176\":2,\"177\":1,\"178\":1,\"183\":1,\"244\":2}}],[\"fun\",{\"1\":{\"13\":1}}],[\"ff0000\",{\"1\":{\"21\":1}}],[\"freemarkerview\",{\"1\":{\"573\":1}}],[\"freemarker\",{\"1\":{\"530\":1}}],[\"freebuf\",{\"1\":{\"12\":1}}],[\"friends\",{\"1\":{\"631\":1}}],[\"fri\",{\"1\":{\"500\":1}}],[\"framework\",{\"1\":{\"413\":1,\"472\":3}}],[\"framelayout帧布局\",{\"1\":{\"20\":1}}],[\"front\",{\"1\":{\"309\":1}}],[\"fromrunnable\",{\"1\":{\"437\":3}}],[\"from\",{\"1\":{\"57\":1,\"74\":1,\"113\":1,\"127\":1,\"128\":12,\"134\":1,\"135\":1,\"137\":3,\"138\":3,\"139\":3,\"140\":3,\"219\":4,\"243\":1,\"521\":1}}],[\"fallbackcontroller\",{\"1\":{\"442\":1}}],[\"fallbacka\",{\"1\":{\"440\":1,\"442\":2}}],[\"fallbackuri\",{\"1\":{\"440\":1}}],[\"fallbackmethod\",{\"1\":{\"382\":1,\"384\":1,\"386\":1}}],[\"fallbackfactory<myfallback>\",{\"1\":{\"376\":1}}],[\"fallbackfactory\",{\"1\":{\"376\":1}}],[\"fallback\",{\"1\":{\"376\":2,\"382\":3,\"384\":1,\"386\":1}}],[\"false不存在\",{\"1\":{\"363\":1}}],[\"false\",{\"1\":{\"23\":7,\"86\":4,\"87\":4,\"89\":2,\"90\":4,\"94\":4,\"95\":4,\"97\":4,\"98\":4,\"100\":4,\"101\":4,\"105\":1,\"110\":1,\"283\":1,\"367\":3,\"368\":3,\"382\":2,\"481\":2,\"515\":2,\"599\":1,\"612\":1,\"637\":1,\"638\":1,\"639\":1,\"640\":1}}],[\"fac\",{\"1\":{\"281\":1}}],[\"factory=\",{\"1\":{\"105\":2,\"106\":2,\"107\":1,\"108\":1,\"589\":2,\"590\":1}}],[\"factory\",{\"1\":{\"76\":1,\"77\":1,\"105\":3,\"106\":2,\"107\":1,\"108\":1,\"113\":2,\"362\":2,\"392\":1,\"504\":2,\"520\":3,\"532\":1,\"534\":1,\"589\":2,\"590\":1}}],[\"favicon\",{\"1\":{\"214\":1,\"472\":1}}],[\"fade\",{\"1\":{\"210\":7}}],[\"fanouttest\",{\"1\":{\"589\":1}}],[\"fanout\",{\"0\":{\"93\":1},\"1\":{\"80\":1,\"91\":1,\"94\":17,\"95\":8,\"97\":1,\"100\":1,\"589\":12,\"590\":2}}],[\"fast\",{\"1\":{\"252\":1}}],[\"fastfilestorageclient\",{\"1\":{\"113\":2}}],[\"fastdft\",{\"1\":{\"112\":1}}],[\"fastdfs为互联网量身定制\",{\"1\":{\"112\":1}}],[\"fastdfs是一个开源的轻量级分布式文件系统\",{\"1\":{\"112\":1}}],[\"fastdfs\",{\"0\":{\"112\":1},\"1\":{\"112\":1,\"113\":3}}],[\"fasterxml\",{\"1\":{\"63\":4,\"466\":1,\"492\":7,\"493\":2,\"558\":1}}],[\"fastjson2<\",{\"1\":{\"603\":1}}],[\"fastjson2\",{\"0\":{\"603\":1},\"1\":{\"4\":1,\"480\":1,\"599\":2,\"603\":2,\"605\":3}}],[\"fastjson\",{\"1\":{\"4\":1}}],[\"failures\",{\"1\":{\"382\":1}}],[\"failureratethreshold\",{\"1\":{\"382\":3,\"440\":2}}],[\"fail\",{\"1\":{\"17\":1}}],[\"qcfactory\",{\"1\":{\"642\":1}}],[\"qchandler\",{\"1\":{\"637\":3,\"638\":1,\"639\":1,\"640\":1,\"642\":9}}],[\"qa|grep\",{\"1\":{\"243\":1}}],[\"quartz\",{\"1\":{\"530\":1}}],[\"qualifier`\",{\"1\":{\"504\":1}}],[\"qualifier\",{\"1\":{\"504\":3,\"538\":2}}],[\"quit\",{\"1\":{\"248\":1,\"283\":5}}],[\"quickstart\",{\"1\":{\"4\":1}}],[\"quick\",{\"1\":{\"4\":1}}],[\"queuetest\",{\"1\":{\"589\":1}}],[\"queues\",{\"1\":{\"505\":1}}],[\"queuebuilder\",{\"1\":{\"504\":1}}],[\"queuebind\",{\"1\":{\"94\":3,\"95\":2,\"97\":3,\"98\":2,\"101\":3}}],[\"queuecapacity\",{\"1\":{\"385\":2}}],[\"queue>\",{\"1\":{\"109\":1,\"110\":1}}],[\"queue=\",{\"1\":{\"105\":1,\"106\":1,\"109\":1,\"110\":2,\"589\":5}}],[\"queuedeclare\",{\"1\":{\"86\":4,\"87\":4,\"89\":1,\"90\":2,\"94\":2,\"95\":2,\"97\":2,\"98\":2,\"100\":2,\"101\":2}}],[\"queue\",{\"1\":{\"80\":2,\"83\":1,\"85\":1,\"86\":8,\"87\":5,\"89\":6,\"90\":4,\"91\":1,\"94\":10,\"95\":6,\"97\":9,\"98\":6,\"100\":6,\"101\":7,\"102\":1,\"105\":5,\"106\":5,\"107\":2,\"108\":2,\"109\":7,\"110\":12,\"355\":1,\"504\":8,\"505\":1,\"589\":29,\"590\":12}}],[\"queue等\",{\"1\":{\"80\":1}}],[\"queryallorbyid\",{\"1\":{\"564\":1}}],[\"queryall\",{\"1\":{\"521\":2,\"522\":1}}],[\"query=baz\",{\"1\":{\"426\":1}}],[\"query=foo\",{\"1\":{\"426\":1}}],[\"query=keep\",{\"1\":{\"420\":1}}],[\"query=smile\",{\"1\":{\"420\":1}}],[\"queryforlist\",{\"1\":{\"76\":1}}],[\"querystringquery\",{\"1\":{\"67\":1,\"76\":1}}],[\"querystring\",{\"0\":{\"67\":1}}],[\"querystring查询\",{\"0\":{\"49\":1}}],[\"querybuilders\",{\"1\":{\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"76\":2,\"77\":2}}],[\"querybuilder\",{\"1\":{\"65\":2,\"66\":2,\"67\":2,\"68\":2,\"69\":2,\"70\":2,\"71\":2,\"76\":1,\"77\":5}}],[\"query\",{\"1\":{\"42\":1,\"49\":3,\"50\":1,\"53\":1,\"56\":1,\"57\":19,\"65\":2,\"76\":5,\"77\":4,\"303\":2,\"304\":2,\"327\":2,\"363\":1,\"420\":2,\"421\":1}}],[\"qq351605872\",{\"1\":{\"13\":1}}],[\"qqe2\",{\"1\":{\"11\":1,\"497\":1,\"500\":1}}],[\"奇q工具网\",{\"1\":{\"11\":1}}],[\"油猴脚本网址\",{\"1\":{\"11\":1}}],[\"杂项\",{\"0\":{\"11\":1}}],[\"图片来自菜鸟教程\",{\"1\":{\"333\":1}}],[\"图片查看器\",{\"1\":{\"7\":1}}],[\"图标\",{\"1\":{\"214\":1}}],[\"图形化\",{\"1\":{\"211\":1}}],[\"图中的x\",{\"1\":{\"91\":1}}],[\"图床\",{\"0\":{\"10\":1},\"1\":{\"10\":1}}],[\"ns\",{\"1\":{\"563\":3}}],[\"numkeys\",{\"1\":{\"351\":2}}],[\"number\",{\"1\":{\"327\":3,\"363\":9}}],[\"num\",{\"1\":{\"272\":1}}],[\"null\",{\"1\":{\"77\":1,\"84\":1,\"86\":4,\"87\":2,\"89\":2,\"90\":2,\"94\":3,\"95\":2,\"97\":4,\"98\":2,\"100\":5,\"101\":2,\"113\":1,\"281\":1,\"293\":1,\"303\":3,\"304\":3,\"363\":6,\"467\":2,\"480\":1,\"481\":3,\"487\":7,\"492\":4,\"520\":3,\"521\":1,\"522\":1,\"599\":5,\"637\":1,\"642\":1,\"646\":2,\"655\":1,\"663\":1}}],[\"nvm常用命令\",{\"0\":{\"262\":1}}],[\"nvm使用\",{\"0\":{\"261\":1}}],[\"nvm下载时请选择下图所框选的包\",{\"1\":{\"259\":1}}],[\"nvm下载地址\",{\"1\":{\"259\":1}}],[\"nvm\",{\"0\":{\"258\":1},\"1\":{\"259\":1,\"261\":5,\"262\":14,\"263\":3}}],[\"nginx\",{\"0\":{\"246\":1},\"1\":{\"246\":2,\"248\":16}}],[\"ncurses\",{\"1\":{\"232\":1,\"233\":1}}],[\"nbsp\",{\"1\":{\"221\":2}}],[\"n\",{\"1\":{\"113\":1,\"333\":1,\"590\":1}}],[\"nio\",{\"1\":{\"87\":1,\"90\":2,\"95\":2,\"98\":2,\"101\":2,\"363\":1,\"590\":1,\"612\":1,\"622\":1}}],[\"nativewebrequest\",{\"1\":{\"481\":5}}],[\"native\",{\"1\":{\"405\":1,\"407\":3}}],[\"nativesearchquerybuilder\",{\"1\":{\"76\":2,\"77\":3}}],[\"nativesearchquery\",{\"1\":{\"76\":4}}],[\"namevaluepair\",{\"1\":{\"612\":3}}],[\"name值是字符串\",{\"1\":{\"205\":1}}],[\"name为data中的数据\",{\"1\":{\"156\":1}}],[\"name2\",{\"1\":{\"155\":2}}],[\"name`\",{\"1\":{\"129\":1}}],[\"names=\",{\"1\":{\"107\":1,\"108\":1,\"590\":6}}],[\"namespace=\",{\"1\":{\"521\":1}}],[\"namespace\",{\"1\":{\"80\":1,\"521\":1}}],[\"name=fastjson2\",{\"1\":{\"605\":2}}],[\"name=\",{\"1\":{\"105\":2,\"106\":2,\"109\":2,\"110\":4,\"210\":1,\"266\":2,\"293\":1,\"518\":5,\"553\":5,\"561\":11,\"562\":2,\"589\":8}}],[\"name⼀般以\",{\"1\":{\"83\":1}}],[\"name>dispatcherservlet<\",{\"1\":{\"563\":2}}],[\"name>contextconfiglocation<\",{\"1\":{\"563\":2}}],[\"name>\",{\"1\":{\"74\":1,\"113\":1,\"116\":1,\"563\":4}}],[\"name\",{\"1\":{\"57\":9,\"59\":2,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"74\":1,\"77\":1,\"86\":5,\"87\":3,\"89\":3,\"90\":4,\"113\":1,\"127\":5,\"128\":12,\"134\":1,\"137\":2,\"138\":2,\"139\":4,\"140\":4,\"155\":2,\"156\":1,\"161\":4,\"185\":3,\"188\":3,\"189\":1,\"205\":2,\"221\":1,\"224\":2,\"226\":1,\"266\":3,\"281\":2,\"290\":7,\"295\":2,\"296\":9,\"367\":1,\"368\":1,\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"399\":1,\"400\":1,\"401\":2,\"405\":1,\"406\":1,\"410\":1,\"415\":1,\"417\":1,\"422\":2,\"440\":3,\"445\":1,\"521\":1,\"523\":2,\"541\":2,\"545\":2,\"605\":4,\"612\":3}}],[\"npmmirror\",{\"1\":{\"260\":2,\"263\":3}}],[\"npm\",{\"1\":{\"41\":2,\"150\":3,\"202\":1,\"212\":2,\"213\":3,\"217\":1,\"219\":1,\"221\":1,\"260\":2,\"262\":3,\"263\":7}}],[\"northeastern\",{\"1\":{\"631\":1}}],[\"now\",{\"1\":{\"382\":2,\"384\":2,\"385\":2,\"386\":2,\"467\":2,\"480\":2}}],[\"noack\",{\"1\":{\"357\":1}}],[\"noargs\",{\"1\":{\"504\":2}}],[\"noargsconstructor\",{\"1\":{\"326\":2,\"492\":2}}],[\"noarch\",{\"1\":{\"233\":1}}],[\"nosuchalgorithmexception\",{\"1\":{\"622\":1}}],[\"nosuchfieldexception\",{\"1\":{\"296\":1}}],[\"nosuchmethodexception\",{\"1\":{\"293\":1,\"294\":2,\"295\":1,\"296\":1,\"303\":1,\"304\":1}}],[\"no\",{\"1\":{\"135\":1,\"238\":1,\"382\":1,\"448\":1}}],[\"none\",{\"1\":{\"107\":1,\"173\":2,\"378\":1}}],[\"nodelay\",{\"1\":{\"281\":2}}],[\"nodeps\",{\"1\":{\"233\":1,\"243\":2}}],[\"nodes\",{\"1\":{\"42\":1,\"74\":1}}],[\"nodejs\",{\"1\":{\"41\":2,\"262\":1}}],[\"node\",{\"0\":{\"38\":1},\"1\":{\"184\":1,\"214\":1,\"217\":1,\"260\":2,\"262\":1,\"341\":1,\"401\":1}}],[\"notheadrequired\",{\"0\":{\"598\":1},\"1\":{\"598\":1,\"599\":2}}],[\"notfieldrequired\",{\"0\":{\"597\":1},\"1\":{\"597\":1,\"599\":3}}],[\"note\",{\"1\":{\"243\":1}}],[\"notepad\",{\"1\":{\"7\":2}}],[\"not\",{\"1\":{\"43\":1,\"53\":1,\"57\":4,\"73\":1,\"129\":1,\"438\":1,\"548\":1,\"629\":1,\"630\":2,\"631\":1,\"668\":1}}],[\"notation\",{\"1\":{\"35\":1}}],[\"nrt\",{\"0\":{\"36\":1}}],[\"never\",{\"1\":{\"548\":1,\"627\":1}}],[\"nested\",{\"1\":{\"548\":1}}],[\"nexthandler\",{\"1\":{\"637\":7}}],[\"nextval\",{\"1\":{\"135\":2}}],[\"next\",{\"1\":{\"65\":1,\"70\":1,\"71\":1,\"303\":1,\"304\":1,\"363\":1}}],[\"nexus\",{\"1\":{\"18\":3}}],[\"newproxyinstance\",{\"1\":{\"662\":1,\"663\":1,\"664\":1}}],[\"newinstance\",{\"1\":{\"293\":1,\"294\":2,\"295\":1,\"296\":1,\"303\":1,\"304\":1}}],[\"newfixedthreadpool\",{\"1\":{\"283\":1}}],[\"news\",{\"1\":{\"207\":1}}],[\"newv\",{\"1\":{\"189\":2,\"190\":2}}],[\"newconnection\",{\"1\":{\"84\":1}}],[\"new\",{\"1\":{\"17\":1,\"59\":3,\"60\":2,\"62\":2,\"63\":6,\"65\":2,\"71\":1,\"76\":2,\"77\":18,\"84\":1,\"87\":2,\"90\":4,\"95\":4,\"98\":4,\"101\":4,\"105\":1,\"106\":1,\"107\":1,\"109\":1,\"110\":1,\"153\":1,\"154\":1,\"185\":2,\"188\":1,\"197\":1,\"203\":2,\"219\":2,\"266\":2,\"283\":4,\"284\":4,\"291\":1,\"303\":3,\"304\":15,\"326\":1,\"327\":1,\"362\":2,\"363\":3,\"372\":1,\"376\":3,\"382\":2,\"385\":1,\"391\":1,\"392\":1,\"410\":1,\"437\":4,\"438\":1,\"444\":1,\"454\":1,\"467\":1,\"471\":3,\"475\":2,\"482\":1,\"487\":1,\"492\":1,\"520\":2,\"522\":1,\"532\":2,\"534\":2,\"535\":1,\"548\":1,\"552\":1,\"590\":1,\"599\":9,\"600\":2,\"605\":1,\"612\":3,\"613\":8,\"614\":1,\"618\":1,\"619\":13,\"622\":13,\"638\":1,\"639\":1,\"641\":4,\"642\":2,\"646\":1,\"647\":1,\"660\":3,\"663\":2,\"664\":1,\"665\":1}}],[\"network\",{\"1\":{\"401\":1}}],[\"netstat\",{\"1\":{\"248\":2}}],[\"netflix的hystrix微服务容错库已经停⽌更新\",{\"1\":{\"381\":1}}],[\"netflix模块\",{\"1\":{\"366\":1}}],[\"netflix\",{\"1\":{\"113\":1,\"368\":1,\"369\":1,\"381\":1}}],[\"net\",{\"1\":{\"11\":1,\"13\":1,\"62\":1,\"63\":1,\"65\":1,\"150\":1,\"247\":1,\"248\":1,\"255\":1,\"283\":2,\"284\":1,\"401\":2,\"415\":2,\"416\":2,\"417\":1,\"445\":1,\"665\":3}}],[\"netty\",{\"1\":{\"4\":3}}],[\"netty文档\",{\"1\":{\"4\":1}}],[\"unchanged\",{\"1\":{\"628\":1}}],[\"uncommitted\",{\"1\":{\"547\":1}}],[\"unauthorized\",{\"1\":{\"437\":1}}],[\"unwatch\",{\"1\":{\"358\":1}}],[\"university\",{\"1\":{\"631\":1}}],[\"unit\",{\"1\":{\"363\":6}}],[\"uninstall\",{\"1\":{\"262\":1}}],[\"uninstaller\",{\"1\":{\"7\":1}}],[\"unixodbc\",{\"1\":{\"232\":2}}],[\"union\",{\"1\":{\"127\":3,\"128\":4,\"137\":1,\"138\":1,\"139\":1,\"140\":1}}],[\"unicode\",{\"1\":{\"11\":2,\"129\":1,\"252\":2}}],[\"uage\",{\"1\":{\"266\":3}}],[\"uriencoding>\",{\"1\":{\"558\":1}}],[\"uri\",{\"1\":{\"405\":2,\"406\":1,\"414\":1,\"415\":2,\"416\":1,\"417\":3,\"420\":2,\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"426\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"435\":2,\"438\":1,\"440\":1,\"445\":1,\"613\":7,\"614\":8}}],[\"uroot\",{\"1\":{\"244\":3}}],[\"urlencodedformentity\",{\"1\":{\"613\":2}}],[\"url=jdbc\",{\"1\":{\"519\":1,\"559\":1}}],[\"url=uri\",{\"1\":{\"17\":12}}],[\"url就不需要了\",{\"1\":{\"400\":1}}],[\"urlpatterns=\",{\"1\":{\"266\":1}}],[\"urlpatterns\",{\"1\":{\"266\":3}}],[\"url>\",{\"1\":{\"116\":2}}],[\"url\",{\"1\":{\"45\":1,\"46\":1,\"47\":1,\"52\":1,\"113\":1,\"185\":1,\"262\":3,\"303\":2,\"304\":2,\"332\":1,\"367\":4,\"368\":1,\"369\":1,\"378\":1,\"382\":2,\"384\":2,\"386\":2,\"389\":3,\"392\":2,\"399\":2,\"400\":1,\"405\":1,\"406\":1,\"415\":1,\"417\":1,\"438\":2,\"440\":1,\"441\":3,\"445\":2,\"518\":2,\"523\":2,\"561\":2,\"563\":1}}],[\"using\",{\"1\":{\"493\":1}}],[\"usr\",{\"1\":{\"233\":1,\"234\":1,\"238\":4,\"239\":1,\"244\":5,\"248\":2,\"332\":3}}],[\"usespringel\",{\"1\":{\"619\":1}}],[\"usessl=false\",{\"1\":{\"519\":1,\"559\":1}}],[\"useunicode=true\",{\"1\":{\"519\":1,\"559\":1}}],[\"usegzipdecoder\",{\"1\":{\"377\":1}}],[\"use\",{\"1\":{\"219\":1,\"243\":1,\"261\":1,\"262\":1,\"628\":2,\"630\":1}}],[\"useraop\",{\"1\":{\"660\":17}}],[\"userannotationargumentresolver\",{\"1\":{\"472\":1,\"481\":1,\"482\":1}}],[\"userdaoimplclass\",{\"1\":{\"663\":3}}],[\"userdaoimpl>\",{\"1\":{\"663\":1}}],[\"userdaoimplproxytest\",{\"1\":{\"660\":1}}],[\"userdaoimplproxy\",{\"1\":{\"660\":4}}],[\"userdaoimpl\",{\"1\":{\"659\":1,\"660\":6,\"663\":5}}],[\"userdao\",{\"1\":{\"659\":2,\"660\":10,\"663\":4}}],[\"userworddemo\",{\"1\":{\"619\":5}}],[\"user2\",{\"1\":{\"605\":2}}],[\"user1\",{\"1\":{\"605\":2}}],[\"userjsonstr1\",{\"1\":{\"605\":3}}],[\"userjsonstr\",{\"1\":{\"605\":3}}],[\"usercontroller\",{\"1\":{\"564\":1}}],[\"usermapper\",{\"1\":{\"521\":4,\"522\":3}}],[\"user在redis的hash表数据存在\",{\"1\":{\"327\":1}}],[\"useridcheck\",{\"1\":{\"438\":1}}],[\"useridcheckgatewayfilter\",{\"1\":{\"438\":2}}],[\"useridcheckgatewayfilterfactory\",{\"1\":{\"438\":1}}],[\"userid\",{\"1\":{\"324\":6,\"326\":3,\"327\":4,\"438\":4,\"480\":3}}],[\"user=mysql\",{\"1\":{\"254\":1}}],[\"user=\",{\"1\":{\"243\":1}}],[\"username和password属性可以省略不配置\",{\"1\":{\"405\":1}}],[\"username=mysqlusername\",{\"1\":{\"559\":1}}],[\"username=root\",{\"1\":{\"519\":1}}],[\"username=\",{\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"589\":1,\"590\":1}}],[\"username=black\",{\"1\":{\"105\":1,\"107\":1,\"589\":1,\"590\":1}}],[\"username\",{\"1\":{\"84\":2,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"266\":3,\"303\":2,\"304\":2,\"409\":1,\"410\":1,\"504\":1,\"505\":1,\"518\":2,\"561\":2,\"589\":1,\"590\":1,\"619\":1}}],[\"user\",{\"1\":{\"17\":2,\"18\":1,\"82\":1,\"243\":5,\"256\":2,\"266\":4,\"324\":9,\"327\":2,\"438\":2,\"480\":5,\"481\":1,\"521\":3,\"522\":4,\"553\":1,\"564\":1,\"579\":4,\"605\":14,\"659\":3,\"660\":2,\"663\":1}}],[\"usersmapper\",{\"1\":{\"522\":2}}],[\"usersession\",{\"1\":{\"480\":8,\"481\":4}}],[\"userserviceimpl\",{\"1\":{\"522\":4}}],[\"userservice\",{\"1\":{\"266\":1,\"522\":5}}],[\"usersserviceimpl\",{\"1\":{\"266\":1}}],[\"usersservice\",{\"1\":{\"266\":2}}],[\"userscontroller\",{\"1\":{\"266\":1}}],[\"users\",{\"1\":{\"17\":2,\"18\":1,\"127\":1,\"203\":4,\"233\":1,\"266\":6,\"405\":1,\"524\":1,\"619\":2}}],[\"uvh\",{\"1\":{\"233\":1}}],[\"ul>\",{\"1\":{\"161\":2}}],[\"uidefaults\",{\"1\":{\"320\":1}}],[\"ui\",{\"1\":{\"122\":2,\"472\":2,\"482\":1}}],[\"upon\",{\"1\":{\"629\":4}}],[\"updatefill\",{\"1\":{\"467\":1}}],[\"updatetime\",{\"1\":{\"466\":1,\"467\":1}}],[\"updater\",{\"1\":{\"466\":2,\"467\":2}}],[\"updatemassage\",{\"1\":{\"97\":2,\"100\":3}}],[\"update\",{\"1\":{\"97\":6,\"98\":3,\"100\":5,\"101\":5,\"243\":1,\"466\":5,\"504\":2,\"524\":2,\"579\":1,\"622\":2}}],[\"uploadfile\",{\"1\":{\"113\":1}}],[\"uploadimageandcrtthumbimage\",{\"1\":{\"113\":1}}],[\"upload\",{\"1\":{\"12\":1,\"113\":4}}],[\"utils\",{\"1\":{\"86\":1,\"87\":1,\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2,\"622\":1}}],[\"util\",{\"1\":{\"65\":2,\"75\":1,\"77\":1,\"84\":1,\"86\":1,\"89\":1,\"94\":1,\"97\":1,\"100\":1,\"113\":1,\"283\":2,\"303\":2,\"304\":4,\"312\":3,\"326\":3,\"327\":4,\"363\":5,\"472\":2,\"475\":1,\"482\":2,\"492\":3,\"521\":1,\"522\":3,\"599\":4,\"600\":4,\"612\":3,\"613\":3,\"618\":1,\"619\":7,\"642\":1,\"655\":2}}],[\"utf8mb4\",{\"1\":{\"129\":2,\"252\":2}}],[\"utf\",{\"1\":{\"21\":1,\"74\":1,\"87\":1,\"90\":2,\"95\":2,\"98\":2,\"101\":2,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":1,\"146\":1,\"266\":1,\"363\":1,\"504\":1,\"505\":1,\"518\":1,\"521\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"563\":1,\"589\":1,\"590\":2,\"612\":1,\"622\":1}}],[\"ubuntu下必须用sudo启动\",{\"1\":{\"248\":1}}],[\"ubuntu\",{\"1\":{\"5\":2}}],[\"ubuntu资源下载站\",{\"1\":{\"5\":1}}],[\"蜂蜜浏览器\",{\"1\":{\"7\":1}}],[\"zuul\",{\"1\":{\"413\":1,\"436\":1}}],[\"zunionstore\",{\"1\":{\"351\":1}}],[\"zincrby\",{\"1\":{\"352\":1}}],[\"zinterstore\",{\"1\":{\"351\":1}}],[\"zipkin⽀持将链路数据存储在mysql\",{\"1\":{\"401\":1}}],[\"zipkin<\",{\"1\":{\"399\":1}}],[\"zipkin\",{\"0\":{\"398\":1,\"399\":1},\"1\":{\"398\":5,\"399\":3,\"400\":8,\"401\":5}}],[\"zip\",{\"1\":{\"7\":2}}],[\"zlexcount\",{\"1\":{\"351\":1}}],[\"zlib=\",{\"1\":{\"248\":2}}],[\"zlib上传到\",{\"1\":{\"248\":1}}],[\"zlib库\",{\"0\":{\"248\":1}}],[\"zlib\",{\"1\":{\"233\":1,\"248\":5}}],[\"zcount\",{\"1\":{\"351\":1}}],[\"zcard\",{\"1\":{\"351\":1}}],[\"zremrangebyscore\",{\"1\":{\"351\":1}}],[\"zremrangebyrank\",{\"1\":{\"351\":1}}],[\"zremrangebylex\",{\"1\":{\"351\":1}}],[\"zrem\",{\"1\":{\"351\":1}}],[\"zrevrank\",{\"1\":{\"351\":1}}],[\"zrevrangebyscore\",{\"1\":{\"351\":1}}],[\"zrevrange\",{\"1\":{\"351\":1}}],[\"zrangebyscore\",{\"1\":{\"351\":1}}],[\"zrangebylex\",{\"1\":{\"351\":1}}],[\"zrange\",{\"1\":{\"351\":1}}],[\"zrank\",{\"1\":{\"351\":1}}],[\"zscan\",{\"1\":{\"351\":1}}],[\"zscore\",{\"1\":{\"351\":1}}],[\"zset\",{\"0\":{\"351\":1}}],[\"zadd\",{\"1\":{\"351\":1}}],[\"zxvf\",{\"1\":{\"247\":1,\"248\":3}}],[\"zxf\",{\"1\":{\"238\":1}}],[\"z\",{\"1\":{\"194\":2,\"491\":2}}],[\"zookeeper\",{\"1\":{\"29\":1}}],[\"zhangsan\",{\"1\":{\"170\":1}}],[\"zhang\",{\"1\":{\"170\":1}}],[\"zh\",{\"1\":{\"4\":2,\"7\":3,\"11\":1,\"236\":1}}],[\"7代表星期六\",{\"1\":{\"499\":1}}],[\"7所示\",{\"1\":{\"462\":1}}],[\"789\",{\"1\":{\"419\":4}}],[\"70\",{\"1\":{\"324\":2}}],[\"70000d\",{\"1\":{\"77\":1}}],[\"75\",{\"1\":{\"320\":1}}],[\"7<\",{\"1\":{\"113\":1}}],[\"7l\",{\"1\":{\"77\":1}}],[\"7个常用属性\",{\"0\":{\"23\":1}}],[\"7\",{\"1\":{\"7\":2,\"17\":2,\"58\":2,\"217\":1,\"233\":1,\"244\":2,\"248\":2,\"383\":1,\"386\":1,\"401\":4,\"589\":2,\"590\":2,\"606\":7}}],[\"volatile\",{\"1\":{\"646\":2}}],[\"void\",{\"1\":{\"59\":2,\"60\":2,\"62\":2,\"63\":3,\"65\":2,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"76\":9,\"77\":3,\"86\":2,\"87\":3,\"89\":2,\"90\":6,\"94\":2,\"95\":6,\"97\":2,\"98\":6,\"100\":2,\"101\":6,\"105\":2,\"106\":2,\"107\":2,\"109\":1,\"110\":1,\"113\":1,\"122\":2,\"266\":7,\"281\":18,\"283\":4,\"284\":2,\"291\":1,\"293\":1,\"294\":2,\"295\":1,\"296\":1,\"298\":1,\"303\":1,\"304\":1,\"314\":1,\"315\":1,\"316\":3,\"327\":2,\"363\":22,\"368\":1,\"369\":1,\"372\":1,\"391\":1,\"405\":1,\"416\":1,\"445\":1,\"467\":2,\"472\":2,\"482\":2,\"492\":1,\"498\":1,\"504\":1,\"505\":2,\"520\":1,\"522\":1,\"524\":1,\"544\":2,\"545\":5,\"552\":1,\"589\":3,\"590\":2,\"599\":2,\"600\":3,\"605\":1,\"606\":1,\"612\":2,\"619\":1,\"622\":1,\"637\":1,\"641\":1,\"653\":1,\"654\":3,\"656\":1,\"659\":2,\"660\":6,\"663\":1,\"664\":8}}],[\"voidtools\",{\"1\":{\"7\":1}}],[\"v3\",{\"1\":{\"405\":1}}],[\"vlaue\",{\"1\":{\"338\":1}}],[\"velocity\",{\"1\":{\"530\":1}}],[\"vector\",{\"1\":{\"315\":1}}],[\"verify\",{\"1\":{\"622\":3}}],[\"verificationdata\",{\"1\":{\"599\":2,\"600\":1}}],[\"verificationhead\",{\"1\":{\"599\":2,\"600\":1}}],[\"version\",{\"0\":{\"303\":1,\"304\":1},\"1\":{\"84\":1,\"113\":1,\"128\":1,\"212\":1,\"261\":1,\"262\":3,\"303\":1,\"369\":1,\"470\":1,\"471\":1,\"551\":2,\"558\":10}}],[\"version>4\",{\"1\":{\"558\":1}}],[\"version>2\",{\"1\":{\"558\":1}}],[\"version>2020\",{\"1\":{\"369\":1}}],[\"version>2021\",{\"1\":{\"113\":1}}],[\"version>8\",{\"1\":{\"558\":1}}],[\"version>3\",{\"1\":{\"558\":2}}],[\"version>5\",{\"1\":{\"84\":1,\"558\":2}}],[\"version>1\",{\"1\":{\"74\":1,\"113\":1,\"369\":1,\"558\":5}}],[\"version>\",{\"1\":{\"58\":7,\"63\":3,\"74\":3,\"84\":2,\"113\":6,\"301\":1,\"369\":3,\"383\":1,\"386\":1,\"470\":1,\"504\":2,\"505\":2,\"517\":7,\"543\":2,\"551\":4,\"558\":24,\"589\":4,\"590\":4,\"603\":1,\"609\":2,\"617\":3,\"665\":1}}],[\"version=\",{\"1\":{\"21\":1,\"74\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":1,\"504\":1,\"505\":1,\"518\":1,\"521\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"563\":2,\"589\":1,\"590\":1}}],[\"verb\",{\"1\":{\"42\":1}}],[\"vertical\",{\"1\":{\"21\":3,\"26\":1}}],[\"vm\",{\"1\":{\"154\":6,\"155\":2,\"183\":1,\"203\":1,\"243\":1,\"272\":1}}],[\"v2\",{\"1\":{\"150\":1,\"172\":1,\"175\":1,\"405\":1,\"553\":1}}],[\"validate\",{\"1\":{\"243\":3,\"256\":3}}],[\"val\",{\"1\":{\"177\":2}}],[\"value>classpath\",{\"1\":{\"563\":2}}],[\"value>\",{\"1\":{\"561\":1,\"563\":2}}],[\"values\",{\"1\":{\"363\":10,\"524\":1}}],[\"valueoperations\",{\"1\":{\"363\":9}}],[\"valueoperations<string\",{\"1\":{\"363\":1}}],[\"valueof\",{\"1\":{\"87\":1,\"90\":2,\"95\":2,\"98\":2,\"101\":2,\"283\":1,\"326\":5,\"327\":6}}],[\"value序列化\",{\"1\":{\"362\":1}}],[\"value记录\",{\"1\":{\"356\":1}}],[\"value设置到hash表的key中\",{\"1\":{\"349\":1}}],[\"value2\",{\"1\":{\"341\":2,\"349\":1}}],[\"value2会在value1前面\",{\"1\":{\"341\":1}}],[\"value值返回的索引位置与key的顺序一致\",{\"1\":{\"338\":1}}],[\"value1\",{\"1\":{\"338\":2,\"341\":2,\"349\":1}}],[\"value数据库\",{\"1\":{\"331\":1}}],[\"value=\",{\"1\":{\"109\":1,\"110\":4,\"170\":1,\"171\":1,\"266\":2,\"518\":4,\"553\":4,\"561\":7,\"562\":2}}],[\"value\",{\"1\":{\"57\":5,\"109\":3,\"110\":2,\"113\":2,\"170\":1,\"171\":1,\"175\":2,\"176\":6,\"266\":1,\"272\":1,\"281\":1,\"295\":2,\"296\":2,\"337\":6,\"338\":3,\"339\":1,\"341\":4,\"343\":2,\"349\":2,\"356\":2,\"362\":1,\"363\":36,\"373\":1,\"376\":3,\"392\":2,\"410\":4,\"438\":1,\"441\":1,\"444\":1,\"466\":4,\"492\":5,\"523\":1,\"538\":2,\"545\":6,\"564\":1,\"599\":4}}],[\"variables\",{\"1\":{\"243\":1,\"256\":1}}],[\"var\",{\"1\":{\"146\":1,\"156\":1,\"203\":2,\"243\":2}}],[\"v1\",{\"1\":{\"146\":1,\"405\":1}}],[\"vue组件\",{\"1\":{\"223\":1}}],[\"vue中加入路由承载视图\",{\"1\":{\"219\":1}}],[\"vue中引入组件\",{\"1\":{\"218\":1}}],[\"vue的模板中使用注册组件\",{\"1\":{\"218\":1}}],[\"vue的组件中\",{\"1\":{\"218\":1}}],[\"vue文件就是一个组件\",{\"1\":{\"215\":1}}],[\"vue生成的模板的有难有易\",{\"1\":{\"212\":1}}],[\"vue命令\",{\"1\":{\"212\":1}}],[\"vuerouter\",{\"1\":{\"203\":1,\"219\":3}}],[\"vue开发项目\",{\"1\":{\"202\":1}}],[\"vue开源项目\",{\"1\":{\"151\":1}}],[\"vue渲染页面标签\",{\"1\":{\"163\":1}}],[\"vue实例对象上\",{\"1\":{\"155\":1}}],[\"vue官方文档\",{\"1\":{\"151\":1}}],[\"vuejs\",{\"1\":{\"150\":3,\"151\":1,\"172\":1,\"175\":1}}],[\"vue框架\",{\"0\":{\"149\":1}}],[\"vue\",{\"0\":{\"152\":1,\"153\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"207\":1,\"209\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1},\"1\":{\"123\":3,\"150\":6,\"151\":3,\"153\":1,\"154\":2,\"155\":3,\"170\":1,\"175\":1,\"176\":2,\"178\":1,\"181\":3,\"184\":3,\"193\":1,\"195\":3,\"197\":2,\"202\":4,\"203\":1,\"210\":1,\"211\":2,\"212\":5,\"213\":2,\"214\":2,\"215\":1,\"219\":7,\"227\":1}}],[\"vue折线图等\",{\"1\":{\"4\":1}}],[\"vhost创建\",{\"1\":{\"80\":1}}],[\"vhost\",{\"1\":{\"80\":1}}],[\"v\",{\"0\":{\"157\":1,\"158\":2,\"159\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1},\"1\":{\"57\":1,\"157\":4,\"158\":8,\"159\":6,\"161\":5,\"162\":2,\"163\":6,\"165\":1,\"170\":3,\"173\":2,\"174\":2,\"175\":2,\"178\":2,\"181\":2,\"182\":1,\"210\":1,\"212\":1,\"221\":1,\"599\":4,\"613\":2}}],[\"vim\",{\"1\":{\"233\":1}}],[\"virtualhost\",{\"1\":{\"84\":2}}],[\"virtualhosts\",{\"1\":{\"83\":1}}],[\"virtual\",{\"0\":{\"83\":1},\"1\":{\"80\":1,\"83\":3,\"105\":3,\"106\":2,\"107\":3,\"108\":2,\"504\":1,\"505\":1,\"589\":3,\"590\":3}}],[\"virustotal\",{\"1\":{\"12\":2}}],[\"viewresolver\",{\"0\":{\"573\":1},\"1\":{\"573\":2}}],[\"views\",{\"1\":{\"214\":1}}],[\"view\",{\"1\":{\"209\":2,\"219\":1,\"481\":1,\"562\":1,\"573\":4}}],[\"view>\",{\"1\":{\"203\":1,\"204\":2,\"205\":1,\"219\":1}}],[\"view><\",{\"1\":{\"203\":1,\"205\":1,\"219\":1}}],[\"viewgroup视图\",{\"1\":{\"20\":1}}],[\"view视图\",{\"1\":{\"20\":1}}],[\"vscode\",{\"0\":{\"9\":1}}],[\"jcp\",{\"1\":{\"563\":3}}],[\"jcache\",{\"1\":{\"530\":1}}],[\"jp\",{\"1\":{\"545\":5}}],[\"jpg\",{\"1\":{\"10\":2,\"619\":3}}],[\"jmx\",{\"1\":{\"530\":1}}],[\"jndi\",{\"1\":{\"530\":1}}],[\"jedis\",{\"1\":{\"508\":1}}],[\"jobstatereasons\",{\"1\":{\"317\":1}}],[\"joinpoint\",{\"1\":{\"540\":2,\"545\":3}}],[\"join\",{\"1\":{\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"156\":1,\"183\":1}}],[\"j>\",{\"1\":{\"194\":1}}],[\"j><\",{\"1\":{\"194\":1}}],[\"j组件\",{\"1\":{\"194\":1}}],[\"j\",{\"1\":{\"194\":1}}],[\"jquery2\",{\"1\":{\"146\":1}}],[\"jstlview\",{\"1\":{\"573\":1}}],[\"jsp\",{\"1\":{\"415\":1}}],[\"jsp时\",{\"1\":{\"415\":1}}],[\"jsj\",{\"1\":{\"392\":1}}],[\"js文件中引入axios\",{\"1\":{\"227\":1}}],[\"js作用一致\",{\"1\":{\"214\":1}}],[\"js中引入router\",{\"1\":{\"220\":1}}],[\"js中引入\",{\"1\":{\"219\":1}}],[\"js中直接配置\",{\"1\":{\"213\":1}}],[\"js中发送网络请求本质还是ajax\",{\"1\":{\"184\":1}}],[\"js的插件\",{\"1\":{\"184\":1}}],[\"js表达式\",{\"1\":{\"156\":2}}],[\"jsdelivr\",{\"1\":{\"150\":1}}],[\"js两个文件找不到\",{\"1\":{\"123\":1}}],[\"js\",{\"0\":{\"201\":1},\"1\":{\"123\":3,\"146\":3,\"150\":6,\"151\":2,\"178\":1,\"184\":1,\"202\":3,\"214\":6,\"220\":2,\"229\":1,\"472\":1}}],[\"json字符串\",{\"1\":{\"613\":1}}],[\"json字符串与javaobject相互转换\",{\"0\":{\"605\":1}}],[\"jsonstring1\",{\"1\":{\"606\":3}}],[\"jsonstring2\",{\"1\":{\"606\":3}}],[\"jsonstring\",{\"1\":{\"606\":9}}],[\"jsonserialize\",{\"1\":{\"493\":2}}],[\"jsonserializer<\",{\"1\":{\"492\":1}}],[\"jsonserializer<string>\",{\"1\":{\"492\":1}}],[\"jsonserializer\",{\"1\":{\"492\":1}}],[\"jsonarray\",{\"1\":{\"606\":2}}],[\"jsonarraytest\",{\"1\":{\"606\":1}}],[\"jsonarray与java的list相互转换\",{\"0\":{\"606\":1}}],[\"json转换为java对象后\",{\"1\":{\"605\":4}}],[\"jsontest\",{\"1\":{\"605\":1}}],[\"json处理工具包\",{\"1\":{\"558\":1}}],[\"jsonmappingexception\",{\"1\":{\"492\":2}}],[\"jsongenerator\",{\"1\":{\"492\":2}}],[\"jsonobject\",{\"1\":{\"480\":2,\"599\":3,\"605\":2,\"606\":2}}],[\"jsonformat\",{\"1\":{\"466\":3}}],[\"jsonp\",{\"1\":{\"184\":1}}],[\"jsonbody\",{\"1\":{\"613\":3}}],[\"jsonb\",{\"1\":{\"142\":1,\"143\":1}}],[\"jsonb操作符\",{\"0\":{\"142\":1}}],[\"jsonbuilder\",{\"1\":{\"60\":1,\"62\":1}}],[\"json和\",{\"0\":{\"142\":1}}],[\"json操作\",{\"0\":{\"141\":1}}],[\"jsondocument\",{\"1\":{\"63\":3}}],[\"json\",{\"1\":{\"42\":2,\"63\":4,\"142\":1,\"163\":1,\"214\":2,\"377\":1,\"599\":9,\"605\":3,\"606\":2,\"613\":1}}],[\"jingxiang\",{\"1\":{\"116\":1}}],[\"jitpack\",{\"1\":{\"17\":2}}],[\"jupiter\",{\"1\":{\"76\":1,\"77\":1}}],[\"junit4\",{\"1\":{\"76\":1,\"77\":1,\"105\":1,\"106\":1,\"107\":1,\"504\":1,\"505\":1,\"529\":1,\"589\":1,\"590\":1}}],[\"junit\",{\"1\":{\"62\":2,\"63\":2,\"65\":2,\"76\":2,\"77\":2,\"105\":2,\"106\":2,\"107\":2,\"504\":2,\"505\":2,\"558\":1,\"589\":2,\"590\":2,\"619\":1,\"660\":2}}],[\"jasperreports\",{\"1\":{\"530\":1}}],[\"jar\",{\"1\":{\"398\":3,\"400\":5,\"401\":4}}],[\"jacksonannotationsinside\",{\"1\":{\"493\":2}}],[\"jackson\",{\"0\":{\"63\":1},\"1\":{\"63\":7,\"466\":1,\"492\":7,\"493\":2,\"558\":4}}],[\"javaee\",{\"1\":{\"530\":1,\"563\":3}}],[\"javamail\",{\"1\":{\"529\":1,\"530\":1}}],[\"javatype\",{\"1\":{\"524\":1}}],[\"java对象转换为json字符串\",{\"1\":{\"605\":4}}],[\"java对象\",{\"1\":{\"511\":1}}],[\"javax\",{\"1\":{\"480\":2,\"622\":1}}],[\"java操作符对断路器\",{\"1\":{\"381\":1}}],[\"java属性类型\",{\"1\":{\"304\":3}}],[\"java<\",{\"1\":{\"301\":1,\"517\":1,\"551\":1,\"558\":1}}],[\"java提供了一套java\",{\"1\":{\"298\":1}}],[\"java所提供的一套应用到javabean的api\",{\"1\":{\"298\":1}}],[\"java运行时系统不需要知道文件与文件系统\",{\"1\":{\"289\":1}}],[\"java默认有三种类加载器\",{\"1\":{\"289\":1}}],[\"java类加载器\",{\"1\":{\"289\":1}}],[\"java反射机制是在运行状态中\",{\"1\":{\"288\":1}}],[\"javadoc\",{\"1\":{\"271\":1}}],[\"java8开始支持\",{\"1\":{\"270\":2}}],[\"java7开始支持\",{\"1\":{\"270\":1}}],[\"java语言中类\",{\"1\":{\"269\":1}}],[\"javaapi\",{\"0\":{\"58\":1}}],[\"javascript\",{\"1\":{\"35\":1,\"221\":2,\"222\":1}}],[\"java\",{\"0\":{\"659\":1,\"672\":1},\"1\":{\"7\":1,\"56\":1,\"62\":1,\"63\":1,\"65\":3,\"74\":1,\"75\":2,\"77\":1,\"84\":2,\"86\":2,\"87\":2,\"89\":2,\"90\":4,\"94\":2,\"95\":4,\"97\":2,\"98\":4,\"100\":2,\"101\":4,\"109\":1,\"110\":2,\"113\":1,\"270\":1,\"271\":1,\"272\":1,\"283\":7,\"284\":2,\"289\":2,\"298\":1,\"303\":8,\"304\":6,\"312\":4,\"316\":1,\"318\":1,\"326\":2,\"327\":3,\"363\":6,\"369\":1,\"382\":1,\"398\":1,\"400\":2,\"401\":2,\"413\":1,\"419\":2,\"440\":1,\"466\":2,\"467\":1,\"472\":2,\"475\":3,\"479\":1,\"482\":2,\"487\":1,\"492\":2,\"493\":4,\"511\":1,\"520\":2,\"521\":2,\"522\":4,\"529\":2,\"590\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":1,\"599\":5,\"600\":3,\"612\":7,\"613\":3,\"614\":1,\"618\":4,\"619\":10,\"622\":5,\"642\":1,\"655\":2,\"664\":3,\"665\":1},\"2\":{\"79\":1,\"125\":1,\"267\":1,\"268\":1,\"273\":1,\"274\":1,\"285\":1,\"286\":1,\"299\":1,\"300\":1,\"305\":1,\"306\":1,\"321\":1,\"322\":1,\"329\":1,\"365\":1,\"371\":1,\"380\":1,\"388\":1,\"395\":1,\"403\":1,\"412\":1,\"447\":1,\"450\":1,\"464\":1,\"469\":1,\"474\":1,\"477\":1,\"484\":1,\"489\":1,\"495\":1,\"502\":1,\"507\":1,\"510\":1,\"527\":1,\"555\":1,\"566\":1,\"587\":1,\"592\":1,\"602\":1,\"608\":1,\"616\":1,\"621\":1,\"624\":1,\"633\":1,\"644\":1,\"649\":1,\"658\":1,\"667\":1}}],[\"jvm\",{\"1\":{\"42\":1}}],[\"jdkproxyfactory\",{\"1\":{\"664\":1}}],[\"jdk动态代理\",{\"0\":{\"662\":1}}],[\"jdk\",{\"0\":{\"663\":1,\"664\":1},\"1\":{\"661\":1,\"662\":1,\"663\":1}}],[\"jdk6以上可用\",{\"1\":{\"538\":1}}],[\"jdk17以上与jdk8版本的导包路径不同\",{\"1\":{\"538\":1}}],[\"jdk1\",{\"1\":{\"318\":1}}],[\"jdk反编译软件\",{\"1\":{\"7\":1}}],[\"jdbcurl\",{\"1\":{\"553\":1}}],[\"jdbcutil\",{\"1\":{\"303\":1,\"304\":2}}],[\"jdbc<\",{\"1\":{\"551\":1,\"558\":1}}],[\"jdbctype\",{\"1\":{\"524\":1}}],[\"jdbc\",{\"0\":{\"301\":1},\"1\":{\"303\":5,\"304\":5,\"407\":1,\"518\":2,\"519\":1,\"523\":1,\"529\":1,\"553\":2,\"559\":1,\"561\":1}}],[\"jdo\",{\"1\":{\"56\":1}}],[\"jd\",{\"1\":{\"7\":1}}],[\"gate\",{\"1\":{\"419\":1}}],[\"gatewayfilter\",{\"1\":{\"438\":2}}],[\"gatewayfilterchain\",{\"1\":{\"437\":5,\"438\":1,\"441\":1}}],[\"gatewayfilter类的实例\",{\"1\":{\"413\":1}}],[\"gateway的主要功能之⼀是转发请求\",{\"1\":{\"418\":1}}],[\"gatewayapplication\",{\"1\":{\"416\":3,\"445\":2}}],[\"gateway是基于webflux框架实现的\",{\"1\":{\"413\":1}}],[\"gateway\",{\"0\":{\"413\":1,\"445\":1},\"1\":{\"413\":8,\"415\":2,\"417\":2,\"418\":3,\"419\":1,\"420\":2,\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"426\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"435\":1,\"436\":1,\"437\":2,\"438\":1,\"439\":1,\"440\":2,\"444\":1,\"445\":4}}],[\"gataway\",{\"1\":{\"418\":1}}],[\"gid\",{\"1\":{\"304\":3}}],[\"git仓库配置⽂件缓存本地⽬录\",{\"1\":{\"405\":1}}],[\"git\",{\"1\":{\"405\":6}}],[\"git上传需要忽略的文件格式\",{\"1\":{\"214\":1}}],[\"gitignore\",{\"1\":{\"214\":1}}],[\"gitee文档\",{\"1\":{\"603\":1}}],[\"gitee\",{\"1\":{\"7\":2,\"405\":1,\"603\":1}}],[\"github文档\",{\"1\":{\"603\":1}}],[\"github\",{\"1\":{\"4\":4,\"7\":7,\"41\":1,\"113\":4,\"151\":2,\"259\":1,\"262\":1,\"383\":1,\"386\":1,\"470\":1,\"471\":1,\"511\":1,\"558\":2,\"561\":1,\"603\":1,\"617\":1}}],[\"github中的fastjson2文档\",{\"1\":{\"4\":1}}],[\"globalexceptionhandler\",{\"1\":{\"475\":1}}],[\"globalcors\",{\"1\":{\"444\":1}}],[\"globalfilter\",{\"1\":{\"437\":10,\"441\":1}}],[\"global\",{\"1\":{\"243\":2,\"256\":2}}],[\"gz\",{\"1\":{\"238\":2,\"247\":1,\"248\":3,\"332\":1}}],[\"guava\",{\"1\":{\"530\":1}}],[\"guest\",{\"1\":{\"233\":1,\"234\":2,\"409\":2,\"410\":2}}],[\"guide\",{\"1\":{\"116\":1,\"150\":1,\"172\":1,\"175\":1}}],[\"gui\",{\"1\":{\"7\":1,\"12\":1}}],[\"gblic\",{\"1\":{\"233\":1}}],[\"gcc环境\",{\"1\":{\"246\":1}}],[\"gcc\",{\"1\":{\"232\":2,\"233\":1,\"246\":4,\"332\":1}}],[\"gopage\",{\"1\":{\"207\":1}}],[\"google于2016年新发布的一种布局方式\",{\"1\":{\"20\":1}}],[\"google\",{\"1\":{\"15\":1,\"17\":4,\"511\":1}}],[\"gte\",{\"1\":{\"57\":5}}],[\"geohash\",{\"1\":{\"353\":2}}],[\"georadiusbymember\",{\"1\":{\"353\":1}}],[\"georadius\",{\"1\":{\"353\":1}}],[\"geodist\",{\"1\":{\"353\":1}}],[\"geopos\",{\"1\":{\"353\":1}}],[\"geoadd\",{\"1\":{\"353\":1}}],[\"geo\",{\"0\":{\"353\":1},\"1\":{\"353\":1}}],[\"generatepublic\",{\"1\":{\"622\":2}}],[\"generateprivate\",{\"1\":{\"622\":2}}],[\"generatekeypair\",{\"1\":{\"622\":1}}],[\"generated\",{\"1\":{\"243\":1}}],[\"generator\",{\"1\":{\"622\":3}}],[\"general\",{\"1\":{\"516\":1}}],[\"gen\",{\"1\":{\"492\":4}}],[\"gender\",{\"1\":{\"221\":1,\"224\":2,\"226\":1}}],[\"getqchandler\",{\"1\":{\"642\":1}}],[\"getwidth\",{\"1\":{\"639\":1}}],[\"getwritemethod\",{\"1\":{\"298\":2,\"303\":1}}],[\"getwriter\",{\"1\":{\"266\":2}}],[\"get请求\",{\"1\":{\"614\":1}}],[\"get请求方式\",{\"1\":{\"613\":1}}],[\"getuser\",{\"1\":{\"522\":3}}],[\"getuserid\",{\"1\":{\"327\":3,\"480\":1}}],[\"getheight\",{\"1\":{\"640\":1}}],[\"getheadmap\",{\"1\":{\"599\":3}}],[\"getheader\",{\"1\":{\"480\":1,\"612\":1}}],[\"getheaders\",{\"1\":{\"437\":1,\"438\":1,\"614\":1}}],[\"gethost\",{\"1\":{\"389\":1,\"393\":1}}],[\"gethighlightfields\",{\"1\":{\"71\":1}}],[\"gethits\",{\"1\":{\"65\":1,\"70\":1,\"71\":1}}],[\"getmapper\",{\"1\":{\"522\":1}}],[\"getmapping\",{\"1\":{\"373\":2,\"376\":2,\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"389\":1,\"392\":3,\"393\":1,\"442\":1,\"444\":1,\"564\":1,\"579\":1}}],[\"getmap\",{\"1\":{\"303\":1,\"304\":2}}],[\"getmessage\",{\"1\":{\"475\":5,\"545\":1}}],[\"getmessageproperties\",{\"1\":{\"107\":1,\"109\":1,\"110\":1,\"590\":3}}],[\"getmethod\",{\"1\":{\"295\":4,\"304\":1,\"438\":1}}],[\"getname\",{\"1\":{\"283\":1,\"303\":2,\"545\":1,\"599\":6,\"612\":1,\"664\":1,\"665\":1}}],[\"gettype\",{\"1\":{\"492\":1}}],[\"getter\",{\"1\":{\"487\":2,\"600\":2,\"612\":3}}],[\"gettime\",{\"1\":{\"363\":1}}],[\"gettrafficclass\",{\"1\":{\"281\":1}}],[\"gettcpnodelay\",{\"1\":{\"281\":1}}],[\"gettotalhits\",{\"1\":{\"65\":1,\"70\":1,\"71\":1}}],[\"getpublic\",{\"1\":{\"622\":1}}],[\"getpublickey\",{\"1\":{\"622\":3}}],[\"getprivate\",{\"1\":{\"622\":1}}],[\"getprivatekey\",{\"1\":{\"622\":3}}],[\"getpropertydescriptors\",{\"1\":{\"298\":3}}],[\"getproperty\",{\"1\":{\"296\":1}}],[\"getport\",{\"1\":{\"281\":1,\"283\":1,\"389\":1,\"393\":1}}],[\"getpaymet\",{\"1\":{\"385\":2}}],[\"getpaymentbyid\",{\"1\":{\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"389\":1,\"392\":1}}],[\"getpaymentbyfeign\",{\"1\":{\"373\":1}}],[\"getparameterannotation\",{\"1\":{\"481\":1}}],[\"getparametertype\",{\"1\":{\"481\":1}}],[\"getparametervalues\",{\"1\":{\"266\":1}}],[\"getparameter\",{\"1\":{\"266\":6}}],[\"getpath\",{\"1\":{\"113\":1,\"438\":1,\"441\":1}}],[\"getorder\",{\"1\":{\"437\":4,\"438\":1,\"441\":1}}],[\"getoriginalfilename\",{\"1\":{\"113\":2}}],[\"getobject\",{\"1\":{\"303\":1,\"304\":1}}],[\"getoutputstream\",{\"1\":{\"281\":1,\"283\":1}}],[\"getoption\",{\"1\":{\"281\":1}}],[\"getoobinline\",{\"1\":{\"281\":1}}],[\"getlength\",{\"1\":{\"638\":1}}],[\"getlast\",{\"1\":{\"316\":1}}],[\"getlocalsocketaddress\",{\"1\":{\"281\":1}}],[\"getlocalport\",{\"1\":{\"281\":1}}],[\"getlocaladdress\",{\"1\":{\"281\":1}}],[\"getlist\",{\"1\":{\"187\":1,\"188\":1,\"303\":3,\"304\":3}}],[\"getkeepalive\",{\"1\":{\"281\":1}}],[\"getkeypair\",{\"1\":{\"622\":2}}],[\"getkeyasstring\",{\"1\":{\"77\":1}}],[\"getkey\",{\"1\":{\"71\":1,\"599\":1,\"613\":1}}],[\"getinterfaces\",{\"1\":{\"663\":1,\"664\":1}}],[\"getinstance\",{\"1\":{\"622\":7,\"646\":1,\"647\":1,\"664\":1,\"665\":1}}],[\"getinstances\",{\"1\":{\"389\":1}}],[\"getinetaddress\",{\"1\":{\"281\":1,\"283\":1}}],[\"getinputstream\",{\"1\":{\"113\":2,\"281\":1,\"284\":1,\"619\":4}}],[\"getclazz\",{\"1\":{\"599\":2,\"600\":1}}],[\"getclassloader\",{\"1\":{\"663\":1,\"664\":1}}],[\"getclasstest\",{\"1\":{\"291\":1}}],[\"getclass\",{\"1\":{\"291\":2,\"475\":2,\"663\":1,\"664\":2}}],[\"getconsumerqueue\",{\"1\":{\"590\":1}}],[\"getconstructor2\",{\"1\":{\"294\":1}}],[\"getconstructor1\",{\"1\":{\"294\":1}}],[\"getconstructor\",{\"1\":{\"293\":2,\"294\":1,\"295\":1,\"296\":1,\"303\":1,\"304\":1}}],[\"getconnectionfactory\",{\"1\":{\"363\":1}}],[\"getconnection\",{\"1\":{\"84\":1,\"86\":2,\"87\":2,\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2,\"303\":4,\"304\":4,\"363\":1}}],[\"getchannel\",{\"1\":{\"281\":1}}],[\"getargs\",{\"1\":{\"545\":1}}],[\"getannotation\",{\"1\":{\"492\":1,\"599\":3}}],[\"getattribute\",{\"1\":{\"266\":1,\"481\":1}}],[\"getaggregations\",{\"1\":{\"77\":1}}],[\"getaggregation\",{\"1\":{\"77\":1}}],[\"getrowindex\",{\"1\":{\"599\":1}}],[\"getroutingkey\",{\"1\":{\"87\":1,\"90\":2,\"95\":2,\"98\":2,\"101\":2}}],[\"getrawclass\",{\"1\":{\"492\":1}}],[\"getrange\",{\"1\":{\"339\":1}}],[\"getreceivedroutingkey\",{\"1\":{\"590\":1}}],[\"getreceivedexchange\",{\"1\":{\"590\":1}}],[\"getreceivebuffersize\",{\"1\":{\"281\":1}}],[\"getresourceasreader\",{\"1\":{\"520\":1}}],[\"getresponse\",{\"1\":{\"437\":2,\"438\":2}}],[\"getrequest\",{\"1\":{\"437\":1,\"438\":3,\"441\":1}}],[\"getrequestdispatcher\",{\"1\":{\"266\":2}}],[\"getreadmethod\",{\"1\":{\"298\":1}}],[\"getreuseaddress\",{\"1\":{\"281\":1}}],[\"getremotesocketaddress\",{\"1\":{\"281\":1}}],[\"get在jdk1\",{\"1\":{\"266\":1}}],[\"get模糊搜索\",{\"1\":{\"185\":1}}],[\"getval\",{\"1\":{\"179\":1}}],[\"getvalue\",{\"1\":{\"71\":1,\"77\":1,\"599\":1,\"612\":1,\"613\":1}}],[\"getencoded\",{\"1\":{\"622\":4}}],[\"getentity\",{\"1\":{\"614\":1}}],[\"getelementbyid\",{\"1\":{\"153\":1}}],[\"getexpire\",{\"1\":{\"363\":1}}],[\"getexamtime\",{\"1\":{\"327\":3}}],[\"getexamid\",{\"1\":{\"327\":6}}],[\"getexecutepps\",{\"1\":{\"303\":3,\"304\":3}}],[\"getextension\",{\"1\":{\"113\":2}}],[\"getexchange\",{\"1\":{\"87\":1,\"90\":2,\"95\":2,\"98\":2,\"101\":2}}],[\"getgroup\",{\"1\":{\"113\":1}}],[\"getforobject\",{\"1\":{\"382\":1,\"384\":1,\"386\":1,\"389\":2,\"392\":1}}],[\"getfirst\",{\"1\":{\"316\":1,\"437\":1,\"438\":1}}],[\"getfieldnamemap\",{\"1\":{\"599\":1}}],[\"getfieldnames\",{\"1\":{\"599\":1,\"600\":1}}],[\"getfielderror\",{\"1\":{\"475\":1}}],[\"getfield\",{\"1\":{\"296\":2}}],[\"getfullpath\",{\"1\":{\"113\":1}}],[\"getfragments\",{\"1\":{\"71\":1}}],[\"getdefaultqchandler\",{\"1\":{\"642\":1}}],[\"getdefaultmessage\",{\"1\":{\"475\":1}}],[\"getdemolist\",{\"1\":{\"619\":2}}],[\"getdeclaredfields\",{\"1\":{\"303\":1,\"599\":3}}],[\"getdeclaredfield\",{\"1\":{\"296\":3}}],[\"getdeclaredmethod\",{\"1\":{\"295\":2}}],[\"getdeclaredconstructor\",{\"1\":{\"294\":2}}],[\"getdeliverytag\",{\"1\":{\"87\":1,\"90\":2,\"95\":2,\"98\":2,\"101\":2,\"107\":1,\"110\":1}}],[\"getdata\",{\"1\":{\"222\":1}}],[\"getdoccount\",{\"1\":{\"77\":1}}],[\"getshape\",{\"1\":{\"655\":1,\"656\":1}}],[\"getstring\",{\"1\":{\"599\":2}}],[\"getstringvalue\",{\"1\":{\"599\":2}}],[\"getstate\",{\"1\":{\"441\":1}}],[\"getstarted\",{\"1\":{\"80\":1}}],[\"getsignature\",{\"1\":{\"545\":2}}],[\"getsize\",{\"1\":{\"113\":2}}],[\"getsqlsession\",{\"1\":{\"520\":1,\"522\":1}}],[\"getset\",{\"1\":{\"337\":1}}],[\"getsendbuffersize\",{\"1\":{\"281\":1}}],[\"getscore\",{\"1\":{\"327\":5}}],[\"getsortscore\",{\"1\":{\"326\":2,\"327\":1}}],[\"getsotimeout\",{\"1\":{\"281\":1}}],[\"getsolinger\",{\"1\":{\"281\":1}}],[\"getsourceasmap\",{\"1\":{\"65\":1,\"70\":1}}],[\"getsourceasstring\",{\"1\":{\"65\":1,\"70\":1,\"71\":1}}],[\"getbindingresult\",{\"1\":{\"475\":1}}],[\"getbookinfo的ajax\",{\"1\":{\"443\":1}}],[\"getbodytofile\",{\"1\":{\"612\":1}}],[\"getbodystring\",{\"1\":{\"612\":1}}],[\"getbody\",{\"1\":{\"107\":1,\"110\":1,\"590\":1,\"612\":1}}],[\"getbeaninfo\",{\"1\":{\"298\":2}}],[\"getbytes\",{\"1\":{\"86\":2,\"89\":1,\"94\":1,\"97\":2,\"100\":3,\"622\":8}}],[\"getbyname\",{\"1\":{\"59\":1,\"60\":1,\"62\":1,\"63\":1,\"65\":1}}],[\"getbuckets\",{\"1\":{\"77\":1}}],[\"get\",{\"1\":{\"42\":1,\"48\":2,\"53\":1,\"57\":17,\"59\":3,\"60\":1,\"62\":1,\"63\":3,\"65\":4,\"70\":4,\"71\":1,\"74\":1,\"77\":3,\"113\":1,\"185\":3,\"186\":1,\"189\":1,\"221\":1,\"225\":1,\"266\":1,\"290\":1,\"298\":5,\"303\":2,\"304\":4,\"315\":1,\"324\":1,\"327\":6,\"337\":2,\"363\":3,\"385\":1,\"389\":2,\"419\":1,\"424\":1,\"444\":1,\"467\":4,\"480\":1,\"520\":2,\"599\":2,\"611\":1,\"612\":1,\"613\":1,\"614\":2,\"631\":1,\"642\":3}}],[\"geekuninstaller\",{\"1\":{\"7\":1}}],[\"geek\",{\"1\":{\"7\":1}}],[\"g\",{\"1\":{\"41\":1,\"212\":2}}],[\"greenwich\",{\"1\":{\"448\":3}}],[\"grep\",{\"1\":{\"243\":2,\"248\":1}}],[\"greasyfork\",{\"1\":{\"11\":1}}],[\"groups\",{\"1\":{\"357\":1}}],[\"groupname\",{\"1\":{\"357\":5,\"471\":1}}],[\"group\",{\"1\":{\"77\":4,\"223\":2,\"357\":4}}],[\"groupid>\",{\"1\":{\"58\":7,\"63\":3,\"74\":5,\"84\":1,\"113\":8,\"301\":1,\"369\":2,\"372\":1,\"375\":1,\"382\":1,\"383\":1,\"386\":1,\"399\":2,\"400\":1,\"406\":1,\"409\":2,\"410\":1,\"439\":1,\"470\":1,\"504\":4,\"505\":4,\"517\":7,\"543\":2,\"551\":4,\"558\":12,\"589\":4,\"590\":4,\"603\":1,\"609\":2,\"617\":6,\"665\":1}}],[\"grunt\",{\"1\":{\"41\":2}}],[\"gravity=\",{\"1\":{\"21\":1}}],[\"gravity\",{\"1\":{\"21\":2,\"26\":1}}],[\"gradlepluginportal\",{\"1\":{\"17\":1}}],[\"gradle或setting\",{\"1\":{\"17\":1}}],[\"gradle\",{\"1\":{\"17\":10}}],[\"gradle下载存放位置\",{\"1\":{\"16\":1}}],[\"gridlayout网格布局\",{\"1\":{\"20\":1}}],[\"软件测试时只需要对扩展的代码进行测试就可以了\",{\"1\":{\"626\":1}}],[\"软件遵守开闭原则的话\",{\"1\":{\"626\":1}}],[\"软件实体应当对扩展开放\",{\"1\":{\"626\":1}}],[\"软件设计模式\",{\"1\":{\"625\":1}}],[\"软件病毒检测\",{\"0\":{\"12\":1}}],[\"软件\",{\"0\":{\"7\":1}}],[\"软件收集\",{\"0\":{\"6\":1}}],[\"pkcs8encodedkeyspec\",{\"1\":{\"622\":5}}],[\"pkgs\",{\"1\":{\"5\":1}}],[\"pjp\",{\"1\":{\"545\":2}}],[\"peer3\",{\"1\":{\"367\":6}}],[\"peer2\",{\"1\":{\"367\":6}}],[\"peer1\",{\"1\":{\"367\":6}}],[\"permittednumberofcallsinhalfopenstate\",{\"1\":{\"382\":3,\"440\":2}}],[\"persist\",{\"1\":{\"363\":2}}],[\"personserviceimpl\",{\"1\":{\"544\":1,\"552\":1}}],[\"personservice\",{\"1\":{\"544\":2,\"552\":2}}],[\"personclass\",{\"1\":{\"293\":2,\"294\":4,\"295\":4,\"296\":2,\"298\":2}}],[\"person\",{\"1\":{\"290\":4,\"293\":8,\"294\":12,\"295\":7,\"296\":7,\"298\":1}}],[\"perl\",{\"1\":{\"238\":1}}],[\"pfmerge\",{\"1\":{\"354\":1}}],[\"pfcount\",{\"1\":{\"354\":1}}],[\"pfadd\",{\"1\":{\"354\":1}}],[\"phone\",{\"1\":{\"304\":3,\"491\":1}}],[\"pps\",{\"1\":{\"303\":8,\"304\":8}}],[\"pdefined\",{\"1\":{\"628\":1}}],[\"pd\",{\"1\":{\"298\":4,\"303\":2}}],[\"pdfview\",{\"1\":{\"573\":1}}],[\"pdf\",{\"1\":{\"7\":1}}],[\"pdfgear\",{\"1\":{\"7\":2}}],[\"pwd\",{\"1\":{\"266\":1}}],[\"pivot\",{\"1\":{\"341\":1,\"363\":3}}],[\"pid\",{\"1\":{\"248\":2}}],[\"pictures\",{\"1\":{\"619\":6}}],[\"picturerenderdata>\",{\"1\":{\"619\":2}}],[\"picturerenderdata>>\",{\"1\":{\"619\":2}}],[\"picturerenderdata\",{\"1\":{\"619\":3}}],[\"picture\",{\"1\":{\"10\":1}}],[\"pcre=\",{\"1\":{\"248\":2}}],[\"pcre\",{\"1\":{\"247\":5,\"248\":2}}],[\"pcre安装\",{\"0\":{\"247\":1}}],[\"p`mysql密码`\",{\"1\":{\"244\":3}}],[\"p>\",{\"1\":{\"146\":1,\"156\":6,\"165\":2,\"166\":1,\"167\":1,\"168\":1,\"170\":1,\"171\":1,\"174\":1,\"177\":1,\"466\":2}}],[\"ps\",{\"1\":{\"128\":1,\"248\":1,\"263\":1,\"283\":2,\"332\":1,\"467\":1,\"500\":1,\"515\":1,\"518\":1,\"519\":1,\"522\":1,\"524\":1,\"539\":1,\"564\":1,\"597\":1,\"622\":1,\"627\":1,\"628\":1,\"646\":1,\"647\":1,\"655\":1}}],[\"plan\",{\"1\":{\"238\":1}}],[\"placeholder=\",{\"1\":{\"223\":2}}],[\"placeholder\",{\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"561\":1,\"589\":1,\"590\":1}}],[\"plugins\",{\"1\":{\"233\":1,\"471\":1,\"561\":1}}],[\"plugins>\",{\"1\":{\"74\":1,\"113\":1,\"558\":1}}],[\"plugin>\",{\"1\":{\"74\":1,\"113\":1,\"558\":1}}],[\"plugin<\",{\"1\":{\"74\":1,\"113\":1,\"558\":1}}],[\"plugin\",{\"1\":{\"17\":2,\"243\":1,\"619\":1}}],[\"pluginmanagement\",{\"1\":{\"17\":1}}],[\"p\",{\"1\":{\"91\":1,\"332\":1,\"333\":1,\"400\":2,\"401\":3,\"419\":2,\"426\":1,\"628\":1}}],[\"purchase的\",{\"1\":{\"443\":1}}],[\"pu\",{\"1\":{\"420\":2}}],[\"pulldata\",{\"1\":{\"498\":1}}],[\"pulldatatask\",{\"1\":{\"498\":1}}],[\"pull\",{\"1\":{\"400\":1,\"401\":2}}],[\"pub\",{\"1\":{\"355\":1}}],[\"publish\",{\"0\":{\"92\":1},\"1\":{\"80\":2,\"102\":1}}],[\"publisher\",{\"1\":{\"80\":1,\"105\":3,\"106\":5,\"437\":1}}],[\"publickey\",{\"1\":{\"622\":15}}],[\"public<\",{\"1\":{\"116\":1}}],[\"public\",{\"1\":{\"17\":2,\"59\":3,\"60\":3,\"62\":3,\"63\":5,\"65\":2,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"74\":1,\"75\":1,\"76\":9,\"77\":6,\"84\":2,\"86\":4,\"87\":4,\"89\":4,\"90\":8,\"94\":6,\"95\":8,\"97\":6,\"98\":8,\"100\":6,\"101\":8,\"105\":3,\"106\":3,\"107\":4,\"109\":2,\"110\":2,\"113\":7,\"122\":3,\"134\":1,\"135\":1,\"214\":1,\"266\":3,\"272\":1,\"283\":7,\"284\":3,\"290\":4,\"291\":2,\"293\":1,\"294\":2,\"295\":2,\"296\":2,\"298\":1,\"303\":6,\"304\":8,\"326\":3,\"327\":7,\"362\":2,\"363\":58,\"368\":2,\"369\":2,\"372\":3,\"373\":3,\"376\":7,\"378\":1,\"382\":2,\"384\":1,\"385\":3,\"386\":1,\"389\":2,\"391\":3,\"392\":3,\"393\":1,\"405\":2,\"410\":2,\"416\":3,\"437\":13,\"438\":4,\"441\":3,\"442\":2,\"444\":2,\"445\":2,\"466\":1,\"467\":3,\"471\":2,\"472\":3,\"475\":6,\"479\":1,\"480\":8,\"481\":3,\"482\":3,\"486\":3,\"487\":8,\"491\":3,\"492\":3,\"493\":1,\"498\":2,\"504\":8,\"505\":4,\"518\":1,\"520\":3,\"521\":2,\"522\":5,\"544\":3,\"545\":6,\"552\":2,\"564\":2,\"589\":4,\"590\":4,\"595\":1,\"596\":1,\"597\":1,\"598\":1,\"599\":8,\"600\":5,\"605\":3,\"606\":1,\"611\":1,\"612\":7,\"613\":9,\"614\":4,\"618\":2,\"619\":3,\"622\":9,\"636\":1,\"637\":3,\"638\":2,\"639\":2,\"640\":2,\"641\":1,\"642\":3,\"646\":2,\"647\":2,\"653\":2,\"654\":9,\"655\":2,\"656\":2,\"659\":3,\"660\":10,\"662\":3,\"663\":2,\"664\":9,\"665\":3}}],[\"push\",{\"1\":{\"207\":1,\"224\":1,\"226\":1,\"316\":1}}],[\"putall\",{\"1\":{\"363\":1}}],[\"putmapping\",{\"1\":{\"76\":1,\"77\":1,\"579\":1}}],[\"put\",{\"1\":{\"42\":1,\"43\":1,\"44\":1,\"53\":1,\"57\":9,\"59\":2,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"185\":1,\"226\":1,\"304\":13,\"326\":5,\"327\":1,\"363\":1,\"389\":2,\"419\":1,\"424\":2,\"444\":1,\"599\":4,\"611\":1,\"613\":1,\"619\":3}}],[\"possible\",{\"1\":{\"630\":1}}],[\"post请求\",{\"1\":{\"614\":1}}],[\"post请求方式\",{\"1\":{\"613\":1}}],[\"post请求需要\",{\"1\":{\"266\":1}}],[\"posthandle\",{\"0\":{\"583\":1},\"1\":{\"585\":1}}],[\"postmapping\",{\"1\":{\"579\":1}}],[\"postforobject\",{\"1\":{\"389\":1}}],[\"postcss\",{\"1\":{\"214\":1}}],[\"postgresql\",{\"0\":{\"132\":1}}],[\"postprocessmessage\",{\"1\":{\"109\":1}}],[\"posttags\",{\"1\":{\"71\":1}}],[\"post\",{\"1\":{\"42\":1,\"44\":1,\"46\":1,\"49\":1,\"50\":1,\"53\":1,\"113\":1,\"185\":1,\"188\":1,\"224\":1,\"266\":1,\"389\":1,\"413\":1,\"419\":1,\"424\":1,\"444\":1,\"611\":1,\"613\":1,\"614\":2}}],[\"poi<\",{\"1\":{\"617\":3}}],[\"poi\",{\"0\":{\"617\":1},\"1\":{\"617\":3,\"618\":2,\"619\":5}}],[\"pointers\",{\"1\":{\"628\":1}}],[\"pointcut2\",{\"1\":{\"545\":2}}],[\"pointcut\",{\"1\":{\"540\":1,\"545\":11}}],[\"point\",{\"1\":{\"80\":2}}],[\"pojo\",{\"1\":{\"392\":1,\"511\":1}}],[\"popvalue\",{\"1\":{\"363\":1}}],[\"pop\",{\"1\":{\"316\":1,\"363\":3}}],[\"politics\",{\"1\":{\"304\":3}}],[\"policy=0\",{\"1\":{\"243\":1,\"256\":1}}],[\"pom添加依赖\",{\"1\":{\"383\":1}}],[\"pom依赖如下\",{\"1\":{\"74\":1}}],[\"pom导入依赖\",{\"1\":{\"63\":1,\"382\":1}}],[\"pom\",{\"1\":{\"58\":1,\"74\":2,\"84\":1,\"113\":3,\"301\":1,\"369\":1,\"504\":3,\"505\":3,\"589\":1,\"590\":1}}],[\"port>\",{\"1\":{\"558\":1}}],[\"port参数存在使⽤port参数\",{\"1\":{\"391\":1}}],[\"port=3306\",{\"1\":{\"252\":1}}],[\"port=\",{\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"589\":1,\"590\":1}}],[\"port=5672\",{\"1\":{\"105\":1,\"107\":1,\"589\":1,\"590\":1}}],[\"port\",{\"1\":{\"42\":1,\"59\":1,\"84\":2,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":1,\"213\":1,\"280\":6,\"283\":6,\"284\":2,\"367\":4,\"368\":1,\"391\":2,\"392\":1,\"405\":1,\"409\":1,\"410\":2,\"417\":1,\"440\":1,\"444\":1,\"445\":1,\"504\":1,\"505\":1,\"519\":1,\"589\":1,\"590\":1}}],[\"pooled\",{\"1\":{\"518\":2}}],[\"pool连接池\",{\"1\":{\"508\":1}}],[\"pool\",{\"1\":{\"5\":1,\"385\":1,\"561\":1}}],[\"packaging>\",{\"1\":{\"558\":1}}],[\"packaging\",{\"1\":{\"558\":1}}],[\"package\",{\"1\":{\"107\":1,\"214\":2,\"326\":1,\"327\":1,\"504\":1,\"505\":2,\"523\":1,\"546\":1,\"636\":1,\"637\":1,\"638\":1}}],[\"package=\",{\"1\":{\"107\":1,\"108\":1,\"546\":1,\"561\":1,\"562\":1}}],[\"pay\",{\"1\":{\"443\":1}}],[\"payment2\",{\"1\":{\"425\":1}}],[\"paymentcontroller\",{\"1\":{\"392\":1,\"410\":1,\"444\":1}}],[\"paymentclient\",{\"1\":{\"373\":4,\"376\":7}}],[\"payment\",{\"1\":{\"373\":10,\"376\":21,\"382\":13,\"384\":7,\"385\":2,\"386\":7,\"389\":11,\"392\":14,\"393\":1,\"399\":1,\"406\":1,\"410\":7,\"417\":2,\"425\":2,\"428\":2,\"429\":2,\"430\":3,\"431\":4,\"435\":1,\"438\":1,\"440\":1,\"444\":6}}],[\"pass\",{\"1\":{\"238\":1}}],[\"password=mysqluserpwd\",{\"1\":{\"559\":1}}],[\"password=root\",{\"1\":{\"519\":1}}],[\"password=\",{\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"589\":1,\"590\":1}}],[\"password=black\",{\"1\":{\"105\":1,\"107\":1,\"589\":1,\"590\":1}}],[\"password\",{\"1\":{\"84\":2,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"223\":1,\"243\":6,\"256\":3,\"266\":1,\"303\":2,\"304\":2,\"409\":1,\"410\":1,\"504\":1,\"505\":1,\"518\":2,\"524\":2,\"553\":1,\"561\":2,\"589\":1,\"590\":1}}],[\"pattern>\",{\"1\":{\"563\":2}}],[\"patterns\",{\"1\":{\"444\":1}}],[\"pattern=\",{\"1\":{\"109\":1,\"110\":2,\"589\":3}}],[\"pattern\",{\"1\":{\"91\":1,\"113\":1,\"346\":1,\"349\":1,\"351\":1,\"363\":3,\"466\":2,\"541\":12,\"625\":2}}],[\"path>\",{\"1\":{\"558\":1}}],[\"pathwithinapplication\",{\"1\":{\"438\":1,\"441\":1}}],[\"pathselectors\",{\"1\":{\"471\":2}}],[\"paths\",{\"1\":{\"405\":2,\"471\":1}}],[\"pathvariable\",{\"1\":{\"373\":2,\"376\":2,\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"389\":1,\"392\":3,\"410\":1,\"444\":1}}],[\"path中添加\",{\"1\":{\"263\":1}}],[\"path=\",{\"1\":{\"244\":1,\"248\":3,\"415\":1,\"417\":2,\"419\":1,\"425\":1,\"426\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"435\":2,\"438\":1,\"440\":1,\"445\":1,\"585\":2}}],[\"path||\",{\"1\":{\"139\":1}}],[\"path\",{\"1\":{\"42\":2,\"113\":3,\"122\":2,\"128\":6,\"139\":2,\"140\":3,\"203\":2,\"204\":2,\"205\":1,\"206\":1,\"207\":1,\"209\":2,\"219\":3,\"223\":1,\"224\":1,\"225\":2,\"226\":1,\"262\":1,\"416\":1,\"419\":1,\"425\":1,\"427\":1,\"472\":3,\"482\":2}}],[\"pageinterceptor\",{\"1\":{\"561\":1}}],[\"pagehelper<\",{\"1\":{\"558\":1}}],[\"pagehelper\",{\"1\":{\"558\":2,\"561\":1}}],[\"page\",{\"1\":{\"76\":2}}],[\"pagerequest\",{\"1\":{\"76\":3}}],[\"pageable\",{\"1\":{\"75\":4,\"76\":2}}],[\"parm\",{\"1\":{\"524\":2}}],[\"parsearray\",{\"1\":{\"606\":2}}],[\"parseobject\",{\"1\":{\"480\":1,\"599\":2,\"605\":4,\"606\":2}}],[\"parseint\",{\"1\":{\"327\":1}}],[\"parsedouble\",{\"1\":{\"327\":3}}],[\"parse\",{\"1\":{\"238\":1}}],[\"parsefromurl\",{\"1\":{\"113\":1}}],[\"param>\",{\"1\":{\"563\":4}}],[\"parametertype属性需要注意\",{\"1\":{\"524\":1}}],[\"parametertype=\",{\"1\":{\"524\":2}}],[\"parametertype\",{\"1\":{\"524\":3}}],[\"parametertypes\",{\"1\":{\"295\":2}}],[\"parameter\",{\"1\":{\"479\":1}}],[\"params来获取动态id\",{\"1\":{\"225\":1}}],[\"params\",{\"1\":{\"204\":3,\"205\":1,\"225\":1,\"226\":1,\"613\":2}}],[\"param\",{\"1\":{\"75\":6,\"105\":3,\"106\":5,\"113\":4,\"283\":1,\"303\":14,\"304\":17,\"327\":3,\"363\":63,\"416\":1,\"481\":5,\"487\":4,\"504\":2,\"521\":2,\"522\":1,\"541\":2,\"563\":4,\"599\":14,\"612\":1,\"613\":11,\"614\":3,\"618\":3,\"622\":11,\"637\":3,\"642\":1,\"653\":1,\"664\":2}}],[\"parent>\",{\"1\":{\"74\":1,\"113\":1,\"504\":1,\"505\":1}}],[\"parent<\",{\"1\":{\"74\":1,\"113\":1,\"504\":1,\"505\":1}}],[\"parent\",{\"1\":{\"21\":3,\"74\":1,\"113\":1,\"128\":12,\"137\":3,\"138\":3,\"139\":3,\"140\":3,\"195\":1}}],[\"pan666\",{\"1\":{\"13\":1}}],[\"principle\",{\"1\":{\"625\":5,\"627\":1,\"631\":1}}],[\"printf\",{\"1\":{\"590\":1}}],[\"printerstatereasons\",{\"1\":{\"320\":1}}],[\"printstream\",{\"1\":{\"283\":4,\"475\":2}}],[\"printstacktrace\",{\"1\":{\"84\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2,\"107\":1,\"110\":1,\"113\":1,\"283\":3,\"284\":1,\"291\":1,\"303\":6,\"304\":6,\"376\":1,\"382\":1,\"475\":1,\"520\":1,\"590\":1,\"663\":1}}],[\"printwriter\",{\"1\":{\"266\":2}}],[\"print\",{\"1\":{\"75\":1,\"622\":2}}],[\"println\",{\"1\":{\"63\":1,\"65\":6,\"70\":6,\"71\":5,\"76\":8,\"77\":2,\"86\":1,\"87\":4,\"89\":1,\"90\":8,\"94\":1,\"95\":8,\"98\":8,\"101\":8,\"105\":3,\"106\":1,\"107\":2,\"110\":3,\"266\":4,\"283\":2,\"284\":1,\"293\":1,\"294\":2,\"295\":1,\"296\":1,\"298\":1,\"505\":1,\"522\":1,\"544\":1,\"545\":11,\"552\":1,\"614\":1,\"622\":4,\"638\":1,\"639\":1,\"640\":1,\"641\":2,\"654\":3,\"659\":1,\"660\":5,\"663\":4,\"664\":4}}],[\"privacyserializer\",{\"1\":{\"492\":2,\"493\":2}}],[\"privacyencrypt\",{\"1\":{\"492\":8,\"493\":1}}],[\"privacytypeenum\",{\"1\":{\"491\":2,\"492\":5,\"493\":2}}],[\"privatekey\",{\"1\":{\"622\":15}}],[\"private\",{\"1\":{\"63\":3,\"65\":1,\"74\":3,\"76\":2,\"77\":7,\"84\":5,\"105\":1,\"106\":1,\"113\":2,\"122\":2,\"266\":1,\"283\":6,\"290\":2,\"294\":3,\"295\":1,\"296\":1,\"303\":8,\"304\":21,\"326\":5,\"327\":3,\"373\":1,\"385\":1,\"389\":2,\"392\":1,\"393\":1,\"410\":4,\"441\":1,\"444\":1,\"466\":6,\"471\":1,\"472\":3,\"482\":3,\"487\":4,\"492\":1,\"504\":1,\"520\":2,\"545\":3,\"589\":1,\"600\":2,\"612\":2,\"613\":1,\"619\":6,\"622\":3,\"636\":4,\"646\":2,\"647\":2,\"660\":2,\"664\":1,\"665\":1}}],[\"privileges\",{\"1\":{\"243\":1}}],[\"price\",{\"1\":{\"77\":6,\"480\":2}}],[\"primary\",{\"1\":{\"20\":1,\"39\":1}}],[\"prehandle\",{\"0\":{\"582\":1},\"1\":{\"480\":2,\"584\":1,\"585\":1}}],[\"precedence\",{\"1\":{\"437\":4,\"438\":1,\"441\":1}}],[\"pre\",{\"1\":{\"413\":1}}],[\"predicate\",{\"0\":{\"419\":1},\"1\":{\"413\":2,\"415\":2,\"419\":5,\"420\":1,\"421\":2,\"422\":1,\"423\":1}}],[\"predicates\",{\"1\":{\"413\":2,\"415\":2,\"417\":2,\"418\":5,\"420\":2,\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"426\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"435\":2,\"438\":1,\"440\":1,\"445\":1}}],[\"preservation\",{\"1\":{\"367\":1,\"368\":1}}],[\"prevent=\",{\"1\":{\"159\":1}}],[\"preventdefault\",{\"1\":{\"159\":1}}],[\"prevent\",{\"1\":{\"159\":2}}],[\"prefer\",{\"1\":{\"113\":1}}],[\"prefetch=\",{\"1\":{\"108\":2}}],[\"prefixnomasklen\",{\"1\":{\"492\":2,\"493\":1}}],[\"prefixpath=\",{\"1\":{\"427\":1,\"428\":1,\"429\":1,\"435\":1,\"438\":1}}],[\"prefixpath\",{\"0\":{\"428\":1},\"1\":{\"427\":1}}],[\"prefix\",{\"1\":{\"57\":2,\"263\":1,\"562\":1}}],[\"pretags\",{\"1\":{\"71\":1}}],[\"pretty=true\",{\"1\":{\"52\":2}}],[\"pretty\",{\"1\":{\"42\":1,\"52\":1}}],[\"preparestatement\",{\"1\":{\"303\":2,\"304\":2}}],[\"preparesearch\",{\"1\":{\"65\":1,\"70\":1,\"71\":1}}],[\"preparedstatement\",{\"1\":{\"303\":2,\"304\":2}}],[\"prepareindex\",{\"1\":{\"62\":1,\"63\":2}}],[\"prepareputmapping\",{\"1\":{\"60\":1}}],[\"preparecreate\",{\"1\":{\"59\":2}}],[\"prebuilttransportclient\",{\"1\":{\"59\":2,\"60\":1,\"62\":2,\"63\":2,\"65\":2}}],[\"programs\",{\"1\":{\"628\":1}}],[\"proceed\",{\"1\":{\"545\":3}}],[\"proceedingjoinpoint\",{\"1\":{\"545\":3}}],[\"prov\",{\"1\":{\"492\":3}}],[\"provider\",{\"1\":{\"320\":1}}],[\"probability\",{\"1\":{\"399\":2,\"400\":1}}],[\"product\",{\"1\":{\"636\":5,\"637\":10,\"638\":7,\"639\":6,\"640\":6,\"641\":5,\"642\":2}}],[\"producer<\",{\"1\":{\"504\":1}}],[\"producertest\",{\"1\":{\"86\":2,\"89\":2,\"94\":2,\"97\":2,\"100\":2,\"105\":1,\"106\":1,\"589\":1}}],[\"producer\",{\"1\":{\"86\":1,\"87\":2,\"89\":1,\"90\":4,\"94\":1,\"95\":8,\"97\":1,\"98\":8,\"100\":1,\"101\":12,\"104\":2}}],[\"prod\",{\"1\":{\"398\":1,\"405\":1}}],[\"profile\",{\"1\":{\"367\":3,\"404\":1,\"405\":4,\"406\":2}}],[\"profiles\",{\"1\":{\"367\":1,\"404\":1,\"405\":1,\"407\":2}}],[\"profile代替原来的spring\",{\"1\":{\"367\":1}}],[\"profession\",{\"1\":{\"304\":3}}],[\"protected\",{\"1\":{\"266\":3,\"280\":1,\"637\":2}}],[\"prototype\",{\"1\":{\"227\":1}}],[\"protocol\",{\"1\":{\"42\":1}}],[\"proxy\",{\"0\":{\"659\":1},\"1\":{\"262\":1,\"280\":2,\"415\":1,\"445\":1,\"540\":1,\"546\":1,\"660\":2,\"662\":3,\"663\":2,\"664\":3,\"665\":3}}],[\"propagation事务的传播\",{\"1\":{\"552\":1}}],[\"propagation\",{\"1\":{\"548\":7,\"552\":7}}],[\"property>\",{\"1\":{\"561\":2}}],[\"propertydescriptors\",{\"1\":{\"298\":2}}],[\"propertydescriptor\",{\"1\":{\"298\":2,\"303\":3}}],[\"property\",{\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"492\":5,\"523\":1,\"524\":1,\"561\":1,\"589\":1,\"590\":1}}],[\"properties或者\",{\"1\":{\"404\":1}}],[\"properties>\",{\"1\":{\"74\":1,\"84\":1,\"113\":1,\"369\":1,\"505\":1,\"558\":1}}],[\"properties\",{\"1\":{\"43\":1,\"44\":1,\"53\":1,\"57\":1,\"60\":1,\"87\":2,\"90\":2,\"95\":2,\"98\":2,\"101\":2,\"105\":3,\"106\":3,\"107\":3,\"108\":2,\"320\":1,\"518\":1,\"523\":2,\"559\":1,\"561\":2,\"589\":4,\"590\":4}}],[\"props属性\",{\"0\":{\"197\":1}}],[\"props\",{\"1\":{\"85\":1,\"86\":1,\"87\":1,\"197\":2}}],[\"projectlombok<\",{\"1\":{\"517\":1,\"558\":1,\"609\":1}}],[\"projects\",{\"1\":{\"247\":1}}],[\"project>\",{\"1\":{\"74\":1,\"113\":1,\"504\":1,\"505\":1}}],[\"project\",{\"1\":{\"17\":2,\"74\":1,\"113\":1,\"413\":2,\"558\":1}}],[\"png\",{\"1\":{\"9\":1}}],[\"rsa验签\",{\"1\":{\"622\":1}}],[\"rsa签名\",{\"1\":{\"622\":1}}],[\"rsa解密\",{\"1\":{\"622\":2}}],[\"rsa\",{\"1\":{\"622\":7}}],[\"rsa最大解密密文大小\",{\"1\":{\"622\":1}}],[\"rsa最大加密明文大小\",{\"1\":{\"622\":1}}],[\"rsautil\",{\"1\":{\"622\":1}}],[\"rsa加密\",{\"0\":{\"622\":1},\"1\":{\"622\":2}}],[\"rsaexception\",{\"1\":{\"475\":5,\"622\":3}}],[\"rule开头的时候\",{\"1\":{\"419\":1}}],[\"runnable\",{\"1\":{\"283\":1}}],[\"runner\",{\"1\":{\"76\":1,\"77\":1,\"105\":1,\"106\":1,\"107\":1,\"504\":1,\"505\":1,\"589\":1,\"590\":1}}],[\"runtimeexception\",{\"1\":{\"363\":1,\"475\":1,\"599\":4,\"622\":1,\"642\":1}}],[\"runtime\",{\"1\":{\"272\":2,\"289\":1,\"479\":1,\"493\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":1}}],[\"run\",{\"1\":{\"213\":2,\"283\":1,\"368\":1,\"369\":1,\"372\":1,\"391\":1,\"400\":1,\"401\":2,\"405\":1,\"416\":1,\"445\":1,\"564\":1}}],[\"runwith\",{\"1\":{\"76\":2,\"77\":2,\"105\":2,\"106\":2,\"107\":2,\"504\":2,\"505\":2,\"589\":2,\"590\":2}}],[\"r\",{\"1\":{\"396\":1,\"416\":1,\"511\":1}}],[\"r4的限流模块ratelimter基于滑动窗⼝\",{\"1\":{\"386\":1}}],[\"r4j提供了⾃定义的reactor和rx\",{\"1\":{\"381\":1}}],[\"r4j库还提供了失败重试和缓存调⽤结果的装饰器\",{\"1\":{\"381\":1}}],[\"rrem\",{\"1\":{\"343\":1}}],[\"rightpop\",{\"1\":{\"363\":4}}],[\"rightpushifpresent\",{\"1\":{\"363\":2}}],[\"rightpushall\",{\"1\":{\"363\":2}}],[\"rightpush\",{\"1\":{\"327\":1,\"363\":4}}],[\"right\",{\"1\":{\"341\":1}}],[\"rdb\",{\"1\":{\"331\":1}}],[\"rdf\",{\"1\":{\"56\":1}}],[\"rcvbuf选项\",{\"1\":{\"281\":1}}],[\"rcvbuf选项的值\",{\"1\":{\"281\":1}}],[\"rf\",{\"1\":{\"244\":1}}],[\"rpoplpush\",{\"1\":{\"343\":1}}],[\"rpop\",{\"1\":{\"341\":1,\"343\":2}}],[\"rpushx\",{\"1\":{\"341\":2}}],[\"rpush\",{\"1\":{\"324\":1,\"341\":2}}],[\"rpc远程调用模式\",{\"1\":{\"80\":1}}],[\"rpm\",{\"1\":{\"5\":1,\"233\":6,\"236\":2,\"242\":4,\"243\":4}}],[\"robert\",{\"1\":{\"627\":1}}],[\"rollbackfor\",{\"1\":{\"552\":1}}],[\"rollbackfor=\",{\"1\":{\"552\":1}}],[\"roleunresolvedlist\",{\"1\":{\"315\":1}}],[\"rolelist\",{\"1\":{\"315\":1}}],[\"root\",{\"1\":{\"243\":5,\"247\":1,\"248\":10,\"256\":2,\"262\":1,\"303\":2,\"304\":2}}],[\"rowpolicy\",{\"1\":{\"619\":3}}],[\"row\",{\"1\":{\"219\":1,\"303\":3,\"304\":3}}],[\"rows\",{\"1\":{\"30\":1}}],[\"routepredicate\",{\"1\":{\"425\":1}}],[\"routelocatorbuilder\",{\"1\":{\"416\":1,\"445\":1}}],[\"routelocator\",{\"1\":{\"416\":1,\"445\":1}}],[\"route\",{\"1\":{\"413\":1,\"416\":1,\"419\":1,\"420\":1,\"421\":2,\"422\":1,\"423\":2,\"432\":1,\"433\":1,\"434\":1,\"445\":2}}],[\"routes\",{\"1\":{\"203\":1,\"219\":1,\"415\":1,\"416\":1,\"417\":1,\"420\":2,\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"426\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"435\":1,\"438\":1,\"440\":1,\"445\":1}}],[\"router加入实例\",{\"1\":{\"219\":1}}],[\"router的基本用法\",{\"0\":{\"203\":1}}],[\"router来实现\",{\"1\":{\"202\":1}}],[\"router\",{\"0\":{\"202\":1,\"204\":1,\"205\":1,\"206\":1,\"207\":1,\"209\":1},\"1\":{\"202\":3,\"203\":7,\"204\":3,\"205\":6,\"208\":2,\"209\":1,\"214\":1,\"219\":8,\"220\":1,\"225\":1,\"229\":1}}],[\"routing模式要求队列在绑定交换机时要指定routing\",{\"1\":{\"96\":1}}],[\"routingkey\",{\"1\":{\"85\":1,\"86\":1,\"87\":1,\"94\":1,\"96\":3,\"97\":3,\"99\":2,\"100\":3,\"105\":3,\"106\":5,\"504\":3,\"589\":6}}],[\"routing路由模式\",{\"1\":{\"80\":1}}],[\"routing\",{\"0\":{\"96\":1},\"1\":{\"80\":2,\"96\":2,\"99\":1,\"102\":1,\"110\":2,\"589\":1}}],[\"rasexception\",{\"1\":{\"475\":1}}],[\"ratelimiter<\",{\"1\":{\"386\":1}}],[\"ratelimiter\",{\"0\":{\"386\":1},\"1\":{\"381\":1,\"386\":2}}],[\"rawkey\",{\"1\":{\"363\":2}}],[\"radius\",{\"1\":{\"353\":2}}],[\"randommember\",{\"1\":{\"363\":2}}],[\"randommembers\",{\"1\":{\"363\":2}}],[\"ranksortkey\",{\"1\":{\"327\":3}}],[\"rankputdata\",{\"1\":{\"327\":4}}],[\"rankkey\",{\"1\":{\"327\":5}}],[\"rank\",{\"1\":{\"327\":20}}],[\"range\",{\"1\":{\"57\":6,\"363\":2}}],[\"rabbitlistener\",{\"1\":{\"505\":2}}],[\"rabbit<\",{\"1\":{\"400\":1,\"589\":1,\"590\":1}}],[\"rabbittemplate\",{\"1\":{\"105\":8,\"106\":8,\"109\":1,\"504\":6,\"589\":10}}],[\"rabbit=\",{\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"589\":1,\"590\":1}}],[\"rabbit\",{\"1\":{\"80\":1,\"105\":9,\"106\":8,\"107\":6,\"108\":5,\"109\":4,\"110\":7,\"233\":1,\"400\":2,\"401\":1,\"504\":1,\"505\":1,\"589\":9,\"590\":5}}],[\"rabbitmqtest\",{\"1\":{\"504\":1}}],[\"rabbitmqconfig\",{\"1\":{\"504\":4}}],[\"rabbitmq<\",{\"1\":{\"84\":1}}],[\"rabbitmq的使用\",{\"0\":{\"84\":1}}],[\"rabbitmq也有类似的权限管理\",{\"1\":{\"83\":1}}],[\"rabbitmq提供了6种模式\",{\"1\":{\"80\":1}}],[\"rabbitmq相关概念\",{\"1\":{\"80\":1}}],[\"rabbitmq架构\",{\"1\":{\"80\":1}}],[\"rabbitmq官方地址\",{\"1\":{\"80\":1}}],[\"rabbitmq\",{\"0\":{\"80\":1,\"81\":1,\"232\":1,\"503\":1,\"588\":1},\"1\":{\"80\":9,\"82\":1,\"83\":1,\"84\":5,\"86\":3,\"87\":3,\"89\":3,\"90\":6,\"94\":4,\"95\":4,\"97\":4,\"98\":4,\"100\":4,\"101\":4,\"104\":3,\"105\":12,\"106\":7,\"107\":15,\"108\":7,\"110\":1,\"233\":6,\"234\":7,\"400\":7,\"401\":1,\"409\":1,\"410\":1,\"504\":2,\"505\":2,\"589\":14,\"590\":14}}],[\"reource\",{\"1\":{\"523\":1}}],[\"rewritepath过滤器将路径重写为\",{\"1\":{\"430\":1}}],[\"rewritepath=\",{\"1\":{\"427\":1,\"430\":1}}],[\"rewritepath\",{\"0\":{\"430\":1},\"1\":{\"427\":1}}],[\"rectangle\",{\"1\":{\"653\":1,\"654\":3,\"655\":1}}],[\"received\",{\"1\":{\"396\":2}}],[\"recored\",{\"1\":{\"382\":1}}],[\"recordexception\",{\"1\":{\"382\":1}}],[\"recordexceptions\",{\"1\":{\"382\":2,\"440\":1}}],[\"recursive\",{\"1\":{\"128\":4,\"137\":1,\"138\":1,\"139\":1,\"140\":1}}],[\"reids\",{\"1\":{\"332\":1}}],[\"remote\",{\"1\":{\"331\":1}}],[\"removerequestparameter=red\",{\"1\":{\"433\":1}}],[\"removerequestparameter\",{\"0\":{\"433\":1},\"1\":{\"433\":1}}],[\"removerequestheader=x\",{\"1\":{\"432\":1}}],[\"removerequestheader\",{\"0\":{\"432\":1},\"1\":{\"427\":1,\"432\":1}}],[\"removelast\",{\"1\":{\"316\":1}}],[\"removefirst\",{\"1\":{\"316\":1}}],[\"remove\",{\"1\":{\"314\":1,\"315\":1,\"363\":2,\"520\":1}}],[\"reason\",{\"1\":{\"627\":1}}],[\"reasonable\",{\"1\":{\"561\":1}}],[\"reached\",{\"1\":{\"448\":1}}],[\"reactor\",{\"1\":{\"413\":2,\"437\":1,\"439\":1}}],[\"rear\",{\"1\":{\"309\":1}}],[\"readlistener<t>\",{\"1\":{\"600\":1}}],[\"readlistener\",{\"1\":{\"600\":1}}],[\"readline\",{\"1\":{\"233\":1,\"284\":1}}],[\"readrowholder\",{\"1\":{\"599\":1}}],[\"readworkbookholder\",{\"1\":{\"599\":2,\"600\":1}}],[\"readcelldata<\",{\"1\":{\"599\":2,\"600\":1}}],[\"readcelldata\",{\"1\":{\"599\":1,\"600\":1}}],[\"readonly\",{\"1\":{\"552\":1}}],[\"reader\",{\"1\":{\"520\":5}}],[\"readtimeout\",{\"1\":{\"374\":3}}],[\"read\",{\"1\":{\"244\":2,\"547\":4,\"600\":1}}],[\"reuseaddr套接字选项\",{\"1\":{\"281\":1}}],[\"reuseaddr\",{\"1\":{\"281\":1}}],[\"ret\",{\"1\":{\"541\":2}}],[\"retry\",{\"1\":{\"381\":1}}],[\"retentionpolicy\",{\"1\":{\"272\":2,\"479\":1,\"493\":2,\"595\":1,\"596\":1,\"597\":1,\"598\":1}}],[\"retention参数\",{\"1\":{\"272\":1}}],[\"retention\",{\"1\":{\"271\":1,\"272\":1,\"479\":1,\"493\":2,\"595\":1,\"596\":1,\"597\":1,\"598\":1}}],[\"returning\",{\"1\":{\"545\":3}}],[\"returnedmessage\",{\"1\":{\"106\":1}}],[\"returns=\",{\"1\":{\"106\":3}}],[\"returncallback\",{\"1\":{\"104\":1,\"106\":2}}],[\"return\",{\"1\":{\"75\":3,\"84\":1,\"104\":1,\"106\":1,\"109\":1,\"113\":6,\"156\":1,\"175\":2,\"176\":2,\"178\":1,\"183\":1,\"193\":1,\"194\":1,\"197\":1,\"221\":1,\"224\":1,\"303\":11,\"304\":12,\"326\":2,\"327\":5,\"362\":1,\"363\":44,\"372\":1,\"373\":1,\"376\":3,\"378\":1,\"382\":2,\"384\":1,\"385\":2,\"386\":1,\"389\":1,\"391\":1,\"392\":2,\"393\":1,\"410\":1,\"416\":2,\"437\":13,\"438\":4,\"441\":2,\"442\":1,\"444\":1,\"471\":2,\"475\":3,\"480\":1,\"481\":5,\"487\":8,\"492\":6,\"504\":3,\"520\":2,\"522\":2,\"545\":2,\"564\":1,\"599\":16,\"600\":1,\"612\":6,\"613\":15,\"614\":7,\"618\":2,\"619\":2,\"622\":10,\"637\":4,\"638\":2,\"639\":2,\"640\":2,\"642\":4,\"646\":2,\"647\":1,\"653\":1,\"654\":3,\"655\":1,\"663\":1,\"664\":3,\"665\":2}}],[\"reqest\",{\"1\":{\"419\":1}}],[\"req\",{\"1\":{\"266\":23}}],[\"requires\",{\"1\":{\"548\":1,\"552\":1}}],[\"required\",{\"1\":{\"548\":1,\"552\":2}}],[\"requiredargsconstructor\",{\"1\":{\"122\":1,\"472\":2,\"482\":2,\"498\":1,\"564\":1}}],[\"requirenonnull\",{\"1\":{\"475\":1,\"655\":1}}],[\"requestconfig\",{\"1\":{\"613\":2}}],[\"requestattributes\",{\"1\":{\"481\":2}}],[\"requesthandlerselectors\",{\"1\":{\"471\":2}}],[\"requestparam\",{\"1\":{\"113\":2}}],[\"requestmethod\",{\"1\":{\"113\":3,\"579\":2}}],[\"requestmapping\",{\"0\":{\"579\":1},\"1\":{\"113\":3,\"389\":1,\"392\":2,\"410\":2,\"444\":1,\"564\":1,\"579\":1}}],[\"request\",{\"1\":{\"113\":1,\"377\":2,\"382\":1,\"419\":1,\"421\":2,\"426\":1,\"432\":1,\"434\":1,\"480\":5,\"481\":3,\"613\":11,\"614\":7}}],[\"requeue=false\",{\"1\":{\"110\":3}}],[\"requeue\",{\"1\":{\"107\":2}}],[\"renderinghints\",{\"1\":{\"320\":1}}],[\"render\",{\"1\":{\"219\":1,\"618\":1}}],[\"renewal\",{\"1\":{\"113\":1,\"367\":1}}],[\"references\",{\"1\":{\"628\":1}}],[\"refid\",{\"1\":{\"524\":1}}],[\"refreshscope\",{\"1\":{\"410\":1}}],[\"refreshscope注解刷新更改的配置\",{\"1\":{\"410\":1}}],[\"refresh\",{\"1\":{\"409\":2}}],[\"refresh端点\",{\"1\":{\"409\":1}}],[\"reflection\",{\"1\":{\"467\":1}}],[\"reflectiontest$student\",{\"1\":{\"291\":1}}],[\"reflect\",{\"1\":{\"303\":3,\"304\":1,\"599\":1,\"664\":3,\"665\":1}}],[\"ref属性\",{\"0\":{\"179\":1}}],[\"ref=\",{\"1\":{\"107\":1,\"108\":1,\"179\":1,\"553\":1,\"561\":2,\"590\":6}}],[\"redis等存储⽅式\",{\"1\":{\"407\":1}}],[\"rediskey\",{\"1\":{\"363\":3}}],[\"redisserializer<string>\",{\"1\":{\"362\":1}}],[\"redisserializer\",{\"1\":{\"362\":6}}],[\"redisscore\",{\"1\":{\"327\":3}}],[\"redistemplate<>\",{\"1\":{\"362\":1}}],[\"redistemplate<string\",{\"1\":{\"362\":2,\"363\":2}}],[\"redistemplate\",{\"1\":{\"362\":2,\"363\":20}}],[\"redisconfig\",{\"1\":{\"362\":1}}],[\"redisconfigbean配置\",{\"0\":{\"362\":1}}],[\"redisconnectionfactory\",{\"1\":{\"362\":2,\"363\":2}}],[\"redis工具类\",{\"0\":{\"361\":1}}],[\"redis工具类不会写的可以去看redisutil工具类\",{\"1\":{\"325\":1}}],[\"redis4\",{\"1\":{\"349\":1}}],[\"redis是将所有的数据全部放在内存中的\",{\"1\":{\"334\":1}}],[\"redis为什么单线程还很快\",{\"1\":{\"334\":1}}],[\"redis默认存在16个数据库\",{\"1\":{\"334\":1}}],[\"redis默认不是后台启动的\",{\"1\":{\"332\":1}}],[\"redis命令参数\",{\"1\":{\"333\":1}}],[\"redis的默认安装路径\",{\"1\":{\"332\":1}}],[\"redis推荐都是再linux服务器上搭建的\",{\"1\":{\"331\":1}}],[\"redis中需要push的数据\",{\"1\":{\"327\":1}}],[\"redisexamuser\",{\"1\":{\"327\":7}}],[\"redisutil工具类\",{\"0\":{\"363\":1}}],[\"redisutil\",{\"1\":{\"327\":15,\"363\":7,\"480\":1}}],[\"redis\",{\"0\":{\"330\":1,\"336\":1,\"679\":1},\"1\":{\"327\":3,\"331\":5,\"332\":8,\"333\":3,\"334\":1,\"353\":2,\"354\":2,\"355\":6,\"358\":1,\"362\":4,\"363\":3,\"480\":1},\"2\":{\"328\":1,\"359\":1,\"360\":1,\"364\":1,\"509\":1}}],[\"redisrankdto\",{\"1\":{\"326\":1,\"327\":3}}],[\"redis设计实时排行榜\",{\"0\":{\"323\":1}}],[\"redirectto\",{\"1\":{\"427\":1}}],[\"redirect\",{\"1\":{\"206\":1}}],[\"red\",{\"1\":{\"168\":1,\"169\":1,\"434\":1}}],[\"reversedmessage\",{\"1\":{\"183\":1}}],[\"reversemessage\",{\"1\":{\"183\":1}}],[\"reverse\",{\"1\":{\"156\":1,\"183\":1}}],[\"regex\",{\"1\":{\"491\":4,\"492\":3,\"493\":1}}],[\"register\",{\"1\":{\"367\":1,\"368\":1,\"369\":1}}],[\"registry\",{\"1\":{\"122\":6,\"263\":2,\"367\":1,\"368\":1,\"369\":1,\"472\":7,\"482\":2}}],[\"region\",{\"1\":{\"363\":4,\"470\":1}}],[\"regdate\",{\"1\":{\"304\":3}}],[\"regclass\",{\"1\":{\"135\":2}}],[\"repeatable\",{\"1\":{\"270\":1,\"547\":1}}],[\"replaceall\",{\"1\":{\"492\":2}}],[\"replacement\",{\"1\":{\"491\":4,\"492\":3,\"493\":1}}],[\"replytext\",{\"1\":{\"106\":2}}],[\"replycode\",{\"1\":{\"106\":2}}],[\"replicas\",{\"0\":{\"39\":1}}],[\"repo\",{\"1\":{\"17\":2,\"116\":1,\"405\":2,\"407\":1}}],[\"repos\",{\"1\":{\"17\":1}}],[\"repositoriesmode\",{\"1\":{\"17\":2}}],[\"repositories\",{\"1\":{\"17\":2}}],[\"repository\",{\"1\":{\"3\":1,\"17\":10,\"74\":1,\"75\":1,\"77\":1,\"113\":1,\"116\":2,\"263\":1,\"398\":1,\"539\":2}}],[\"res=\",{\"1\":{\"545\":1}}],[\"resolveargument\",{\"1\":{\"481\":2}}],[\"resolvers\",{\"1\":{\"482\":2}}],[\"resolver\",{\"1\":{\"472\":1}}],[\"resource=\",{\"1\":{\"518\":1}}],[\"resource文件夹中创建\",{\"1\":{\"518\":1}}],[\"resource\",{\"1\":{\"184\":1,\"523\":1,\"538\":2}}],[\"resourcehandlerregistry\",{\"1\":{\"122\":1,\"472\":2,\"482\":1}}],[\"resources中⼀个访问第三⽅restful\",{\"1\":{\"389\":1}}],[\"resources\",{\"0\":{\"513\":1},\"1\":{\"122\":4,\"472\":4,\"482\":2,\"513\":1,\"520\":2,\"562\":1}}],[\"resilience4j提供了两种隔离的实现⽅式\",{\"1\":{\"383\":1}}],[\"resilience4j提供了提供了⼀组⾼阶函数\",{\"1\":{\"381\":1}}],[\"resilience4j和hystrix的异同\",{\"1\":{\"381\":1}}],[\"resilience4j是受到netflix\",{\"1\":{\"381\":1}}],[\"resilience4j\",{\"0\":{\"381\":1},\"1\":{\"381\":5,\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"439\":1,\"440\":1}}],[\"resilience4j<\",{\"1\":{\"375\":1,\"382\":1,\"383\":1,\"386\":1,\"439\":1}}],[\"responsibility\",{\"1\":{\"625\":1,\"627\":1}}],[\"responsebo<>\",{\"1\":{\"487\":1}}],[\"responsebo<t>\",{\"1\":{\"487\":7}}],[\"responsebo<\",{\"1\":{\"475\":3,\"487\":2}}],[\"responsebody\",{\"0\":{\"577\":1},\"1\":{\"475\":2,\"564\":1,\"576\":1,\"578\":1}}],[\"responsebo\",{\"1\":{\"475\":4,\"487\":1}}],[\"response\",{\"1\":{\"377\":1,\"475\":2,\"480\":1,\"614\":3}}],[\"responseentity<>\",{\"1\":{\"382\":1}}],[\"responseentity<payment>\",{\"1\":{\"373\":1,\"382\":2,\"384\":1,\"385\":1,\"386\":1,\"389\":1,\"392\":2,\"410\":1,\"444\":1}}],[\"responseentity<string>\",{\"1\":{\"113\":2}}],[\"responseentity\",{\"1\":{\"113\":3,\"373\":1,\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"389\":1,\"392\":3,\"410\":1,\"442\":2,\"444\":1}}],[\"resp\",{\"1\":{\"266\":16}}],[\"resttemplate是⽤来消费rest服务的\",{\"1\":{\"389\":1}}],[\"resttemplate是spring\",{\"1\":{\"389\":1}}],[\"resttemplate的设计原则和其他的spring\",{\"1\":{\"389\":1}}],[\"resttemplate\",{\"0\":{\"389\":1},\"1\":{\"372\":3,\"382\":1,\"384\":1,\"386\":1,\"389\":4,\"391\":4,\"392\":1}}],[\"restart\",{\"1\":{\"234\":1}}],[\"restful规则\",{\"1\":{\"221\":1}}],[\"restcontrolleradvice\",{\"1\":{\"475\":2}}],[\"restcontroller\",{\"0\":{\"578\":1},\"1\":{\"113\":2,\"389\":1,\"392\":2,\"442\":1,\"444\":1}}],[\"res响应体\",{\"1\":{\"185\":1}}],[\"result=\",{\"1\":{\"545\":1}}],[\"result=false\",{\"1\":{\"545\":1}}],[\"resultmaper的返回类型\",{\"1\":{\"524\":1}}],[\"resultmap\",{\"1\":{\"524\":5}}],[\"resulttype\",{\"1\":{\"524\":3}}],[\"resulttype=\",{\"1\":{\"521\":1}}],[\"resultcode\",{\"1\":{\"475\":3,\"486\":2,\"487\":7}}],[\"resultset\",{\"1\":{\"303\":14,\"304\":15}}],[\"result\",{\"1\":{\"113\":5,\"186\":2,\"187\":1,\"221\":2,\"222\":2,\"224\":2,\"225\":2,\"226\":2,\"524\":2,\"545\":5,\"614\":4,\"622\":2,\"655\":3}}],[\"resuful\",{\"0\":{\"42\":1}}],[\"res\",{\"1\":{\"21\":1,\"185\":1,\"188\":2,\"189\":2,\"545\":1}}],[\"rele\",{\"1\":{\"419\":1}}],[\"release\",{\"1\":{\"454\":1}}],[\"release<\",{\"1\":{\"74\":1,\"504\":1,\"505\":1,\"517\":3,\"543\":2,\"558\":1,\"589\":3,\"590\":3}}],[\"releases\",{\"1\":{\"7\":4,\"17\":2,\"259\":1}}],[\"relation\",{\"1\":{\"511\":1}}],[\"relational\",{\"1\":{\"30\":1}}],[\"relativcelayout相对布局\",{\"1\":{\"20\":1}}],[\"lkp\",{\"1\":{\"631\":1}}],[\"lky\",{\"1\":{\"7\":2}}],[\"lw\",{\"1\":{\"500\":1}}],[\"ld\",{\"1\":{\"419\":1}}],[\"lb\",{\"1\":{\"417\":1}}],[\"lrem\",{\"1\":{\"343\":1}}],[\"lremove\",{\"1\":{\"327\":1}}],[\"lrange\",{\"1\":{\"342\":1}}],[\"lsp\",{\"0\":{\"628\":1},\"1\":{\"625\":1}}],[\"lset\",{\"1\":{\"341\":1}}],[\"ls查看\",{\"1\":{\"263\":1}}],[\"llen\",{\"1\":{\"341\":1}}],[\"lpop\",{\"1\":{\"341\":1,\"343\":2}}],[\"lpushx\",{\"1\":{\"341\":2}}],[\"lpush\",{\"1\":{\"341\":4}}],[\"l\",{\"1\":{\"244\":1,\"500\":1}}],[\"ltrim\",{\"1\":{\"345\":1}}],[\"lt\",{\"1\":{\"244\":1}}],[\"lte\",{\"1\":{\"57\":5}}],[\"lnitializr方式创建\",{\"1\":{\"368\":1,\"405\":1,\"445\":1}}],[\"ln\",{\"1\":{\"238\":2}}],[\"lx\",{\"1\":{\"209\":2}}],[\"lf6\",{\"1\":{\"123\":2}}],[\"liskov\",{\"1\":{\"625\":1}}],[\"list2\",{\"1\":{\"606\":2}}],[\"list1\",{\"1\":{\"606\":2}}],[\"listlength\",{\"1\":{\"363\":1}}],[\"listkey\",{\"1\":{\"363\":10}}],[\"list类型\",{\"1\":{\"363\":2}}],[\"listoperations\",{\"1\":{\"363\":13}}],[\"listoperations<string\",{\"1\":{\"363\":1}}],[\"list的实现类\",{\"1\":{\"315\":1}}],[\"list接口\",{\"0\":{\"315\":1}}],[\"list由一系列结点node\",{\"1\":{\"311\":1}}],[\"listener>\",{\"1\":{\"563\":1}}],[\"listener\",{\"1\":{\"107\":6,\"108\":4,\"505\":1,\"563\":1,\"590\":9,\"600\":1}}],[\"list<qchandler>\",{\"1\":{\"642\":1}}],[\"list<namevaluepair>\",{\"1\":{\"613\":1}}],[\"list<integer>\",{\"1\":{\"524\":1,\"606\":2}}],[\"list<userworddemo>\",{\"1\":{\"619\":3}}],[\"list<users>\",{\"1\":{\"524\":1}}],[\"list<user>\",{\"1\":{\"521\":1,\"522\":3}}],[\"list<handlermethodargumentresolver>\",{\"1\":{\"482\":1}}],[\"list<serviceinstance>\",{\"1\":{\"389\":1}}],[\"list<string>>\",{\"1\":{\"599\":2}}],[\"list<string>\",{\"1\":{\"122\":1,\"327\":3,\"363\":10,\"472\":1,\"482\":1,\"599\":4,\"600\":1,\"619\":1}}],[\"list<stringterms\",{\"1\":{\"77\":1}}],[\"list<map<string\",{\"1\":{\"327\":2,\"619\":2}}],[\"list<map\",{\"1\":{\"327\":1}}],[\"list<e>\",{\"1\":{\"316\":1}}],[\"list<object>\",{\"1\":{\"303\":2}}],[\"list<t>\",{\"1\":{\"303\":4,\"304\":4,\"600\":2}}],[\"list<\",{\"1\":{\"303\":3,\"304\":9}}],[\"list<article>\",{\"1\":{\"75\":3}}],[\"list\",{\"0\":{\"341\":1},\"1\":{\"75\":1,\"77\":1,\"113\":1,\"154\":1,\"186\":1,\"189\":1,\"219\":1,\"221\":3,\"261\":2,\"262\":3,\"303\":16,\"304\":13,\"316\":2,\"317\":1,\"327\":4,\"363\":1,\"472\":1,\"482\":1,\"521\":1,\"522\":2,\"524\":4,\"599\":7,\"600\":1,\"606\":8,\"613\":1,\"619\":2,\"642\":1}}],[\"lifestatus\",{\"1\":{\"448\":1}}],[\"limitforperiod\",{\"1\":{\"386\":2}}],[\"limitrefreshperiod\",{\"1\":{\"386\":2}}],[\"limit\",{\"1\":{\"351\":2}}],[\"lib下的类库\",{\"1\":{\"289\":1}}],[\"libtool\",{\"1\":{\"246\":1}}],[\"libtinfo\",{\"1\":{\"239\":2}}],[\"libs\",{\"1\":{\"242\":1,\"243\":1}}],[\"libssl\",{\"1\":{\"238\":2}}],[\"libcrypto\",{\"1\":{\"238\":2}}],[\"lib64\",{\"1\":{\"238\":4,\"239\":1}}],[\"lib\",{\"1\":{\"233\":2,\"289\":1}}],[\"li\",{\"1\":{\"219\":1}}],[\"li>\",{\"1\":{\"161\":2,\"163\":2}}],[\"live消息过期时间设置\",{\"1\":{\"109\":1}}],[\"like=\",{\"1\":{\"185\":1,\"189\":1}}],[\"like\",{\"1\":{\"76\":1,\"243\":1,\"256\":1}}],[\"lindex\",{\"1\":{\"342\":1}}],[\"linsert\",{\"1\":{\"341\":1}}],[\"linger\",{\"1\":{\"281\":2}}],[\"linger的设置\",{\"1\":{\"281\":1}}],[\"lingma\",{\"1\":{\"8\":1}}],[\"linux安装\",{\"0\":{\"332\":1}}],[\"linux\",{\"0\":{\"675\":1},\"1\":{\"248\":2},\"2\":{\"235\":1,\"240\":1,\"245\":1,\"249\":1}}],[\"lintonsave\",{\"1\":{\"213\":1}}],[\"linkedhashmap\",{\"1\":{\"320\":2}}],[\"linkedhashset\",{\"1\":{\"317\":1}}],[\"linkedlist<e>\",{\"1\":{\"316\":1}}],[\"linkedlist集合\",{\"0\":{\"316\":1}}],[\"linkedlist\",{\"1\":{\"315\":1,\"316\":2}}],[\"linked\",{\"1\":{\"311\":1}}],[\"linkactiveclass\",{\"1\":{\"229\":1}}],[\"link上的tag属性\",{\"1\":{\"219\":1}}],[\"link和router\",{\"1\":{\"209\":2}}],[\"link>\",{\"1\":{\"203\":2,\"204\":2,\"205\":5,\"219\":1,\"225\":1}}],[\"link\",{\"1\":{\"203\":3,\"204\":2,\"205\":5,\"208\":2,\"219\":2,\"225\":1}}],[\"links\",{\"1\":{\"4\":1}}],[\"linearlayout>\",{\"1\":{\"21\":1}}],[\"linearlayout线性布局\",{\"0\":{\"21\":1},\"1\":{\"20\":1}}],[\"line\",{\"1\":{\"4\":1}}],[\"least\",{\"1\":{\"631\":1}}],[\"lease\",{\"1\":{\"113\":2,\"367\":2}}],[\"leave\",{\"1\":{\"210\":3}}],[\"leftpop\",{\"1\":{\"363\":4}}],[\"leftpushall\",{\"1\":{\"363\":2}}],[\"leftpush\",{\"1\":{\"363\":4}}],[\"left\",{\"1\":{\"167\":1,\"341\":1}}],[\"lettuce\",{\"1\":{\"508\":1}}],[\"letter\",{\"1\":{\"110\":5}}],[\"letterlike\",{\"1\":{\"11\":1}}],[\"let\",{\"1\":{\"154\":1,\"155\":1,\"203\":2,\"204\":1}}],[\"level取值\",{\"1\":{\"378\":1}}],[\"level\",{\"1\":{\"113\":1,\"378\":4,\"629\":2}}],[\"lengthqchandler\",{\"1\":{\"636\":1,\"638\":1,\"641\":6,\"642\":2}}],[\"length=1\",{\"1\":{\"243\":1,\"256\":1}}],[\"length\",{\"1\":{\"110\":2,\"303\":1,\"545\":1,\"599\":2,\"622\":4,\"636\":1}}],[\"lessthanequal\",{\"1\":{\"73\":1}}],[\"low\",{\"1\":{\"629\":1}}],[\"lod\",{\"0\":{\"631\":1},\"1\":{\"625\":1,\"631\":1}}],[\"looprowtablerenderpolicy\",{\"1\":{\"619\":3}}],[\"loopback\",{\"1\":{\"233\":1}}],[\"lookup\",{\"1\":{\"74\":1,\"113\":1}}],[\"lock\",{\"1\":{\"214\":1}}],[\"localimgpath\",{\"1\":{\"619\":2}}],[\"localdatetime\",{\"1\":{\"466\":3,\"467\":3}}],[\"localport\",{\"1\":{\"280\":2}}],[\"localaddr\",{\"1\":{\"280\":2}}],[\"local\",{\"1\":{\"238\":2,\"244\":5,\"332\":3,\"405\":1,\"467\":5,\"480\":1,\"520\":5,\"563\":1}}],[\"localhost\",{\"1\":{\"41\":1,\"42\":1,\"185\":5,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"221\":1,\"222\":1,\"224\":1,\"225\":1,\"226\":1,\"228\":2,\"243\":3,\"256\":2,\"284\":2,\"333\":1,\"401\":2,\"406\":3,\"415\":1,\"419\":3,\"421\":1,\"422\":1,\"423\":2,\"424\":1,\"425\":2,\"427\":2,\"429\":1,\"430\":2,\"431\":2}}],[\"locations\",{\"1\":{\"107\":1,\"407\":1,\"589\":1,\"590\":1}}],[\"location=\",{\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"561\":1,\"562\":1,\"589\":1,\"590\":1}}],[\"loader\",{\"1\":{\"662\":1}}],[\"loadblancerclient\",{\"0\":{\"393\":1}}],[\"loadbalancerclient\",{\"1\":{\"393\":3}}],[\"loadbalancerclient可以获取负载均衡的服务提供者实例信息\",{\"1\":{\"393\":1}}],[\"loadbalancer整合resttemplate\",{\"0\":{\"391\":1}}],[\"loadbalancer作为服务消费者的负载均衡器\",{\"1\":{\"390\":1}}],[\"loadbalancer是spring\",{\"1\":{\"390\":1}}],[\"loadbalancer\",{\"0\":{\"390\":1},\"1\":{\"390\":1}}],[\"loadbalancer和spring\",{\"1\":{\"372\":1}}],[\"loadbalanced\",{\"1\":{\"372\":1,\"391\":1}}],[\"loadonstartup\",{\"1\":{\"266\":2}}],[\"loadhero\",{\"1\":{\"225\":2}}],[\"loaddata\",{\"1\":{\"221\":2}}],[\"load\",{\"1\":{\"146\":1,\"393\":1,\"655\":1}}],[\"load效果\",{\"1\":{\"146\":1}}],[\"loadtest\",{\"1\":{\"146\":4}}],[\"lombok\",{\"1\":{\"120\":2,\"304\":1,\"326\":4,\"437\":1,\"466\":2,\"467\":1,\"472\":1,\"475\":1,\"480\":1,\"481\":1,\"482\":1,\"487\":1,\"492\":3,\"498\":2,\"517\":1,\"558\":4,\"564\":1,\"600\":1,\"612\":2,\"614\":1,\"619\":2,\"636\":2}}],[\"lombok错误\",{\"0\":{\"119\":1}}],[\"log4j\",{\"1\":{\"558\":1}}],[\"log4j<\",{\"1\":{\"58\":1}}],[\"logger\",{\"1\":{\"378\":4}}],[\"logging\",{\"1\":{\"58\":1,\"113\":1,\"378\":1}}],[\"logs\",{\"1\":{\"252\":1}}],[\"log=\",{\"1\":{\"244\":1}}],[\"loginname\",{\"1\":{\"266\":1,\"524\":2}}],[\"login\",{\"1\":{\"122\":1,\"472\":1,\"482\":1}}],[\"log\",{\"1\":{\"113\":1,\"154\":3,\"155\":2,\"179\":1,\"189\":1,\"190\":1,\"204\":1,\"243\":4,\"244\":2,\"252\":1,\"382\":2,\"384\":2,\"385\":2,\"386\":2,\"410\":1,\"437\":7,\"438\":4,\"441\":1,\"475\":4,\"480\":2,\"481\":1,\"605\":4,\"606\":6,\"612\":1}}],[\"longer\",{\"1\":{\"448\":1}}],[\"longitude\",{\"1\":{\"353\":3}}],[\"long>\",{\"1\":{\"75\":1,\"77\":1}}],[\"long\",{\"1\":{\"43\":1,\"44\":1,\"53\":1,\"57\":1,\"74\":1,\"77\":3,\"107\":2,\"110\":1,\"327\":1,\"363\":19,\"466\":1,\"480\":1}}],[\"lucene\",{\"1\":{\"56\":1}}],[\"lucene的复杂性\",{\"1\":{\"29\":1}}],[\"lunix资源下载站\",{\"0\":{\"5\":1}}],[\"law\",{\"1\":{\"625\":1,\"631\":1}}],[\"label\",{\"1\":{\"405\":5,\"406\":2}}],[\"label>\",{\"1\":{\"223\":2}}],[\"lambda表达式\",{\"1\":{\"381\":2}}],[\"lambda表达式或⽅法引⽤进⾏装饰\",{\"1\":{\"381\":1}}],[\"latitude\",{\"1\":{\"353\":3}}],[\"latest\",{\"1\":{\"331\":1}}],[\"latency\",{\"1\":{\"281\":1}}],[\"launcher$extclassloader实现的\",{\"1\":{\"289\":1}}],[\"layer\",{\"1\":{\"146\":9}}],[\"layerui\",{\"0\":{\"146\":1}}],[\"layui\",{\"1\":{\"146\":3}}],[\"layout\",{\"1\":{\"21\":6,\"23\":6,\"24\":4,\"25\":4,\"26\":5}}],[\"lanzoub\",{\"1\":{\"232\":1,\"246\":1}}],[\"lanzouo\",{\"1\":{\"7\":2}}],[\"lang=\",{\"1\":{\"146\":1}}],[\"lang=zh\",{\"1\":{\"11\":1}}],[\"lang\",{\"1\":{\"109\":1,\"110\":2,\"113\":1,\"270\":2,\"272\":1,\"303\":3,\"304\":1,\"382\":1,\"437\":1,\"440\":1,\"479\":1,\"493\":4,\"545\":3,\"595\":1,\"596\":1,\"597\":1,\"598\":1,\"599\":1,\"664\":3,\"665\":1}}],[\"language\",{\"1\":{\"7\":1,\"530\":1}}],[\"ian\",{\"1\":{\"631\":1}}],[\"it\",{\"1\":{\"628\":1}}],[\"iterable\",{\"1\":{\"312\":1}}],[\"iterator<searchhit>\",{\"1\":{\"65\":1,\"70\":1,\"71\":1}}],[\"iterator\",{\"1\":{\"65\":2,\"70\":1,\"71\":1}}],[\"item=\",{\"1\":{\"524\":1}}],[\"itemqueueexchange\",{\"1\":{\"504\":1}}],[\"itemqueue\",{\"1\":{\"504\":2}}],[\"itemtopicexchange\",{\"1\":{\"504\":3}}],[\"item为当前遍历属性对象的值\",{\"1\":{\"162\":2}}],[\"items\",{\"1\":{\"161\":6,\"162\":3,\"204\":2,\"589\":2}}],[\"item++\",{\"1\":{\"89\":1,\"94\":1,\"303\":1,\"304\":1}}],[\"item\",{\"1\":{\"89\":2,\"94\":2,\"99\":6,\"100\":6,\"101\":3,\"161\":7,\"162\":2,\"204\":3,\"221\":5,\"222\":1,\"303\":4,\"304\":4,\"504\":16,\"505\":1,\"524\":1,\"589\":5,\"613\":3,\"642\":5}}],[\"iuserservice\",{\"1\":{\"541\":1}}],[\"iuserservice+\",{\"1\":{\"541\":1}}],[\"i18n\",{\"1\":{\"533\":1}}],[\"ibatis\",{\"1\":{\"467\":1,\"511\":3,\"520\":4,\"521\":1}}],[\"ilford\",{\"1\":{\"448\":1}}],[\"illegalaccessexception\",{\"1\":{\"293\":1,\"294\":2,\"295\":1,\"296\":1,\"303\":1,\"304\":1}}],[\"ignored\",{\"1\":{\"382\":1}}],[\"ignoreexception\",{\"1\":{\"382\":1}}],[\"ignoreexceptions\",{\"1\":{\"382\":1}}],[\"ig1wp04xfhni\",{\"1\":{\"7\":1}}],[\"ivh\",{\"1\":{\"233\":2,\"243\":1}}],[\"ico\",{\"1\":{\"214\":1,\"472\":1}}],[\"icon\",{\"1\":{\"146\":2}}],[\"ie8\",{\"1\":{\"150\":1}}],[\"immediate\",{\"1\":{\"631\":1}}],[\"img1\",{\"1\":{\"619\":2}}],[\"imglist\",{\"1\":{\"619\":6}}],[\"img\",{\"1\":{\"619\":1}}],[\"imgurllist\",{\"1\":{\"619\":1}}],[\"imgurl\",{\"1\":{\"619\":1}}],[\"image\",{\"1\":{\"113\":1}}],[\"impl\",{\"1\":{\"280\":1,\"614\":1,\"660\":2}}],[\"implements\",{\"1\":{\"107\":1,\"110\":1,\"122\":1,\"283\":1,\"316\":1,\"318\":1,\"376\":3,\"437\":4,\"438\":1,\"441\":1,\"466\":1,\"467\":1,\"472\":1,\"480\":1,\"481\":1,\"482\":1,\"487\":1,\"492\":1,\"522\":1,\"544\":1,\"552\":1,\"590\":1,\"600\":1,\"654\":3,\"659\":1,\"660\":1,\"664\":1}}],[\"import=optional\",{\"1\":{\"406\":1}}],[\"import\",{\"1\":{\"62\":9,\"63\":12,\"65\":14,\"74\":4,\"75\":4,\"76\":14,\"77\":21,\"84\":4,\"86\":5,\"87\":4,\"89\":5,\"90\":8,\"94\":6,\"95\":8,\"97\":6,\"98\":8,\"100\":6,\"101\":8,\"105\":7,\"106\":8,\"107\":8,\"113\":20,\"217\":2,\"219\":4,\"272\":1,\"283\":7,\"284\":2,\"303\":8,\"304\":7,\"326\":7,\"327\":7,\"362\":6,\"363\":10,\"368\":3,\"378\":3,\"392\":7,\"406\":1,\"437\":10,\"445\":6,\"466\":8,\"467\":5,\"471\":12,\"472\":11,\"475\":12,\"479\":1,\"480\":7,\"481\":8,\"482\":8,\"487\":2,\"492\":15,\"493\":8,\"498\":4,\"504\":10,\"505\":7,\"520\":6,\"521\":3,\"522\":6,\"545\":4,\"552\":4,\"564\":3,\"589\":6,\"590\":7,\"595\":1,\"596\":1,\"597\":1,\"598\":1,\"599\":14,\"600\":8,\"612\":13,\"613\":9,\"614\":4,\"618\":6,\"619\":20,\"622\":7,\"636\":5,\"637\":1,\"638\":1,\"639\":1,\"640\":1,\"642\":3,\"655\":2,\"660\":7,\"664\":4,\"665\":5}}],[\"if>\",{\"1\":{\"521\":1}}],[\"if\",{\"0\":{\"158\":1},\"1\":{\"105\":1,\"113\":1,\"129\":1,\"156\":1,\"158\":4,\"187\":1,\"188\":1,\"222\":2,\"224\":2,\"225\":1,\"226\":2,\"244\":3,\"266\":1,\"303\":5,\"304\":5,\"327\":5,\"363\":1,\"437\":1,\"438\":1,\"467\":2,\"480\":1,\"481\":1,\"492\":6,\"520\":2,\"545\":2,\"599\":19,\"600\":1,\"622\":2,\"628\":1,\"637\":1,\"638\":1,\"639\":1,\"640\":1,\"642\":2,\"646\":1,\"655\":1,\"664\":1,\"665\":1}}],[\"i++\",{\"1\":{\"63\":1,\"76\":1,\"327\":1,\"599\":1,\"619\":1,\"622\":2}}],[\"i\",{\"1\":{\"63\":6,\"76\":5,\"86\":1,\"89\":1,\"94\":1,\"110\":1,\"163\":4,\"212\":1,\"217\":1,\"219\":1,\"221\":1,\"327\":4,\"382\":2,\"384\":2,\"385\":2,\"386\":2,\"599\":4,\"619\":3,\"622\":4}}],[\"ik分词器\",{\"0\":{\"52\":1}}],[\"ikanalyzer已经推出\",{\"1\":{\"51\":1}}],[\"ikanalyzer是⼀个开源的\",{\"1\":{\"51\":1}}],[\"ik\",{\"0\":{\"51\":1,\"53\":1},\"1\":{\"52\":2,\"53\":4,\"57\":6,\"60\":2,\"74\":2,\"77\":3}}],[\"id查询\",{\"1\":{\"522\":1}}],[\"id请求头\",{\"1\":{\"438\":1}}],[\"id校验\",{\"1\":{\"438\":1}}],[\"id或者满足\",{\"1\":{\"419\":1}}],[\"idea中需要创建\",{\"1\":{\"563\":1}}],[\"idea\",{\"1\":{\"368\":1,\"405\":1,\"445\":1,\"523\":1,\"564\":1}}],[\"idea插件收集\",{\"0\":{\"8\":1}}],[\"identityhashmap\",{\"1\":{\"320\":1}}],[\"identified\",{\"1\":{\"243\":2,\"256\":2}}],[\"id为要删除id的方法\",{\"1\":{\"222\":1}}],[\"id为数据对象中的变量值\",{\"1\":{\"165\":1}}],[\"id选择器\",{\"1\":{\"153\":1}}],[\"id>\",{\"1\":{\"116\":2}}],[\"id=2\",{\"1\":{\"605\":2}}],[\"id=\",{\"1\":{\"105\":3,\"106\":3,\"107\":1,\"108\":1,\"109\":1,\"110\":2,\"146\":1,\"165\":2,\"173\":1,\"175\":1,\"194\":1,\"197\":1,\"223\":2,\"518\":1,\"521\":1,\"524\":1,\"553\":2,\"561\":4,\"562\":1,\"585\":2,\"589\":10,\"590\":2}}],[\"idsquery\",{\"1\":{\"69\":1}}],[\"id\",{\"1\":{\"43\":1,\"44\":1,\"46\":1,\"53\":2,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"70\":1,\"74\":3,\"77\":3,\"80\":1,\"128\":28,\"135\":6,\"137\":7,\"138\":7,\"139\":7,\"140\":7,\"165\":2,\"187\":2,\"204\":4,\"205\":1,\"221\":2,\"222\":3,\"225\":5,\"226\":2,\"356\":9,\"357\":6,\"373\":7,\"376\":10,\"382\":6,\"384\":4,\"385\":3,\"386\":4,\"389\":4,\"392\":8,\"410\":4,\"413\":1,\"415\":4,\"417\":2,\"420\":2,\"421\":3,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"426\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"435\":2,\"438\":3,\"440\":1,\"444\":4,\"445\":1,\"491\":1,\"518\":1,\"521\":7,\"522\":5,\"523\":1,\"524\":7,\"537\":2,\"605\":4,\"636\":1}}],[\"ip和端口号拼接称请求的\",{\"1\":{\"389\":1}}],[\"ip等告知服务注册中⼼\",{\"1\":{\"366\":1}}],[\"ip地址和\",{\"1\":{\"59\":1}}],[\"ip\",{\"1\":{\"43\":1,\"84\":2,\"113\":3,\"234\":1,\"519\":1,\"559\":1}}],[\"iiice\",{\"1\":{\"11\":1}}],[\"inversion\",{\"1\":{\"625\":1}}],[\"invocationhandler\",{\"1\":{\"662\":4,\"663\":1,\"664\":2}}],[\"invocationtargetexception\",{\"1\":{\"293\":1,\"294\":2,\"295\":1,\"296\":1,\"303\":2,\"304\":2}}],[\"invokesuper\",{\"1\":{\"665\":2}}],[\"invokehead\",{\"1\":{\"600\":1}}],[\"invoke\",{\"1\":{\"295\":3,\"303\":1,\"304\":1,\"600\":1,\"662\":1,\"663\":2,\"664\":7,\"665\":4}}],[\"inputlen\",{\"1\":{\"622\":8}}],[\"inputstreamreader\",{\"1\":{\"284\":1}}],[\"inputstream\",{\"1\":{\"281\":1,\"284\":4,\"618\":2,\"619\":4}}],[\"input=\",{\"1\":{\"171\":1}}],[\"inherited修饰\",{\"1\":{\"271\":1}}],[\"inherited修饰的注解\",{\"1\":{\"271\":1}}],[\"inherited\",{\"1\":{\"271\":1,\"272\":2}}],[\"innodb\",{\"1\":{\"252\":1}}],[\"inner\",{\"1\":{\"137\":1,\"138\":1,\"139\":1,\"140\":1}}],[\"incrbyfloat\",{\"1\":{\"340\":1}}],[\"incrby\",{\"1\":{\"340\":1}}],[\"incr\",{\"1\":{\"340\":1}}],[\"increment\",{\"1\":{\"135\":1,\"340\":4,\"350\":4,\"352\":2,\"363\":6}}],[\"include\",{\"1\":{\"409\":1,\"524\":2}}],[\"includ\",{\"1\":{\"244\":4}}],[\"info\",{\"1\":{\"382\":2,\"384\":2,\"385\":2,\"386\":2,\"410\":1,\"437\":7,\"438\":4,\"441\":1,\"475\":1,\"480\":1,\"481\":1,\"605\":4,\"606\":6}}],[\"information\",{\"1\":{\"134\":1,\"589\":6}}],[\"inf\",{\"1\":{\"122\":2,\"351\":1,\"472\":2,\"563\":1,\"655\":1}}],[\"in\",{\"0\":{\"127\":1},\"1\":{\"113\":2,\"127\":4,\"161\":3,\"162\":2,\"163\":2,\"221\":1,\"238\":1,\"244\":1,\"367\":3,\"368\":1,\"628\":1}}],[\"inside\",{\"1\":{\"654\":3,\"656\":1}}],[\"insertuser\",{\"1\":{\"659\":2,\"660\":5,\"663\":1}}],[\"insert>\",{\"1\":{\"524\":1}}],[\"insertfill\",{\"1\":{\"467\":1}}],[\"inserted\",{\"1\":{\"181\":2,\"182\":1}}],[\"inserted方法中的参数为当前指令\",{\"1\":{\"181\":1}}],[\"insertmassage\",{\"1\":{\"97\":2,\"100\":2}}],[\"insert\",{\"1\":{\"97\":6,\"98\":4,\"99\":4,\"100\":5,\"101\":5,\"466\":4,\"504\":2,\"524\":1,\"659\":1,\"660\":2,\"663\":1}}],[\"instantiationexception\",{\"1\":{\"293\":1,\"294\":2,\"295\":1,\"296\":1,\"303\":1,\"304\":1}}],[\"instances\",{\"1\":{\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"440\":1}}],[\"instance\",{\"1\":{\"74\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":2,\"367\":4,\"393\":3,\"504\":1,\"505\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"563\":1,\"589\":1,\"590\":1}}],[\"installed\",{\"1\":{\"262\":1}}],[\"installation\",{\"1\":{\"150\":1}}],[\"install\",{\"0\":{\"676\":1},\"1\":{\"41\":2,\"150\":1,\"212\":1,\"213\":1,\"232\":1,\"233\":1,\"236\":1,\"238\":2,\"239\":1,\"246\":2,\"247\":1,\"248\":2,\"255\":1,\"261\":1,\"262\":1,\"332\":2}}],[\"into\",{\"1\":{\"524\":1}}],[\"introduction\",{\"1\":{\"304\":3}}],[\"introspectionexception\",{\"1\":{\"298\":1,\"303\":2}}],[\"introspector\",{\"1\":{\"298\":2}}],[\"intercept\",{\"1\":{\"665\":2}}],[\"interceptor>\",{\"1\":{\"585\":4}}],[\"interceptors>\",{\"1\":{\"585\":2}}],[\"interceptor\",{\"1\":{\"472\":2,\"585\":2}}],[\"interceptorregistry\",{\"1\":{\"122\":1,\"472\":2,\"482\":2}}],[\"internalresourceviewresolver\",{\"1\":{\"562\":2}}],[\"internalavg\",{\"1\":{\"77\":3}}],[\"internet\",{\"1\":{\"511\":1}}],[\"interruptedexception\",{\"1\":{\"382\":1,\"384\":1,\"385\":2,\"386\":1}}],[\"interactive\",{\"1\":{\"252\":1}}],[\"interval\",{\"1\":{\"113\":1,\"367\":2,\"368\":1}}],[\"interfaces\",{\"1\":{\"492\":1,\"599\":4,\"662\":2}}],[\"interface\",{\"1\":{\"75\":1,\"77\":1,\"272\":1,\"373\":1,\"376\":2,\"479\":1,\"493\":1,\"521\":1,\"522\":1,\"544\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":1,\"625\":1,\"630\":1,\"653\":1,\"659\":1,\"662\":1,\"664\":1}}],[\"integers\",{\"1\":{\"606\":2}}],[\"integer\",{\"1\":{\"60\":1,\"63\":1,\"74\":1,\"109\":2,\"110\":2,\"283\":2,\"284\":1,\"304\":8,\"326\":3,\"327\":2,\"373\":2,\"376\":4,\"382\":2,\"384\":1,\"385\":1,\"386\":1,\"389\":1,\"392\":2,\"410\":1,\"444\":1,\"466\":3,\"480\":1,\"521\":1,\"522\":2,\"524\":1,\"599\":1,\"606\":1,\"636\":4}}],[\"integration\",{\"1\":{\"9\":1}}],[\"int\",{\"1\":{\"59\":1,\"63\":1,\"76\":1,\"84\":1,\"89\":1,\"94\":1,\"106\":1,\"110\":1,\"272\":1,\"280\":8,\"281\":17,\"290\":2,\"294\":1,\"295\":1,\"303\":3,\"304\":2,\"314\":1,\"315\":4,\"327\":3,\"437\":4,\"438\":1,\"441\":1,\"486\":2,\"487\":2,\"493\":2,\"599\":1,\"605\":1,\"619\":1,\"622\":8,\"642\":1}}],[\"inetaddress\",{\"1\":{\"59\":2,\"60\":1,\"62\":2,\"63\":2,\"65\":2,\"280\":5,\"281\":2}}],[\"inetsockettransportaddress\",{\"1\":{\"59\":2,\"60\":1,\"62\":2,\"63\":2,\"65\":2}}],[\"indices\",{\"0\":{\"31\":1},\"1\":{\"30\":1,\"57\":1,\"59\":1,\"60\":1}}],[\"index为几号数据库\",{\"1\":{\"334\":1}}],[\"index为当前索引的值\",{\"1\":{\"162\":1}}],[\"index++\",{\"1\":{\"303\":1}}],[\"indexname\",{\"1\":{\"74\":1,\"77\":1}}],[\"indexsearchtest\",{\"1\":{\"65\":1}}],[\"index\",{\"0\":{\"43\":1},\"1\":{\"4\":1,\"30\":1,\"43\":3,\"44\":2,\"46\":1,\"53\":3,\"59\":2,\"60\":1,\"62\":1,\"63\":2,\"65\":3,\"70\":1,\"71\":1,\"76\":2,\"77\":3,\"161\":2,\"162\":1,\"214\":1,\"217\":1,\"303\":4,\"315\":4,\"334\":1,\"336\":1,\"341\":1,\"342\":1,\"363\":5}}],[\"inageview都是常见的视图\",{\"1\":{\"20\":1}}],[\"initverify\",{\"1\":{\"622\":1}}],[\"initsign\",{\"1\":{\"622\":1}}],[\"initparams\",{\"1\":{\"266\":2}}],[\"initialize\",{\"1\":{\"254\":1,\"622\":1}}],[\"init\",{\"1\":{\"59\":1,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"212\":1,\"213\":1,\"252\":2,\"563\":1,\"622\":2}}],[\"ini\",{\"1\":{\"18\":2}}],[\"ini文件\",{\"1\":{\"18\":1,\"252\":1}}],[\"isp\",{\"0\":{\"630\":1},\"1\":{\"625\":1}}],[\"isannotationpresent\",{\"1\":{\"599\":11}}],[\"isolation=isolation\",{\"1\":{\"552\":1}}],[\"isolation\",{\"1\":{\"547\":1}}],[\"isoutputshutdown\",{\"1\":{\"281\":1}}],[\"isnotblank\",{\"1\":{\"492\":2}}],[\"ismember\",{\"1\":{\"363\":3}}],[\"isinputshutdown\",{\"1\":{\"281\":1}}],[\"isconnected\",{\"1\":{\"281\":1}}],[\"isclosed\",{\"1\":{\"281\":1}}],[\"isblank\",{\"1\":{\"437\":1,\"438\":1,\"492\":1}}],[\"isbound\",{\"1\":{\"281\":1}}],[\"isbn为\",{\"1\":{\"166\":1}}],[\"isbn\",{\"1\":{\"166\":1}}],[\"islogin\",{\"1\":{\"266\":3}}],[\"isshow\",{\"1\":{\"210\":1}}],[\"isempty\",{\"1\":{\"113\":1,\"303\":1,\"304\":1,\"314\":1,\"315\":1,\"316\":1,\"327\":1,\"599\":5,\"600\":1,\"642\":1}}],[\"is\",{\"1\":{\"8\":1,\"73\":1,\"86\":1,\"89\":1,\"94\":1,\"139\":2,\"243\":1,\"382\":1,\"537\":1,\"628\":4,\"642\":1}}],[\"i2lyu1l5c8oh>\",{\"1\":{\"7\":1}}],[\"ioc\",{\"0\":{\"531\":1},\"1\":{\"530\":1,\"532\":1}}],[\"ioexception\",{\"1\":{\"84\":2,\"85\":1,\"86\":4,\"87\":5,\"89\":2,\"90\":6,\"94\":2,\"95\":6,\"97\":2,\"98\":6,\"100\":2,\"101\":6,\"266\":4,\"283\":4,\"284\":1,\"492\":2,\"520\":2,\"612\":3,\"614\":7,\"618\":3,\"619\":3}}],[\"io\",{\"1\":{\"4\":1,\"7\":1,\"9\":1,\"17\":2,\"84\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2,\"113\":1,\"283\":3,\"284\":1,\"316\":1,\"318\":1,\"331\":2,\"332\":1,\"398\":1,\"466\":2,\"471\":1,\"475\":2,\"487\":1,\"492\":1,\"520\":3,\"612\":4,\"613\":1,\"614\":1,\"618\":3,\"619\":5,\"622\":1}}],[\"b服务调⽤c服务给予固定的线程数量⽐如12个线程\",{\"1\":{\"453\":1}}],[\"bfilter\",{\"1\":{\"437\":4}}],[\"blue\",{\"1\":{\"434\":1}}],[\"blog\",{\"1\":{\"415\":2,\"416\":2,\"417\":1,\"445\":1}}],[\"block\",{\"1\":{\"356\":1,\"357\":1,\"622\":8}}],[\"blpop\",{\"1\":{\"344\":1}}],[\"blackfire\",{\"1\":{\"272\":1,\"290\":1,\"291\":1,\"303\":1,\"304\":1,\"368\":1,\"378\":1,\"505\":1,\"545\":2,\"546\":3,\"585\":2,\"646\":1,\"647\":1,\"659\":2,\"660\":7,\"664\":4,\"665\":2}}],[\"black\",{\"1\":{\"59\":1,\"60\":1,\"62\":1,\"63\":2,\"65\":1,\"74\":3,\"75\":2,\"76\":2,\"77\":5,\"84\":4,\"86\":2,\"87\":2,\"89\":2,\"90\":4,\"94\":2,\"95\":4,\"97\":2,\"98\":4,\"100\":2,\"101\":4,\"105\":2,\"106\":1,\"107\":5,\"108\":1,\"113\":3,\"283\":2,\"284\":1,\"304\":1,\"405\":1,\"504\":7,\"505\":8,\"589\":2,\"590\":4}}],[\"b02770yri\",{\"1\":{\"246\":1}}],[\"b02770z0h\",{\"1\":{\"232\":1}}],[\"bzip2\",{\"1\":{\"233\":1}}],[\"btn\",{\"1\":{\"223\":4,\"224\":2}}],[\"bj\",{\"1\":{\"206\":1,\"208\":1}}],[\"bbb\",{\"1\":{\"205\":1}}],[\"b>\",{\"1\":{\"195\":2}}],[\"b><child\",{\"1\":{\"195\":1}}],[\"b><\",{\"1\":{\"195\":1}}],[\"b组件<\",{\"1\":{\"195\":1}}],[\"b为data属性的key\",{\"1\":{\"167\":1,\"168\":1}}],[\"b\",{\"1\":{\"156\":1,\"167\":3,\"168\":2,\"169\":3,\"195\":3,\"276\":1,\"437\":1,\"548\":1}}],[\"brpoplpush\",{\"1\":{\"344\":1}}],[\"brpop\",{\"1\":{\"344\":1}}],[\"break\",{\"1\":{\"303\":1,\"304\":1,\"327\":1,\"613\":4,\"655\":1}}],[\"br\",{\"1\":{\"284\":2}}],[\"broker\",{\"1\":{\"80\":5,\"104\":1,\"236\":1}}],[\"brands\",{\"1\":{\"185\":5,\"186\":1,\"187\":1,\"188\":1,\"189\":1}}],[\"brand\",{\"1\":{\"77\":4}}],[\"bytype自动注入\",{\"1\":{\"537\":1,\"538\":1}}],[\"bytearrayoutputstream\",{\"1\":{\"475\":6,\"618\":3,\"622\":5}}],[\"bytecdntp\",{\"1\":{\"123\":2}}],[\"byte\",{\"1\":{\"85\":1,\"86\":1,\"87\":2,\"90\":2,\"95\":2,\"98\":2,\"101\":2,\"363\":1,\"612\":2,\"618\":2,\"619\":1,\"622\":9}}],[\"bytedance\",{\"1\":{\"1\":1,\"123\":1}}],[\"byname自动注入\",{\"1\":{\"537\":1,\"538\":1}}],[\"by\",{\"1\":{\"77\":4,\"243\":2,\"256\":2,\"324\":1,\"327\":5,\"382\":2}}],[\"bus\",{\"1\":{\"409\":4,\"410\":1}}],[\"bus和spring\",{\"1\":{\"408\":1}}],[\"bulkhead<\",{\"1\":{\"383\":1}}],[\"bulkhead\",{\"1\":{\"381\":1,\"384\":3,\"385\":3}}],[\"bufferedreader\",{\"1\":{\"284\":3}}],[\"builkhead\",{\"0\":{\"383\":1}}],[\"builtinexchangetype\",{\"1\":{\"94\":3,\"97\":3,\"100\":3,\"101\":2}}],[\"build>\",{\"1\":{\"74\":1,\"113\":1,\"558\":1}}],[\"build\",{\"1\":{\"59\":2,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"76\":1,\"77\":1,\"232\":1,\"327\":2,\"363\":1,\"416\":1,\"471\":2,\"504\":2,\"520\":1,\"558\":2,\"613\":1,\"614\":2,\"619\":1}}],[\"builders\",{\"1\":{\"471\":3}}],[\"builder\",{\"1\":{\"59\":2,\"60\":3,\"62\":3,\"63\":1,\"65\":3,\"66\":2,\"67\":2,\"68\":2,\"69\":2,\"70\":2,\"71\":2,\"416\":3,\"445\":1,\"514\":1,\"613\":1,\"614\":2,\"619\":1}}],[\"buckets\",{\"1\":{\"77\":2}}],[\"bucket>\",{\"1\":{\"77\":1}}],[\"bucket\",{\"1\":{\"77\":6}}],[\"button>\",{\"1\":{\"146\":5,\"159\":4,\"223\":1,\"224\":1}}],[\"button\",{\"1\":{\"20\":1}}],[\"behavior\",{\"1\":{\"628\":1}}],[\"be\",{\"1\":{\"627\":1,\"628\":1,\"630\":1}}],[\"bertrand\",{\"1\":{\"626\":1}}],[\"beijing\",{\"1\":{\"398\":1}}],[\"benchmark\",{\"1\":{\"333\":3}}],[\"bean>\",{\"1\":{\"553\":2,\"561\":5,\"562\":1,\"585\":2}}],[\"bean控制注解\",{\"0\":{\"539\":1}}],[\"beanfactory使用示例\",{\"1\":{\"532\":1}}],[\"beanfactory\",{\"0\":{\"532\":1},\"1\":{\"530\":1,\"532\":4,\"533\":2,\"534\":1}}],[\"bean注入\",{\"0\":{\"536\":1},\"1\":{\"528\":1}}],[\"beanproperty\",{\"1\":{\"492\":2}}],[\"beaninfo\",{\"1\":{\"298\":6}}],[\"bean类的属性名与配置文件的被调用者\",{\"1\":{\"537\":1}}],[\"bean类\",{\"1\":{\"298\":1}}],[\"bean\",{\"1\":{\"107\":1,\"108\":1,\"362\":2,\"372\":1,\"378\":2,\"391\":2,\"416\":1,\"437\":5,\"445\":1,\"471\":2,\"504\":5,\"530\":1,\"532\":2,\"537\":8,\"538\":1,\"561\":1,\"590\":1}}],[\"beans<\",{\"1\":{\"517\":1}}],[\"beans包的api\",{\"1\":{\"298\":1}}],[\"beans>\",{\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"589\":1,\"590\":1}}],[\"beans\",{\"1\":{\"76\":1,\"77\":1,\"105\":5,\"106\":5,\"107\":4,\"108\":4,\"113\":2,\"298\":1,\"303\":2,\"392\":1,\"504\":2,\"530\":2,\"532\":1,\"546\":4,\"553\":4,\"561\":4,\"562\":4,\"589\":5,\"590\":4}}],[\"between=2017\",{\"1\":{\"419\":1}}],[\"between\",{\"1\":{\"73\":1,\"419\":1}}],[\"before=2017\",{\"1\":{\"419\":1}}],[\"before|after\",{\"1\":{\"341\":1}}],[\"before\",{\"1\":{\"59\":1,\"60\":1,\"62\":2,\"63\":2,\"65\":2,\"341\":1,\"419\":1,\"545\":3,\"660\":2,\"664\":3,\"665\":1}}],[\"below\",{\"1\":{\"24\":1}}],[\"both\",{\"1\":{\"629\":1}}],[\"boundvalueops\",{\"1\":{\"363\":1}}],[\"box\",{\"1\":{\"210\":1}}],[\"body>\",{\"1\":{\"146\":1}}],[\"body\",{\"1\":{\"42\":1,\"85\":1,\"86\":1,\"87\":4,\"90\":4,\"95\":4,\"98\":4,\"101\":4,\"612\":7}}],[\"boot整合redis\",{\"0\":{\"508\":1}}],[\"boot的开发⻛格做到⼀键启动和部署\",{\"1\":{\"448\":1}}],[\"boot的开发特性简化了微服务开发的复杂性\",{\"1\":{\"448\":1}}],[\"boot项⽬从\",{\"1\":{\"406\":1}}],[\"boot项⽬中\",{\"1\":{\"404\":1}}],[\"boot还提供了基于spring\",{\"1\":{\"404\":1}}],[\"boot2\",{\"1\":{\"367\":1,\"444\":1}}],[\"bootstrapclassloader\",{\"1\":{\"289\":1}}],[\"bootstrap\",{\"1\":{\"217\":3}}],[\"bootstrap固定版本\",{\"1\":{\"217\":1}}],[\"bootschool\",{\"1\":{\"11\":1}}],[\"boot\",{\"0\":{\"503\":1},\"1\":{\"74\":4,\"76\":1,\"77\":1,\"113\":4,\"368\":3,\"405\":1,\"408\":1,\"409\":1,\"413\":2,\"445\":2,\"448\":1,\"470\":1,\"504\":4,\"505\":4}}],[\"boot<\",{\"1\":{\"74\":5,\"113\":5,\"409\":1,\"504\":3,\"505\":3}}],[\"boot形式创建\",{\"1\":{\"74\":1}}],[\"boolean\",{\"1\":{\"85\":1,\"86\":3,\"87\":4,\"105\":1,\"107\":2,\"280\":2,\"281\":14,\"283\":1,\"303\":1,\"304\":1,\"314\":4,\"315\":3,\"316\":1,\"363\":11,\"480\":1,\"481\":1,\"545\":2,\"599\":2,\"612\":1,\"622\":2,\"637\":4,\"638\":1,\"639\":1,\"640\":1,\"653\":2,\"654\":3}}],[\"bool\",{\"1\":{\"57\":11,\"77\":1}}],[\"books\",{\"1\":{\"443\":1}}],[\"book\",{\"1\":{\"20\":1}}],[\"binary\",{\"1\":{\"312\":1}}],[\"bindexception\",{\"1\":{\"475\":1}}],[\"bindpoint\",{\"1\":{\"281\":1}}],[\"bind使用过滤器\",{\"1\":{\"176\":1}}],[\"bind绑定class\",{\"0\":{\"166\":1}}],[\"bind基本用法\",{\"0\":{\"165\":1}}],[\"bind\",{\"0\":{\"164\":1,\"167\":1,\"168\":1,\"169\":1},\"1\":{\"113\":4,\"165\":1,\"175\":2,\"281\":1,\"392\":4,\"475\":4,\"481\":1,\"504\":1,\"564\":1,\"619\":2}}],[\"bindingbuilder\",{\"1\":{\"504\":1}}],[\"binding>\",{\"1\":{\"110\":1}}],[\"bindings>\",{\"1\":{\"105\":2,\"106\":2,\"109\":2,\"110\":4,\"589\":4}}],[\"binding\",{\"1\":{\"80\":3,\"105\":1,\"106\":1,\"109\":1,\"110\":2,\"504\":1,\"589\":5}}],[\"bin\",{\"1\":{\"17\":2,\"244\":1,\"332\":3}}],[\"bcuninstaller\",{\"1\":{\"7\":1}}],[\"bc\",{\"1\":{\"7\":1}}],[\"bamboo\",{\"1\":{\"636\":4,\"637\":2,\"638\":2,\"639\":1,\"640\":1,\"642\":2,\"655\":4}}],[\"baomidou\",{\"1\":{\"466\":2,\"467\":1}}],[\"ba\",{\"1\":{\"426\":1}}],[\"baidu\",{\"1\":{\"420\":2,\"421\":1,\"422\":1,\"423\":4,\"424\":1,\"426\":1}}],[\"balancer\",{\"1\":{\"393\":1}}],[\"bad\",{\"1\":{\"382\":1}}],[\"batchsetifabsent\",{\"1\":{\"363\":1}}],[\"batchset\",{\"1\":{\"363\":1}}],[\"backendd\",{\"1\":{\"382\":1}}],[\"backendb\",{\"1\":{\"382\":3,\"384\":1,\"385\":1,\"386\":1,\"440\":1}}],[\"backenda\",{\"1\":{\"382\":3,\"384\":2,\"385\":2,\"386\":2,\"440\":2,\"441\":1}}],[\"back\",{\"1\":{\"244\":7}}],[\"background\",{\"1\":{\"21\":1}}],[\"bar\",{\"1\":{\"219\":4}}],[\"babel配置文件\",{\"1\":{\"214\":1}}],[\"babel\",{\"1\":{\"214\":1}}],[\"base64\",{\"1\":{\"622\":9}}],[\"basepackage\",{\"1\":{\"561\":1}}],[\"baseentity\",{\"1\":{\"466\":1}}],[\"baseconfig\",{\"1\":{\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"440\":1}}],[\"based表示10秒\",{\"1\":{\"382\":1,\"440\":1}}],[\"based或time\\u0002based\",{\"1\":{\"382\":1}}],[\"based\",{\"1\":{\"382\":6,\"440\":3}}],[\"basedir=d\",{\"1\":{\"252\":1}}],[\"baseurl\",{\"1\":{\"228\":1}}],[\"base\",{\"0\":{\"678\":1},\"1\":{\"107\":1,\"108\":1,\"399\":2,\"400\":1,\"546\":2,\"561\":1,\"562\":1,\"628\":1}}],[\"basicnamevaluepair\",{\"1\":{\"613\":2}}],[\"basicnack\",{\"1\":{\"107\":3,\"110\":2}}],[\"basicreject\",{\"1\":{\"110\":1}}],[\"basicack\",{\"1\":{\"107\":2,\"110\":1}}],[\"basicconsume时候可以指定\",{\"1\":{\"87\":1}}],[\"basicconsume参数解释\",{\"1\":{\"85\":1,\"87\":1}}],[\"basicconsume\",{\"1\":{\"85\":2,\"87\":2,\"90\":2,\"95\":2,\"98\":2,\"101\":2}}],[\"basicproperties\",{\"1\":{\"85\":1,\"86\":1,\"87\":2,\"90\":2,\"95\":2,\"98\":2,\"101\":2}}],[\"basicpublish参数解释\",{\"1\":{\"85\":1,\"86\":1}}],[\"basicpublish\",{\"1\":{\"85\":2,\"86\":3,\"87\":1,\"89\":1,\"94\":1,\"97\":2,\"100\":3}}],[\"basic\",{\"1\":{\"4\":1,\"378\":1}}],[\"bandwidth\",{\"1\":{\"281\":1}}],[\"bandisoft\",{\"1\":{\"7\":1}}],[\"banner图在线生成工具\",{\"1\":{\"11\":1}}],[\"w+\",{\"1\":{\"491\":2}}],[\"w\",{\"1\":{\"491\":3}}],[\"waitdurationinopenstate\",{\"1\":{\"382\":3,\"440\":2}}],[\"wait\",{\"1\":{\"252\":1}}],[\"watch选项中可以写很多逻辑\",{\"1\":{\"190\":1}}],[\"watch\",{\"0\":{\"190\":1},\"1\":{\"189\":1,\"190\":1,\"192\":1,\"358\":2}}],[\"wget\",{\"1\":{\"236\":1,\"238\":1}}],[\"wwm\",{\"1\":{\"232\":1,\"246\":1}}],[\"wwwc\",{\"1\":{\"7\":2}}],[\"www\",{\"1\":{\"4\":1,\"7\":4,\"11\":4,\"12\":1,\"13\":1,\"74\":1,\"80\":2,\"105\":10,\"106\":10,\"107\":10,\"108\":10,\"113\":1,\"116\":1,\"146\":1,\"151\":1,\"236\":1,\"238\":1,\"248\":2,\"263\":1,\"419\":1,\"420\":2,\"421\":1,\"422\":1,\"423\":2,\"424\":1,\"426\":1,\"504\":1,\"505\":1,\"546\":10,\"553\":13,\"561\":10,\"562\":10,\"563\":1,\"589\":10,\"590\":10}}],[\"when\",{\"1\":{\"628\":1}}],[\"where>\",{\"1\":{\"521\":1}}],[\"where\",{\"1\":{\"127\":1,\"128\":8,\"134\":1,\"137\":1,\"138\":1,\"139\":2,\"140\":1,\"243\":1}}],[\"while\",{\"1\":{\"65\":1,\"70\":1,\"71\":1,\"107\":1,\"283\":1,\"303\":1,\"304\":1,\"363\":1,\"505\":1,\"590\":1,\"622\":2,\"642\":1}}],[\"world2\",{\"1\":{\"155\":1}}],[\"world\",{\"1\":{\"155\":1}}],[\"work\",{\"1\":{\"89\":2,\"102\":1}}],[\"workqueues\",{\"0\":{\"88\":1}}],[\"work模式\",{\"1\":{\"80\":1}}],[\"wordbytes\",{\"1\":{\"619\":2}}],[\"worddemotest\",{\"1\":{\"619\":1}}],[\"wordutil\",{\"1\":{\"618\":1,\"619\":2}}],[\"word\",{\"1\":{\"52\":2,\"53\":2,\"619\":2}}],[\"word粘贴使用\",{\"1\":{\"11\":1}}],[\"w3\",{\"1\":{\"74\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":1,\"504\":1,\"505\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"563\":1,\"589\":1,\"590\":1}}],[\"w3cschool\",{\"1\":{\"4\":1}}],[\"w3c中的fastjson文档\",{\"1\":{\"4\":1}}],[\"writeandclose\",{\"1\":{\"618\":1}}],[\"write\",{\"1\":{\"612\":1,\"619\":1,\"622\":2}}],[\"writestring\",{\"1\":{\"492\":3}}],[\"writemethod\",{\"1\":{\"298\":2,\"303\":2}}],[\"writer\",{\"1\":{\"266\":3}}],[\"writevalueasstring\",{\"1\":{\"63\":2}}],[\"wrap\",{\"1\":{\"21\":1}}],[\"wrapper\",{\"1\":{\"17\":1}}],[\"wenshao\",{\"1\":{\"603\":1}}],[\"well2\",{\"1\":{\"589\":3,\"590\":1}}],[\"well\",{\"1\":{\"589\":3,\"590\":1}}],[\"weaving\",{\"1\":{\"540\":1}}],[\"weakhashmap\",{\"1\":{\"320\":1}}],[\"webapp\",{\"1\":{\"563\":1}}],[\"webmvc<\",{\"1\":{\"558\":1}}],[\"webmvcconfigurer\",{\"1\":{\"122\":1,\"472\":2,\"482\":2}}],[\"web相关\",{\"1\":{\"481\":1}}],[\"webdatabinderfactory\",{\"1\":{\"481\":4}}],[\"webflux\",{\"1\":{\"418\":1}}],[\"web表示使⽤http发送数据\",{\"1\":{\"399\":1}}],[\"webinitparam\",{\"1\":{\"266\":2}}],[\"webservlet\",{\"1\":{\"266\":2}}],[\"webpack\",{\"1\":{\"213\":2,\"214\":1}}],[\"webjars\",{\"1\":{\"122\":2,\"472\":4}}],[\"webconfig配置swagger\",{\"0\":{\"472\":1}}],[\"webconfig\",{\"1\":{\"122\":1,\"472\":1,\"482\":1}}],[\"web\",{\"0\":{\"563\":1,\"674\":1},\"1\":{\"113\":7,\"234\":1,\"392\":4,\"399\":1,\"409\":1,\"413\":1,\"437\":1,\"471\":1,\"472\":4,\"475\":4,\"480\":1,\"481\":5,\"482\":4,\"562\":1,\"563\":7,\"564\":1},\"2\":{\"147\":1,\"148\":1,\"230\":1,\"231\":1}}],[\"web<\",{\"1\":{\"113\":1}}],[\"web接⼝\",{\"1\":{\"46\":1,\"53\":1}}],[\"weight\",{\"1\":{\"21\":1}}],[\"without\",{\"1\":{\"628\":1}}],[\"withmethodannotation\",{\"1\":{\"471\":1}}],[\"withhash\",{\"1\":{\"353\":2}}],[\"withdist\",{\"1\":{\"353\":2}}],[\"withcoord\",{\"1\":{\"353\":2}}],[\"withscores\",{\"1\":{\"351\":4}}],[\"withsourcefilter\",{\"1\":{\"77\":1}}],[\"with\",{\"1\":{\"128\":4,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"248\":6,\"367\":1,\"368\":1,\"369\":1,\"448\":2,\"504\":1}}],[\"withpageable\",{\"1\":{\"76\":1}}],[\"withquery\",{\"1\":{\"76\":1,\"77\":1}}],[\"widthqchandler\",{\"1\":{\"636\":1,\"638\":1,\"639\":1,\"641\":4}}],[\"width=\",{\"1\":{\"21\":1}}],[\"width和layout\",{\"1\":{\"21\":1}}],[\"width\",{\"1\":{\"21\":1,\"113\":1,\"636\":1}}],[\"windows再github上下载\",{\"1\":{\"331\":1}}],[\"windows\",{\"1\":{\"259\":1}}],[\"windowid\",{\"1\":{\"146\":3}}],[\"win安装mysql8\",{\"0\":{\"250\":1}}],[\"win快捷方式移除软件\",{\"1\":{\"7\":1}}],[\"winoffice部署软件\",{\"1\":{\"7\":1}}],[\"win系统优化软件\",{\"1\":{\"7\":1}}],[\"win截屏软件\",{\"1\":{\"7\":1}}],[\"win\",{\"0\":{\"677\":1},\"1\":{\"7\":1},\"2\":{\"257\":1,\"264\":1}}],[\"win文件搜索软件\",{\"1\":{\"7\":1}}],[\"win卸载软件\",{\"1\":{\"7\":2}}],[\"x509encodedkeyspec\",{\"1\":{\"622\":5}}],[\"xwpftemplate\",{\"1\":{\"618\":3}}],[\"x之后\",{\"1\":{\"508\":1}}],[\"x使⽤spring\",{\"1\":{\"367\":1}}],[\"x已经停更\",{\"1\":{\"366\":1}}],[\"xiaoymin\",{\"1\":{\"471\":1}}],[\"xiaoymin<\",{\"1\":{\"470\":1}}],[\"xiaominfo\",{\"1\":{\"4\":1}}],[\"xinfo\",{\"1\":{\"357\":3}}],[\"xclaim\",{\"1\":{\"357\":1}}],[\"xcontenttype\",{\"1\":{\"63\":3}}],[\"xcontent\",{\"1\":{\"62\":2,\"63\":3}}],[\"xcontentfactory\",{\"1\":{\"60\":1,\"62\":2,\"63\":1}}],[\"xcontentbuilder\",{\"0\":{\"62\":1},\"1\":{\"60\":1,\"62\":3,\"63\":1}}],[\"xpending\",{\"1\":{\"357\":1}}],[\"xack\",{\"1\":{\"357\":1}}],[\"xadd\",{\"1\":{\"356\":2}}],[\"xgroup\",{\"1\":{\"357\":5}}],[\"xreadgroup\",{\"1\":{\"357\":2}}],[\"xread\",{\"1\":{\"356\":2}}],[\"xrevrange\",{\"1\":{\"356\":2}}],[\"xrange\",{\"1\":{\"356\":2}}],[\"xlen\",{\"1\":{\"356\":2}}],[\"xdel\",{\"1\":{\"356\":2}}],[\"xtrim\",{\"1\":{\"356\":2}}],[\"x86\",{\"1\":{\"233\":2,\"242\":4}}],[\"xz\",{\"1\":{\"232\":1,\"589\":3}}],[\"xx事件名=\",{\"1\":{\"159\":1}}],[\"xxx\",{\"1\":{\"135\":4}}],[\"xss跨站脚本攻击\",{\"1\":{\"157\":1}}],[\"xsd\",{\"1\":{\"74\":2,\"105\":3,\"106\":3,\"107\":3,\"108\":3,\"113\":2,\"504\":2,\"505\":2,\"546\":3,\"553\":4,\"561\":3,\"562\":3,\"563\":1,\"589\":3,\"590\":3}}],[\"xsi\",{\"1\":{\"74\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":1,\"504\":1,\"505\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"563\":1,\"589\":1,\"590\":1}}],[\"xsi=\",{\"1\":{\"74\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":1,\"504\":1,\"505\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"563\":1,\"589\":1,\"590\":1}}],[\"x<verb>\",{\"1\":{\"42\":1}}],[\"xml<\",{\"1\":{\"563\":2}}],[\"xmlbeanfactory\",{\"1\":{\"532\":2,\"534\":1}}],[\"xml映射文件需要注册到mybatis的全局配置文件中\",{\"1\":{\"522\":1}}],[\"xml映射文件名称必须与实体类同名\",{\"1\":{\"522\":1}}],[\"xml映射文件必须与实体类在同一个包下\",{\"1\":{\"522\":1}}],[\"xml文件配置\",{\"1\":{\"589\":1}}],[\"xml文件中配置\",{\"1\":{\"519\":1,\"569\":1}}],[\"xml文件中实现\",{\"1\":{\"109\":1}}],[\"xml文件\",{\"1\":{\"105\":1,\"107\":1}}],[\"xmlschema\",{\"1\":{\"74\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":1,\"504\":1,\"505\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"563\":1,\"589\":1,\"590\":1}}],[\"xmlns=\",{\"1\":{\"74\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":1,\"504\":1,\"505\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"563\":1,\"589\":1,\"590\":1}}],[\"xmlns\",{\"1\":{\"21\":1,\"74\":1,\"105\":3,\"106\":3,\"107\":3,\"108\":3,\"113\":1,\"504\":1,\"505\":1,\"546\":3,\"553\":4,\"561\":3,\"562\":3,\"563\":4,\"589\":3,\"590\":3}}],[\"xml\",{\"0\":{\"521\":1,\"561\":1,\"563\":1},\"1\":{\"21\":1,\"74\":1,\"84\":1,\"105\":2,\"106\":3,\"107\":3,\"108\":2,\"110\":1,\"113\":2,\"369\":1,\"377\":2,\"504\":2,\"505\":2,\"518\":3,\"520\":1,\"521\":2,\"522\":1,\"524\":2,\"532\":2,\"534\":1,\"535\":1,\"546\":1,\"553\":1,\"560\":2,\"561\":2,\"562\":1,\"563\":5,\"589\":3,\"590\":4}}],[\"xml相互跳转\",{\"1\":{\"8\":1}}],[\"x\",{\"1\":{\"4\":1,\"109\":1,\"110\":6,\"419\":1,\"421\":1,\"424\":1,\"448\":9}}],[\"58\",{\"1\":{\"333\":1}}],[\"50\",{\"1\":{\"327\":1,\"382\":2,\"440\":1,\"618\":1}}],[\"5000\",{\"1\":{\"109\":1,\"374\":4}}],[\"50000d\",{\"1\":{\"77\":3}}],[\"55655\",{\"1\":{\"283\":1,\"284\":2}}],[\"5引入的机制\",{\"1\":{\"269\":1}}],[\"51\",{\"1\":{\"261\":1}}],[\"59时间段内没有数据请求\",{\"1\":{\"461\":1}}],[\"59\",{\"1\":{\"259\":1,\"461\":1}}],[\"524220z\",{\"1\":{\"243\":1}}],[\"5601\",{\"1\":{\"401\":2}}],[\"56\",{\"1\":{\"243\":1,\"409\":1,\"410\":1}}],[\"5672\",{\"1\":{\"84\":1,\"400\":3,\"409\":1,\"410\":1,\"504\":1,\"505\":1}}],[\"5l\",{\"1\":{\"77\":1,\"500\":1}}],[\"5\",{\"0\":{\"232\":1},\"1\":{\"4\":1,\"41\":1,\"57\":1,\"70\":1,\"76\":2,\"85\":1,\"113\":2,\"123\":1,\"150\":1,\"203\":1,\"219\":1,\"221\":1,\"224\":1,\"233\":2,\"234\":1,\"236\":3,\"239\":2,\"355\":1,\"382\":1,\"384\":1,\"386\":3,\"413\":2,\"440\":1,\"448\":3,\"498\":1,\"499\":1,\"500\":3,\"517\":1,\"551\":1,\"558\":1,\"606\":7,\"619\":1,\"629\":1,\"630\":2,\"631\":2}}],[\"4<\",{\"1\":{\"617\":1}}],[\"4所示\",{\"1\":{\"448\":1}}],[\"4配置\",{\"1\":{\"444\":1}}],[\"47\",{\"1\":{\"419\":4}}],[\"42\",{\"1\":{\"419\":4}}],[\"4882682414831344447\",{\"1\":{\"405\":1}}],[\"4l\",{\"1\":{\"77\":1}}],[\"4个常用属性\",{\"0\":{\"24\":1}}],[\"45秒时触发任务\",{\"1\":{\"500\":1}}],[\"45秒触发1次\",{\"1\":{\"499\":1}}],[\"45\",{\"1\":{\"17\":1,\"247\":1,\"248\":1,\"499\":4,\"500\":2}}],[\"40秒触发1次\",{\"1\":{\"499\":1}}],[\"400\",{\"1\":{\"437\":1}}],[\"40000d\",{\"1\":{\"77\":2}}],[\"404\",{\"1\":{\"422\":1,\"423\":1,\"424\":1,\"668\":1}}],[\"40\",{\"1\":{\"17\":1,\"261\":1}}],[\"4\",{\"1\":{\"4\":1,\"18\":6,\"20\":1,\"57\":3,\"63\":1,\"74\":3,\"85\":1,\"86\":1,\"87\":1,\"110\":3,\"113\":3,\"127\":2,\"146\":1,\"203\":1,\"212\":2,\"213\":4,\"219\":1,\"221\":1,\"223\":1,\"224\":1,\"225\":1,\"367\":1,\"385\":1,\"401\":4,\"448\":1,\"491\":4,\"504\":4,\"505\":4,\"563\":2,\"606\":7,\"629\":1,\"630\":1,\"631\":2}}],[\"o2\",{\"1\":{\"628\":2}}],[\"o1\",{\"1\":{\"628\":2}}],[\"ocp\",{\"0\":{\"626\":1},\"1\":{\"625\":1}}],[\"ooxml<\",{\"1\":{\"617\":1}}],[\"oobinline\",{\"1\":{\"281\":2}}],[\"oss\",{\"1\":{\"398\":1}}],[\"osi网络模型\",{\"0\":{\"277\":1}}],[\"opsforset\",{\"1\":{\"363\":2}}],[\"opsforlist\",{\"1\":{\"363\":4}}],[\"opsforvalue\",{\"1\":{\"363\":1}}],[\"opsforhash\",{\"1\":{\"363\":2}}],[\"options\",{\"1\":{\"611\":1}}],[\"options等⽅法\",{\"1\":{\"389\":1}}],[\"option\",{\"1\":{\"444\":1}}],[\"optional\",{\"1\":{\"406\":1}}],[\"opt\",{\"1\":{\"332\":2}}],[\"openapi2\",{\"1\":{\"470\":1}}],[\"open状态需要等待的时间\",{\"1\":{\"382\":2,\"440\":2}}],[\"open状态的时候\",{\"1\":{\"382\":1,\"440\":1}}],[\"open变成half\",{\"1\":{\"382\":1}}],[\"openfeign提供了2个超时参数\",{\"1\":{\"374\":1}}],[\"openfeign<\",{\"1\":{\"372\":1}}],[\"openfeign添加了对于spring\",{\"1\":{\"372\":1}}],[\"openfeign\",{\"0\":{\"372\":1,\"373\":1},\"1\":{\"372\":3}}],[\"opensession\",{\"1\":{\"515\":2,\"520\":3}}],[\"openssl=\",{\"1\":{\"248\":1}}],[\"openssl\",{\"1\":{\"232\":2,\"233\":1,\"238\":4,\"248\":3}}],[\"opensource\",{\"1\":{\"4\":1}}],[\"open\",{\"1\":{\"213\":1,\"382\":5,\"440\":1,\"456\":2,\"625\":1}}],[\"opendigg\",{\"1\":{\"151\":1}}],[\"o\",{\"1\":{\"315\":1,\"511\":1,\"665\":3}}],[\"oldv\",{\"1\":{\"189\":1,\"190\":2}}],[\"obj\",{\"1\":{\"295\":2,\"296\":2,\"363\":2,\"663\":3,\"664\":7}}],[\"objects\",{\"1\":{\"304\":3,\"475\":2,\"492\":2,\"511\":1,\"628\":1,\"655\":2,\"665\":3}}],[\"object>\",{\"1\":{\"65\":1,\"70\":1,\"86\":1,\"87\":1,\"613\":1,\"618\":1,\"619\":1}}],[\"objectmapper\",{\"1\":{\"63\":9}}],[\"object\",{\"1\":{\"35\":1,\"314\":1,\"315\":1,\"363\":6,\"438\":1,\"480\":1,\"481\":1,\"511\":1,\"545\":6,\"589\":9,\"613\":1,\"626\":1,\"628\":2,\"662\":4,\"663\":4,\"664\":6,\"665\":5}}],[\"obox\",{\"1\":{\"166\":2,\"167\":1}}],[\"ok\",{\"1\":{\"113\":2,\"156\":1,\"373\":1,\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"389\":1,\"392\":2,\"410\":1,\"442\":1,\"444\":1,\"486\":2,\"487\":5}}],[\"overhead\",{\"1\":{\"455\":2}}],[\"override\",{\"1\":{\"87\":1,\"90\":2,\"95\":2,\"98\":2,\"101\":2,\"105\":1,\"106\":1,\"107\":1,\"109\":1,\"110\":1,\"266\":3,\"270\":2,\"283\":1,\"376\":3,\"437\":8,\"438\":3,\"441\":2,\"467\":2,\"480\":1,\"481\":2,\"482\":1,\"492\":2,\"522\":1,\"544\":1,\"552\":1,\"590\":1,\"600\":3,\"638\":1,\"639\":1,\"640\":1,\"654\":6,\"659\":1,\"660\":1,\"663\":1,\"664\":5,\"665\":1}}],[\"overview\",{\"1\":{\"4\":1}}],[\"ofurl\",{\"1\":{\"619\":1}}],[\"ofstream\",{\"1\":{\"619\":4}}],[\"off\",{\"1\":{\"262\":1}}],[\"offset\",{\"1\":{\"219\":2,\"339\":2,\"351\":1,\"622\":14}}],[\"officetools\",{\"1\":{\"7\":2}}],[\"of\",{\"1\":{\"76\":2,\"161\":1,\"448\":1,\"625\":1,\"628\":5,\"630\":1,\"631\":1}}],[\"outputstream\",{\"1\":{\"281\":1,\"283\":5,\"618\":3}}],[\"output\",{\"1\":{\"238\":1}}],[\"out\",{\"1\":{\"63\":1,\"65\":6,\"70\":6,\"71\":5,\"76\":8,\"77\":2,\"86\":1,\"87\":4,\"89\":1,\"90\":8,\"94\":1,\"95\":8,\"98\":8,\"101\":8,\"105\":3,\"106\":1,\"107\":2,\"110\":3,\"266\":3,\"283\":1,\"284\":1,\"293\":1,\"294\":2,\"295\":1,\"296\":1,\"298\":1,\"505\":1,\"522\":1,\"544\":1,\"545\":11,\"552\":1,\"590\":1,\"614\":1,\"622\":14,\"638\":1,\"639\":1,\"640\":1,\"641\":2,\"654\":3,\"659\":1,\"660\":5,\"663\":4,\"664\":4}}],[\"oracle默认为read\",{\"1\":{\"547\":1}}],[\"orm\",{\"1\":{\"511\":1}}],[\"or\",{\"1\":{\"57\":1,\"73\":1,\"357\":2,\"628\":1}}],[\"ordered\",{\"1\":{\"437\":6,\"438\":2,\"441\":1}}],[\"ordercontroller\",{\"1\":{\"389\":1}}],[\"orderservice\",{\"1\":{\"385\":4}}],[\"orderapplication\",{\"1\":{\"372\":2}}],[\"order\",{\"1\":{\"57\":2,\"327\":4,\"389\":2,\"420\":2,\"421\":1,\"426\":1,\"436\":1}}],[\"origins\",{\"1\":{\"444\":1}}],[\"origin\",{\"1\":{\"444\":1}}],[\"original\",{\"1\":{\"39\":1}}],[\"oriented\",{\"1\":{\"30\":1,\"626\":1}}],[\"orientation=\",{\"1\":{\"21\":1}}],[\"orientaion\",{\"1\":{\"21\":1}}],[\"org\",{\"1\":{\"4\":3,\"5\":1,\"7\":1,\"11\":2,\"41\":1,\"62\":8,\"63\":9,\"65\":11,\"74\":8,\"75\":1,\"76\":12,\"77\":18,\"105\":17,\"106\":18,\"107\":17,\"108\":10,\"113\":19,\"128\":2,\"150\":3,\"151\":1,\"172\":1,\"175\":1,\"238\":1,\"246\":1,\"248\":1,\"262\":1,\"327\":3,\"362\":6,\"363\":4,\"368\":3,\"378\":2,\"392\":6,\"426\":1,\"432\":1,\"433\":1,\"434\":1,\"437\":8,\"445\":6,\"467\":2,\"471\":2,\"472\":5,\"475\":4,\"480\":3,\"481\":7,\"482\":5,\"498\":2,\"504\":14,\"505\":10,\"518\":2,\"520\":4,\"521\":6,\"522\":4,\"545\":4,\"546\":10,\"552\":3,\"553\":14,\"561\":16,\"562\":12,\"563\":4,\"564\":2,\"589\":16,\"590\":16,\"612\":4,\"613\":6,\"614\":2,\"619\":2,\"622\":1,\"636\":4,\"637\":2,\"638\":2,\"639\":1,\"640\":1,\"642\":2,\"655\":4,\"660\":2}}],[\"only\",{\"1\":{\"631\":1}}],[\"onload\",{\"1\":{\"186\":2,\"221\":1}}],[\"one\",{\"1\":{\"627\":1,\"630\":2}}],[\"onhashchange事件监听hash值的改变\",{\"1\":{\"201\":1}}],[\"on修饰符\",{\"1\":{\"159\":2}}],[\"once>\",{\"1\":{\"174\":1}}],[\"once=\",{\"1\":{\"159\":1}}],[\"once\",{\"0\":{\"174\":1},\"1\":{\"159\":2}}],[\"onclick=\",{\"1\":{\"146\":5}}],[\"on的简写方法\",{\"1\":{\"159\":1}}],[\"on绑定事件\",{\"0\":{\"159\":1}}],[\"onmessage\",{\"1\":{\"107\":1,\"110\":1,\"590\":1}}],[\"on\",{\"1\":{\"17\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"159\":3,\"262\":1,\"281\":5,\"367\":4,\"630\":2}}],[\"odysseusyuan\",{\"1\":{\"7\":1}}],[\"aop=\",{\"1\":{\"546\":1,\"553\":1}}],[\"aop示例\",{\"0\":{\"542\":1}}],[\"aop\",{\"0\":{\"540\":1,\"541\":1},\"1\":{\"528\":1,\"529\":1,\"540\":1,\"546\":7,\"553\":4,\"660\":2,\"664\":11,\"665\":8}}],[\"aof\",{\"1\":{\"331\":1}}],[\"aka\",{\"1\":{\"448\":1}}],[\"ajax请求\",{\"1\":{\"443\":1}}],[\"afilter\",{\"1\":{\"437\":4}}],[\"aftercompletion\",{\"0\":{\"584\":1},\"1\":{\"585\":1}}],[\"afterreturn\",{\"1\":{\"545\":1}}],[\"afterreturning\",{\"1\":{\"545\":3}}],[\"afterthrowing\",{\"1\":{\"545\":3}}],[\"after=2017\",{\"1\":{\"419\":1}}],[\"after\",{\"1\":{\"341\":1,\"419\":1,\"545\":3,\"660\":2,\"664\":3,\"665\":1}}],[\"attributes\",{\"1\":{\"320\":1}}],[\"attributelist\",{\"1\":{\"315\":1}}],[\"america\",{\"1\":{\"419\":4}}],[\"amd64\",{\"1\":{\"236\":2}}],[\"amqp<\",{\"1\":{\"400\":1,\"409\":1,\"410\":1,\"504\":1,\"505\":1,\"589\":1,\"590\":1}}],[\"amqpexception\",{\"1\":{\"109\":1}}],[\"amqp\",{\"1\":{\"80\":2,\"84\":1,\"87\":1,\"90\":2,\"95\":2,\"98\":2,\"101\":2,\"105\":2,\"106\":3,\"107\":2,\"504\":2,\"505\":1,\"589\":1,\"590\":2}}],[\"a的子组件\",{\"1\":{\"195\":2}}],[\"a和child\",{\"1\":{\"195\":2}}],[\"a组件<\",{\"1\":{\"195\":1}}],[\"a>\",{\"1\":{\"193\":1,\"195\":2,\"197\":1,\"208\":1,\"219\":1,\"221\":2,\"222\":1,\"223\":1}}],[\"a><\",{\"1\":{\"193\":1,\"195\":2}}],[\"aaa\",{\"1\":{\"185\":1,\"201\":1,\"205\":1}}],[\"axios\",{\"0\":{\"185\":1,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"227\":1},\"1\":{\"184\":1,\"185\":6,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"221\":3,\"222\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1}}],[\"a\",{\"1\":{\"156\":7,\"167\":4,\"168\":3,\"169\":3,\"177\":1,\"178\":1,\"193\":1,\"195\":3,\"197\":2,\"243\":1,\"437\":1,\"491\":2,\"537\":1,\"548\":1,\"627\":1,\"628\":1}}],[\"awesome\",{\"1\":{\"151\":1}}],[\"awt\",{\"1\":{\"75\":1}}],[\"acquire\",{\"1\":{\"454\":1}}],[\"actuator\",{\"1\":{\"409\":1}}],[\"actuator<\",{\"1\":{\"409\":1}}],[\"actuator实现⾃动刷新\",{\"1\":{\"408\":1}}],[\"activate\",{\"1\":{\"367\":4}}],[\"active=native\",{\"1\":{\"407\":1}}],[\"active=\",{\"1\":{\"404\":1}}],[\"active为bootstrap中的\",{\"1\":{\"229\":1}}],[\"active\",{\"1\":{\"208\":2,\"210\":2,\"229\":1,\"405\":1,\"407\":1}}],[\"action\",{\"1\":{\"65\":1}}],[\"access\",{\"1\":{\"511\":1}}],[\"accessors\",{\"1\":{\"326\":2,\"466\":1,\"619\":2,\"636\":2}}],[\"acceptable\",{\"1\":{\"438\":1}}],[\"accept\",{\"1\":{\"283\":3}}],[\"aclass\",{\"1\":{\"291\":1}}],[\"acktst\",{\"1\":{\"107\":1}}],[\"acklistener\",{\"1\":{\"107\":2,\"108\":1}}],[\"acknowledge=\",{\"1\":{\"107\":5,\"108\":2}}],[\"ack指acknowledge\",{\"1\":{\"107\":1}}],[\"ack\",{\"0\":{\"107\":1},\"1\":{\"105\":3}}],[\"available\",{\"1\":{\"261\":1,\"262\":1}}],[\"avg\",{\"1\":{\"77\":7}}],[\"avd目录下\",{\"1\":{\"18\":1}}],[\"avd文件夹迁移到一个新的位置\",{\"1\":{\"18\":1}}],[\"avd文件夹\",{\"1\":{\"18\":1}}],[\"avd\",{\"1\":{\"18\":3}}],[\"ago\",{\"1\":{\"244\":1}}],[\"agg\",{\"1\":{\"77\":2}}],[\"aggpage\",{\"1\":{\"77\":2}}],[\"aggs\",{\"1\":{\"77\":2}}],[\"aggregatedpage<car>\",{\"1\":{\"77\":2}}],[\"aggregatedpage\",{\"1\":{\"77\":1}}],[\"aggregation\",{\"1\":{\"77\":1}}],[\"aggregationbuilders\",{\"1\":{\"77\":4}}],[\"aggregations\",{\"1\":{\"77\":3}}],[\"age=0\",{\"1\":{\"293\":1}}],[\"age\",{\"1\":{\"57\":15,\"290\":4,\"521\":1}}],[\"agedm\",{\"1\":{\"11\":1}}],[\"age动漫网\",{\"1\":{\"11\":1}}],[\"authprovider\",{\"1\":{\"320\":1}}],[\"authentication\",{\"1\":{\"243\":1}}],[\"authorityinterceptor\",{\"1\":{\"122\":3,\"472\":4,\"482\":2}}],[\"author\",{\"1\":{\"59\":1,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"74\":1,\"75\":1,\"77\":3,\"84\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2,\"105\":1,\"106\":1,\"107\":2,\"272\":1,\"283\":2,\"284\":1,\"290\":1,\"303\":1,\"304\":2,\"368\":1,\"504\":2,\"505\":2,\"520\":1,\"589\":1,\"590\":2,\"595\":1,\"596\":1,\"600\":1,\"618\":1,\"619\":2,\"646\":1,\"647\":1,\"659\":2,\"660\":2,\"664\":3,\"665\":1}}],[\"autoproxy通过扫描找到\",{\"1\":{\"546\":1}}],[\"autoproxy的底层是由\",{\"1\":{\"546\":1}}],[\"autoproxy\",{\"1\":{\"546\":1}}],[\"autowire\",{\"1\":{\"537\":1}}],[\"autowired与\",{\"1\":{\"538\":1}}],[\"autowired\",{\"1\":{\"76\":3,\"77\":3,\"105\":2,\"106\":2,\"113\":4,\"373\":1,\"385\":1,\"389\":2,\"393\":1,\"441\":1,\"504\":2,\"538\":1,\"589\":2}}],[\"automatictransitionfromopentohalfopenenabled\",{\"1\":{\"382\":2,\"440\":1}}],[\"automake\",{\"1\":{\"246\":1}}],[\"autoconfigure\",{\"1\":{\"368\":1,\"445\":1}}],[\"autoconf\",{\"1\":{\"246\":1}}],[\"auto\",{\"1\":{\"107\":1,\"589\":8,\"590\":1}}],[\"autodelete\",{\"1\":{\"86\":1,\"87\":1}}],[\"autoack\",{\"1\":{\"85\":1,\"87\":1}}],[\"advice\",{\"1\":{\"540\":1}}],[\"administrator\",{\"1\":{\"405\":1}}],[\"admin\",{\"1\":{\"59\":1,\"60\":1,\"63\":1,\"75\":1,\"105\":1,\"106\":1,\"589\":1}}],[\"addlist\",{\"1\":{\"524\":2}}],[\"addlast​\",{\"1\":{\"316\":1}}],[\"addargumentresolvers\",{\"1\":{\"482\":1}}],[\"addaggregation\",{\"1\":{\"77\":2}}],[\"addrank\",{\"1\":{\"327\":1}}],[\"addresourcelocations\",{\"1\":{\"122\":3,\"472\":3}}],[\"addresourcehandler\",{\"1\":{\"122\":3,\"472\":3}}],[\"addresourcehandlers\",{\"1\":{\"122\":1,\"472\":1}}],[\"addresses\",{\"1\":{\"400\":1}}],[\"addresses=localhost\",{\"1\":{\"400\":2,\"401\":2}}],[\"address\",{\"1\":{\"57\":1,\"59\":1,\"113\":2,\"280\":2,\"304\":3}}],[\"addfirst​\",{\"1\":{\"316\":1}}],[\"addcookie\",{\"1\":{\"266\":1}}],[\"addhero\",{\"1\":{\"224\":2}}],[\"addpathpatterns\",{\"1\":{\"122\":1,\"472\":2,\"482\":1}}],[\"additem\",{\"1\":{\"188\":1}}],[\"addinterceptor\",{\"1\":{\"122\":1,\"472\":2,\"482\":1}}],[\"addinterceptors\",{\"1\":{\"122\":1,\"472\":1,\"482\":1}}],[\"addids\",{\"1\":{\"69\":1}}],[\"add\",{\"1\":{\"82\":1,\"223\":3,\"303\":2,\"304\":1,\"314\":1,\"315\":2,\"327\":1,\"363\":2,\"482\":1,\"544\":3,\"545\":1,\"552\":2,\"579\":1,\"599\":3,\"600\":2,\"619\":3}}],[\"adddocument\",{\"1\":{\"76\":1,\"77\":1}}],[\"addtransportaddress\",{\"1\":{\"59\":1,\"60\":1,\"62\":1,\"63\":1,\"65\":1}}],[\"alter\",{\"1\":{\"243\":2,\"256\":2}}],[\"alert\",{\"1\":{\"146\":1,\"224\":2,\"226\":2}}],[\"alerttest\",{\"1\":{\"146\":2}}],[\"allow\",{\"1\":{\"444\":1}}],[\"allowed\",{\"1\":{\"444\":4}}],[\"allargsconstructor\",{\"1\":{\"326\":2,\"492\":2}}],[\"all\",{\"1\":{\"57\":3,\"77\":1,\"100\":3,\"101\":3,\"128\":4,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"382\":1,\"448\":1,\"487\":5,\"628\":1}}],[\"aliginright\",{\"1\":{\"25\":1}}],[\"alignbottom\",{\"1\":{\"25\":1}}],[\"aligntop\",{\"1\":{\"25\":1}}],[\"alignleft\",{\"1\":{\"25\":1}}],[\"alignparentright\",{\"1\":{\"23\":1}}],[\"alignparentleft\",{\"1\":{\"23\":1}}],[\"alignparentbottom\",{\"1\":{\"23\":1}}],[\"alignparenttop\",{\"1\":{\"23\":1}}],[\"alibaba<\",{\"1\":{\"558\":1}}],[\"alibaba的sentinel组件\",{\"1\":{\"381\":1}}],[\"alibaba\",{\"1\":{\"4\":2,\"480\":1,\"492\":1,\"558\":1,\"561\":1,\"599\":5,\"600\":3,\"603\":2}}],[\"aliyuncs\",{\"1\":{\"398\":1}}],[\"aliyun\",{\"1\":{\"3\":1,\"17\":11,\"116\":2}}],[\"around\",{\"1\":{\"545\":4}}],[\"are\",{\"1\":{\"382\":1,\"448\":1}}],[\"archiva\",{\"1\":{\"398\":1}}],[\"archive\",{\"1\":{\"5\":1,\"262\":1}}],[\"arch\",{\"1\":{\"262\":4}}],[\"arrive\",{\"1\":{\"589\":5}}],[\"array>\",{\"1\":{\"561\":1}}],[\"array是有序元素序列\",{\"1\":{\"310\":1}}],[\"arraylist<t>\",{\"1\":{\"304\":1}}],[\"arraylist<>\",{\"1\":{\"303\":2,\"304\":13,\"327\":1,\"363\":1,\"599\":2,\"600\":2,\"619\":2}}],[\"arraylist\",{\"1\":{\"303\":1,\"304\":1,\"315\":1,\"327\":1,\"363\":1,\"524\":1,\"599\":1,\"600\":1,\"619\":1}}],[\"arrays\",{\"1\":{\"71\":1,\"122\":1,\"304\":13,\"472\":2,\"482\":2,\"606\":1,\"612\":2}}],[\"arr\",{\"1\":{\"163\":1}}],[\"arg\",{\"1\":{\"545\":2}}],[\"args\",{\"1\":{\"86\":1,\"87\":1,\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2,\"283\":1,\"284\":1,\"368\":2,\"369\":2,\"372\":2,\"391\":2,\"405\":2,\"416\":2,\"440\":1,\"445\":2,\"522\":1,\"545\":3,\"641\":1,\"656\":1,\"662\":2,\"663\":2,\"664\":3}}],[\"arguments>\",{\"1\":{\"109\":2,\"110\":2}}],[\"arguments\",{\"1\":{\"86\":1,\"87\":1}}],[\"artifactid>\",{\"1\":{\"58\":7,\"63\":3,\"74\":5,\"84\":1,\"113\":8,\"301\":1,\"369\":2,\"372\":1,\"375\":1,\"382\":1,\"383\":1,\"386\":1,\"399\":2,\"400\":1,\"406\":1,\"409\":2,\"410\":1,\"439\":1,\"470\":1,\"504\":4,\"505\":4,\"517\":7,\"543\":2,\"551\":4,\"558\":12,\"589\":4,\"590\":4,\"603\":1,\"609\":2,\"617\":6,\"665\":1}}],[\"articledao\",{\"1\":{\"75\":1,\"76\":12}}],[\"article\",{\"1\":{\"43\":1,\"60\":2,\"62\":1,\"63\":18,\"65\":1,\"70\":1,\"71\":1,\"74\":2,\"75\":1,\"76\":11}}],[\"able\",{\"1\":{\"628\":1}}],[\"abatis\",{\"1\":{\"511\":1}}],[\"ab\",{\"1\":{\"448\":1}}],[\"abstract\",{\"1\":{\"637\":2}}],[\"abstractions不应依赖于细节\",{\"1\":{\"629\":1}}],[\"abstractions\",{\"1\":{\"629\":3}}],[\"abstractgatewayfilterfactory<object>\",{\"1\":{\"438\":1}}],[\"abstractmap\",{\"1\":{\"320\":1}}],[\"abstractset<e>\",{\"1\":{\"318\":1}}],[\"abstractset\",{\"1\":{\"317\":1,\"318\":1}}],[\"abstractsequentiallist<e>\",{\"1\":{\"316\":1}}],[\"abstractsequentiallist\",{\"1\":{\"315\":1,\"316\":1}}],[\"abstractlist\",{\"1\":{\"315\":1}}],[\"absolutelayout绝对布局\",{\"1\":{\"20\":1}}],[\"abc\",{\"1\":{\"99\":1,\"154\":1,\"171\":1,\"190\":1,\"194\":1}}],[\"above\",{\"1\":{\"24\":1}}],[\"app>\",{\"1\":{\"563\":1}}],[\"appdata\",{\"1\":{\"405\":1}}],[\"append\",{\"1\":{\"337\":2}}],[\"apply\",{\"1\":{\"438\":1}}],[\"applet\",{\"1\":{\"265\":1}}],[\"applist\",{\"1\":{\"219\":2}}],[\"applicationcontext\",{\"0\":{\"533\":1},\"1\":{\"530\":1,\"533\":2,\"534\":1,\"535\":1}}],[\"application\",{\"0\":{\"406\":1},\"1\":{\"74\":1,\"113\":2,\"367\":2,\"368\":2,\"369\":3,\"375\":1,\"377\":2,\"378\":1,\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"391\":3,\"399\":2,\"404\":1,\"405\":7,\"406\":2,\"407\":1,\"409\":1,\"410\":2,\"415\":1,\"417\":1,\"440\":1,\"445\":2,\"504\":1,\"505\":1,\"535\":1,\"563\":1,\"613\":1}}],[\"appsilder>\",{\"1\":{\"219\":1}}],[\"appheader>\",{\"1\":{\"219\":1}}],[\"app\",{\"1\":{\"153\":3,\"154\":1,\"155\":1,\"173\":1,\"194\":1,\"197\":2,\"203\":1,\"214\":1,\"219\":3,\"233\":1,\"247\":1,\"248\":10,\"289\":2,\"405\":1,\"427\":6,\"563\":2}}],[\"apk\",{\"1\":{\"21\":1}}],[\"apis\",{\"1\":{\"471\":1}}],[\"apiinfo\",{\"1\":{\"471\":5}}],[\"apiinfobuilder\",{\"1\":{\"471\":2}}],[\"apioperation\",{\"1\":{\"471\":2}}],[\"apimodelproperty\",{\"1\":{\"466\":1}}],[\"api进⾏通信\",{\"1\":{\"448\":1}}],[\"api接⼝的⽹络请求框架\",{\"1\":{\"389\":1}}],[\"api<\",{\"1\":{\"58\":1,\"558\":1}}],[\"apifox\",{\"0\":{\"42\":1},\"1\":{\"46\":1,\"48\":1,\"49\":1}}],[\"api来隐藏\",{\"1\":{\"29\":1}}],[\"api\",{\"0\":{\"151\":1},\"1\":{\"18\":6,\"42\":1,\"60\":1,\"76\":1,\"77\":1,\"107\":1,\"413\":1,\"415\":1,\"417\":1,\"429\":3,\"430\":3,\"431\":2,\"439\":1,\"440\":1,\"445\":1,\"529\":3,\"558\":3}}],[\"apachecharts\",{\"1\":{\"4\":1}}],[\"apache\",{\"1\":{\"4\":3,\"58\":1,\"74\":3,\"113\":5,\"437\":1,\"467\":1,\"504\":3,\"505\":3,\"511\":2,\"520\":4,\"521\":1,\"558\":1,\"609\":1,\"612\":4,\"613\":6,\"614\":2,\"617\":3,\"622\":1}}],[\"aspects<\",{\"1\":{\"543\":1}}],[\"aspectj的通知类型\",{\"1\":{\"541\":1}}],[\"aspectj\",{\"0\":{\"541\":1},\"1\":{\"540\":1,\"541\":1,\"545\":5,\"546\":5}}],[\"aspect\",{\"1\":{\"540\":1,\"545\":3,\"546\":1}}],[\"asc|desc\",{\"1\":{\"353\":2}}],[\"asc\",{\"1\":{\"324\":1,\"327\":1}}],[\"ascii\",{\"1\":{\"11\":1}}],[\"assert\",{\"1\":{\"660\":1}}],[\"assets\",{\"1\":{\"214\":1,\"217\":1}}],[\"assistant\",{\"1\":{\"8\":1}}],[\"as\",{\"1\":{\"127\":4,\"128\":8,\"137\":1,\"138\":1,\"139\":4,\"140\":4,\"382\":1}}],[\"aslist\",{\"1\":{\"122\":1,\"304\":13,\"472\":1,\"482\":1,\"606\":1}}],[\"asmap\",{\"1\":{\"77\":1}}],[\"aihao\",{\"1\":{\"266\":1}}],[\"aihaos\",{\"1\":{\"266\":2}}],[\"ai\",{\"1\":{\"8\":1}}],[\"another\",{\"1\":{\"630\":1}}],[\"ano|grep\",{\"1\":{\"248\":1}}],[\"analysiscontext\",{\"1\":{\"599\":3,\"600\":5}}],[\"analyze\",{\"1\":{\"52\":2}}],[\"analyzer=ik\",{\"1\":{\"52\":2}}],[\"analyzer\",{\"1\":{\"43\":2,\"44\":2,\"52\":1,\"53\":2,\"57\":8,\"60\":2,\"74\":2,\"77\":3}}],[\"analyzed\",{\"1\":{\"43\":3,\"44\":1,\"53\":3}}],[\"any\",{\"1\":{\"471\":1}}],[\"ant\",{\"1\":{\"123\":1,\"423\":1}}],[\"antd\",{\"1\":{\"123\":2}}],[\"annotationtype\",{\"1\":{\"599\":2}}],[\"annotationawareaspectjautoproxycreator\",{\"1\":{\"546\":1}}],[\"annotations\",{\"1\":{\"74\":3,\"77\":3,\"466\":1,\"471\":3,\"521\":1}}],[\"annotations<\",{\"1\":{\"63\":1}}],[\"annotation\",{\"1\":{\"74\":1,\"76\":1,\"77\":2,\"105\":1,\"106\":1,\"113\":8,\"272\":1,\"362\":2,\"378\":2,\"392\":5,\"396\":1,\"437\":2,\"445\":1,\"466\":3,\"471\":2,\"472\":4,\"475\":3,\"479\":1,\"480\":1,\"482\":4,\"493\":6,\"498\":1,\"504\":4,\"505\":1,\"545\":1,\"552\":2,\"553\":1,\"561\":1,\"562\":1,\"564\":1,\"589\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":1,\"599\":1}}],[\"and\",{\"1\":{\"57\":1,\"73\":1,\"134\":1,\"139\":1,\"448\":2,\"521\":1,\"631\":1}}],[\"android=\",{\"1\":{\"21\":1}}],[\"android2\",{\"1\":{\"20\":1}}],[\"android的ui可以分为两类\",{\"1\":{\"20\":1}}],[\"android系列之ui\",{\"0\":{\"20\":1}}],[\"android系列之android\",{\"0\":{\"14\":1}}],[\"android\",{\"0\":{\"15\":1,\"670\":1},\"1\":{\"15\":2,\"18\":3,\"21\":6,\"24\":2},\"2\":{\"19\":1,\"27\":1}}],[\"an\",{\"1\":{\"8\":1,\"628\":1}}],[\"each\",{\"1\":{\"628\":1}}],[\"easylistener\",{\"1\":{\"600\":1}}],[\"easylistener<t>\",{\"1\":{\"600\":1}}],[\"easyexcelutil\",{\"1\":{\"599\":1,\"600\":4}}],[\"easyexcel\",{\"0\":{\"593\":1},\"1\":{\"4\":1,\"596\":1}}],[\"easyexcel文档\",{\"1\":{\"4\":1}}],[\"ehcache\",{\"1\":{\"530\":1}}],[\"ejb\",{\"1\":{\"530\":1}}],[\"ee\",{\"1\":{\"529\":2}}],[\"eee\",{\"1\":{\"205\":1}}],[\"eviction\",{\"1\":{\"367\":1,\"368\":1}}],[\"event\",{\"1\":{\"159\":1}}],[\"everything\",{\"1\":{\"7\":1}}],[\"equals\",{\"1\":{\"266\":1,\"318\":1,\"327\":1,\"363\":5,\"481\":1,\"492\":1,\"599\":2,\"654\":3}}],[\"equalsandhashcode\",{\"1\":{\"120\":1}}],[\"ef|grep\",{\"1\":{\"248\":1,\"332\":1}}],[\"echo\",{\"1\":{\"244\":8}}],[\"echarts\",{\"1\":{\"4\":1}}],[\"etc\",{\"1\":{\"234\":1}}],[\"ebin\",{\"1\":{\"233\":1}}],[\"emaphore\",{\"1\":{\"454\":1}}],[\"email\",{\"1\":{\"223\":1,\"304\":3,\"491\":1,\"521\":1}}],[\"empty\",{\"1\":{\"382\":2,\"642\":1}}],[\"emqx官网下载\",{\"1\":{\"236\":1}}],[\"emqx\",{\"1\":{\"236\":7}}],[\"em>\",{\"1\":{\"71\":1}}],[\"edgware\",{\"1\":{\"448\":3}}],[\"edithero\",{\"1\":{\"226\":1}}],[\"edit\",{\"1\":{\"225\":3}}],[\"editorconfig\",{\"1\":{\"214\":1}}],[\"edu\",{\"1\":{\"2\":1,\"5\":1}}],[\"err\",{\"1\":{\"185\":1,\"189\":2,\"244\":1,\"252\":1}}],[\"errorlist\",{\"1\":{\"600\":3}}],[\"error=\",{\"1\":{\"252\":1}}],[\"errors\",{\"1\":{\"238\":1}}],[\"error\",{\"1\":{\"122\":1,\"472\":1,\"475\":8,\"480\":1,\"482\":1,\"486\":1,\"487\":8,\"612\":1}}],[\"erlang\",{\"1\":{\"80\":2,\"233\":2}}],[\"eurekaapplication\",{\"1\":{\"368\":2}}],[\"eureka2\",{\"1\":{\"366\":1}}],[\"eureka会将该服务实例从服务注册中⼼中剔除\",{\"1\":{\"366\":1}}],[\"eureka主要涉及到三⼤⻆⾊\",{\"1\":{\"366\":1}}],[\"eureka分为eureka\",{\"1\":{\"366\":1}}],[\"eureka是⼀个⽤于服务注册和发现的组件\",{\"1\":{\"366\":1}}],[\"eureka是netflix在线影⽚公司开源的⼀个服务注册和发现组件\",{\"1\":{\"366\":1}}],[\"eureka\",{\"0\":{\"366\":1,\"367\":1,\"368\":1,\"369\":1},\"1\":{\"113\":3,\"366\":3,\"367\":16,\"368\":8,\"369\":6,\"372\":1,\"389\":2,\"405\":2,\"417\":2,\"440\":2,\"445\":3}}],[\"element\",{\"1\":{\"315\":2,\"354\":2}}],[\"elementtype\",{\"1\":{\"272\":4,\"479\":1,\"493\":2,\"595\":2,\"596\":1,\"597\":1,\"598\":1}}],[\"el7\",{\"1\":{\"233\":2,\"236\":2,\"242\":4}}],[\"el\",{\"0\":{\"153\":1},\"1\":{\"153\":3,\"154\":1,\"155\":1,\"197\":1,\"203\":1,\"219\":1}}],[\"else\",{\"1\":{\"105\":1,\"113\":1,\"224\":2,\"226\":2,\"467\":2,\"622\":2,\"664\":1,\"665\":1}}],[\"elastic\",{\"1\":{\"54\":1}}],[\"elasticsearchtemplate\",{\"1\":{\"76\":2,\"77\":2}}],[\"elasticsearchrepository<car\",{\"1\":{\"77\":1}}],[\"elasticsearchrepository<article\",{\"1\":{\"75\":1}}],[\"elasticsearchrepository\",{\"1\":{\"75\":1,\"77\":1}}],[\"elasticsearch<\",{\"1\":{\"58\":1,\"74\":1}}],[\"elasticsearch提供了⼀整套基于json的dsl语⾔来定义查询\",{\"1\":{\"56\":1}}],[\"elasticsearch提供了将索引划分成多份的能⼒\",{\"1\":{\"39\":1}}],[\"elasticsearch协作\",{\"1\":{\"54\":1}}],[\"elasticsearch不同于solr⾃带图形化界⾯\",{\"1\":{\"41\":1}}],[\"elasticsearch的客户端操作\",{\"0\":{\"40\":1}}],[\"elasticsearch中的每个索引被分⽚5个主分⽚和1个复制\",{\"1\":{\"39\":1}}],[\"elasticsearch允许你创建分⽚的⼀份或多份拷贝\",{\"1\":{\"39\":1}}],[\"elasticsearch节点\",{\"1\":{\"38\":1}}],[\"elasticsearch是⼀个基于lucene的搜索服务器\",{\"1\":{\"46\":1,\"53\":1}}],[\"elasticsearch是⼀个接近实时的搜索平台\",{\"1\":{\"36\":1}}],[\"elasticsearch是⾯向⽂档\",{\"1\":{\"30\":1}}],[\"elasticsearch⽐传统关系型数据库如下\",{\"1\":{\"30\":1}}],[\"elasticsearch\",{\"0\":{\"41\":1,\"58\":1,\"72\":1},\"1\":{\"29\":5,\"30\":1,\"37\":1,\"38\":3,\"40\":1,\"41\":3,\"42\":3,\"54\":2,\"55\":1,\"58\":1,\"59\":2,\"60\":1,\"62\":7,\"63\":8,\"65\":10,\"74\":5,\"75\":1,\"76\":5,\"77\":12,\"401\":4}}],[\"elasticsearch对⽐solr\",{\"1\":{\"29\":1}}],[\"elasticsearch全文检索\",{\"0\":{\"28\":1}}],[\"elaticsearch\",{\"1\":{\"29\":1}}],[\"e\",{\"1\":{\"84\":2,\"86\":2,\"87\":2,\"89\":2,\"90\":4,\"94\":2,\"95\":4,\"97\":2,\"98\":4,\"100\":2,\"101\":4,\"107\":2,\"110\":2,\"113\":2,\"171\":2,\"243\":1,\"244\":1,\"263\":1,\"283\":6,\"284\":2,\"291\":2,\"303\":12,\"304\":12,\"314\":6,\"315\":7,\"316\":11,\"382\":2,\"401\":1,\"475\":8,\"480\":2,\"520\":2,\"590\":2,\"612\":2,\"622\":5,\"660\":1,\"663\":2,\"664\":2,\"665\":2}}],[\"ex\",{\"1\":{\"545\":2}}],[\"exist\",{\"1\":{\"382\":1,\"384\":1,\"385\":1,\"386\":1}}],[\"exists\",{\"1\":{\"57\":3,\"129\":1,\"336\":2}}],[\"exec\",{\"1\":{\"358\":3,\"398\":2,\"400\":3,\"401\":2}}],[\"execution\",{\"1\":{\"541\":5,\"545\":5}}],[\"executionexception\",{\"1\":{\"382\":1,\"384\":1,\"385\":1,\"386\":1}}],[\"executequery\",{\"1\":{\"303\":2,\"304\":2}}],[\"executeupdate\",{\"1\":{\"303\":1,\"304\":1}}],[\"executesql\",{\"1\":{\"303\":1,\"304\":1}}],[\"execute\",{\"1\":{\"283\":1,\"614\":4}}],[\"executor\",{\"1\":{\"283\":3}}],[\"executors\",{\"1\":{\"283\":2}}],[\"executorservice\",{\"1\":{\"283\":2}}],[\"expression\",{\"1\":{\"530\":2}}],[\"exposure\",{\"1\":{\"409\":1}}],[\"export\",{\"1\":{\"220\":1}}],[\"exports\",{\"1\":{\"213\":1}}],[\"experimental\",{\"1\":{\"326\":1,\"466\":1,\"619\":1,\"636\":1}}],[\"expiretime\",{\"1\":{\"363\":3}}],[\"expire\",{\"1\":{\"123\":2,\"327\":4,\"336\":2,\"363\":6}}],[\"expiration\",{\"1\":{\"113\":1,\"367\":1}}],[\"examuserid\",{\"1\":{\"363\":3}}],[\"examuserredistempkey\",{\"1\":{\"327\":3}}],[\"examuserrediskey\",{\"1\":{\"327\":6}}],[\"examrankutil\",{\"1\":{\"326\":2,\"327\":1}}],[\"examtime\",{\"1\":{\"324\":6,\"326\":4,\"327\":3}}],[\"examid\",{\"1\":{\"324\":6,\"326\":3,\"327\":8}}],[\"exam\",{\"1\":{\"324\":9,\"327\":6}}],[\"example\",{\"1\":{\"234\":1,\"266\":1,\"432\":1,\"433\":1,\"434\":1}}],[\"exampleinputpassword1\",{\"1\":{\"223\":2}}],[\"exampleinputemail1\",{\"1\":{\"223\":2}}],[\"examples\",{\"1\":{\"4\":1}}],[\"exact\",{\"1\":{\"208\":1}}],[\"ext<\",{\"1\":{\"617\":1}}],[\"extern\",{\"1\":{\"437\":1,\"467\":1,\"475\":1,\"480\":1,\"481\":1,\"492\":1,\"498\":1,\"612\":1,\"614\":1}}],[\"extensionclassloader是用java编写\",{\"1\":{\"289\":1}}],[\"extensionclassloader\",{\"1\":{\"289\":1}}],[\"extends\",{\"1\":{\"75\":1,\"77\":1,\"266\":2,\"316\":1,\"318\":1,\"438\":1,\"475\":1,\"492\":1,\"638\":1,\"639\":1,\"640\":1,\"663\":1}}],[\"ext目录中的类库\",{\"1\":{\"289\":1}}],[\"extname\",{\"1\":{\"113\":2}}],[\"excelfieldverification\",{\"1\":{\"599\":4}}],[\"excelproperty\",{\"1\":{\"599\":7}}],[\"excel\",{\"1\":{\"475\":1,\"492\":1,\"599\":7,\"600\":4}}],[\"excelexception\",{\"1\":{\"475\":1}}],[\"exceptionhandler\",{\"1\":{\"475\":4}}],[\"exceptions\",{\"1\":{\"382\":1}}],[\"exception\",{\"1\":{\"59\":2,\"60\":2,\"62\":2,\"63\":3,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"107\":2,\"110\":2,\"113\":3,\"382\":2,\"440\":1,\"475\":8,\"480\":1,\"545\":1,\"552\":2,\"590\":1,\"622\":8,\"660\":3,\"663\":1,\"664\":4,\"665\":2}}],[\"exclusions>\",{\"1\":{\"617\":2}}],[\"exclusion>\",{\"1\":{\"617\":3}}],[\"exclusive\",{\"1\":{\"86\":1,\"87\":1}}],[\"excludepathpatterns\",{\"1\":{\"122\":1,\"472\":2,\"482\":1}}],[\"exclude\",{\"1\":{\"122\":2,\"472\":3,\"482\":2}}],[\"exchangebuilder\",{\"1\":{\"504\":1}}],[\"exchange>\",{\"1\":{\"105\":1,\"106\":1,\"109\":1,\"110\":2,\"589\":2}}],[\"exchange不再把消息交给每一个绑定的队列\",{\"1\":{\"96\":1}}],[\"exchange发送消息时\",{\"1\":{\"96\":1}}],[\"exchangedeclare\",{\"1\":{\"94\":2,\"97\":2,\"100\":2,\"101\":2}}],[\"exchange有常见以下3种类型\",{\"1\":{\"91\":1}}],[\"exchange\",{\"1\":{\"80\":4,\"83\":1,\"85\":2,\"86\":2,\"87\":1,\"91\":2,\"94\":8,\"95\":2,\"97\":9,\"98\":2,\"100\":7,\"101\":5,\"104\":2,\"105\":4,\"106\":6,\"109\":2,\"110\":10,\"437\":11,\"438\":7,\"441\":3,\"504\":11,\"589\":20}}],[\"enhancer\",{\"1\":{\"665\":3}}],[\"encodebase64\",{\"1\":{\"622\":3}}],[\"encodebase64string\",{\"1\":{\"622\":1}}],[\"encoding=\",{\"1\":{\"21\":1,\"74\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":1,\"504\":1,\"505\":1,\"518\":1,\"521\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"563\":1,\"589\":1,\"590\":1}}],[\"encryptdata\",{\"1\":{\"622\":3}}],[\"encrypteddata\",{\"1\":{\"622\":2}}],[\"encrypt\",{\"1\":{\"492\":12,\"622\":7}}],[\"enums\",{\"1\":{\"492\":1,\"493\":1}}],[\"enumset\",{\"1\":{\"317\":1}}],[\"enumcode\",{\"1\":{\"487\":3}}],[\"enum\",{\"1\":{\"486\":1,\"491\":1,\"611\":1,\"653\":1}}],[\"enummap\",{\"1\":{\"320\":1}}],[\"environment的id表示\",{\"1\":{\"523\":1}}],[\"environments\",{\"1\":{\"523\":2}}],[\"environments>\",{\"1\":{\"518\":1}}],[\"environment>\",{\"1\":{\"518\":1}}],[\"environment\",{\"1\":{\"289\":1,\"523\":4}}],[\"envelope\",{\"1\":{\"87\":6,\"90\":10,\"95\":10,\"98\":10,\"101\":10}}],[\"endregion\",{\"1\":{\"363\":4,\"470\":1}}],[\"end\",{\"1\":{\"339\":1,\"356\":4,\"363\":3,\"448\":1,\"517\":2,\"558\":2,\"617\":1}}],[\"endpoints\",{\"1\":{\"409\":1}}],[\"endpoint\",{\"1\":{\"281\":2,\"409\":1}}],[\"endobject\",{\"1\":{\"60\":6,\"62\":1}}],[\"engine=innodb\",{\"1\":{\"252\":1}}],[\"enablescheduling\",{\"1\":{\"497\":1}}],[\"enableswagger2webmvc\",{\"1\":{\"471\":2}}],[\"enableknife4j\",{\"1\":{\"471\":2}}],[\"enableconfigserver\",{\"1\":{\"405\":1}}],[\"enablefeignclients\",{\"1\":{\"372\":2}}],[\"enableeurekaserver\",{\"1\":{\"368\":3}}],[\"enable\",{\"1\":{\"233\":1,\"367\":1,\"368\":1}}],[\"enablediscoveryclient\",{\"1\":{\"369\":1,\"372\":1,\"416\":1,\"445\":2}}],[\"enabled\",{\"1\":{\"113\":1,\"375\":1,\"377\":2,\"409\":1}}],[\"entityutils\",{\"1\":{\"612\":2}}],[\"entity\",{\"1\":{\"521\":2,\"522\":2,\"561\":1,\"612\":1,\"613\":2,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"640\":1}}],[\"entries\",{\"1\":{\"363\":1}}],[\"entryset\",{\"1\":{\"71\":1,\"599\":1,\"613\":1}}],[\"entry\",{\"1\":{\"71\":3}}],[\"entry<string\",{\"1\":{\"71\":1,\"599\":1}}],[\"enter\",{\"1\":{\"210\":3,\"382\":1,\"384\":1,\"385\":1,\"386\":1}}],[\"enter或tab\",{\"1\":{\"54\":1}}],[\"en\",{\"1\":{\"41\":1,\"146\":1,\"246\":1,\"518\":1,\"521\":1}}],[\"esilience4j\",{\"1\":{\"381\":1}}],[\"essential\",{\"1\":{\"232\":1}}],[\"eslint代码规范检查配置文件\",{\"1\":{\"214\":1}}],[\"eslintrc\",{\"1\":{\"214\":1}}],[\"es6\",{\"1\":{\"155\":1}}],[\"esdemo2applicationtests\",{\"1\":{\"76\":1}}],[\"esdemo2\",{\"1\":{\"76\":2,\"77\":2}}],[\"esc\",{\"1\":{\"54\":1}}],[\"es自己的分词模式\",{\"1\":{\"52\":1}}],[\"es\",{\"0\":{\"30\":1},\"1\":{\"30\":4,\"43\":2,\"46\":3,\"48\":1,\"49\":1,\"59\":1,\"401\":2}}],[\"es也使⽤java开发并使⽤lucene作为其核⼼来实现所有索引和搜索的功能\",{\"1\":{\"29\":1}}],[\"es是⼀个开源的⾼扩展的分布式全⽂检索引擎\",{\"1\":{\"29\":1}}],[\"sf\",{\"1\":{\"665\":3}}],[\"square\",{\"1\":{\"653\":1,\"654\":3,\"655\":1}}],[\"sqlsession获取mapper\",{\"0\":{\"520\":1}}],[\"sqlsession接口对象用于执行持久化操作\",{\"1\":{\"515\":1}}],[\"sqlsession\",{\"1\":{\"515\":3,\"520\":16}}],[\"sqlsessionfactorybeanname\",{\"1\":{\"561\":1}}],[\"sqlsessionfactorybean\",{\"1\":{\"561\":1}}],[\"sqlsessionfactorybuilder\",{\"0\":{\"514\":1},\"1\":{\"520\":3}}],[\"sqlsessionfactory\",{\"0\":{\"515\":1},\"1\":{\"515\":1,\"520\":4,\"561\":3}}],[\"sqlsessionfactory的创建\",{\"1\":{\"514\":1}}],[\"sqlcolname\",{\"1\":{\"304\":3}}],[\"sql语句\",{\"1\":{\"303\":3,\"304\":3}}],[\"sql异常\",{\"1\":{\"303\":1,\"304\":1}}],[\"sqlexception\",{\"1\":{\"303\":9,\"304\":9}}],[\"sqlite\",{\"1\":{\"233\":1}}],[\"sql\",{\"0\":{\"673\":1},\"1\":{\"56\":1,\"244\":3,\"303\":16,\"304\":16,\"511\":1,\"524\":3,\"548\":1},\"2\":{\"131\":1,\"145\":1}}],[\"switch\",{\"1\":{\"613\":1}}],[\"swagger2\",{\"1\":{\"471\":1}}],[\"swaggerconfig\",{\"0\":{\"471\":1},\"1\":{\"471\":1}}],[\"swagger配置\",{\"1\":{\"122\":1,\"472\":1}}],[\"swagger\",{\"0\":{\"121\":1},\"1\":{\"122\":3,\"466\":1,\"470\":1,\"471\":2,\"472\":3,\"482\":2}}],[\"swaggertools\",{\"1\":{\"8\":1}}],[\"sky\",{\"1\":{\"405\":1}}],[\"svn\",{\"1\":{\"404\":1}}],[\"sleuth<\",{\"1\":{\"399\":1}}],[\"sleuth采⽤的是google的开源项⽬dapper的专业术语\",{\"1\":{\"396\":1}}],[\"sleuth\",{\"0\":{\"396\":1},\"1\":{\"399\":3,\"400\":1}}],[\"sleep\",{\"1\":{\"382\":1,\"384\":1,\"385\":1,\"386\":1}}],[\"slf4j\",{\"1\":{\"385\":1,\"410\":1,\"437\":3,\"438\":1,\"441\":1,\"442\":1,\"467\":3,\"475\":3,\"480\":3,\"481\":3,\"492\":3,\"498\":3,\"612\":3,\"614\":3}}],[\"slf4j<\",{\"1\":{\"58\":3}}],[\"slidingwindowsize\",{\"1\":{\"382\":3,\"440\":2}}],[\"slidingwindowtype\",{\"1\":{\"382\":3,\"440\":2}}],[\"slowcalldurationthreshold\",{\"1\":{\"382\":3,\"440\":2}}],[\"slowcallratethreshold\",{\"1\":{\"382\":2,\"440\":1}}],[\"sdiffstore\",{\"1\":{\"347\":1}}],[\"sdiff\",{\"1\":{\"346\":1}}],[\"sdk默认位置\",{\"1\":{\"16\":2}}],[\"srp\",{\"0\":{\"627\":1},\"1\":{\"625\":1,\"627\":1}}],[\"sr5\",{\"1\":{\"448\":1}}],[\"sr\",{\"1\":{\"396\":1}}],[\"srem\",{\"1\":{\"346\":1}}],[\"srandmember\",{\"1\":{\"346\":1}}],[\"srcdata\",{\"1\":{\"622\":3}}],[\"src\",{\"1\":{\"214\":1,\"248\":2}}],[\"src=\",{\"1\":{\"123\":2,\"146\":2,\"150\":1}}],[\"sbin\",{\"1\":{\"248\":1}}],[\"ssm\",{\"0\":{\"557\":1},\"1\":{\"558\":1}}],[\"sset\",{\"1\":{\"363\":1}}],[\"sscan\",{\"1\":{\"346\":1}}],[\"ssl\",{\"1\":{\"248\":1}}],[\"ss\",{\"1\":{\"178\":1,\"396\":1,\"466\":2}}],[\"s1\",{\"1\":{\"146\":2}}],[\"spec\",{\"1\":{\"622\":2}}],[\"special\",{\"1\":{\"116\":1}}],[\"spel\",{\"1\":{\"530\":1}}],[\"spi\",{\"1\":{\"471\":1}}],[\"spirng\",{\"0\":{\"372\":1},\"1\":{\"399\":1}}],[\"spop\",{\"1\":{\"346\":1}}],[\"span的id\",{\"1\":{\"396\":1}}],[\"span还有其他数据信息\",{\"1\":{\"396\":1}}],[\"span有⼀个64位id唯⼀标识的\",{\"1\":{\"396\":1}}],[\"span\",{\"1\":{\"396\":1}}],[\"span>\",{\"1\":{\"146\":1}}],[\"spa\",{\"0\":{\"200\":1}}],[\"spa缺点\",{\"1\":{\"199\":1}}],[\"spa优点\",{\"1\":{\"199\":1}}],[\"spa模式\",{\"1\":{\"199\":1}}],[\"split\",{\"1\":{\"156\":1,\"183\":1}}],[\"springqueuelistener\",{\"1\":{\"590\":9}}],[\"spring依赖\",{\"1\":{\"589\":1,\"590\":1}}],[\"springmvc中默认返回的是页面\",{\"1\":{\"576\":1}}],[\"springmvc框架提供的该核心控制器需要我们在web\",{\"1\":{\"569\":1}}],[\"springmvc\",{\"1\":{\"569\":1,\"570\":1,\"573\":1}}],[\"springmvcapplication\",{\"1\":{\"563\":1}}],[\"springmvc的配置文件\",{\"1\":{\"562\":1}}],[\"spring<\",{\"1\":{\"558\":1}}],[\"springssm整合\",{\"0\":{\"556\":1}}],[\"spring中的aop只能对方法进行拦截\",{\"1\":{\"549\":1}}],[\"spring中提供了对事务的管理\",{\"1\":{\"548\":1}}],[\"spring提供的对事务的管理\",{\"1\":{\"548\":1}}],[\"spring配置文件中注册aop代理类\",{\"0\":{\"546\":1}}],[\"spring配置文件的名称\",{\"1\":{\"532\":1,\"534\":1}}],[\"springdata也是和springboot齐名的项目\",{\"1\":{\"508\":1}}],[\"springfox\",{\"1\":{\"471\":8}}],[\"springframework<\",{\"1\":{\"517\":3,\"543\":2,\"551\":2,\"558\":3,\"589\":2,\"590\":2}}],[\"springframework\",{\"1\":{\"74\":8,\"75\":1,\"76\":8,\"77\":12,\"105\":14,\"106\":15,\"107\":14,\"108\":9,\"113\":19,\"327\":3,\"362\":6,\"363\":4,\"368\":3,\"369\":2,\"372\":1,\"375\":1,\"378\":2,\"382\":1,\"392\":6,\"399\":2,\"400\":1,\"406\":1,\"409\":2,\"410\":1,\"413\":1,\"437\":7,\"439\":1,\"445\":6,\"467\":1,\"471\":2,\"472\":5,\"475\":4,\"480\":3,\"481\":7,\"482\":5,\"498\":2,\"504\":11,\"505\":7,\"532\":1,\"545\":1,\"546\":9,\"552\":3,\"553\":13,\"561\":10,\"562\":10,\"563\":2,\"564\":2,\"589\":14,\"590\":14,\"619\":1}}],[\"springcloud\",{\"1\":{\"413\":3,\"439\":1}}],[\"springcloudconfig创建\",{\"1\":{\"405\":1}}],[\"springcloud原有的客户端负载均衡⽅案ribbon已经被废弃\",{\"1\":{\"390\":1}}],[\"spring系列\",{\"0\":{\"682\":1},\"2\":{\"370\":1,\"379\":1,\"387\":1,\"394\":1,\"402\":1,\"411\":1,\"446\":1,\"449\":1,\"463\":1,\"468\":1,\"473\":1,\"476\":1,\"483\":1,\"488\":1,\"494\":1,\"501\":1,\"506\":1,\"526\":1,\"554\":1,\"565\":1,\"586\":1,\"591\":1}}],[\"springapplication\",{\"1\":{\"368\":2,\"369\":1,\"372\":1,\"391\":1,\"405\":1,\"416\":1,\"445\":2}}],[\"springboot2\",{\"1\":{\"508\":1}}],[\"springboot定时任务\",{\"0\":{\"496\":1}}],[\"springboot实现自定义脱敏注解\",{\"0\":{\"490\":1}}],[\"springboot统一数据返回类\",{\"0\":{\"485\":1}}],[\"springboot配置swagger\",{\"0\":{\"470\":1}}],[\"springboot\",{\"0\":{\"478\":1,\"681\":1},\"1\":{\"372\":1,\"391\":1,\"504\":2,\"505\":1}}],[\"springbootapplication\",{\"1\":{\"368\":2,\"369\":1,\"372\":1,\"391\":1,\"405\":1,\"416\":1,\"445\":2}}],[\"springboot项目根下创建lombok\",{\"1\":{\"120\":1}}],[\"springboottest\",{\"1\":{\"76\":2,\"77\":2,\"504\":2,\"505\":2}}],[\"springjunit4classrunner\",{\"1\":{\"105\":2,\"106\":2,\"107\":2,\"589\":2,\"590\":2}}],[\"springrunner\",{\"1\":{\"76\":2,\"77\":2,\"504\":2,\"505\":2}}],[\"spring\",{\"0\":{\"72\":1,\"396\":1,\"404\":1,\"413\":1,\"503\":1,\"508\":1,\"528\":1,\"529\":1,\"530\":1,\"547\":1,\"557\":1,\"567\":1,\"588\":1,\"680\":1},\"1\":{\"74\":2,\"105\":7,\"106\":5,\"107\":7,\"108\":4,\"109\":1,\"110\":1,\"113\":4,\"367\":5,\"368\":3,\"369\":2,\"375\":1,\"376\":1,\"396\":1,\"399\":3,\"400\":1,\"404\":1,\"405\":7,\"406\":5,\"407\":4,\"408\":1,\"409\":1,\"410\":1,\"413\":10,\"415\":1,\"417\":1,\"418\":6,\"419\":2,\"420\":2,\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"426\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"435\":1,\"436\":1,\"438\":1,\"439\":2,\"440\":1,\"444\":2,\"445\":2,\"448\":9,\"470\":1,\"471\":2,\"504\":1,\"505\":1,\"517\":2,\"528\":1,\"529\":7,\"530\":8,\"535\":1,\"539\":1,\"540\":1,\"543\":1,\"545\":2,\"546\":3,\"551\":2,\"553\":4,\"558\":11,\"560\":1,\"561\":5,\"562\":3,\"563\":1,\"576\":1,\"589\":41,\"590\":14}}],[\"such\",{\"1\":{\"628\":1}}],[\"successlist\",{\"1\":{\"600\":3}}],[\"success\",{\"1\":{\"46\":1,\"113\":1,\"223\":2,\"224\":1,\"564\":1,\"599\":3}}],[\"suffix\",{\"1\":{\"562\":1}}],[\"suffixnomasklen\",{\"1\":{\"492\":2,\"493\":1}}],[\"sunset\",{\"1\":{\"520\":1,\"521\":3,\"522\":4,\"541\":3,\"552\":1,\"561\":3,\"562\":1,\"618\":1,\"619\":3}}],[\"sun\",{\"1\":{\"499\":1,\"500\":1}}],[\"sunionstore\",{\"1\":{\"348\":1}}],[\"sunion\",{\"1\":{\"348\":1}}],[\"super\",{\"1\":{\"475\":1}}],[\"supportsinternal\",{\"1\":{\"653\":1,\"654\":3,\"655\":1}}],[\"supports\",{\"1\":{\"548\":1,\"552\":1}}],[\"supportsparameter\",{\"1\":{\"481\":1}}],[\"support\",{\"1\":{\"472\":1,\"481\":3,\"482\":1,\"530\":1}}],[\"supported\",{\"1\":{\"448\":1,\"548\":1}}],[\"supportedoptions\",{\"1\":{\"281\":1}}],[\"supplyasync\",{\"1\":{\"385\":1}}],[\"sudo\",{\"1\":{\"233\":2,\"236\":2,\"243\":1,\"244\":1,\"248\":1}}],[\"subtypeof\",{\"1\":{\"628\":1}}],[\"submit\",{\"1\":{\"223\":1,\"224\":1}}],[\"sub\",{\"1\":{\"223\":1,\"355\":1}}],[\"substituted\",{\"1\":{\"628\":1}}],[\"substitution\",{\"1\":{\"625\":1}}],[\"substr\",{\"1\":{\"176\":2}}],[\"subscribe发布与订阅模式\",{\"0\":{\"92\":1},\"1\":{\"80\":1}}],[\"subscribe\",{\"1\":{\"80\":1,\"102\":1}}],[\"subaggregation\",{\"1\":{\"77\":1}}],[\"sat\",{\"1\":{\"499\":1}}],[\"sampler\",{\"1\":{\"399\":2,\"400\":1}}],[\"sadd\",{\"1\":{\"346\":1}}],[\"safevarargs\",{\"1\":{\"270\":1}}],[\"save\",{\"1\":{\"76\":1,\"77\":15}}],[\"sandbox\",{\"1\":{\"12\":1}}],[\"sndbuf选项\",{\"1\":{\"281\":1}}],[\"sndbuf选项的值\",{\"1\":{\"281\":1}}],[\"snapshot<\",{\"1\":{\"74\":1,\"113\":1,\"504\":1,\"505\":1}}],[\"snipaste\",{\"1\":{\"7\":2,\"15\":1,\"17\":5,\"259\":1,\"260\":1,\"261\":1,\"333\":1}}],[\"singlecase1\",{\"1\":{\"647\":7}}],[\"singlecase\",{\"1\":{\"646\":10}}],[\"single\",{\"1\":{\"625\":1,\"627\":1}}],[\"sinter\",{\"1\":{\"347\":1}}],[\"signature\",{\"1\":{\"622\":12}}],[\"sign\",{\"1\":{\"622\":8}}],[\"sismember\",{\"1\":{\"346\":1}}],[\"simplebindings\",{\"1\":{\"320\":1}}],[\"simple\",{\"1\":{\"86\":2,\"89\":1,\"94\":1,\"213\":2,\"238\":1}}],[\"simple<\",{\"1\":{\"58\":1}}],[\"size要写成\",{\"1\":{\"168\":1}}],[\"size\",{\"1\":{\"57\":1,\"113\":2,\"281\":2,\"303\":1,\"304\":1,\"314\":1,\"327\":2,\"363\":10,\"377\":1,\"599\":4,\"619\":3,\"642\":2}}],[\"shutdownoutput\",{\"1\":{\"281\":1}}],[\"shutdowninput\",{\"1\":{\"281\":1}}],[\"shutdown\",{\"1\":{\"252\":1,\"332\":1}}],[\"sh\",{\"1\":{\"206\":1,\"244\":2}}],[\"show=\",{\"1\":{\"210\":1}}],[\"show\",{\"0\":{\"158\":1},\"1\":{\"158\":4,\"243\":2,\"256\":1}}],[\"shouldnot\",{\"1\":{\"629\":1}}],[\"should\",{\"1\":{\"57\":3,\"77\":1,\"627\":1,\"629\":3,\"630\":2}}],[\"shapetest\",{\"1\":{\"656\":1}}],[\"shapes\",{\"1\":{\"655\":2}}],[\"shapefactory\",{\"1\":{\"655\":1,\"656\":1}}],[\"shapeenum\",{\"1\":{\"653\":2,\"654\":6,\"655\":3,\"656\":1}}],[\"shape\",{\"1\":{\"653\":3,\"654\":9,\"655\":12}}],[\"shaskey\",{\"1\":{\"363\":1}}],[\"sha\",{\"1\":{\"332\":1}}],[\"share\",{\"1\":{\"234\":1}}],[\"shards\",{\"0\":{\"39\":1}}],[\"shade\",{\"1\":{\"146\":1}}],[\"something\",{\"1\":{\"454\":1}}],[\"somenetwork\",{\"1\":{\"401\":3}}],[\"soa关注的是服务的重⽤性及解决信息孤岛问题\",{\"1\":{\"448\":1}}],[\"soa\",{\"1\":{\"448\":1}}],[\"software\",{\"1\":{\"511\":1,\"626\":1}}],[\"soft\",{\"1\":{\"327\":4}}],[\"socketclient\",{\"1\":{\"284\":2}}],[\"socketchannel\",{\"1\":{\"281\":1}}],[\"sockettask\",{\"1\":{\"283\":3}}],[\"socketservice\",{\"1\":{\"283\":3}}],[\"socket上用于输出的缓冲区大小\",{\"1\":{\"281\":1}}],[\"socket上用于输入的缓冲区大小\",{\"1\":{\"281\":1}}],[\"socket的\",{\"1\":{\"281\":2}}],[\"socketoption\",{\"1\":{\"281\":2}}],[\"socketaddress\",{\"1\":{\"281\":5}}],[\"socketimplfactory\",{\"1\":{\"281\":1}}],[\"socketimpl\",{\"1\":{\"280\":1}}],[\"socket\",{\"1\":{\"280\":9,\"281\":3,\"283\":13,\"284\":6}}],[\"socat\",{\"1\":{\"233\":2}}],[\"so\",{\"1\":{\"113\":1,\"238\":4,\"239\":2,\"281\":13}}],[\"sourceencoding>\",{\"1\":{\"558\":1}}],[\"sourceencoding>utf\",{\"1\":{\"558\":1}}],[\"source>1\",{\"1\":{\"558\":1}}],[\"source>\",{\"1\":{\"505\":1,\"558\":1}}],[\"source>8<\",{\"1\":{\"505\":1}}],[\"sourcekey\",{\"1\":{\"354\":2}}],[\"sourceforge\",{\"1\":{\"247\":1}}],[\"sourceasmap\",{\"1\":{\"65\":4,\"70\":4}}],[\"source\",{\"1\":{\"65\":1,\"70\":1,\"71\":1,\"238\":1,\"248\":1,\"343\":1,\"344\":1,\"346\":2}}],[\"sortquery<string>\",{\"1\":{\"327\":2,\"363\":1}}],[\"sortquerybuilder\",{\"1\":{\"327\":3}}],[\"sortquery\",{\"1\":{\"327\":5,\"363\":4}}],[\"sortparameters\",{\"1\":{\"327\":3}}],[\"sortscore\",{\"1\":{\"324\":6,\"327\":1}}],[\"sort\",{\"1\":{\"57\":3,\"324\":3,\"326\":1,\"327\":17,\"363\":2}}],[\"solr\",{\"1\":{\"29\":4}}],[\"scard\",{\"1\":{\"346\":1}}],[\"scanoptions\",{\"1\":{\"363\":6}}],[\"scan\",{\"1\":{\"107\":1,\"108\":1,\"363\":1,\"546\":1,\"561\":1,\"562\":1}}],[\"scope\",{\"1\":{\"481\":1}}],[\"scope>\",{\"1\":{\"74\":1,\"113\":2,\"369\":1,\"558\":1}}],[\"score2\",{\"1\":{\"351\":1}}],[\"score1\",{\"1\":{\"351\":1}}],[\"score\",{\"1\":{\"324\":6,\"326\":5,\"327\":9}}],[\"scheduling\",{\"1\":{\"498\":1}}],[\"scheduled\",{\"1\":{\"497\":2,\"498\":2}}],[\"schema\",{\"1\":{\"105\":9,\"106\":9,\"107\":9,\"108\":9,\"134\":2,\"546\":9,\"553\":12,\"561\":9,\"562\":9,\"589\":9,\"590\":9}}],[\"schemalocation=\",{\"1\":{\"74\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":1,\"504\":1,\"505\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"563\":1,\"589\":1,\"590\":1}}],[\"schemas<\",{\"1\":{\"617\":2}}],[\"schemas\",{\"1\":{\"21\":1}}],[\"school\",{\"1\":{\"303\":1,\"304\":1}}],[\"sc\",{\"1\":{\"255\":1}}],[\"scriptobjectmirror\",{\"1\":{\"320\":1}}],[\"script\",{\"1\":{\"198\":2,\"215\":1}}],[\"script>\",{\"1\":{\"123\":2,\"146\":3,\"150\":1}}],[\"scientific\",{\"1\":{\"11\":1}}],[\"step\",{\"1\":{\"499\":1}}],[\"stereotype\",{\"1\":{\"107\":1,\"113\":1,\"363\":1,\"467\":1,\"480\":1,\"481\":1,\"498\":1,\"505\":1,\"545\":1,\"552\":1,\"564\":1}}],[\"stuno\",{\"1\":{\"304\":3}}],[\"stuname\",{\"1\":{\"304\":3}}],[\"stuid\",{\"1\":{\"304\":3}}],[\"student\",{\"1\":{\"291\":6,\"304\":1}}],[\"studio官网下载地址\",{\"1\":{\"15\":1}}],[\"studio\",{\"0\":{\"14\":1,\"15\":1},\"1\":{\"15\":1,\"16\":2,\"17\":1}}],[\"strangers\",{\"1\":{\"631\":1}}],[\"struts2\",{\"1\":{\"529\":1}}],[\"stripprefix=1\",{\"1\":{\"429\":1,\"435\":1}}],[\"stripprefix\",{\"0\":{\"429\":1}}],[\"stringentity\",{\"1\":{\"613\":2}}],[\"stringutil\",{\"1\":{\"492\":2}}],[\"stringutils\",{\"1\":{\"113\":2,\"437\":2,\"438\":1,\"492\":4}}],[\"string类型\",{\"1\":{\"363\":2}}],[\"stringredisserializer\",{\"1\":{\"362\":2}}],[\"stringterms\",{\"1\":{\"77\":4}}],[\"string\",{\"0\":{\"337\":1},\"1\":{\"42\":1,\"49\":1,\"57\":2,\"59\":1,\"60\":2,\"63\":4,\"74\":2,\"75\":5,\"77\":5,\"84\":4,\"85\":3,\"86\":6,\"87\":8,\"89\":3,\"90\":8,\"94\":9,\"95\":8,\"97\":10,\"98\":8,\"100\":8,\"101\":8,\"105\":1,\"106\":3,\"107\":1,\"109\":1,\"110\":1,\"113\":6,\"243\":1,\"266\":6,\"272\":1,\"280\":3,\"281\":2,\"283\":2,\"284\":3,\"290\":3,\"294\":2,\"295\":2,\"296\":4,\"303\":7,\"304\":25,\"326\":6,\"327\":31,\"363\":77,\"368\":1,\"369\":1,\"372\":1,\"382\":1,\"384\":1,\"386\":1,\"389\":1,\"391\":1,\"392\":2,\"393\":1,\"405\":1,\"410\":4,\"416\":1,\"437\":1,\"438\":2,\"441\":1,\"444\":1,\"445\":1,\"475\":1,\"480\":5,\"486\":2,\"487\":5,\"491\":4,\"492\":2,\"493\":2,\"504\":2,\"505\":1,\"522\":1,\"535\":1,\"545\":1,\"564\":1,\"589\":5,\"590\":2,\"599\":4,\"605\":3,\"606\":3,\"612\":5,\"613\":3,\"614\":2,\"619\":2,\"622\":24,\"641\":1,\"656\":1,\"664\":1,\"665\":1}}],[\"string>>\",{\"1\":{\"327\":3,\"599\":1}}],[\"string>\",{\"1\":{\"42\":1,\"326\":2,\"327\":3,\"362\":2,\"363\":10,\"599\":8,\"612\":1,\"613\":1}}],[\"strlen\",{\"1\":{\"337\":2}}],[\"streams\",{\"1\":{\"356\":1,\"357\":1}}],[\"stream\",{\"0\":{\"355\":1},\"1\":{\"280\":2,\"355\":2,\"357\":2,\"612\":2,\"613\":2,\"618\":3}}],[\"style\",{\"1\":{\"198\":1,\"215\":1}}],[\"style>\",{\"1\":{\"173\":1}}],[\"style=\",{\"1\":{\"168\":2,\"169\":1}}],[\"stop=\",{\"1\":{\"342\":1}}],[\"stop\",{\"1\":{\"234\":1,\"342\":1,\"345\":1,\"351\":3}}],[\"stopbubbling=true\",{\"1\":{\"120\":1}}],[\"storageclient\",{\"1\":{\"113\":3}}],[\"storageserver\",{\"1\":{\"112\":1}}],[\"storage\",{\"1\":{\"112\":4,\"252\":1,\"398\":1,\"401\":2}}],[\"storedist\",{\"1\":{\"353\":2}}],[\"storepath\",{\"1\":{\"113\":9}}],[\"store\",{\"1\":{\"43\":3,\"44\":3,\"53\":3,\"60\":3,\"74\":3,\"77\":5,\"353\":2}}],[\"star\",{\"1\":{\"589\":3,\"590\":1}}],[\"startswith\",{\"1\":{\"664\":1,\"665\":1}}],[\"starting\",{\"1\":{\"448\":2}}],[\"start=0\",{\"1\":{\"342\":1}}],[\"starter<\",{\"1\":{\"470\":1}}],[\"starter\",{\"1\":{\"74\":3,\"113\":4,\"369\":1,\"372\":1,\"375\":1,\"382\":1,\"399\":1,\"406\":1,\"409\":2,\"410\":1,\"439\":1,\"504\":3,\"505\":3}}],[\"startobject\",{\"1\":{\"60\":6,\"62\":1}}],[\"start\",{\"1\":{\"4\":1,\"135\":1,\"234\":1,\"236\":2,\"243\":1,\"255\":1,\"283\":2,\"339\":1,\"342\":1,\"345\":1,\"351\":3,\"356\":4,\"363\":3,\"517\":2,\"558\":2,\"617\":1}}],[\"stable\",{\"1\":{\"332\":1}}],[\"statement的创建等复杂的过程\",{\"1\":{\"511\":1}}],[\"state\",{\"1\":{\"304\":3}}],[\"status\",{\"1\":{\"188\":1,\"222\":1,\"224\":1,\"226\":1,\"243\":1,\"248\":1,\"441\":1}}],[\"static\",{\"1\":{\"84\":6,\"86\":3,\"87\":2,\"89\":3,\"90\":4,\"94\":5,\"95\":4,\"97\":5,\"98\":4,\"100\":5,\"101\":4,\"122\":2,\"281\":1,\"283\":2,\"284\":1,\"291\":2,\"293\":1,\"294\":2,\"295\":1,\"296\":1,\"298\":1,\"303\":4,\"304\":6,\"327\":9,\"363\":56,\"368\":1,\"369\":1,\"372\":1,\"376\":3,\"391\":1,\"405\":1,\"416\":1,\"437\":4,\"438\":1,\"445\":1,\"466\":1,\"467\":1,\"472\":2,\"480\":5,\"482\":1,\"487\":7,\"504\":2,\"520\":5,\"522\":1,\"599\":7,\"613\":1,\"614\":3,\"619\":3,\"622\":12,\"641\":1,\"642\":2,\"646\":2,\"647\":2,\"655\":1,\"656\":1,\"660\":1,\"662\":1,\"664\":2,\"665\":2}}],[\"stats\",{\"1\":{\"42\":2}}],[\"stack\",{\"1\":{\"54\":1,\"308\":1,\"315\":1}}],[\"standardcharsets\",{\"1\":{\"87\":2,\"90\":4,\"95\":4,\"98\":4,\"101\":4,\"363\":2,\"590\":2,\"612\":2,\"622\":2}}],[\"standard\",{\"1\":{\"43\":2,\"44\":2,\"52\":1}}],[\"segregation\",{\"1\":{\"625\":1}}],[\"segment\",{\"1\":{\"425\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":2,\"435\":2,\"438\":1,\"440\":1}}],[\"security\",{\"1\":{\"622\":3}}],[\"seconds\",{\"1\":{\"113\":2,\"336\":2,\"337\":1,\"363\":3,\"367\":2}}],[\"separator=\",{\"1\":{\"524\":1}}],[\"separator\",{\"1\":{\"524\":1}}],[\"session\",{\"1\":{\"480\":3,\"481\":4,\"520\":3}}],[\"sessionid=test\",{\"1\":{\"422\":2}}],[\"sent\",{\"1\":{\"396\":2}}],[\"sender\",{\"1\":{\"399\":2,\"400\":1}}],[\"sendurgentdata\",{\"1\":{\"281\":1}}],[\"sendredirect\",{\"1\":{\"266\":1}}],[\"send\",{\"1\":{\"105\":1,\"106\":1,\"589\":6}}],[\"semaphore\",{\"1\":{\"384\":2,\"454\":4}}],[\"semaphorebulkhead使⽤了信号量\",{\"1\":{\"383\":1}}],[\"self\",{\"1\":{\"367\":1,\"368\":1}}],[\"select>\",{\"1\":{\"521\":1}}],[\"selected\",{\"1\":{\"170\":1}}],[\"select\",{\"1\":{\"127\":6,\"128\":13,\"134\":1,\"135\":3,\"137\":3,\"138\":3,\"139\":3,\"140\":3,\"243\":1,\"266\":1,\"334\":1,\"336\":1,\"471\":1,\"521\":1,\"524\":2}}],[\"ser\",{\"1\":{\"492\":1}}],[\"serialversionuid\",{\"1\":{\"466\":1}}],[\"serialize\",{\"1\":{\"492\":1}}],[\"serializers\",{\"1\":{\"492\":1}}],[\"serializerprovider\",{\"1\":{\"492\":3}}],[\"serializer\",{\"1\":{\"362\":2,\"493\":1}}],[\"serializable\",{\"1\":{\"316\":2,\"318\":2,\"466\":2,\"487\":2,\"547\":1,\"631\":1}}],[\"servelet\",{\"1\":{\"530\":1}}],[\"serve\",{\"1\":{\"213\":1}}],[\"servertimezone=gmt\",{\"1\":{\"519\":1,\"559\":1}}],[\"servertimezone=utc\",{\"1\":{\"303\":1,\"304\":1}}],[\"serverwebexchange\",{\"1\":{\"413\":1,\"437\":5,\"438\":1,\"441\":1}}],[\"server地址\",{\"1\":{\"406\":1}}],[\"server默认存储配置的⽅式是git\",{\"1\":{\"405\":1}}],[\"server将链路数据存储在内存中\",{\"1\":{\"401\":1}}],[\"server时\",{\"1\":{\"400\":1,\"401\":1}}],[\"serverport\",{\"1\":{\"392\":2,\"410\":2,\"444\":2}}],[\"server<\",{\"1\":{\"369\":1}}],[\"server集群\",{\"1\":{\"367\":1}}],[\"server为eureka服务注册中⼼\",{\"1\":{\"366\":1}}],[\"server和eureka\",{\"1\":{\"366\":1}}],[\"serversocket\",{\"0\":{\"279\":1},\"1\":{\"283\":4}}],[\"server\",{\"0\":{\"398\":1},\"1\":{\"41\":1,\"80\":2,\"112\":9,\"113\":1,\"233\":2,\"234\":4,\"242\":1,\"243\":1,\"265\":1,\"283\":4,\"331\":1,\"332\":1,\"367\":6,\"368\":4,\"391\":1,\"392\":1,\"396\":2,\"398\":5,\"400\":4,\"401\":3,\"405\":5,\"406\":1,\"407\":2,\"410\":1,\"417\":1,\"437\":1,\"440\":1,\"444\":1,\"445\":1}}],[\"servlet>\",{\"1\":{\"563\":1}}],[\"servlet<\",{\"1\":{\"558\":1}}],[\"servletexception\",{\"1\":{\"266\":2}}],[\"servlet根据客户端请求生成响应内容并将其传给服务器\",{\"1\":{\"265\":1}}],[\"servlet工作作模式\",{\"1\":{\"265\":1}}],[\"servlet可以响应任何类型的请求\",{\"1\":{\"265\":1}}],[\"servlet运行于支持java的应用服务器中\",{\"1\":{\"265\":1}}],[\"servlet\",{\"0\":{\"265\":1},\"1\":{\"113\":1,\"265\":2,\"266\":5,\"472\":3,\"480\":3,\"482\":3,\"558\":3,\"562\":1,\"563\":5}}],[\"services下创建以shape的全路径为名的文件\",{\"1\":{\"655\":1}}],[\"serviceloader<shape>\",{\"1\":{\"655\":1}}],[\"serviceloader\",{\"1\":{\"655\":3}}],[\"service9\",{\"1\":{\"426\":1}}],[\"service8\",{\"1\":{\"425\":1}}],[\"service7\",{\"1\":{\"424\":1}}],[\"service6\",{\"1\":{\"423\":1}}],[\"service5\",{\"1\":{\"422\":1}}],[\"service4\",{\"1\":{\"421\":1}}],[\"service3\",{\"1\":{\"420\":2}}],[\"service2\",{\"1\":{\"417\":1}}],[\"service15\",{\"1\":{\"435\":1}}],[\"service14\",{\"1\":{\"435\":1,\"438\":1,\"440\":1}}],[\"service13\",{\"1\":{\"431\":1}}],[\"service12\",{\"1\":{\"430\":1}}],[\"service11\",{\"1\":{\"429\":1}}],[\"service10\",{\"1\":{\"428\":1}}],[\"service1\",{\"1\":{\"415\":1,\"416\":1,\"417\":1}}],[\"serviceinstance\",{\"1\":{\"389\":4,\"393\":1}}],[\"serviceinstances\",{\"1\":{\"389\":2}}],[\"service<\",{\"1\":{\"113\":2}}],[\"service\",{\"1\":{\"12\":1,\"113\":3,\"234\":3,\"266\":2,\"367\":4,\"368\":1,\"369\":1,\"373\":2,\"376\":3,\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"389\":1,\"392\":1,\"393\":1,\"399\":1,\"405\":1,\"406\":1,\"410\":1,\"417\":2,\"440\":1,\"445\":1,\"471\":2,\"539\":2,\"541\":5,\"544\":2,\"545\":2,\"546\":1,\"552\":3,\"561\":1}}],[\"sex\",{\"1\":{\"304\":3}}],[\"se\",{\"1\":{\"266\":2}}],[\"seo\",{\"1\":{\"199\":1}}],[\"sequence\",{\"1\":{\"135\":1}}],[\"seq\",{\"1\":{\"135\":5}}],[\"setwidth\",{\"1\":{\"641\":1}}],[\"setlength\",{\"1\":{\"641\":1}}],[\"setloginname\",{\"1\":{\"266\":1}}],[\"setnexthandler\",{\"1\":{\"637\":1,\"638\":1,\"639\":1,\"641\":2,\"642\":1}}],[\"setnx\",{\"1\":{\"337\":1}}],[\"setjsonbody\",{\"1\":{\"613\":1}}],[\"setentity\",{\"1\":{\"613\":2}}],[\"setex\",{\"1\":{\"337\":1}}],[\"setexpiration\",{\"1\":{\"109\":1}}],[\"setbody\",{\"1\":{\"612\":1,\"614\":1}}],[\"set注入\",{\"1\":{\"537\":1}}],[\"set生成\",{\"1\":{\"517\":1,\"558\":1}}],[\"setfieldvalbyname\",{\"1\":{\"467\":6}}],[\"setfrom\",{\"1\":{\"70\":1}}],[\"set集合中需要移除的元素值\",{\"1\":{\"363\":1}}],[\"set集合key\",{\"1\":{\"363\":3}}],[\"set<string>\",{\"1\":{\"363\":5}}],[\"set<e>\",{\"1\":{\"318\":1}}],[\"set类型\",{\"1\":{\"363\":2}}],[\"setheight\",{\"1\":{\"641\":1}}],[\"setheader\",{\"1\":{\"613\":2}}],[\"setheaders\",{\"1\":{\"612\":1,\"614\":1}}],[\"sethashvalueserializer\",{\"1\":{\"362\":1}}],[\"sethashkeyserializer\",{\"1\":{\"362\":1}}],[\"sethost\",{\"1\":{\"84\":1}}],[\"setkeyserializer\",{\"1\":{\"362\":1}}],[\"setkeepalive\",{\"1\":{\"281\":1}}],[\"set中的值是不能重复的\",{\"1\":{\"346\":1}}],[\"setrange\",{\"1\":{\"339\":1}}],[\"setrequestheader=x\",{\"1\":{\"434\":1}}],[\"setrequestheader\",{\"0\":{\"434\":1},\"1\":{\"434\":1}}],[\"setreuseaddress\",{\"1\":{\"281\":1}}],[\"setreceivebuffersize\",{\"1\":{\"281\":1}}],[\"setreturncallback\",{\"1\":{\"106\":1}}],[\"set实现类\",{\"1\":{\"317\":1}}],[\"set接口\",{\"0\":{\"317\":1}}],[\"setmessage\",{\"1\":{\"382\":1}}],[\"setmethodname\",{\"1\":{\"304\":3}}],[\"setmandatory\",{\"1\":{\"106\":2}}],[\"setmappings\",{\"1\":{\"60\":1}}],[\"set方法\",{\"1\":{\"298\":2}}],[\"setage\",{\"1\":{\"295\":4}}],[\"setaccessible\",{\"1\":{\"294\":1,\"295\":1,\"296\":2,\"599\":5}}],[\"setattribute\",{\"1\":{\"266\":1,\"480\":1}}],[\"set>\",{\"1\":{\"281\":1}}],[\"setoperations\",{\"1\":{\"363\":13}}],[\"setoperations<string\",{\"1\":{\"363\":1}}],[\"setoption\",{\"1\":{\"281\":1}}],[\"setobject\",{\"1\":{\"303\":1,\"304\":1}}],[\"setoobinline\",{\"1\":{\"281\":1}}],[\"setcomplete\",{\"1\":{\"437\":1,\"438\":1}}],[\"setconfig\",{\"1\":{\"613\":2}}],[\"setconfirmcallback\",{\"1\":{\"105\":1}}],[\"setconnectionfactory\",{\"1\":{\"362\":1}}],[\"setcontenttype\",{\"1\":{\"266\":1}}],[\"setcontent\",{\"1\":{\"63\":2,\"76\":1}}],[\"setcharacterencoding\",{\"1\":{\"266\":1}}],[\"set=utf8mb4\",{\"1\":{\"252\":1}}],[\"setvalueserializer\",{\"1\":{\"362\":1}}],[\"setval\",{\"1\":{\"135\":1}}],[\"setvirtualhost\",{\"1\":{\"84\":1}}],[\"setpath过滤器将路径设置为\",{\"1\":{\"431\":1}}],[\"setpath和rewrite类似\",{\"1\":{\"431\":1}}],[\"setpath=\",{\"1\":{\"427\":1,\"431\":1}}],[\"setpath\",{\"0\":{\"431\":1},\"1\":{\"427\":1}}],[\"setpassword\",{\"1\":{\"84\":1,\"266\":1}}],[\"setperformancepreferences\",{\"1\":{\"281\":1}}],[\"setport\",{\"1\":{\"84\":1}}],[\"setusername\",{\"1\":{\"84\":1,\"619\":1}}],[\"setstatuscode\",{\"1\":{\"437\":1,\"438\":1}}],[\"setsotimeout\",{\"1\":{\"281\":1}}],[\"setsolinger\",{\"1\":{\"281\":1}}],[\"setsocketimplfactory\",{\"1\":{\"281\":1}}],[\"setsource\",{\"1\":{\"60\":1,\"62\":1,\"63\":2}}],[\"setsendbuffersize\",{\"1\":{\"281\":1}}],[\"setsize\",{\"1\":{\"70\":1}}],[\"setqueryparam\",{\"1\":{\"613\":1}}],[\"setquery\",{\"1\":{\"65\":1,\"70\":1,\"71\":1}}],[\"setimglist\",{\"1\":{\"619\":1}}],[\"setimg\",{\"1\":{\"619\":1}}],[\"setid\",{\"1\":{\"62\":1,\"63\":2,\"76\":1,\"357\":2,\"382\":1}}],[\"setindex\",{\"1\":{\"62\":1}}],[\"setter\",{\"1\":{\"537\":1}}],[\"settrafficclass\",{\"1\":{\"281\":1}}],[\"settcpnodelay\",{\"1\":{\"281\":1}}],[\"setting\",{\"1\":{\"560\":1}}],[\"settings\",{\"1\":{\"59\":6,\"60\":4,\"62\":6,\"63\":6,\"65\":6,\"260\":1}}],[\"settimeout\",{\"1\":{\"146\":2}}],[\"settitle\",{\"1\":{\"63\":2,\"76\":1}}],[\"settypes\",{\"1\":{\"65\":1,\"70\":1,\"71\":1}}],[\"settype\",{\"1\":{\"60\":1,\"62\":1}}],[\"set\",{\"0\":{\"127\":1,\"346\":1},\"1\":{\"17\":1,\"63\":1,\"74\":1,\"77\":1,\"127\":3,\"129\":1,\"243\":3,\"252\":2,\"256\":2,\"263\":2,\"290\":1,\"296\":3,\"298\":3,\"304\":13,\"315\":1,\"317\":1,\"318\":1,\"337\":2,\"363\":5,\"480\":1,\"520\":1,\"524\":1,\"631\":1}}],[\"searchlocations\",{\"1\":{\"407\":1}}],[\"searchval\",{\"1\":{\"189\":1}}],[\"searchhititerator\",{\"1\":{\"65\":3,\"70\":3,\"71\":3}}],[\"searchhits\",{\"1\":{\"65\":5,\"70\":4,\"71\":4}}],[\"searchhit\",{\"1\":{\"65\":5,\"70\":4,\"71\":4}}],[\"searchresponse\",{\"1\":{\"65\":4,\"70\":3,\"71\":3}}],[\"search\",{\"1\":{\"3\":1,\"28\":1,\"49\":2,\"50\":1,\"53\":1,\"56\":1,\"57\":19,\"65\":4,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"77\":5,\"405\":2,\"407\":1}}],[\"s\",{\"1\":{\"12\":1,\"238\":2,\"244\":2,\"266\":2,\"276\":2,\"284\":2,\"460\":1,\"590\":4,\"628\":2}}],[\"synchronized\",{\"1\":{\"646\":2}}],[\"syntax\",{\"1\":{\"4\":1}}],[\"symlink\",{\"1\":{\"263\":1}}],[\"symbol\",{\"1\":{\"492\":1,\"493\":1}}],[\"symbols\",{\"1\":{\"11\":1}}],[\"symbl\",{\"1\":{\"11\":1}}],[\"systemresource\",{\"1\":{\"534\":2}}],[\"systemctl\",{\"1\":{\"236\":1,\"243\":2,\"248\":1}}],[\"system\",{\"1\":{\"63\":1,\"65\":6,\"70\":6,\"71\":5,\"76\":8,\"77\":2,\"86\":1,\"87\":4,\"89\":1,\"90\":8,\"94\":1,\"95\":8,\"98\":8,\"101\":8,\"105\":3,\"106\":1,\"107\":2,\"110\":3,\"266\":3,\"283\":1,\"284\":1,\"293\":1,\"294\":2,\"295\":1,\"296\":1,\"298\":1,\"505\":1,\"522\":1,\"544\":1,\"545\":11,\"552\":1,\"590\":1,\"614\":1,\"622\":6,\"638\":1,\"639\":1,\"640\":1,\"641\":2,\"654\":3,\"659\":1,\"660\":5,\"663\":4,\"664\":4}}],[\"smallest\",{\"1\":{\"630\":1}}],[\"smart\",{\"1\":{\"52\":2,\"57\":6,\"60\":2,\"74\":2,\"77\":3}}],[\"smile\",{\"1\":{\"420\":1}}],[\"smove\",{\"1\":{\"346\":1}}],[\"smembers\",{\"1\":{\"346\":1}}],[\"sm\",{\"1\":{\"10\":2,\"219\":2}}],[\"sjtu\",{\"1\":{\"5\":1}}],[\"sjtug\",{\"1\":{\"5\":1}}],[\"dp\",{\"1\":{\"625\":1}}],[\"dport=9000\",{\"1\":{\"391\":1}}],[\"dtd\",{\"1\":{\"518\":3,\"521\":3}}],[\"dto\",{\"1\":{\"326\":1,\"327\":27}}],[\"d+的请求头才会匹配\",{\"1\":{\"419\":1}}],[\"d+\",{\"1\":{\"419\":1,\"421\":1,\"426\":1}}],[\"draco1023<\",{\"1\":{\"617\":1}}],[\"drawio\",{\"1\":{\"9\":2}}],[\"draw\",{\"1\":{\"9\":1,\"653\":1,\"654\":6,\"656\":2}}],[\"druiddatasource\",{\"1\":{\"561\":1}}],[\"druid\",{\"1\":{\"558\":3,\"561\":1}}],[\"driven\",{\"1\":{\"553\":1,\"561\":1,\"562\":1}}],[\"driverclassname\",{\"1\":{\"561\":1}}],[\"driverclass\",{\"1\":{\"553\":1}}],[\"driver=com\",{\"1\":{\"519\":1,\"559\":1}}],[\"driver和url都不一样\",{\"1\":{\"518\":1}}],[\"drivermanager\",{\"1\":{\"303\":1,\"304\":1}}],[\"driver\",{\"1\":{\"303\":1,\"304\":1,\"518\":2,\"519\":1,\"553\":1,\"559\":1,\"561\":1}}],[\"dynlibs\",{\"1\":{\"239\":1}}],[\"ddd\",{\"1\":{\"205\":1}}],[\"dd\",{\"1\":{\"178\":1,\"466\":2}}],[\"ddl\",{\"0\":{\"129\":1}}],[\"dfsconfig\",{\"1\":{\"113\":1}}],[\"dlxlistener\",{\"1\":{\"110\":1}}],[\"dlx\",{\"1\":{\"110\":18}}],[\"duration\",{\"1\":{\"113\":1,\"367\":1}}],[\"durable\",{\"1\":{\"86\":1,\"87\":1,\"504\":2}}],[\"dubbo\",{\"1\":{\"4\":1}}],[\"dubbo文档\",{\"1\":{\"4\":1}}],[\"dip\",{\"0\":{\"629\":1},\"1\":{\"625\":1}}],[\"di注入有三大类\",{\"1\":{\"537\":1}}],[\"di注入\",{\"0\":{\"537\":1}}],[\"difference\",{\"1\":{\"363\":2}}],[\"dictionary\",{\"1\":{\"331\":1}}],[\"dir\",{\"1\":{\"244\":2}}],[\"director\",{\"1\":{\"514\":1}}],[\"directory\",{\"1\":{\"244\":2}}],[\"directives\",{\"1\":{\"182\":1}}],[\"directive\",{\"1\":{\"181\":3}}],[\"direct\",{\"1\":{\"80\":1,\"91\":1,\"94\":1,\"97\":17,\"98\":8,\"99\":1,\"100\":1,\"105\":2,\"106\":2}}],[\"div>`\",{\"1\":{\"193\":1,\"194\":1,\"195\":1,\"197\":1,\"206\":1}}],[\"div>\",{\"1\":{\"169\":1,\"173\":1,\"175\":1,\"194\":1,\"195\":3,\"197\":2,\"203\":2,\"204\":1,\"210\":1,\"219\":3,\"223\":3}}],[\"dispatcherservlet\",{\"0\":{\"569\":1},\"1\":{\"569\":2,\"571\":1}}],[\"dispatcherservlet<\",{\"1\":{\"563\":1}}],[\"display\",{\"1\":{\"173\":1}}],[\"discovery\",{\"1\":{\"401\":1,\"445\":1}}],[\"discoveryclient\",{\"1\":{\"389\":3,\"413\":2}}],[\"discard\",{\"1\":{\"358\":1}}],[\"disabled\",{\"1\":{\"382\":2}}],[\"dist\",{\"1\":{\"150\":1,\"217\":1,\"262\":1}}],[\"dists\",{\"1\":{\"17\":2}}],[\"distfiles\",{\"1\":{\"17\":1}}],[\"dism\",{\"1\":{\"7\":1}}],[\"dism++\",{\"1\":{\"7\":1}}],[\"dalston\",{\"1\":{\"448\":3}}],[\"dameonize\",{\"1\":{\"332\":1}}],[\"day03\",{\"1\":{\"291\":1}}],[\"day\",{\"1\":{\"244\":1}}],[\"daysago=$\",{\"1\":{\"244\":1}}],[\"date\",{\"1\":{\"185\":4,\"188\":2,\"244\":4,\"304\":2}}],[\"datasourcetransactionmanager\",{\"1\":{\"553\":1,\"561\":1}}],[\"datasource>\",{\"1\":{\"518\":1}}],[\"datasource\",{\"1\":{\"515\":1,\"518\":1,\"523\":1,\"553\":4,\"561\":6}}],[\"datadir=d\",{\"1\":{\"252\":1}}],[\"data和vue实例的区别为\",{\"1\":{\"192\":1}}],[\"data数据发生改变=>\",{\"1\":{\"171\":1}}],[\"data中必须为一个返回对象的函数\",{\"1\":{\"193\":1}}],[\"data中key对应的value\",{\"1\":{\"167\":1}}],[\"data中的属性msg发生改变时\",{\"1\":{\"190\":1}}],[\"data中的数组\",{\"1\":{\"161\":1}}],[\"data中的数据特点\",{\"1\":{\"154\":1}}],[\"data中的数据也可以通过实例访问\",{\"1\":{\"154\":1}}],[\"data中的数据msg\",{\"1\":{\"154\":1}}],[\"data中的值\",{\"1\":{\"154\":1}}],[\"data选项中的属性\",{\"1\":{\"166\":1}}],[\"data\",{\"0\":{\"72\":1,\"154\":1},\"1\":{\"74\":6,\"75\":1,\"76\":5,\"77\":9,\"113\":1,\"154\":1,\"155\":1,\"161\":1,\"167\":1,\"168\":1,\"169\":1,\"170\":2,\"171\":1,\"183\":1,\"186\":1,\"189\":1,\"190\":1,\"192\":1,\"193\":1,\"194\":3,\"197\":2,\"221\":2,\"224\":1,\"225\":1,\"244\":3,\"252\":1,\"281\":1,\"304\":2,\"326\":2,\"327\":3,\"362\":4,\"363\":3,\"466\":2,\"487\":10,\"511\":1,\"599\":1,\"600\":1,\"605\":1,\"618\":3,\"619\":9,\"622\":15,\"636\":2}}],[\"databytes\",{\"1\":{\"622\":4}}],[\"databasename\",{\"1\":{\"244\":1,\"519\":1}}],[\"database\",{\"1\":{\"129\":1,\"252\":1,\"518\":4,\"519\":4,\"559\":4,\"561\":4}}],[\"databases\",{\"1\":{\"30\":1,\"243\":1}}],[\"databind\",{\"1\":{\"63\":1,\"492\":6,\"493\":1}}],[\"databind<\",{\"1\":{\"63\":1,\"558\":1}}],[\"dao接口\",{\"0\":{\"75\":1}}],[\"dao\",{\"0\":{\"73\":1},\"1\":{\"76\":1,\"77\":1,\"511\":1,\"660\":5,\"664\":1,\"665\":1}}],[\"dsl是⼀个java开源框架⽤于构建类型安全的sql查询语句\",{\"1\":{\"56\":1}}],[\"dsl\",{\"0\":{\"56\":1}}],[\"d\",{\"1\":{\"42\":1,\"113\":1,\"244\":7,\"252\":1,\"263\":1,\"327\":2,\"400\":1,\"401\":2,\"491\":5,\"535\":1,\"619\":1}}],[\"dbsize\",{\"1\":{\"334\":1,\"336\":1}}],[\"db\",{\"1\":{\"30\":1,\"244\":2,\"336\":1,\"518\":1,\"547\":1,\"559\":1,\"561\":1}}],[\"details\",{\"1\":{\"629\":2}}],[\"derived\",{\"1\":{\"628\":1}}],[\"demeter\",{\"1\":{\"625\":1,\"631\":2}}],[\"demomain\",{\"1\":{\"622\":1}}],[\"demolist\",{\"1\":{\"619\":3}}],[\"demolist设置数据\",{\"1\":{\"619\":1}}],[\"demo\",{\"1\":{\"113\":1}}],[\"demo2<\",{\"1\":{\"74\":2}}],[\"deepoove<\",{\"1\":{\"617\":2}}],[\"deepoove\",{\"1\":{\"617\":1,\"618\":2,\"619\":5}}],[\"denver\",{\"1\":{\"419\":4}}],[\"deque\",{\"1\":{\"316\":1}}],[\"deque<e>\",{\"1\":{\"316\":1}}],[\"depend\",{\"1\":{\"629\":4,\"630\":2}}],[\"dependence\",{\"1\":{\"625\":1}}],[\"dependencies<\",{\"1\":{\"113\":1,\"369\":1}}],[\"dependencies>\",{\"1\":{\"58\":1,\"74\":1,\"84\":1,\"113\":2,\"369\":2,\"504\":1,\"505\":1,\"517\":1,\"558\":1,\"589\":1,\"590\":1}}],[\"dependency\",{\"1\":{\"630\":1}}],[\"dependencymanagement>\",{\"1\":{\"113\":1,\"369\":1}}],[\"dependency>\",{\"1\":{\"58\":7,\"63\":3,\"74\":2,\"84\":1,\"113\":5,\"301\":1,\"369\":2,\"372\":1,\"375\":1,\"382\":1,\"383\":1,\"386\":1,\"399\":2,\"400\":1,\"406\":1,\"409\":2,\"410\":1,\"439\":1,\"470\":1,\"504\":2,\"505\":2,\"517\":7,\"543\":2,\"551\":4,\"558\":11,\"589\":4,\"590\":4,\"603\":1,\"609\":2,\"617\":3,\"665\":1}}],[\"dependencyresolutionmanagement\",{\"1\":{\"17\":1}}],[\"deprecated\",{\"1\":{\"270\":2}}],[\"decodebase64\",{\"1\":{\"622\":4}}],[\"decodedkey\",{\"1\":{\"622\":4}}],[\"decompiler\",{\"1\":{\"7\":1}}],[\"declare=\",{\"1\":{\"589\":8,\"590\":1}}],[\"declaring\",{\"1\":{\"541\":2}}],[\"declete\",{\"1\":{\"255\":1}}],[\"decryptdata\",{\"1\":{\"622\":2}}],[\"decrypteddata\",{\"1\":{\"622\":2}}],[\"decrypt\",{\"1\":{\"622\":7}}],[\"decrby\",{\"1\":{\"340\":1}}],[\"decrement\",{\"1\":{\"340\":2}}],[\"decr\",{\"1\":{\"340\":1}}],[\"dead\",{\"1\":{\"110\":5}}],[\"delet\",{\"1\":{\"389\":1}}],[\"deletebypath\",{\"1\":{\"113\":2}}],[\"deletebyid\",{\"1\":{\"76\":1}}],[\"deletefile\",{\"1\":{\"113\":3}}],[\"deletemassage\",{\"1\":{\"100\":1}}],[\"deletedocument\",{\"1\":{\"76\":1}}],[\"delete\",{\"1\":{\"42\":1,\"45\":1,\"47\":1,\"57\":1,\"100\":2,\"113\":1,\"139\":2,\"185\":1,\"187\":1,\"222\":1,\"363\":3,\"389\":1,\"424\":1,\"444\":1,\"504\":2,\"611\":1,\"613\":1}}],[\"delconsumer\",{\"1\":{\"357\":2}}],[\"del\",{\"1\":{\"244\":2,\"327\":1,\"336\":2,\"363\":1,\"466\":1}}],[\"delitem\",{\"1\":{\"187\":1,\"222\":2}}],[\"deliverytag\",{\"1\":{\"107\":2,\"110\":3}}],[\"delivertag\",{\"1\":{\"107\":4}}],[\"destroy\",{\"1\":{\"357\":2}}],[\"destkey\",{\"1\":{\"354\":1,\"363\":5}}],[\"destination\",{\"1\":{\"343\":1,\"344\":1,\"346\":2,\"347\":2,\"348\":2,\"351\":3}}],[\"destination不存在时会创建\",{\"1\":{\"343\":1}}],[\"design\",{\"1\":{\"123\":1,\"625\":2}}],[\"desc\",{\"1\":{\"57\":2,\"327\":1}}],[\"description>\",{\"1\":{\"74\":1,\"113\":1}}],[\"description\",{\"1\":{\"57\":8,\"471\":1}}],[\"desmos\",{\"1\":{\"11\":1}}],[\"default=\",{\"1\":{\"518\":1}}],[\"defaults\",{\"1\":{\"228\":1}}],[\"defaultzone\",{\"1\":{\"113\":1,\"367\":4,\"368\":1,\"369\":1,\"405\":1,\"417\":1,\"440\":1,\"445\":1}}],[\"defaultconsumer\",{\"1\":{\"87\":1,\"90\":2,\"95\":2,\"98\":2,\"101\":2}}],[\"defaultfield\",{\"1\":{\"76\":1}}],[\"default\",{\"0\":{\"435\":1},\"1\":{\"49\":1,\"57\":1,\"85\":1,\"86\":1,\"220\":1,\"252\":2,\"272\":1,\"374\":1,\"382\":4,\"384\":2,\"385\":2,\"386\":2,\"405\":2,\"406\":1,\"435\":1,\"438\":1,\"440\":2,\"493\":5,\"523\":1,\"547\":1,\"548\":1,\"552\":1}}],[\"development\",{\"1\":{\"518\":2}}],[\"developer\",{\"1\":{\"3\":1,\"15\":1,\"116\":1}}],[\"devel\",{\"1\":{\"232\":4,\"233\":7}}],[\"devserver\",{\"1\":{\"213\":1}}],[\"devtools\",{\"1\":{\"17\":2,\"18\":2,\"252\":3,\"263\":1}}],[\"dev\",{\"0\":{\"671\":1},\"1\":{\"11\":1,\"213\":1,\"251\":1,\"405\":2}}],[\"debug\",{\"1\":{\"113\":2,\"378\":1}}],[\"deb\",{\"1\":{\"5\":1}}],[\"dofinal\",{\"1\":{\"622\":4}}],[\"doafterallanalysed\",{\"1\":{\"600\":1}}],[\"doother\",{\"1\":{\"548\":1}}],[\"dosome\",{\"1\":{\"548\":1}}],[\"dopost\",{\"1\":{\"266\":2}}],[\"done\",{\"1\":{\"244\":1}}],[\"dongzl\",{\"1\":{\"4\":2}}],[\"do\",{\"1\":{\"244\":1,\"454\":1,\"630\":1}}],[\"dom\",{\"1\":{\"181\":3,\"182\":2}}],[\"dom对象\",{\"1\":{\"153\":1}}],[\"domain\",{\"1\":{\"76\":3,\"77\":2,\"113\":1,\"546\":1}}],[\"double\",{\"1\":{\"77\":2,\"326\":3,\"327\":5,\"363\":5}}],[\"down\",{\"1\":{\"54\":1}}],[\"downloads\",{\"1\":{\"7\":1,\"236\":1,\"251\":1,\"331\":1}}],[\"download\",{\"1\":{\"7\":2,\"41\":1,\"246\":1,\"332\":1}}],[\"doget\",{\"1\":{\"266\":2}}],[\"dog\",{\"1\":{\"10\":1}}],[\"dog图床\",{\"1\":{\"10\":1}}],[\"docx\",{\"1\":{\"619\":2}}],[\"docket\",{\"1\":{\"471\":3}}],[\"docker\",{\"1\":{\"400\":3,\"401\":5}}],[\"doctype\",{\"1\":{\"146\":1,\"518\":1,\"521\":1}}],[\"doccount+\",{\"1\":{\"77\":1}}],[\"doccount\",{\"1\":{\"77\":2}}],[\"documentationtype\",{\"1\":{\"471\":2}}],[\"documentation\",{\"1\":{\"471\":8}}],[\"documented\",{\"1\":{\"271\":1,\"272\":2,\"479\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":1}}],[\"documents\",{\"1\":{\"30\":1}}],[\"document\",{\"0\":{\"35\":1,\"62\":1},\"1\":{\"29\":1,\"30\":2,\"62\":1,\"65\":1,\"70\":1,\"71\":1,\"74\":2,\"77\":2,\"153\":1}}],[\"document对象相当于表中的⼀条记录\",{\"1\":{\"29\":1}}],[\"document对象\",{\"1\":{\"29\":1}}],[\"docs\",{\"1\":{\"4\":3,\"331\":1}}],[\"doc\",{\"1\":{\"4\":1,\"122\":2,\"146\":1,\"234\":1,\"472\":2,\"482\":1}}],[\"华为仓库\",{\"1\":{\"3\":1}}],[\"华为云镜像站\",{\"1\":{\"2\":1}}],[\"仓库\",{\"0\":{\"3\":1}}],[\"mchange\",{\"1\":{\"553\":1}}],[\"mchange<\",{\"1\":{\"551\":1}}],[\"mvc\",{\"0\":{\"567\":1},\"1\":{\"562\":4,\"569\":1,\"585\":3}}],[\"mvc=\",{\"1\":{\"562\":1}}],[\"mvc注解的⽀持\",{\"1\":{\"372\":1}}],[\"mvnrepository\",{\"1\":{\"3\":1}}],[\"mvn\",{\"1\":{\"3\":1,\"116\":1}}],[\"mq\",{\"1\":{\"355\":1}}],[\"mq接收到回复会删除消息\",{\"1\":{\"85\":1,\"87\":1}}],[\"m|km|ft|mi\",{\"1\":{\"353\":3}}],[\"mget\",{\"1\":{\"338\":1}}],[\"mkdir\",{\"1\":{\"244\":1,\"332\":1}}],[\"m4\",{\"1\":{\"232\":1}}],[\"md5withrsa\",{\"1\":{\"622\":2}}],[\"md\",{\"1\":{\"219\":2,\"423\":1}}],[\"mm\",{\"1\":{\"178\":2,\"466\":4}}],[\"m\",{\"1\":{\"123\":2,\"244\":6,\"511\":1}}],[\"meyer\",{\"1\":{\"626\":1}}],[\"members\",{\"1\":{\"363\":2}}],[\"member\",{\"1\":{\"346\":4,\"351\":5,\"352\":1,\"353\":7}}],[\"member2\",{\"1\":{\"346\":2,\"351\":1,\"353\":1}}],[\"member1\",{\"1\":{\"346\":2,\"351\":1,\"353\":1}}],[\"metadata\",{\"1\":{\"599\":1,\"600\":1}}],[\"metaobject\",{\"1\":{\"467\":11}}],[\"metaobjecthandler\",{\"1\":{\"467\":2}}],[\"meta\",{\"1\":{\"122\":2,\"472\":2}}],[\"methodproxy\",{\"1\":{\"665\":5}}],[\"methodparameter\",{\"1\":{\"481\":10}}],[\"methodinterceptor\",{\"1\":{\"665\":2}}],[\"methodargumentnotvalidexception\",{\"1\":{\"475\":3}}],[\"method=put\",{\"1\":{\"424\":1}}],[\"method=get\",{\"1\":{\"419\":1,\"426\":1}}],[\"methodname\",{\"1\":{\"295\":2}}],[\"methods不论data变化与否\",{\"1\":{\"183\":1}}],[\"methods方法的区别\",{\"1\":{\"183\":1}}],[\"methods中所有的方法\",{\"1\":{\"155\":1}}],[\"methods其值为一个对象\",{\"1\":{\"155\":1}}],[\"methods\",{\"0\":{\"155\":1},\"1\":{\"155\":1,\"171\":1,\"179\":1,\"192\":1,\"207\":1,\"444\":1,\"613\":1,\"630\":1}}],[\"method\",{\"1\":{\"80\":1,\"113\":2,\"155\":1,\"266\":3,\"272\":2,\"295\":9,\"298\":1,\"303\":2,\"382\":2,\"384\":2,\"385\":2,\"386\":2,\"419\":1,\"438\":1,\"472\":1,\"481\":2,\"482\":1,\"579\":3,\"613\":3,\"654\":3,\"656\":1,\"662\":3,\"663\":3,\"664\":6,\"665\":4}}],[\"metrics\",{\"1\":{\"77\":1}}],[\"messagelistener\",{\"1\":{\"590\":2}}],[\"message发生变化时\",{\"1\":{\"183\":1}}],[\"message后\",{\"1\":{\"110\":1}}],[\"messagepostprocessor\",{\"1\":{\"109\":4}}],[\"message不能互通\",{\"1\":{\"83\":1}}],[\"message\",{\"1\":{\"80\":3,\"105\":1,\"106\":5,\"107\":6,\"109\":8,\"110\":5,\"156\":1,\"183\":3,\"355\":1,\"475\":2,\"487\":7,\"590\":7,\"613\":1}}],[\"more\",{\"1\":{\"627\":1}}],[\"mon\",{\"1\":{\"500\":1}}],[\"mono<void>\",{\"1\":{\"437\":4,\"438\":1,\"441\":1}}],[\"mono\",{\"1\":{\"437\":4}}],[\"move\",{\"1\":{\"336\":2,\"363\":2}}],[\"moonlight\",{\"1\":{\"326\":2,\"327\":2,\"472\":3,\"475\":4,\"492\":3,\"493\":2,\"599\":4,\"600\":1}}],[\"mounted\",{\"1\":{\"186\":1,\"204\":1,\"221\":1,\"225\":1}}],[\"mounted函数\",{\"1\":{\"186\":1}}],[\"moment\",{\"1\":{\"178\":2}}],[\"mode\",{\"1\":{\"622\":2}}],[\"modelandview\",{\"1\":{\"578\":1,\"583\":1}}],[\"modelandview也可以是其他\",{\"1\":{\"574\":1}}],[\"modelandviewcontainer\",{\"1\":{\"481\":4}}],[\"model=\",{\"1\":{\"170\":1,\"174\":1}}],[\"model会忽略\",{\"1\":{\"170\":1}}],[\"model\",{\"0\":{\"170\":1,\"171\":1,\"172\":1},\"1\":{\"89\":1,\"94\":1,\"100\":3,\"170\":1,\"481\":1}}],[\"modelversion>\",{\"1\":{\"74\":1,\"113\":1,\"504\":1,\"505\":1}}],[\"modifiers\",{\"1\":{\"541\":2}}],[\"module\",{\"1\":{\"213\":1,\"248\":1,\"368\":1,\"405\":1,\"445\":1}}],[\"modules\",{\"1\":{\"146\":1,\"214\":1,\"217\":1,\"629\":2}}],[\"mobz\",{\"1\":{\"41\":1}}],[\"music\",{\"1\":{\"209\":2}}],[\"must\",{\"1\":{\"57\":7,\"628\":1}}],[\"multiget\",{\"1\":{\"363\":1}}],[\"multisetifabsent\",{\"1\":{\"363\":1}}],[\"multiset\",{\"1\":{\"363\":1}}],[\"multipartfile\",{\"1\":{\"113\":12}}],[\"multipart\",{\"1\":{\"113\":3}}],[\"multiple\",{\"1\":{\"107\":2}}],[\"multicase\",{\"1\":{\"80\":1}}],[\"multimatchquery\",{\"1\":{\"71\":1}}],[\"multi\",{\"1\":{\"7\":1,\"57\":2,\"358\":1}}],[\"mime\",{\"1\":{\"377\":1}}],[\"milliseconds\",{\"1\":{\"356\":2,\"357\":2}}],[\"misc\",{\"1\":{\"289\":1}}],[\"minimumnumberofcalls\",{\"1\":{\"382\":3,\"440\":2}}],[\"minvalue\",{\"1\":{\"135\":1}}],[\"min\",{\"1\":{\"123\":2,\"150\":1,\"351\":7,\"377\":1}}],[\"mirror\",{\"1\":{\"260\":2,\"262\":4}}],[\"mirror>\",{\"1\":{\"116\":2}}],[\"mirrorof>\",{\"1\":{\"116\":2}}],[\"mirrors\",{\"1\":{\"2\":2,\"3\":1,\"5\":1,\"17\":1,\"260\":2}}],[\"miaosou\",{\"1\":{\"13\":1}}],[\"msetnx\",{\"1\":{\"338\":1}}],[\"mset\",{\"1\":{\"338\":1}}],[\"msgparent\",{\"1\":{\"197\":2}}],[\"msg=\",{\"1\":{\"197\":1}}],[\"msg=最新的value\",{\"1\":{\"171\":1}}],[\"msg或者vm\",{\"1\":{\"154\":1}}],[\"msgtest\",{\"1\":{\"146\":2}}],[\"msg\",{\"1\":{\"113\":1,\"146\":5,\"154\":6,\"170\":3,\"171\":4,\"173\":1,\"174\":2,\"190\":2,\"194\":2,\"197\":3,\"486\":4,\"487\":5,\"590\":2}}],[\"ms\",{\"1\":{\"10\":2,\"367\":1,\"368\":1,\"382\":2}}],[\"myinterceptor\",{\"1\":{\"585\":1}}],[\"myinterceptor2\",{\"1\":{\"585\":3}}],[\"myinterface\",{\"1\":{\"272\":1}}],[\"myfinally\",{\"1\":{\"545\":1,\"660\":2,\"664\":3,\"665\":1}}],[\"myfallbackfactory\",{\"1\":{\"376\":2}}],[\"myfallback\",{\"1\":{\"376\":6}}],[\"myaop\",{\"1\":{\"664\":1,\"665\":1}}],[\"myaspect\",{\"1\":{\"545\":1}}],[\"myauthfilter\",{\"1\":{\"437\":2}}],[\"myauth\",{\"1\":{\"437\":2}}],[\"mybaits\",{\"0\":{\"512\":1}}],[\"mybatis会自己推断\",{\"1\":{\"524\":1}}],[\"mybatisutil\",{\"1\":{\"520\":1,\"522\":2}}],[\"mybatis<\",{\"1\":{\"517\":1,\"558\":2}}],[\"mybatis通过xml或注解的方式将要执行的各种的statement配置起来\",{\"1\":{\"511\":1}}],[\"mybatis\",{\"0\":{\"511\":1,\"516\":1,\"557\":1},\"1\":{\"511\":2,\"517\":2,\"518\":5,\"520\":2,\"521\":3,\"529\":1,\"558\":7,\"560\":2,\"561\":3}}],[\"mybatismetaobjecthandler\",{\"1\":{\"467\":1,\"480\":1}}],[\"mybatisplus\",{\"1\":{\"466\":2,\"467\":1}}],[\"mybatis字段自动注入\",{\"0\":{\"465\":1}}],[\"mybatisx\",{\"1\":{\"8\":1}}],[\"mylistener\",{\"1\":{\"505\":2}}],[\"myuserservlet\",{\"1\":{\"266\":1}}],[\"mysql根目录下创建my\",{\"1\":{\"252\":1}}],[\"mysql下载\",{\"1\":{\"251\":1}}],[\"mysql备份使用的shell脚本\",{\"1\":{\"244\":1}}],[\"mysql8\",{\"1\":{\"243\":1}}],[\"mysql密码\",{\"1\":{\"243\":1,\"256\":1}}],[\"mysqldump\",{\"1\":{\"244\":1}}],[\"mysqld\",{\"1\":{\"243\":4,\"252\":1,\"254\":1,\"255\":1}}],[\"mysql\",{\"0\":{\"126\":1,\"301\":1},\"1\":{\"128\":1,\"242\":4,\"243\":2,\"244\":9,\"251\":2,\"252\":6,\"255\":2,\"303\":2,\"304\":2,\"519\":2,\"547\":1,\"553\":1,\"558\":1,\"559\":2}}],[\"my\",{\"1\":{\"59\":2,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"74\":1,\"243\":1,\"332\":3}}],[\"mycomputermanager\",{\"1\":{\"7\":2}}],[\"mavan\",{\"1\":{\"564\":1}}],[\"maven引入依赖\",{\"1\":{\"603\":1}}],[\"maven<\",{\"1\":{\"558\":1}}],[\"maven镜像源配置\",{\"0\":{\"116\":1}}],[\"mavencentral\",{\"1\":{\"17\":2}}],[\"maven中央仓库\",{\"1\":{\"3\":1}}],[\"maven\",{\"0\":{\"3\":1,\"115\":1},\"1\":{\"3\":1,\"17\":22,\"74\":5,\"113\":5,\"116\":5,\"301\":1,\"398\":1,\"504\":4,\"505\":6,\"558\":3}}],[\"mandatory\",{\"1\":{\"548\":1,\"552\":1}}],[\"manager=\",{\"1\":{\"553\":1,\"561\":1}}],[\"manager\",{\"1\":{\"266\":1}}],[\"management\",{\"1\":{\"233\":1,\"400\":2,\"409\":1}}],[\"manual\",{\"1\":{\"107\":3,\"108\":2}}],[\"make\",{\"1\":{\"232\":1,\"233\":1,\"238\":2,\"246\":2,\"247\":2,\"248\":4,\"332\":2}}],[\"main\",{\"1\":{\"86\":1,\"87\":1,\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2,\"214\":1,\"219\":1,\"283\":1,\"284\":1,\"368\":1,\"369\":1,\"372\":1,\"391\":1,\"405\":1,\"416\":1,\"445\":1,\"522\":2,\"641\":1,\"656\":1}}],[\"massage\",{\"1\":{\"86\":4,\"89\":3,\"94\":3,\"505\":1}}],[\"master⽬录启动head\",{\"1\":{\"41\":1}}],[\"master压缩包解压到任意⽬录\",{\"1\":{\"41\":1}}],[\"master\",{\"1\":{\"4\":1,\"41\":1,\"405\":2,\"406\":1}}],[\"map1\",{\"1\":{\"619\":3}}],[\"map<boolean\",{\"1\":{\"599\":3}}],[\"map<integer\",{\"1\":{\"599\":6,\"600\":1}}],[\"map<string\",{\"1\":{\"65\":1,\"70\":1,\"71\":1,\"86\":1,\"87\":1,\"304\":5,\"326\":1,\"327\":3,\"363\":4,\"599\":3,\"612\":1,\"613\":2,\"618\":1,\"619\":3}}],[\"maps\",{\"1\":{\"511\":1}}],[\"map这时候值是map集合\",{\"1\":{\"349\":1}}],[\"map集合\",{\"1\":{\"349\":1}}],[\"map集合是以键值对的形式存在\",{\"1\":{\"320\":1}}],[\"map的工作原理\",{\"1\":{\"320\":1}}],[\"map\",{\"0\":{\"320\":1},\"1\":{\"65\":1,\"71\":1,\"304\":26,\"312\":1,\"326\":1,\"327\":4,\"363\":4,\"599\":14,\"600\":1,\"612\":1,\"613\":5,\"618\":1,\"619\":5}}],[\"mapping>\",{\"1\":{\"563\":2}}],[\"mapping=\",{\"1\":{\"562\":1}}],[\"mappings\",{\"1\":{\"43\":1,\"53\":1}}],[\"mapping是处理数据的⽅式和规则⽅⾯做⼀些限制\",{\"1\":{\"34\":1}}],[\"mapping\",{\"0\":{\"34\":1,\"43\":1,\"44\":1},\"1\":{\"44\":2,\"57\":2,\"60\":2,\"413\":1,\"511\":1,\"585\":2}}],[\"mapperxml标签\",{\"0\":{\"524\":1}}],[\"mapperscannerconfigurer\",{\"1\":{\"561\":2}}],[\"mappers\",{\"1\":{\"523\":3}}],[\"mappers>\",{\"1\":{\"518\":1}}],[\"mapper>\",{\"1\":{\"521\":1}}],[\"mapper\",{\"1\":{\"8\":1,\"518\":2,\"521\":5,\"522\":2,\"523\":1,\"524\":1,\"561\":3}}],[\"math\",{\"1\":{\"76\":1}}],[\"mathquery\",{\"0\":{\"68\":1}}],[\"mathc\",{\"1\":{\"57\":1}}],[\"matchedkeys\",{\"1\":{\"363\":3}}],[\"matchingkeys\",{\"1\":{\"327\":3}}],[\"matchallquery\",{\"1\":{\"70\":1,\"77\":1}}],[\"matchquery\",{\"1\":{\"68\":1}}],[\"match\",{\"1\":{\"21\":3,\"57\":8,\"77\":1,\"346\":1,\"349\":1,\"351\":1,\"363\":1}}],[\"maxthreadpoolsize\",{\"1\":{\"385\":2}}],[\"maxwaitduration\",{\"1\":{\"384\":2}}],[\"maxwaitdurationinhalfopenstate\",{\"1\":{\"382\":1}}],[\"maxconcurrentcalls\",{\"1\":{\"384\":2}}],[\"maxlen\",{\"1\":{\"356\":2}}],[\"maxscore\",{\"1\":{\"326\":2}}],[\"maxvalue\",{\"1\":{\"135\":1}}],[\"max\",{\"1\":{\"52\":2,\"53\":2,\"110\":2,\"113\":2,\"135\":1,\"327\":3,\"351\":7,\"622\":8}}],[\"martin\",{\"1\":{\"627\":1}}],[\"mariadb\",{\"1\":{\"243\":2}}],[\"marginbottom\",{\"1\":{\"26\":1}}],[\"marginright\",{\"1\":{\"26\":1}}],[\"margintop\",{\"1\":{\"26\":1}}],[\"marginleft\",{\"1\":{\"26\":1}}],[\"markdown\",{\"1\":{\"4\":1}}],[\"markdown官网地址\",{\"1\":{\"4\":1}}],[\"macports\",{\"1\":{\"17\":1}}],[\"hh\",{\"1\":{\"466\":2}}],[\"hhh\",{\"1\":{\"109\":1}}],[\"hd123\",{\"1\":{\"419\":2}}],[\"hdel\",{\"1\":{\"349\":1}}],[\"hystrix和r4j都发出⼀个事件流\",{\"1\":{\"381\":1}}],[\"hystrix根据只执⾏⼀次请求的结果来决定是否关闭断路器\",{\"1\":{\"381\":1}}],[\"hystrix使⽤hystrixcommand来调⽤外部的系统\",{\"1\":{\"381\":1}}],[\"hystrix对archaius具有编译依赖\",{\"1\":{\"381\":1}}],[\"hystrix的启发\",{\"1\":{\"381\":1}}],[\"hyperloglog\",{\"0\":{\"354\":1},\"1\":{\"354\":7}}],[\"hscan\",{\"1\":{\"349\":1}}],[\"hsetnx\",{\"1\":{\"349\":1}}],[\"hset\",{\"1\":{\"349\":1}}],[\"hlen\",{\"1\":{\"349\":1}}],[\"hl=zh\",{\"1\":{\"15\":1}}],[\"hvals\",{\"1\":{\"349\":1}}],[\"hkeys\",{\"1\":{\"349\":1}}],[\"hmget\",{\"1\":{\"349\":1}}],[\"hmset\",{\"1\":{\"324\":6,\"327\":4,\"349\":1,\"363\":2}}],[\"hgetall\",{\"1\":{\"349\":1}}],[\"hget\",{\"1\":{\"349\":1,\"363\":1}}],[\"h>\",{\"1\":{\"244\":4}}],[\"h2>\",{\"1\":{\"223\":1}}],[\"href=\",{\"1\":{\"208\":1,\"219\":1,\"221\":2,\"222\":1,\"223\":1}}],[\"h\",{\"1\":{\"178\":1,\"219\":2,\"244\":2,\"333\":1,\"421\":1,\"423\":2,\"662\":2}}],[\"have\",{\"1\":{\"448\":1}}],[\"half\",{\"1\":{\"382\":1,\"456\":1}}],[\"hasparameterannotation\",{\"1\":{\"481\":1}}],[\"haspmap序列化\",{\"1\":{\"362\":1}}],[\"haskey\",{\"1\":{\"327\":1,\"363\":3}}],[\"hashsize\",{\"1\":{\"363\":1}}],[\"hashset存储自定义类型元素\",{\"1\":{\"318\":1}}],[\"hashset集合存储数据的结构\",{\"1\":{\"318\":1}}],[\"hashset<e>\",{\"1\":{\"318\":1}}],[\"hashset实现类\",{\"0\":{\"318\":1}}],[\"hashset\",{\"1\":{\"317\":1,\"318\":1}}],[\"hashmultiget\",{\"1\":{\"363\":1}}],[\"hashmap序列化\",{\"1\":{\"362\":1}}],[\"hashmap<string\",{\"1\":{\"326\":1}}],[\"hashmap<>\",{\"1\":{\"304\":1,\"599\":3,\"619\":3}}],[\"hashmap\",{\"1\":{\"320\":3,\"326\":1,\"599\":1,\"619\":1}}],[\"hashvalues\",{\"1\":{\"363\":1}}],[\"hashkey的value值\",{\"1\":{\"363\":1}}],[\"hashkeys\",{\"1\":{\"363\":8}}],[\"hashkey\",{\"1\":{\"363\":14}}],[\"hash表字段key所对应的值\",{\"1\":{\"363\":1}}],[\"hash表字段key\",{\"1\":{\"363\":5}}],[\"hash表key\",{\"1\":{\"363\":7}}],[\"hash表设置一个值\",{\"1\":{\"363\":1}}],[\"hash类型\",{\"1\":{\"363\":2}}],[\"hashoperations\",{\"1\":{\"363\":12}}],[\"hashoperations<string\",{\"1\":{\"363\":1}}],[\"hashentries\",{\"1\":{\"327\":3,\"363\":1}}],[\"hashtable\",{\"1\":{\"320\":3}}],[\"hashcode\",{\"1\":{\"318\":1}}],[\"hash值改变\",{\"1\":{\"201\":1}}],[\"hash值得改变\",{\"1\":{\"200\":1}}],[\"hash值是url地址的一部分\",{\"1\":{\"200\":1}}],[\"hash值的改变\",{\"1\":{\"200\":1}}],[\"hash\",{\"0\":{\"349\":1},\"1\":{\"200\":1,\"363\":9}}],[\"hasnext\",{\"1\":{\"65\":1,\"70\":1,\"71\":1,\"363\":1}}],[\"handladapter\",{\"0\":{\"572\":1}}],[\"handleexception\",{\"1\":{\"475\":1}}],[\"handlerlist\",{\"1\":{\"642\":9}}],[\"handleradapter\",{\"1\":{\"572\":1}}],[\"handlerinterceptor接口\",{\"0\":{\"581\":1}}],[\"handlerinterceptor\",{\"1\":{\"480\":2,\"580\":1}}],[\"handlermethodargumentresolver\",{\"1\":{\"472\":1,\"481\":2,\"482\":1}}],[\"handlermapping负责根据用户请求找到\",{\"1\":{\"570\":1}}],[\"handlermapping也是控制器\",{\"1\":{\"570\":1}}],[\"handlermapping\",{\"0\":{\"570\":1},\"1\":{\"418\":1}}],[\"handlers\",{\"1\":{\"467\":1}}],[\"handler\",{\"0\":{\"571\":1},\"1\":{\"413\":3,\"480\":1,\"570\":1,\"571\":5,\"636\":3,\"637\":1,\"638\":1,\"642\":2}}],[\"handledelivery\",{\"1\":{\"87\":2,\"90\":2,\"95\":2,\"98\":2,\"101\":2}}],[\"handbook\",{\"1\":{\"4\":2}}],[\"high\",{\"1\":{\"629\":1}}],[\"highest\",{\"1\":{\"437\":4,\"438\":1,\"441\":1}}],[\"highlightfieldmap\",{\"1\":{\"71\":2}}],[\"highlightfield>\",{\"1\":{\"71\":2}}],[\"highlighter\",{\"1\":{\"71\":1}}],[\"highlightbuilder\",{\"1\":{\"71\":7}}],[\"highlightcode\",{\"1\":{\"11\":1}}],[\"hincrbyfloat\",{\"1\":{\"350\":1}}],[\"hincrby\",{\"1\":{\"350\":1}}],[\"hibernate\",{\"1\":{\"56\":1,\"529\":1}}],[\"here\",{\"1\":{\"454\":1}}],[\"heroes\",{\"1\":{\"213\":5,\"219\":2,\"221\":1,\"222\":1,\"224\":3,\"225\":1,\"226\":3,\"228\":2}}],[\"hexists\",{\"1\":{\"349\":1}}],[\"hehe\",{\"1\":{\"110\":1}}],[\"helloworld\",{\"1\":{\"102\":1}}],[\"hello\",{\"1\":{\"44\":2,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"59\":1,\"60\":1,\"62\":1,\"63\":2,\"65\":1,\"70\":1,\"71\":1,\"86\":1,\"89\":1,\"94\":1,\"155\":2,\"183\":1}}],[\"headnumber\",{\"1\":{\"599\":3}}],[\"headmap\",{\"1\":{\"599\":8}}],[\"headcellmap\",{\"1\":{\"599\":8,\"600\":2}}],[\"headverification注解在类上存在时\",{\"1\":{\"598\":1}}],[\"headverification注解搭配使用\",{\"1\":{\"598\":1}}],[\"headverification\",{\"0\":{\"596\":1},\"1\":{\"596\":1,\"599\":2}}],[\"headervalue\",{\"1\":{\"613\":3}}],[\"headername\",{\"1\":{\"613\":3}}],[\"headerresolveinterceptor\",{\"1\":{\"472\":4,\"480\":1,\"482\":3}}],[\"header=x\",{\"1\":{\"419\":1,\"421\":1,\"426\":1}}],[\"header\",{\"1\":{\"223\":1,\"419\":1,\"421\":1,\"480\":2,\"612\":2,\"613\":1}}],[\"headers\",{\"1\":{\"94\":1,\"97\":1,\"100\":1,\"113\":1,\"320\":1,\"378\":1,\"413\":1,\"426\":1,\"444\":1,\"612\":5,\"613\":1}}],[\"head>\",{\"1\":{\"146\":1}}],[\"head\",{\"0\":{\"41\":1},\"1\":{\"41\":4,\"42\":1,\"43\":2,\"46\":2,\"611\":1}}],[\"head插件\",{\"1\":{\"40\":1}}],[\"heightqchandler\",{\"1\":{\"636\":1,\"639\":1,\"640\":1,\"641\":5}}],[\"height=\",{\"1\":{\"21\":1}}],[\"height\",{\"1\":{\"21\":2,\"113\":1,\"636\":1}}],[\"holland\",{\"1\":{\"631\":1}}],[\"hoxton\",{\"1\":{\"448\":1}}],[\"hostname\",{\"1\":{\"367\":3}}],[\"host=www\",{\"1\":{\"419\":1}}],[\"host=\",{\"1\":{\"105\":3,\"106\":2,\"107\":3,\"108\":2,\"423\":1,\"426\":1,\"589\":3,\"590\":3}}],[\"host=192\",{\"1\":{\"105\":1,\"107\":1,\"589\":1,\"590\":1}}],[\"hosts=http\",{\"1\":{\"401\":2}}],[\"hosts\",{\"1\":{\"83\":1}}],[\"hosts相当于⼀个相对独⽴的rabbitmq\",{\"1\":{\"83\":1}}],[\"hosts配置\",{\"0\":{\"83\":1}}],[\"host\",{\"1\":{\"42\":1,\"80\":1,\"83\":1,\"105\":2,\"106\":2,\"107\":2,\"108\":2,\"243\":2,\"280\":4,\"284\":2,\"367\":1,\"409\":1,\"410\":1,\"419\":1,\"423\":6,\"471\":1,\"504\":2,\"505\":2,\"589\":2,\"590\":2}}],[\"horizontal\",{\"1\":{\"21\":4,\"26\":1}}],[\"honeyview\",{\"1\":{\"7\":2}}],[\"home\",{\"1\":{\"2\":1,\"4\":1,\"10\":1,\"12\":1,\"203\":4,\"263\":3,\"289\":2}}],[\"html>\",{\"1\":{\"146\":2}}],[\"html\",{\"0\":{\"157\":1},\"1\":{\"4\":3,\"7\":1,\"80\":1,\"116\":1,\"122\":3,\"146\":1,\"150\":1,\"157\":1,\"172\":1,\"175\":1,\"214\":1,\"215\":3,\"246\":1,\"266\":3,\"472\":3,\"482\":1,\"562\":4}}],[\"httpurl\",{\"1\":{\"619\":2}}],[\"httpurirequestbase\",{\"1\":{\"613\":1}}],[\"httpdelete\",{\"1\":{\"613\":1}}],[\"httpput\",{\"1\":{\"613\":1}}],[\"httppost\",{\"1\":{\"613\":1}}],[\"httpget\",{\"1\":{\"613\":1}}],[\"httprequest\",{\"1\":{\"613\":1}}],[\"httprequestbuilder\",{\"1\":{\"613\":15,\"614\":2}}],[\"httpresponse\",{\"0\":{\"612\":1},\"1\":{\"612\":1,\"614\":8}}],[\"httpentity\",{\"1\":{\"612\":2}}],[\"httptype\",{\"1\":{\"611\":1,\"613\":1,\"614\":2}}],[\"httptype枚举\",{\"0\":{\"611\":1}}],[\"http请求参数来匹配\",{\"1\":{\"418\":1}}],[\"http\",{\"1\":{\"5\":1,\"7\":1,\"13\":1,\"20\":1,\"21\":1,\"41\":1,\"42\":3,\"44\":2,\"45\":1,\"46\":1,\"47\":1,\"49\":1,\"50\":1,\"52\":2,\"53\":3,\"74\":3,\"80\":1,\"105\":9,\"106\":9,\"107\":9,\"108\":9,\"113\":5,\"185\":5,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"221\":1,\"222\":1,\"224\":1,\"225\":1,\"226\":1,\"228\":2,\"234\":1,\"248\":2,\"367\":9,\"368\":1,\"369\":1,\"382\":1,\"384\":1,\"386\":1,\"389\":1,\"392\":2,\"399\":1,\"400\":1,\"405\":1,\"406\":3,\"413\":1,\"415\":1,\"416\":2,\"417\":2,\"419\":3,\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":3,\"428\":1,\"429\":1,\"430\":3,\"431\":3,\"435\":2,\"437\":1,\"438\":1,\"440\":2,\"445\":1,\"480\":2,\"487\":1,\"504\":4,\"505\":4,\"521\":1,\"546\":10,\"553\":13,\"561\":10,\"562\":10,\"563\":4,\"589\":9,\"590\":9,\"612\":4,\"613\":6,\"614\":2,\"617\":1,\"622\":1}}],[\"httpclientutils\",{\"1\":{\"614\":1}}],[\"httpclients\",{\"1\":{\"614\":2}}],[\"httpclient\",{\"0\":{\"609\":1},\"1\":{\"612\":1}}],[\"httpclient文档\",{\"1\":{\"4\":1}}],[\"httpcomponents\",{\"1\":{\"4\":1,\"609\":1}}],[\"httpstatus\",{\"1\":{\"382\":1,\"437\":2,\"438\":1}}],[\"httpservletresponse\",{\"1\":{\"266\":9,\"480\":2}}],[\"httpservletrequest常用方法\",{\"1\":{\"266\":1}}],[\"httpservletrequest\",{\"1\":{\"266\":8,\"480\":2}}],[\"httpservlet\",{\"0\":{\"266\":1},\"1\":{\"266\":3}}],[\"https\",{\"1\":{\"1\":1,\"2\":2,\"3\":3,\"4\":10,\"5\":2,\"7\":13,\"10\":2,\"11\":9,\"12\":3,\"13\":3,\"15\":1,\"17\":13,\"41\":2,\"42\":2,\"74\":1,\"80\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"113\":1,\"116\":2,\"123\":3,\"146\":1,\"150\":4,\"151\":3,\"172\":1,\"175\":1,\"232\":1,\"236\":1,\"238\":1,\"246\":2,\"247\":1,\"248\":1,\"251\":1,\"259\":1,\"260\":2,\"262\":2,\"263\":2,\"331\":2,\"332\":1,\"398\":1,\"405\":1,\"415\":1,\"417\":1,\"420\":2,\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"426\":1,\"432\":1,\"433\":1,\"434\":1,\"445\":1,\"471\":2,\"497\":1,\"500\":1,\"518\":1,\"589\":1,\"590\":1,\"603\":2}}],[\"hc\",{\"1\":{\"4\":1,\"612\":4,\"613\":6,\"614\":2,\"622\":1}}],[\"huaweicloud\",{\"1\":{\"2\":1,\"3\":1,\"116\":2}}],[\"tl<\",{\"1\":{\"617\":2}}],[\"tl\",{\"0\":{\"617\":1},\"1\":{\"617\":4}}],[\"tlist\",{\"1\":{\"303\":3,\"304\":3}}],[\"tnulp\",{\"1\":{\"248\":1}}],[\"tx\",{\"1\":{\"553\":4,\"561\":4}}],[\"tx=\",{\"1\":{\"553\":1,\"561\":1}}],[\"tx<\",{\"1\":{\"551\":1,\"558\":1}}],[\"txdmbrtik2<d\",{\"1\":{\"243\":1}}],[\"txt中的npm\",{\"1\":{\"262\":1}}],[\"txt中的node\",{\"1\":{\"262\":1}}],[\"txt\",{\"1\":{\"179\":2,\"260\":1}}],[\"tclass\",{\"1\":{\"303\":11,\"304\":11}}],[\"tc\",{\"1\":{\"232\":1,\"281\":1}}],[\"tcp协议客户端与服务器链接时\",{\"1\":{\"278\":1}}],[\"tcp协议\",{\"0\":{\"277\":1}}],[\"tcp\",{\"1\":{\"80\":3,\"281\":2}}],[\"tk\",{\"1\":{\"232\":1,\"233\":1}}],[\"td>\",{\"1\":{\"221\":4}}],[\"talk\",{\"1\":{\"631\":1}}],[\"tabulardatasupport\",{\"1\":{\"320\":1}}],[\"tablename\",{\"1\":{\"559\":1}}],[\"tablefield\",{\"1\":{\"466\":5}}],[\"tables\",{\"1\":{\"30\":1}}],[\"tablelayout表格布局\",{\"1\":{\"20\":1}}],[\"table\",{\"1\":{\"11\":1,\"134\":1,\"619\":1}}],[\"tap\",{\"1\":{\"238\":1}}],[\"tar\",{\"1\":{\"238\":3,\"239\":1,\"247\":2,\"248\":6,\"332\":1}}],[\"target>1\",{\"1\":{\"558\":1}}],[\"target>\",{\"1\":{\"505\":1,\"558\":1}}],[\"target>8<\",{\"1\":{\"505\":1}}],[\"target参数\",{\"1\":{\"272\":1}}],[\"target\",{\"1\":{\"171\":1,\"271\":1,\"272\":1,\"479\":1,\"493\":2,\"540\":1,\"546\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":1}}],[\"tag=\",{\"1\":{\"219\":1}}],[\"that\",{\"1\":{\"628\":2}}],[\"than\",{\"1\":{\"627\":1}}],[\"they\",{\"1\":{\"630\":1}}],[\"there\",{\"1\":{\"627\":1,\"628\":1}}],[\"the\",{\"1\":{\"382\":2,\"384\":2,\"385\":2,\"386\":2,\"628\":1,\"630\":2}}],[\"then\",{\"1\":{\"185\":6,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"221\":1,\"222\":1,\"224\":1,\"225\":1,\"226\":1,\"244\":3,\"437\":3,\"628\":1}}],[\"this指向\",{\"1\":{\"183\":1}}],[\"this\",{\"1\":{\"155\":5,\"171\":1,\"179\":1,\"183\":1,\"186\":1,\"187\":1,\"188\":3,\"189\":1,\"204\":1,\"207\":1,\"221\":2,\"222\":1,\"224\":4,\"225\":3,\"226\":5,\"227\":1,\"283\":3,\"290\":3,\"303\":17,\"304\":17,\"467\":6,\"486\":2,\"487\":3,\"491\":2,\"612\":2,\"613\":16,\"631\":1,\"637\":1,\"660\":2}}],[\"thumb\",{\"1\":{\"113\":1}}],[\"throwing\",{\"1\":{\"545\":1}}],[\"throwable\",{\"1\":{\"376\":1,\"382\":3,\"545\":2,\"662\":1,\"663\":1,\"664\":1,\"665\":1}}],[\"throw\",{\"1\":{\"363\":1,\"599\":4,\"622\":3,\"642\":1,\"664\":1,\"665\":1}}],[\"throws\",{\"1\":{\"59\":2,\"60\":2,\"62\":2,\"63\":3,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"85\":1,\"86\":2,\"87\":3,\"90\":2,\"95\":2,\"98\":2,\"101\":2,\"107\":1,\"109\":1,\"110\":1,\"113\":2,\"266\":4,\"293\":1,\"294\":2,\"295\":1,\"296\":1,\"298\":1,\"303\":4,\"304\":4,\"382\":1,\"384\":1,\"385\":2,\"386\":1,\"492\":2,\"541\":2,\"545\":1,\"612\":1,\"614\":6,\"618\":2,\"619\":2,\"622\":5,\"662\":1,\"663\":1,\"664\":1,\"665\":1}}],[\"threadlocal<sqlsession>\",{\"1\":{\"520\":1}}],[\"threadlocal<>\",{\"1\":{\"467\":1,\"520\":1}}],[\"threadlocal<integer>\",{\"1\":{\"467\":1}}],[\"threadpool\",{\"1\":{\"385\":1}}],[\"thread\",{\"1\":{\"80\":1,\"283\":1,\"382\":1,\"384\":1,\"385\":2,\"386\":1,\"467\":5,\"480\":1,\"520\":5}}],[\"threatbook\",{\"1\":{\"12\":1}}],[\"ttl+死信队列\",{\"1\":{\"111\":1}}],[\"ttl\",{\"0\":{\"109\":1},\"1\":{\"109\":13,\"110\":2,\"336\":2}}],[\"tipsmore\",{\"1\":{\"146\":1}}],[\"tips\",{\"1\":{\"146\":2}}],[\"tipstest\",{\"1\":{\"146\":2}}],[\"timelimiter\",{\"1\":{\"381\":1}}],[\"timer\",{\"1\":{\"367\":1,\"368\":1}}],[\"timeunit\",{\"1\":{\"363\":6}}],[\"time=$\",{\"1\":{\"244\":1}}],[\"timeoutduration\",{\"1\":{\"386\":2}}],[\"timeout的设置\",{\"1\":{\"281\":1}}],[\"timeout=2147483\",{\"1\":{\"252\":2}}],[\"timeout\",{\"1\":{\"113\":2,\"281\":3,\"344\":6,\"363\":6,\"480\":1,\"548\":1}}],[\"timeoutexception\",{\"1\":{\"84\":2,\"86\":2,\"89\":2,\"94\":2,\"97\":2,\"100\":2}}],[\"time\",{\"1\":{\"109\":1,\"244\":3,\"327\":4,\"363\":5,\"382\":3,\"440\":2,\"466\":3,\"467\":1}}],[\"title>\",{\"1\":{\"146\":1}}],[\"title\",{\"1\":{\"43\":1,\"44\":1,\"46\":1,\"49\":1,\"50\":1,\"53\":3,\"60\":1,\"62\":1,\"63\":2,\"65\":1,\"66\":1,\"68\":1,\"70\":1,\"71\":2,\"74\":1,\"75\":12,\"76\":1,\"471\":1}}],[\"t\",{\"1\":{\"71\":1,\"281\":2,\"303\":4,\"304\":4,\"487\":4,\"524\":3,\"545\":1,\"599\":8,\"600\":5,\"628\":3}}],[\"tolist\",{\"1\":{\"613\":1}}],[\"toleftof\",{\"1\":{\"24\":1}}],[\"tobytearray\",{\"1\":{\"612\":1,\"618\":1,\"622\":2}}],[\"tobato\",{\"1\":{\"113\":3}}],[\"tobato<\",{\"1\":{\"113\":1}}],[\"tojsonstring\",{\"1\":{\"599\":2,\"605\":2,\"606\":3}}],[\"tomcat7\",{\"1\":{\"558\":1,\"564\":1}}],[\"tomcat\",{\"1\":{\"558\":2,\"564\":1}}],[\"tomap\",{\"1\":{\"326\":1,\"327\":1,\"612\":1}}],[\"tokenutil\",{\"1\":{\"480\":1}}],[\"token\",{\"1\":{\"437\":3,\"480\":5}}],[\"toarray\",{\"1\":{\"314\":1}}],[\"to=\",{\"1\":{\"203\":2,\"204\":2,\"205\":5,\"219\":1,\"225\":1}}],[\"to指定路由的跳转地址\",{\"1\":{\"203\":1}}],[\"touppercase\",{\"1\":{\"176\":2}}],[\"tos\",{\"1\":{\"123\":2}}],[\"tostring\",{\"1\":{\"71\":1,\"77\":1,\"281\":1,\"283\":1,\"441\":1,\"475\":1,\"480\":1}}],[\"topictest\",{\"1\":{\"589\":1}}],[\"topicexchange\",{\"1\":{\"504\":2}}],[\"topics\",{\"0\":{\"99\":1}}],[\"topics主题模式\",{\"1\":{\"80\":1}}],[\"topic\",{\"1\":{\"80\":1,\"91\":1,\"94\":1,\"97\":1,\"99\":2,\"100\":17,\"101\":14,\"102\":1,\"109\":2,\"110\":4,\"504\":6,\"589\":22,\"590\":3}}],[\"to\",{\"0\":{\"205\":1},\"1\":{\"58\":1,\"80\":1,\"109\":1,\"210\":2,\"504\":1,\"627\":1,\"628\":2,\"630\":2,\"631\":2}}],[\"torightof\",{\"1\":{\"24\":1}}],[\"tongyi\",{\"1\":{\"8\":1}}],[\"treadlocal\",{\"1\":{\"520\":1}}],[\"treemap\",{\"1\":{\"320\":2}}],[\"treeset\",{\"1\":{\"317\":1}}],[\"tree\",{\"1\":{\"4\":1,\"312\":2}}],[\"tr\",{\"1\":{\"221\":1}}],[\"trace\",{\"1\":{\"396\":1,\"611\":1}}],[\"trace是⽤另⼀个64位id唯⼀标识的\",{\"1\":{\"396\":1}}],[\"tracker\",{\"1\":{\"112\":6,\"113\":1}}],[\"transactional\",{\"1\":{\"552\":3}}],[\"transaction\",{\"1\":{\"552\":2,\"553\":1,\"561\":1}}],[\"transactiondefinition\",{\"1\":{\"547\":1}}],[\"transactionmanager\",{\"1\":{\"523\":1,\"553\":2,\"561\":2}}],[\"transition>\",{\"1\":{\"210\":1}}],[\"transition\",{\"1\":{\"210\":2}}],[\"transport\",{\"1\":{\"62\":3,\"63\":3,\"65\":3}}],[\"transportclient\",{\"1\":{\"59\":1,\"60\":1,\"62\":2,\"63\":2,\"65\":2}}],[\"try\",{\"1\":{\"84\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2,\"107\":1,\"110\":1,\"113\":1,\"283\":3,\"284\":1,\"291\":1,\"303\":6,\"304\":6,\"363\":1,\"480\":1,\"520\":1,\"590\":1,\"612\":1,\"622\":4,\"660\":1,\"663\":1,\"664\":1,\"665\":1}}],[\"true情况\",{\"1\":{\"106\":1}}],[\"true\",{\"1\":{\"23\":7,\"43\":3,\"44\":4,\"53\":3,\"74\":3,\"77\":7,\"86\":2,\"87\":3,\"89\":1,\"90\":4,\"94\":2,\"95\":4,\"97\":2,\"98\":4,\"100\":2,\"101\":4,\"105\":4,\"106\":6,\"107\":5,\"110\":2,\"113\":2,\"146\":1,\"213\":2,\"283\":1,\"294\":1,\"295\":1,\"296\":2,\"303\":1,\"304\":1,\"315\":2,\"326\":1,\"363\":6,\"369\":4,\"375\":1,\"377\":3,\"382\":2,\"409\":1,\"440\":1,\"444\":1,\"454\":1,\"480\":1,\"481\":2,\"504\":1,\"505\":1,\"515\":1,\"546\":1,\"561\":1,\"589\":8,\"590\":2,\"599\":7,\"612\":1,\"619\":3,\"636\":1}}],[\"temporary\",{\"1\":{\"243\":3}}],[\"temp\",{\"1\":{\"128\":22,\"137\":5,\"138\":5,\"139\":7,\"140\":6,\"243\":1,\"405\":1,\"619\":1}}],[\"templates\",{\"1\":{\"619\":1}}],[\"template中\",{\"1\":{\"218\":1}}],[\"template必须有且只有一个根元素\",{\"1\":{\"193\":1}}],[\"template\",{\"1\":{\"76\":4,\"77\":3,\"105\":1,\"106\":1,\"192\":1,\"193\":1,\"194\":3,\"195\":4,\"197\":1,\"198\":1,\"203\":2,\"204\":1,\"206\":1,\"215\":2,\"362\":7,\"389\":1,\"589\":1,\"618\":3}}],[\"testgenerateword\",{\"1\":{\"619\":1}}],[\"test=\",{\"1\":{\"521\":1}}],[\"test等发布策略\",{\"1\":{\"448\":1}}],[\"testloadbalancer\",{\"1\":{\"393\":1}}],[\"testservlet\",{\"1\":{\"266\":1}}],[\"testreturn\",{\"1\":{\"106\":1}}],[\"testconfirm\",{\"1\":{\"105\":1}}],[\"testqueryselfags\",{\"1\":{\"77\":1}}],[\"testquerybyhighlight\",{\"1\":{\"71\":1}}],[\"testquerybymachall\",{\"1\":{\"70\":1}}],[\"testquerybymathquery\",{\"1\":{\"68\":1}}],[\"testquerybyid\",{\"1\":{\"69\":1}}],[\"testquerybyquerystring\",{\"1\":{\"67\":1}}],[\"testquerybyteam\",{\"1\":{\"66\":1}}],[\"testnativesearchquery\",{\"1\":{\"76\":1}}],[\"test<\",{\"1\":{\"74\":1,\"113\":1,\"504\":1,\"505\":1,\"589\":1,\"590\":1}}],[\"testadddocument3\",{\"1\":{\"63\":1}}],[\"testadddocument1\",{\"1\":{\"63\":1}}],[\"testadddocument\",{\"1\":{\"62\":1}}],[\"testinfo\",{\"1\":{\"57\":9}}],[\"test\",{\"1\":{\"53\":2,\"59\":2,\"60\":1,\"62\":2,\"63\":3,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"74\":1,\"76\":13,\"77\":7,\"84\":1,\"105\":10,\"106\":9,\"107\":7,\"108\":1,\"109\":7,\"110\":7,\"238\":2,\"266\":2,\"393\":1,\"405\":1,\"422\":1,\"427\":4,\"471\":3,\"504\":6,\"505\":6,\"589\":6,\"590\":7,\"605\":1,\"606\":1,\"619\":4,\"660\":2,\"663\":2}}],[\"test3\",{\"1\":{\"53\":3}}],[\"test2\",{\"1\":{\"44\":2,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"57\":14}}],[\"test1\",{\"1\":{\"43\":2,\"45\":1}}],[\"termquery\",{\"0\":{\"66\":1},\"1\":{\"66\":1}}],[\"terms\",{\"1\":{\"57\":2,\"77\":4,\"628\":1}}],[\"term\",{\"1\":{\"50\":2,\"53\":1,\"57\":6}}],[\"term查询\",{\"0\":{\"50\":1}}],[\"term是创建索引的关键词对象\",{\"1\":{\"29\":1}}],[\"term中包含两部分⼀部分是⽂档的域名\",{\"1\":{\"29\":1}}],[\"term对象\",{\"1\":{\"29\":1}}],[\"text和插值表达式的区别\",{\"1\":{\"157\":1}}],[\"text和v\",{\"0\":{\"157\":1}}],[\"text=我是程序员\",{\"1\":{\"52\":2}}],[\"text\",{\"1\":{\"28\":1,\"43\":2,\"44\":2,\"52\":1,\"53\":2,\"57\":3,\"74\":2,\"77\":3,\"139\":2,\"140\":2,\"157\":2,\"170\":1,\"171\":1,\"174\":1,\"179\":1,\"181\":2,\"182\":1,\"266\":1,\"377\":1}}],[\"textview\",{\"1\":{\"20\":1}}],[\"team\",{\"1\":{\"7\":1}}],[\"type默认为bulkhead\",{\"1\":{\"384\":1}}],[\"typeclass\",{\"1\":{\"295\":2}}],[\"type>\",{\"1\":{\"113\":1,\"369\":1}}],[\"type=elasticsearch\",{\"1\":{\"401\":2}}],[\"type=single\",{\"1\":{\"401\":1}}],[\"type=multipart\",{\"1\":{\"113\":1}}],[\"type=\",{\"1\":{\"109\":1,\"110\":2,\"170\":1,\"171\":1,\"174\":1,\"179\":1,\"181\":2,\"182\":1,\"223\":3,\"224\":1,\"518\":2}}],[\"type⾥⾯\",{\"1\":{\"35\":1}}],[\"types\",{\"1\":{\"30\":1,\"377\":1}}],[\"type\",{\"0\":{\"32\":1},\"1\":{\"4\":1,\"43\":3,\"44\":3,\"53\":3,\"57\":4,\"60\":3,\"74\":4,\"77\":6,\"94\":1,\"97\":1,\"100\":1,\"109\":1,\"272\":2,\"336\":2,\"384\":3,\"385\":2,\"399\":2,\"400\":1,\"492\":2,\"493\":1,\"523\":2,\"524\":1,\"541\":4,\"595\":1,\"596\":1,\"628\":2}}],[\"tsinghua\",{\"1\":{\"2\":1}}],[\"tuna\",{\"1\":{\"2\":1}}],[\"cglibproxyfactory\",{\"1\":{\"665\":1}}],[\"cglib\",{\"0\":{\"665\":1},\"1\":{\"661\":1,\"665\":5}}],[\"c3p0\",{\"1\":{\"553\":1}}],[\"cfilter\",{\"1\":{\"437\":4}}],[\"customroutelocator\",{\"1\":{\"416\":1}}],[\"currorg\",{\"1\":{\"481\":1}}],[\"curruser\",{\"1\":{\"481\":3}}],[\"currentuser\",{\"1\":{\"479\":1,\"481\":3}}],[\"currentthread\",{\"1\":{\"283\":1}}],[\"current\",{\"1\":{\"4\":1,\"480\":3,\"481\":1}}],[\"cursor<byte\",{\"1\":{\"363\":1}}],[\"cursor\",{\"1\":{\"346\":1,\"349\":1,\"351\":1,\"363\":3}}],[\"curl\",{\"1\":{\"42\":1,\"421\":2,\"422\":2,\"423\":2,\"424\":2,\"425\":3}}],[\"csdn\",{\"1\":{\"415\":4,\"416\":4,\"417\":2,\"445\":2}}],[\"cs\",{\"1\":{\"396\":1}}],[\"css\",{\"1\":{\"217\":4,\"472\":1}}],[\"css预处理器配置文件\",{\"1\":{\"214\":1}}],[\"css属性名\",{\"1\":{\"168\":2}}],[\"c语言编写\",{\"1\":{\"331\":1}}],[\"cj\",{\"1\":{\"303\":1,\"304\":1,\"519\":1,\"553\":1,\"559\":1}}],[\"cpu上下文会切换\",{\"1\":{\"334\":1}}],[\"cp\",{\"1\":{\"234\":1,\"332\":1}}],[\"c++命令即可\",{\"1\":{\"332\":1}}],[\"c++\",{\"1\":{\"232\":1,\"246\":1}}],[\"cd\",{\"1\":{\"213\":2,\"234\":1,\"238\":1}}],[\"cdn\",{\"1\":{\"1\":1,\"123\":5,\"150\":1,\"202\":1}}],[\"circle\",{\"1\":{\"653\":1,\"654\":3,\"655\":1,\"656\":2}}],[\"circuitbreakerregistry\",{\"1\":{\"441\":3}}],[\"circuitbreakerlogfilter\",{\"1\":{\"441\":1}}],[\"circuitbreaker过滤器使⽤spring\",{\"1\":{\"439\":1}}],[\"circuitbreaker变为open状态\",{\"1\":{\"382\":1,\"440\":1}}],[\"circuitbreaker配置\",{\"1\":{\"382\":1}}],[\"circuitbreaker⽀持降级概念\",{\"1\":{\"376\":1}}],[\"circuitbreaker\",{\"0\":{\"382\":1},\"1\":{\"375\":2,\"381\":1,\"382\":3,\"439\":3,\"440\":2,\"441\":1}}],[\"circuitbreaker熔断器依赖\",{\"1\":{\"375\":1}}],[\"cipher\",{\"1\":{\"622\":15}}],[\"ci\",{\"1\":{\"129\":1,\"252\":2,\"516\":1}}],[\"city\",{\"1\":{\"57\":16}}],[\"c\",{\"1\":{\"91\":1,\"128\":10,\"137\":2,\"138\":2,\"139\":3,\"140\":3,\"156\":1,\"247\":1,\"248\":3,\"276\":1,\"333\":1,\"405\":1,\"437\":1,\"627\":2,\"630\":1}}],[\"case\",{\"1\":{\"613\":4}}],[\"cast\",{\"1\":{\"139\":2,\"140\":2,\"304\":1}}],[\"cache\",{\"1\":{\"135\":1,\"381\":1,\"622\":10}}],[\"caches\",{\"1\":{\"17\":1}}],[\"callsuper=call\",{\"1\":{\"120\":1}}],[\"callback\",{\"1\":{\"85\":1,\"87\":1}}],[\"cause==>\",{\"1\":{\"105\":2}}],[\"cause\",{\"1\":{\"105\":4,\"376\":2}}],[\"card\",{\"1\":{\"491\":1}}],[\"cardao\",{\"1\":{\"77\":19}}],[\"carbon\",{\"1\":{\"480\":3}}],[\"cartest\",{\"1\":{\"77\":1}}],[\"car\",{\"1\":{\"77\":24}}],[\"catch\",{\"1\":{\"84\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2,\"107\":1,\"110\":1,\"113\":1,\"185\":6,\"189\":1,\"283\":3,\"284\":1,\"291\":1,\"303\":6,\"304\":6,\"480\":1,\"520\":1,\"590\":1,\"612\":1,\"622\":4,\"660\":1,\"663\":1,\"664\":1,\"665\":1}}],[\"cat\",{\"1\":{\"57\":1}}],[\"cte\",{\"1\":{\"128\":12,\"137\":3,\"138\":3,\"139\":3,\"140\":3}}],[\"ctrl+鼠标左键\",{\"1\":{\"523\":1}}],[\"ctrl+enter\",{\"1\":{\"54\":1}}],[\"ctrl+i\",{\"1\":{\"54\":1}}],[\"ctool\",{\"1\":{\"11\":1}}],[\"clear\",{\"1\":{\"314\":1}}],[\"clazz\",{\"1\":{\"599\":12}}],[\"cla1\",{\"1\":{\"291\":1}}],[\"cla\",{\"1\":{\"291\":1,\"665\":2}}],[\"classichttprequest\",{\"1\":{\"613\":1,\"614\":4}}],[\"classic\",{\"1\":{\"613\":1,\"614\":1}}],[\"class>\",{\"1\":{\"563\":2}}],[\"class>org\",{\"1\":{\"563\":2}}],[\"classes\",{\"1\":{\"505\":1,\"628\":2}}],[\"class文件中保留\",{\"1\":{\"493\":1}}],[\"classnotfoundexception\",{\"1\":{\"291\":1,\"303\":1,\"304\":1}}],[\"class<t>\",{\"1\":{\"303\":3,\"304\":3}}],[\"class<person>\",{\"1\":{\"293\":1,\"294\":2,\"295\":1,\"296\":1,\"298\":1}}],[\"class<\",{\"1\":{\"291\":1,\"295\":2,\"304\":1,\"599\":3,\"662\":2,\"663\":1,\"665\":1}}],[\"class<student>\",{\"1\":{\"291\":3}}],[\"classtest\",{\"1\":{\"291\":1}}],[\"classloader是应用程序类加载器\",{\"1\":{\"289\":1}}],[\"classloader\",{\"1\":{\"289\":3,\"662\":2}}],[\"class名称\",{\"1\":{\"166\":1}}],[\"class=\",{\"1\":{\"166\":3,\"167\":2,\"208\":1,\"210\":1,\"219\":2,\"223\":7,\"224\":1,\"546\":1,\"553\":2,\"561\":5,\"562\":1,\"585\":2,\"590\":1}}],[\"class选择器\",{\"1\":{\"153\":1}}],[\"classpathresource\",{\"1\":{\"619\":5}}],[\"classpathxmlapplicationcontext使用示例\",{\"1\":{\"534\":1}}],[\"classpathxmlapplicationcontext\",{\"0\":{\"534\":1},\"1\":{\"533\":1,\"535\":1}}],[\"classpath\",{\"1\":{\"105\":2,\"106\":2,\"107\":2,\"108\":1,\"122\":3,\"407\":1,\"472\":3,\"523\":1,\"534\":1,\"561\":2,\"589\":2,\"590\":2}}],[\"class\",{\"0\":{\"291\":1},\"1\":{\"59\":1,\"60\":1,\"62\":1,\"63\":2,\"65\":1,\"74\":1,\"76\":5,\"77\":5,\"84\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2,\"105\":2,\"106\":2,\"107\":3,\"110\":1,\"113\":4,\"122\":1,\"266\":2,\"283\":2,\"284\":1,\"290\":1,\"291\":7,\"293\":3,\"294\":9,\"295\":6,\"296\":7,\"298\":2,\"303\":3,\"304\":20,\"316\":1,\"318\":1,\"326\":1,\"327\":1,\"362\":1,\"363\":1,\"368\":2,\"369\":2,\"372\":2,\"376\":6,\"378\":1,\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"389\":3,\"391\":2,\"392\":2,\"405\":2,\"410\":1,\"416\":2,\"437\":5,\"438\":2,\"441\":1,\"442\":1,\"444\":1,\"445\":2,\"466\":1,\"467\":1,\"471\":2,\"472\":1,\"475\":5,\"480\":3,\"481\":4,\"482\":1,\"487\":1,\"492\":3,\"493\":1,\"498\":1,\"504\":3,\"505\":4,\"520\":1,\"522\":2,\"523\":1,\"537\":1,\"544\":1,\"545\":1,\"552\":3,\"564\":1,\"589\":2,\"590\":3,\"599\":15,\"600\":1,\"605\":3,\"606\":3,\"612\":1,\"613\":1,\"614\":1,\"618\":1,\"619\":2,\"622\":1,\"627\":1,\"630\":1,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"640\":1,\"642\":1,\"646\":1,\"647\":1,\"654\":3,\"655\":2,\"656\":1,\"659\":1,\"660\":3,\"663\":1,\"664\":2,\"665\":1}}],[\"clouf\",{\"1\":{\"405\":1}}],[\"cloud提供了微服务治理的诸多组件\",{\"1\":{\"448\":1}}],[\"cloud整合了开源的netflix很多产品\",{\"1\":{\"448\":1}}],[\"cloud的⽬标是通过⼀系列组件\",{\"1\":{\"448\":1}}],[\"cloud是spring提供的微服务框架\",{\"1\":{\"448\":1}}],[\"cloud⽀持开箱即⽤的\",{\"1\":{\"439\":1}}],[\"cloud构件微服务系统中\",{\"1\":{\"390\":1}}],[\"cloudcircuitbreaker\",{\"1\":{\"372\":1}}],[\"cloud社区整合为spring\",{\"1\":{\"366\":1}}],[\"cloud<\",{\"1\":{\"113\":2,\"369\":2,\"372\":1,\"375\":1,\"382\":1,\"399\":2,\"406\":1,\"409\":1,\"410\":1,\"439\":1}}],[\"cloud\",{\"0\":{\"372\":1,\"396\":1,\"404\":1,\"413\":1,\"680\":1},\"1\":{\"113\":5,\"366\":1,\"368\":1,\"369\":5,\"372\":2,\"373\":2,\"375\":2,\"376\":4,\"381\":1,\"382\":2,\"384\":1,\"386\":1,\"389\":1,\"390\":1,\"392\":1,\"393\":1,\"396\":1,\"399\":3,\"404\":1,\"405\":7,\"406\":6,\"407\":3,\"408\":2,\"409\":1,\"410\":2,\"413\":9,\"415\":1,\"417\":2,\"418\":5,\"419\":1,\"420\":2,\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"426\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"435\":1,\"436\":1,\"437\":2,\"438\":1,\"439\":3,\"440\":1,\"444\":1,\"445\":4,\"448\":5}}],[\"cloneable\",{\"1\":{\"316\":2,\"318\":2}}],[\"cloak>\",{\"1\":{\"173\":1}}],[\"cloak引用在实例视图上\",{\"1\":{\"173\":1}}],[\"cloak加上display\",{\"1\":{\"173\":1}}],[\"cloak指令\",{\"1\":{\"173\":1}}],[\"cloak\",{\"0\":{\"173\":1},\"1\":{\"173\":1}}],[\"closesqlsession\",{\"1\":{\"520\":1}}],[\"closed\",{\"1\":{\"382\":1,\"456\":1,\"625\":1}}],[\"closeall\",{\"1\":{\"303\":2,\"304\":1}}],[\"close\",{\"1\":{\"59\":1,\"60\":1,\"62\":1,\"63\":2,\"86\":2,\"89\":2,\"94\":2,\"97\":2,\"100\":2,\"146\":2,\"281\":1,\"283\":1,\"303\":3,\"304\":3,\"515\":1,\"520\":1,\"618\":1,\"619\":1,\"622\":2}}],[\"cli中使用router\",{\"1\":{\"219\":1}}],[\"cli去做\",{\"1\":{\"215\":1}}],[\"cli的作用就是让我们把精力放在业务编码上\",{\"1\":{\"215\":1}}],[\"cli本质上是一个npm包\",{\"1\":{\"212\":1}}],[\"click\",{\"1\":{\"159\":1}}],[\"click=\",{\"1\":{\"159\":2,\"222\":1,\"224\":1}}],[\"cli\",{\"0\":{\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1},\"1\":{\"41\":1,\"211\":2,\"212\":2,\"213\":2,\"332\":1}}],[\"clients\",{\"1\":{\"630\":1}}],[\"client5\",{\"1\":{\"613\":3,\"614\":1,\"622\":1}}],[\"client5<\",{\"1\":{\"609\":1}}],[\"client中添加依赖\",{\"1\":{\"400\":1}}],[\"client为eureka客户端\",{\"1\":{\"366\":1}}],[\"client<\",{\"1\":{\"58\":1,\"84\":1,\"113\":2}}],[\"client\",{\"0\":{\"399\":1},\"1\":{\"4\":1,\"59\":5,\"60\":5,\"62\":7,\"63\":9,\"65\":6,\"70\":1,\"71\":1,\"84\":2,\"86\":2,\"87\":2,\"89\":2,\"90\":4,\"94\":3,\"95\":2,\"97\":3,\"98\":2,\"100\":3,\"101\":2,\"107\":1,\"113\":1,\"242\":1,\"284\":2,\"366\":1,\"367\":4,\"368\":1,\"369\":1,\"374\":2,\"396\":2,\"405\":1,\"417\":1,\"440\":1,\"445\":2}}],[\"cluster\",{\"0\":{\"37\":1},\"1\":{\"42\":1,\"59\":2,\"60\":1,\"62\":1,\"63\":1,\"65\":1,\"74\":2}}],[\"centos7安装mysql8\",{\"0\":{\"241\":1}}],[\"centos7安装emqx\",{\"0\":{\"236\":1}}],[\"centos7\",{\"0\":{\"232\":1}}],[\"centos\",{\"1\":{\"44\":2,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"52\":2,\"53\":3,\"233\":1,\"243\":1}}],[\"centerinparent\",{\"1\":{\"23\":1}}],[\"centervertical\",{\"1\":{\"23\":1}}],[\"centerhorizontal\",{\"1\":{\"23\":1}}],[\"center\",{\"1\":{\"21\":7,\"26\":3}}],[\"central\",{\"1\":{\"17\":2,\"398\":1}}],[\"crypto\",{\"1\":{\"622\":1}}],[\"creator\",{\"1\":{\"466\":2,\"467\":2}}],[\"createword\",{\"1\":{\"618\":1,\"619\":1}}],[\"createdefault\",{\"1\":{\"614\":1}}],[\"createcontextual\",{\"1\":{\"492\":1}}],[\"createchannel\",{\"1\":{\"86\":2,\"87\":2,\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2}}],[\"createrestapi\",{\"1\":{\"471\":1}}],[\"createtime\",{\"1\":{\"466\":1,\"467\":1}}],[\"create\",{\"1\":{\"83\":1,\"129\":1,\"135\":1,\"213\":2,\"357\":2,\"376\":1,\"401\":1,\"466\":1,\"618\":1,\"619\":5,\"665\":2}}],[\"createindex\",{\"1\":{\"76\":1,\"77\":1}}],[\"createindextest\",{\"1\":{\"59\":1,\"60\":1,\"62\":1,\"63\":1}}],[\"credentials\",{\"1\":{\"444\":1}}],[\"crossorigin\",{\"1\":{\"444\":1}}],[\"cron表达式解释\",{\"0\":{\"499\":1}}],[\"crontab\",{\"1\":{\"244\":2}}],[\"cron\",{\"1\":{\"11\":1,\"497\":3,\"498\":1,\"499\":1,\"500\":1}}],[\"crxsoso\",{\"1\":{\"13\":1}}],[\"crx搜搜\",{\"1\":{\"13\":1}}],[\"ccc\",{\"1\":{\"205\":1}}],[\"cc\",{\"1\":{\"11\":1}}],[\"code枚举类\",{\"0\":{\"486\":1}}],[\"code\",{\"1\":{\"475\":1,\"486\":5,\"487\":13,\"511\":1}}],[\"coding\",{\"1\":{\"8\":1}}],[\"cookie=chocolate\",{\"1\":{\"426\":1}}],[\"cookie=sessionid\",{\"1\":{\"422\":1}}],[\"cookie\",{\"1\":{\"419\":2,\"422\":5}}],[\"copyonwritearrayset\",{\"1\":{\"317\":1}}],[\"copyonwritearraylist\",{\"1\":{\"315\":1}}],[\"corn在线表达式网站\",{\"1\":{\"500\":1}}],[\"corn\",{\"0\":{\"500\":1}}],[\"cors\",{\"1\":{\"443\":1,\"444\":1}}],[\"correlationdata\",{\"1\":{\"105\":4,\"106\":1}}],[\"core5\",{\"1\":{\"612\":4,\"613\":3,\"614\":1}}],[\"core和\",{\"1\":{\"530\":1}}],[\"corethreadpoolsize\",{\"1\":{\"385\":2}}],[\"coreybutler\",{\"1\":{\"259\":1}}],[\"core\",{\"1\":{\"76\":3,\"77\":4,\"105\":1,\"106\":2,\"107\":1,\"327\":2,\"362\":1,\"363\":2,\"437\":2,\"467\":1,\"481\":1,\"492\":1,\"504\":2,\"530\":1,\"589\":1,\"590\":2,\"619\":1}}],[\"core<\",{\"1\":{\"63\":4,\"517\":1,\"558\":1}}],[\"col\",{\"1\":{\"219\":4,\"304\":3}}],[\"column\",{\"1\":{\"134\":1,\"524\":1}}],[\"columns\",{\"1\":{\"30\":1,\"134\":1}}],[\"collect\",{\"0\":{\"669\":1},\"1\":{\"612\":1,\"613\":1}}],[\"collectors\",{\"1\":{\"612\":2,\"613\":2}}],[\"collector\",{\"1\":{\"400\":1,\"401\":1}}],[\"collection=\",{\"1\":{\"524\":1}}],[\"collection接口\",{\"0\":{\"314\":1}}],[\"collection\",{\"1\":{\"312\":1,\"314\":2,\"317\":1,\"524\":1}}],[\"collections\",{\"1\":{\"56\":1}}],[\"collation\",{\"1\":{\"252\":2}}],[\"collate\",{\"1\":{\"129\":1}}],[\"color\",{\"1\":{\"77\":10,\"168\":1,\"169\":1}}],[\"count|a\",{\"1\":{\"177\":1}}],[\"count\",{\"1\":{\"42\":1,\"154\":3,\"156\":4,\"193\":2,\"197\":2,\"343\":2,\"346\":3,\"349\":2,\"351\":3,\"353\":4,\"356\":11,\"357\":3,\"363\":3,\"382\":1}}],[\"conunt\",{\"1\":{\"343\":1}}],[\"conf\",{\"1\":{\"248\":2,\"332\":3}}],[\"configlocation\",{\"1\":{\"535\":1,\"561\":1}}],[\"config在项⽬启动时⾃动加载配置内容这⼀机制\",{\"1\":{\"408\":1}}],[\"config⽀持多种配置存储⽅式\",{\"1\":{\"407\":1}}],[\"config<\",{\"1\":{\"406\":1}}],[\"configapplication\",{\"1\":{\"405\":2}}],[\"config就是⼀个配置中⼼组件\",{\"1\":{\"404\":1}}],[\"configserver\",{\"1\":{\"406\":2}}],[\"configservice\",{\"0\":{\"406\":1}}],[\"configs\",{\"1\":{\"382\":1,\"384\":1,\"385\":1,\"386\":1,\"440\":1}}],[\"configure\",{\"1\":{\"247\":1,\"248\":2,\"618\":2,\"619\":3}}],[\"configuration>\",{\"1\":{\"518\":1,\"558\":1}}],[\"configurations\",{\"1\":{\"444\":1}}],[\"configuration\",{\"1\":{\"113\":2,\"122\":2,\"362\":2,\"378\":2,\"381\":1,\"437\":2,\"471\":2,\"472\":3,\"480\":1,\"482\":3,\"504\":2,\"518\":1,\"523\":1}}],[\"config文件\",{\"1\":{\"120\":1}}],[\"config\",{\"0\":{\"404\":1},\"1\":{\"105\":1,\"106\":1,\"107\":2,\"108\":1,\"109\":1,\"110\":1,\"120\":1,\"213\":1,\"214\":4,\"234\":2,\"238\":1,\"263\":3,\"332\":3,\"367\":4,\"374\":2,\"405\":9,\"406\":8,\"407\":3,\"438\":1,\"472\":3,\"482\":3,\"504\":1,\"518\":2,\"589\":1,\"590\":1,\"613\":4,\"618\":4,\"619\":3}}],[\"confirm2\",{\"1\":{\"106\":1}}],[\"confirms=\",{\"1\":{\"105\":3,\"106\":2}}],[\"confirmcallback回调\",{\"1\":{\"105\":1}}],[\"confirmcallback\",{\"1\":{\"104\":1,\"105\":1}}],[\"confirm\",{\"0\":{\"105\":1},\"1\":{\"104\":1,\"105\":9,\"106\":6,\"107\":1,\"108\":1,\"187\":1,\"222\":1}}],[\"connecttimeout\",{\"1\":{\"374\":2}}],[\"connecttimeout防⽌由于服务器处理时间⻓⽽阻塞调⽤者\",{\"1\":{\"374\":1}}],[\"connector\",{\"1\":{\"301\":1,\"517\":1,\"551\":1,\"558\":1}}],[\"connect=\",{\"1\":{\"252\":2}}],[\"connect\",{\"1\":{\"113\":1,\"281\":2,\"611\":1}}],[\"connectiontime\",{\"1\":{\"281\":1}}],[\"connectionutils\",{\"1\":{\"84\":1,\"86\":4,\"87\":3,\"89\":3,\"90\":4,\"94\":3,\"95\":4,\"97\":3,\"98\":4,\"100\":3,\"101\":4}}],[\"connectionfactory\",{\"1\":{\"84\":10,\"105\":4,\"106\":4,\"107\":3,\"108\":3,\"363\":4,\"589\":4,\"590\":3}}],[\"connection\",{\"1\":{\"80\":6,\"84\":6,\"86\":9,\"87\":7,\"89\":5,\"90\":6,\"94\":5,\"95\":6,\"97\":5,\"98\":6,\"100\":5,\"101\":6,\"105\":5,\"106\":4,\"107\":2,\"108\":2,\"252\":1,\"303\":8,\"304\":8,\"327\":1,\"362\":1,\"363\":1,\"515\":1,\"518\":2,\"589\":3,\"590\":2}}],[\"contact\",{\"1\":{\"471\":6}}],[\"contains​\",{\"1\":{\"315\":1}}],[\"contains\",{\"1\":{\"314\":1}}],[\"container>\",{\"1\":{\"107\":1,\"108\":1,\"590\":1}}],[\"container\",{\"1\":{\"107\":1,\"108\":1,\"590\":1}}],[\"cont\",{\"1\":{\"343\":1}}],[\"controller\",{\"0\":{\"564\":1,\"576\":1},\"1\":{\"539\":2,\"562\":1,\"564\":2,\"570\":1,\"571\":1,\"578\":1}}],[\"control\",{\"1\":{\"223\":2}}],[\"contextloaderlistener<\",{\"1\":{\"563\":1}}],[\"context<\",{\"1\":{\"517\":1,\"543\":1,\"589\":1,\"590\":1}}],[\"contextualserializer\",{\"1\":{\"492\":2}}],[\"contextmenu\",{\"1\":{\"159\":1}}],[\"contextconfiguration\",{\"1\":{\"105\":2,\"106\":2,\"107\":2,\"589\":2,\"590\":2}}],[\"context=\",{\"1\":{\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"546\":1,\"553\":1,\"561\":1,\"562\":1,\"589\":1,\"590\":1}}],[\"context\",{\"1\":{\"76\":2,\"77\":2,\"105\":6,\"106\":6,\"107\":6,\"108\":4,\"113\":2,\"362\":2,\"378\":2,\"437\":2,\"445\":1,\"471\":2,\"472\":1,\"480\":1,\"481\":2,\"482\":1,\"504\":4,\"505\":2,\"530\":5,\"535\":1,\"546\":4,\"553\":4,\"561\":4,\"562\":4,\"563\":2,\"589\":6,\"590\":6,\"599\":8,\"600\":5}}],[\"contenttype\",{\"1\":{\"613\":1}}],[\"content\",{\"1\":{\"21\":1,\"43\":1,\"44\":1,\"46\":1,\"53\":2,\"60\":1,\"62\":1,\"63\":2,\"65\":1,\"70\":1,\"71\":1,\"74\":1,\"75\":8,\"113\":1,\"193\":2}}],[\"convertandsend\",{\"1\":{\"105\":1,\"106\":1,\"109\":1,\"504\":3,\"589\":9}}],[\"concat\",{\"1\":{\"87\":4,\"90\":8,\"95\":8,\"98\":8,\"101\":8,\"128\":2,\"283\":5,\"284\":1,\"304\":13}}],[\"concurrentskiplistmap\",{\"1\":{\"320\":1}}],[\"concurrentskiplistset\",{\"1\":{\"317\":1}}],[\"concurrenthashmap之间的区别\",{\"1\":{\"320\":1}}],[\"concurrenthashmap\",{\"1\":{\"317\":1,\"320\":2}}],[\"concurrent\",{\"1\":{\"84\":1,\"86\":1,\"89\":1,\"94\":1,\"97\":1,\"100\":1,\"283\":2,\"363\":1}}],[\"construction\",{\"1\":{\"626\":1}}],[\"constructor\",{\"1\":{\"293\":2,\"294\":5}}],[\"constructor<person>\",{\"1\":{\"293\":1,\"294\":2}}],[\"constrainlayout约束布局\",{\"1\":{\"20\":1}}],[\"const\",{\"1\":{\"219\":1,\"225\":1,\"226\":1}}],[\"console\",{\"1\":{\"113\":1,\"154\":3,\"155\":2,\"179\":1,\"189\":1,\"190\":1,\"204\":1,\"254\":1}}],[\"consumerapplication\",{\"1\":{\"505\":2}}],[\"consumer<\",{\"1\":{\"505\":1}}],[\"consumername\",{\"1\":{\"357\":1}}],[\"consumer2\",{\"1\":{\"90\":2,\"95\":2,\"98\":2,\"101\":2}}],[\"consumer1\",{\"1\":{\"90\":2,\"95\":2,\"98\":2,\"101\":2}}],[\"consumertag\",{\"1\":{\"87\":2,\"90\":2,\"95\":2,\"98\":2,\"101\":2}}],[\"consumertest\",{\"1\":{\"87\":2,\"90\":4,\"95\":4,\"98\":4,\"101\":4,\"505\":1,\"590\":1}}],[\"consumer\",{\"0\":{\"107\":1},\"1\":{\"80\":2,\"85\":1,\"86\":2,\"87\":7,\"88\":1,\"90\":6,\"95\":6,\"98\":6,\"101\":6,\"357\":2}}],[\"combopooleddatasource\",{\"1\":{\"553\":1}}],[\"com的时候直接转发到\",{\"1\":{\"419\":1}}],[\"committed\",{\"1\":{\"547\":2}}],[\"commands\",{\"1\":{\"331\":1}}],[\"community\",{\"1\":{\"242\":4}}],[\"commonj\",{\"1\":{\"530\":1}}],[\"commons的⼀个⼦项⽬\",{\"1\":{\"390\":1}}],[\"commons\",{\"1\":{\"113\":2,\"381\":1,\"437\":1}}],[\"common\",{\"1\":{\"62\":4,\"63\":5,\"65\":2,\"242\":1,\"326\":2,\"327\":2,\"492\":3,\"493\":2,\"599\":4,\"600\":1,\"619\":1}}],[\"compile\",{\"1\":{\"618\":1}}],[\"compiler\",{\"1\":{\"505\":4,\"558\":4}}],[\"completablefuture<payment>\",{\"1\":{\"385\":1}}],[\"completablefuture\",{\"1\":{\"381\":1,\"385\":1}}],[\"compression\",{\"1\":{\"377\":1}}],[\"computed里的函数直接用\",{\"1\":{\"183\":1}}],[\"computed\",{\"1\":{\"183\":2,\"192\":1}}],[\"components\",{\"1\":{\"194\":1,\"195\":1,\"214\":1}}],[\"component\",{\"1\":{\"107\":3,\"108\":1,\"110\":1,\"113\":2,\"193\":1,\"195\":3,\"197\":1,\"203\":2,\"204\":1,\"206\":1,\"209\":2,\"219\":3,\"223\":1,\"225\":1,\"363\":2,\"376\":3,\"438\":1,\"441\":1,\"467\":2,\"480\":2,\"481\":2,\"498\":2,\"505\":2,\"539\":2,\"545\":2,\"546\":1,\"561\":1,\"562\":1}}],[\"com\",{\"1\":{\"1\":1,\"2\":1,\"3\":3,\"4\":5,\"5\":1,\"7\":12,\"11\":3,\"12\":3,\"13\":2,\"17\":11,\"21\":1,\"41\":1,\"63\":2,\"75\":1,\"76\":2,\"77\":2,\"80\":2,\"84\":2,\"86\":2,\"87\":2,\"89\":2,\"90\":4,\"94\":3,\"95\":2,\"97\":3,\"98\":2,\"100\":3,\"101\":2,\"107\":1,\"113\":5,\"116\":4,\"123\":3,\"146\":1,\"151\":2,\"195\":1,\"232\":1,\"236\":1,\"246\":1,\"251\":1,\"259\":1,\"260\":2,\"262\":1,\"263\":2,\"291\":1,\"303\":1,\"304\":1,\"378\":1,\"392\":1,\"398\":1,\"405\":1,\"419\":1,\"420\":2,\"421\":1,\"422\":1,\"423\":4,\"424\":1,\"426\":1,\"443\":1,\"466\":3,\"467\":1,\"471\":3,\"480\":1,\"492\":8,\"493\":2,\"497\":1,\"500\":1,\"505\":3,\"541\":3,\"545\":2,\"546\":3,\"552\":1,\"553\":2,\"561\":2,\"585\":2,\"599\":5,\"600\":3,\"603\":2,\"617\":1,\"618\":2,\"619\":6,\"660\":5,\"664\":1,\"665\":1}}],[\"cxasm\",{\"1\":{\"7\":1}}],[\"checknexthandler\",{\"1\":{\"637\":1,\"638\":1,\"639\":1,\"640\":1}}],[\"check\",{\"1\":{\"637\":2,\"638\":1,\"639\":1,\"640\":1,\"641\":2}}],[\"checked\",{\"1\":{\"170\":1}}],[\"ch\",{\"1\":{\"419\":2,\"426\":1}}],[\"chocolate\",{\"1\":{\"419\":2}}],[\"choose\",{\"1\":{\"393\":1}}],[\"children\",{\"1\":{\"209\":1}}],[\"child\",{\"1\":{\"195\":7,\"197\":2}}],[\"change\",{\"1\":{\"627\":1}}],[\"channelawaremessagelistener\",{\"1\":{\"107\":2,\"108\":1,\"110\":1}}],[\"channel\",{\"1\":{\"80\":7,\"85\":2,\"86\":10,\"87\":8,\"89\":6,\"90\":10,\"94\":10,\"95\":12,\"97\":11,\"98\":12,\"100\":10,\"101\":15,\"107\":5,\"110\":4}}],[\"chain\",{\"1\":{\"326\":1,\"437\":8,\"438\":2,\"441\":2,\"619\":1,\"636\":1}}],[\"char\",{\"1\":{\"493\":1}}],[\"charat\",{\"1\":{\"176\":2}}],[\"characterencoding=utf\",{\"1\":{\"519\":1,\"559\":1}}],[\"character\",{\"1\":{\"129\":1,\"252\":1}}],[\"charset=\",{\"1\":{\"146\":1}}],[\"charset\",{\"1\":{\"87\":1,\"90\":2,\"95\":2,\"98\":2,\"101\":2,\"363\":1,\"590\":1,\"612\":1,\"622\":1}}],[\"chart\",{\"1\":{\"4\":1}}],[\"chuyu\",{\"1\":{\"7\":1}}],[\"cn的⽹站\",{\"1\":{\"443\":1}}],[\"cn\",{\"1\":{\"2\":1,\"4\":4,\"5\":1,\"7\":1,\"11\":4,\"15\":2,\"86\":1,\"87\":1,\"89\":1,\"90\":2,\"94\":1,\"95\":2,\"97\":1,\"98\":2,\"100\":1,\"101\":2,\"107\":2,\"108\":1,\"150\":1,\"151\":1,\"172\":1,\"175\":1,\"326\":2,\"327\":2,\"398\":1,\"443\":1,\"472\":3,\"475\":4,\"492\":3,\"493\":2,\"504\":1,\"521\":3,\"522\":4,\"561\":3,\"562\":1,\"589\":1,\"590\":1,\"599\":4,\"600\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
