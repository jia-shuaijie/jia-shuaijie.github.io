const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":165,\"nextId\":165,\"documentIds\":{\"0\":\"1\",\"1\":\"1#软件\",\"2\":\"1#idea插件收集\",\"3\":\"1#vscode-插件收集\",\"4\":\"2\",\"5\":\"2#资源分享\",\"6\":\"2#文档地址\",\"7\":\"2#静态资源库\",\"8\":\"2#lunix资源下载站\",\"9\":\"2#官网地址\",\"10\":\"2#镜像站\",\"11\":\"2#maven-仓库\",\"12\":\"2#图床\",\"13\":\"2#在线检测软件病毒\",\"14\":\"2#杂项\",\"15\":\"3\",\"16\":\"3#创建相关注解\",\"17\":\"3#fieldrequired\",\"18\":\"3#headverification\",\"19\":\"3#notfieldrequired\",\"20\":\"3#notheadrequired\",\"21\":\"3#工具类\",\"22\":\"3#示例listener\",\"23\":\"4\",\"24\":\"4#简单使用\",\"25\":\"4#json字符串与javaobject相互转换\",\"26\":\"4#jsonarray与java的list相互转换\",\"27\":\"5\",\"28\":\"5#引入依赖\",\"29\":\"5#httpclient-发起请求\",\"30\":\"6\",\"31\":\"7\",\"32\":\"7#maven镜像源配置\",\"33\":\"8\",\"34\":\"8#mybaits-对象分析\",\"35\":\"8#mybatis-单独使用\",\"36\":\"8#导入依赖\",\"37\":\"8#创建配置文件\",\"38\":\"8#数据库配置\",\"39\":\"8#sqlsession获取mapper\",\"40\":\"8#创建对应的mapper和mapper-xml\",\"41\":\"8#调用mapper\",\"42\":\"8#配置文件标签\",\"43\":\"8#mapperxml标签\",\"44\":\"8#转义字符\",\"45\":\"9\",\"46\":\"9#提取公共字段\",\"47\":\"9#自动注入类\",\"48\":\"10\",\"49\":\"10#工具类\",\"50\":\"10#案例\",\"51\":\"11\",\"52\":\"11#使用redis先试思路可行性\",\"53\":\"11#使用java来实现排行榜\",\"54\":\"11#接收数据实体类\",\"55\":\"11#排行榜工具类\",\"56\":\"12\",\"57\":\"12#redisconfigbean配置\",\"58\":\"12#redisutil工具类\",\"59\":\"13\",\"60\":\"14\",\"61\":\"14#控制反转-ioc\",\"62\":\"14#配置文件中标签属性\",\"63\":\"14#di注入\",\"64\":\"14#注解注入\",\"65\":\"14#bean-控制注解\",\"66\":\"14#aop\",\"67\":\"14#aspectj-对-aop-的实现\",\"68\":\"14#aop-实现示例\",\"69\":\"14#spring-mvc\",\"70\":\"14#mvc-注解\",\"71\":\"14#拦截器\",\"72\":\"14#spring-springmvc-联合使用\",\"73\":\"14#spring-事务\",\"74\":\"14#注解形式控制事务\",\"75\":\"15\",\"76\":\"15#spring-整合-mybatis-ssm\",\"77\":\"15#依赖导入\",\"78\":\"15#数据库连接配置文件\",\"79\":\"15#配置spring\",\"80\":\"15#创建spring配置文件application-xml\",\"81\":\"15#创建mvc的配置文件\",\"82\":\"15#创建-web-xml\",\"83\":\"15#创建一个-controller-测试下是否成功\",\"84\":\"16\",\"85\":\"16#swaggerconfig\",\"86\":\"16#webconfig配置swagger\",\"87\":\"17\",\"88\":\"18\",\"89\":\"18#创建注解\",\"90\":\"18#创建拦截器\",\"91\":\"18#接口注入数据\",\"92\":\"18#将拦截器进行注册\",\"93\":\"19\",\"94\":\"19#code枚举类\",\"95\":\"19#统一返回数据类\",\"96\":\"20\",\"97\":\"20#创建脱敏枚举\",\"98\":\"20#创建脱敏注解处理类\",\"99\":\"20#创建脱敏注解\",\"100\":\"21\",\"101\":\"21#定时任务\",\"102\":\"21#案例\",\"103\":\"21#cron表达式解释\",\"104\":\"21#corn-经典表达式\",\"105\":\"22\",\"106\":\"22#介绍\",\"107\":\"22#案例\",\"108\":\"22#创建工厂接口\",\"109\":\"22#创建相应形状类\",\"110\":\"22#使用工厂创建对应形状\",\"111\":\"22#测试是否可行\",\"112\":\"23\",\"113\":\"23#实现代码\",\"114\":\"23#创建产品实体类\",\"115\":\"23#创建责任链抽象类\",\"116\":\"23#创建长度处理器\",\"117\":\"23#创建宽度处理器\",\"118\":\"23#创建高度处理器\",\"119\":\"23#调用测试\",\"120\":\"23#工厂创建责任链\",\"121\":\"24\",\"122\":\"24#lombok错误\",\"123\":\"24#继承时出现警告解决\",\"124\":\"24#swagger-knife4j\",\"125\":\"24#请求接口文档地址失败解决\",\"126\":\"24#knife4j使用html导出接口出现打不开问题解决\",\"127\":\"25\",\"128\":\"25#find-in-set\",\"129\":\"25#递归查询\",\"130\":\"25#ddl\",\"131\":\"26\",\"132\":\"26#不常用sql方法\",\"133\":\"26#查询所有表中是否存在某个字段\",\"134\":\"26#自增序列\",\"135\":\"26#递归查询\",\"136\":\"26#父级递归查询子级\",\"137\":\"26#子级递归查询父级\",\"138\":\"26#根据父级获取子父级的组织拼接\",\"139\":\"26#根据子集获取从父级到当前子集的组织拼接\",\"140\":\"26#json操作\",\"141\":\"26#json和-jsonb操作符\",\"142\":\"26#额外jsonb操作符\",\"143\":\"27\",\"144\":\"27#错误解决\",\"145\":\"27#如果错误中有报缺少openssl1-1-1可以查看官网-中给的解决方法\",\"146\":\"27#如果centos8使用tar包进行安装可能会遇到下面的错误-error-while-loading-shared-libraries-libtinfo-so-5-cannot-open-shared-object-file-no-such-file-or-directory-解决此错误有两个方法我个人是用第二个方法解决的\",\"147\":\"28\",\"148\":\"28#下载所需要的安装包\",\"149\":\"28#安装流程\",\"150\":\"28#定时运行备份脚本\",\"151\":\"29\",\"152\":\"29#下载安装包\",\"153\":\"29#配置mysql\",\"154\":\"29#启动mysql服务\",\"155\":\"29#初始化mysql实例\",\"156\":\"29#安装mysql服务\",\"157\":\"29#修改root密码\",\"158\":\"30\",\"159\":\"30#安装nvm\",\"160\":\"30#配置下载源\",\"161\":\"30#配置全局npm\",\"162\":\"30#nvm使用\",\"163\":\"30#nvm常用命令\",\"164\":\"31\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,67],\"2\":[1,13],\"3\":[2,9],\"4\":[1],\"5\":[1,25],\"6\":[1,45],\"7\":[1,6],\"8\":[1,19],\"9\":[1,37],\"10\":[1,11],\"11\":[2,15],\"12\":[1,32],\"13\":[1,15],\"14\":[1,43],\"15\":[2],\"16\":[1],\"17\":[1,24],\"18\":[1,19],\"19\":[1,25],\"20\":[1,22],\"21\":[1,147],\"22\":[1,67],\"23\":[1,24],\"24\":[1],\"25\":[1,37],\"26\":[1,43],\"27\":[1],\"28\":[1,19],\"29\":[2,53],\"30\":[1,6],\"31\":[1],\"32\":[1,30],\"33\":[1,65],\"34\":[2,66],\"35\":[2,4],\"36\":[1,52],\"37\":[1,80],\"38\":[1,21],\"39\":[1,78],\"40\":[2,64],\"41\":[1,63],\"42\":[1,49],\"43\":[1,111],\"44\":[1,16],\"45\":[1],\"46\":[1,70],\"47\":[1,55],\"48\":[2,41],\"49\":[1,50],\"50\":[1,159],\"51\":[1],\"52\":[1,44],\"53\":[1,1],\"54\":[1,47],\"55\":[1,167],\"56\":[1],\"57\":[1,42],\"58\":[1,303],\"59\":[1,168],\"60\":[1,104],\"61\":[3,67],\"62\":[1,51],\"63\":[1,66],\"64\":[1,43],\"65\":[2,21],\"66\":[1,60],\"67\":[4,63],\"68\":[2,239],\"69\":[2,95],\"70\":[2,64],\"71\":[1,70],\"72\":[3,343],\"73\":[2,97],\"74\":[1,147],\"75\":[1],\"76\":[5],\"77\":[1,153],\"78\":[1,21],\"79\":[1,9],\"80\":[2,110],\"81\":[1,66],\"82\":[3,74],\"83\":[3,35],\"84\":[1,25],\"85\":[1,73],\"86\":[1,72],\"87\":[1,67],\"88\":[2],\"89\":[1,15],\"90\":[1,92],\"91\":[1,77],\"92\":[1,61],\"93\":[1],\"94\":[1,17],\"95\":[1,58],\"96\":[1],\"97\":[1,30],\"98\":[1,90],\"99\":[1,56],\"100\":[1],\"101\":[1,14],\"102\":[1,24],\"103\":[1,76],\"104\":[2,46],\"105\":[1],\"106\":[1,4],\"107\":[1,2],\"108\":[1,25],\"109\":[1,28],\"110\":[1,43],\"111\":[1,19],\"112\":[1,13],\"113\":[1],\"114\":[1,30],\"115\":[1,37],\"116\":[1,31],\"117\":[1,29],\"118\":[1,26],\"119\":[1,31],\"120\":[1,43],\"121\":[1],\"122\":[1],\"123\":[1,11],\"124\":[2],\"125\":[1,53],\"126\":[1,33],\"127\":[1],\"128\":[3,24],\"129\":[1,42],\"130\":[1,16],\"131\":[1],\"132\":[1],\"133\":[1,14],\"134\":[1,32],\"135\":[1],\"136\":[1,21],\"137\":[1,21],\"138\":[1,36],\"139\":[1,31],\"140\":[1,2],\"141\":[2],\"142\":[1],\"143\":[1,27],\"144\":[1],\"145\":[1,46],\"146\":[2,15],\"147\":[1],\"148\":[1,16],\"149\":[1,87],\"150\":[1,98],\"151\":[1],\"152\":[1,7],\"153\":[1,45],\"154\":[1],\"155\":[1,5],\"156\":[1,12],\"157\":[1,22],\"158\":[1],\"159\":[1,13],\"160\":[1,12],\"161\":[1,37],\"162\":[1,14],\"163\":[1,46],\"164\":[1,3]},\"averageFieldLength\":[1.2181818181818185,50.11084469886143],\"storedFields\":{\"0\":{\"h\":\"软件收集\"},\"1\":{\"h\":\"软件\",\"t\":[\"Geek [win卸载软件]: https://geekuninstaller.com/download\",\"everything [win文件搜索软件]: https://www.voidtools.com/zh-cn/downloads/\",\"7-zip [压缩软件-多平台]: https://7-zip.org/\",\"Honeyview·蜂蜜浏览器-图片查看器[win]: https://www.bandisoft.com/honeyview/\",\"Snipaste [win截屏软件]\",\"官网: https://zh.snipaste.com/download.html\",\"蓝奏云: https://wwwc.lanzouo.com/iG1Wp04xfhni\",\"dism++ [win系统优化软件]\",\"github: https://github.com/Chuyu-Team/Dism-Multi-language/releases\",\"蓝奏云: https://wwwc.lanzouo.com/i2LYu1l5c8oh>\",\"BC uninstaller [win卸载软件]: https://www.bcuninstaller.com/\",\"VLC [视频播放器-多平台使用]\",\"官网: https://www.videolan.org/vlc/\",\"蓝奏云: https://wwwc.lanzouo.com/iBhuy1l5j01i\",\"PDFgear [PDF- 多平台]: https://www.pdfgear.com/zh/\",\"lky_OfficeTools [winOffice部署软件]\",\"github: https://github.com/OdysseusYuan/LKY_OfficeTools/releases\",\"MyComputerManager [win快捷方式移除软件]\",\"github: https://github.com/1357310795/MyComputerManager/releases\",\"notepad-- 多平台文本编辑器\",\"gitee: https://gitee.com/cxasm/notepad--/releases\"]},\"2\":{\"h\":\"idea插件收集\",\"t\":[\"mybatisX: mapper-xml相互跳转\",\"swaggerTools: 快速生成swagger注释\",\"TONGYI Lingma is an AI coding assistant: 通灵义码\"]},\"3\":{\"h\":\"vscode 插件收集\",\"t\":[\"Draw.io Integration 流程图绘图\",\"使用方式: 创建后缀为dio/drawIo/drawIo.png 都可以\"]},\"4\":{\"h\":\"网址收集\"},\"5\":{\"h\":\"资源分享\",\"t\":[\"浏览器插件站[crx搜搜]: https://www.crxsoso.com/\",\"记忆力博客网盘: http://qq351605872.ysepan.com/\",\"云盘资源搜索站:\",\"云盘资源发布页: http://yunpanziyuan.top\",\"阿里云盘资源分享论坛: https://yunpan1.cc/\",\"我的小站-阿里云盘资源共享站: https://pan666.net/\",\"云盘分享社: https://www.yunpanfenxiang.cn/\"]},\"6\":{\"h\":\"文档地址\",\"t\":[\"knife4j 文档: https://doc.xiaominfo.com/docs/quick-start\",\"easyExcel文档: https://easyexcel.opensource.alibaba.com/docs/current/\",\"HttpClient文档: https://hc.apache.org/httpcomponents-client-4.5.x/quickstart.html\",\"dubbo文档: https://cn.dubbo.apache.org/zh-cn/overview/home/\",\"w3c中的fastjson文档: https://www.w3cschool.cn/fastjson/\",\"github中的fastjson2文档: https://github.com/alibaba/fastjson2\",\"netty文档: https://dongzl.github.io/netty-handbook/#/\",\"github-netty: https://github.com/dongzl/netty-handbook/tree/master/docs\"]},\"7\":{\"h\":\"静态资源库\",\"t\":[\"字节跳动静态资源公共库: https://cdn.bytedance.com/\"]},\"8\":{\"h\":\"Lunix资源下载站\",\"t\":[\"deb/rpm/...资源下载: https://pkgs.org/\",\"ubuntu资源下载站: http://archive.ubuntu.com/ubuntu/pool/\",\"上海交通大学Linux用户资源: https://mirrors.sjtug.sjtu.edu.cn/\"]},\"9\":{\"h\":\"官网地址\",\"t\":[\"Mysql官网社区下载地址: https://dev.mysql.com/downloads/mysql\",\"Emqx官网下载地址: https://www.emqx.com/zh/try?product=broker\",\"Markdown官网地址: https://markdown.com.cn/basic-syntax/links.html\",\"JD_GUI jdk反编译软件: http://java-decompiler.github.io/\",\"apachecharts(vue折线图等): https://echarts.apache.org/examples/zh/index.html#chart-type-line\"]},\"10\":{\"h\":\"镜像站\",\"t\":[\"清华大学镜像站: https://mirrors.tuna.tsinghua.edu.cn/\",\"华为云镜像站: https://mirrors.huaweicloud.com/home\"]},\"11\":{\"h\":\"maven 仓库\",\"t\":[\"阿里云Maven仓库: https://developer.aliyun.com/mvn/search\",\"maven中央仓库: https://mvnrepository.com/\",\"华为仓库: https://mirrors.huaweicloud.com/repository/maven/\"]},\"12\":{\"h\":\"图床\",\"t\":[\"SM.MS 图床: https://sm.ms/home/picture\",\"ImgURL图床: https://www.imgurl.org/\",\"聚合图床: https://www.superbed.cn/\",\"小贱贱图床: https://pic.xiaojianjian.net/\",\"jpg.dog图床: https://jpg.dog/\",\"postimages图床: https://postimages.org\",\"光速图床: https://www.gsimg.com/index.php\",\"imgbb图床: https://imgbb.com/\"]},\"13\":{\"h\":\"在线检测软件病毒\",\"t\":[\"微步云沙箱: https://s.threatbook.com/ VirusTotal: https://www.virustotal.com/gui/home/upload 大圣云沙箱: https://sandbox.freebuf.com/service\"]},\"14\":{\"h\":\"杂项\",\"t\":[\"下次一定网: https://www.iiice.cn/#/\",\"油猴脚本网址: https://greasyfork.org/zh-CN\",\"Age动漫网 :https://www.agedm.org/\",\"在线代码高亮(word粘贴使用): https://highlightcode.com/\",\"springboot Banner图在线生成工具: https://www.bootschool.net/chinese-to-ascii;bsid=6653883E527FDD2188C629D8FE998831\",\"Unicode 符号表 : https://symbl.cc/cn/unicode/table/#letterlike-symbols\",\"数学科学计算器: https://www.desmos.com/scientific?lang=zh-CN\",\"奇Q工具网(在线cron生成器): https://qqe2.com/cron\",\"chtml变量命名: https://www.chtml.cn/\"]},\"15\":{\"h\":\"EasyExcel 工具类\"},\"16\":{\"h\":\"创建相关注解\"},\"17\":{\"h\":\"FieldRequired\",\"t\":[\"import java.lang.annotation.*; /** * 当前注解可以使用在类或成员变量上,请不要同时在类和成员变量上同时使用,同时使用会进行两次判断. * <P> * 在头部使用时表示当前所有成员变量都需要进行必填校验 * <P> * 在成员变量上使用时表示当前成员变量需要进行必填校验 * @author 黑色的小火苗 * */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE,ElementType.FIELD}) public @interface FieldRequired { } \"]},\"18\":{\"h\":\"HeadVerification\",\"t\":[\"import java.lang.annotation.*; /** * @author 黑色的小火苗 * easyexcel 头校验 */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE}) public @interface HeadVerification { } \"]},\"19\":{\"h\":\"NotFieldRequired\",\"t\":[\"import java.lang.annotation.*; /** * 该字段只可以使用在字段上,和@FieldRequired注解搭配使用 * <p> * 当@FieldRequired注解存在时,该注解可以使用在字段上,表示该字段不必须 * <p> * ps: @FieldRequired注解放在class上是才起作用 */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.FIELD}) public @interface NotFieldRequired { } \"]},\"20\":{\"h\":\"NotHeadRequired\",\"t\":[\"import java.lang.annotation.*; /** * 该字段只可以使用在字段上,和@HeadVerification注解搭配使用 * <p> * 当@HeadVerification注解在类上存在时,该注解在字段上使用会将其认为不需要进行校验的行头参数 */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.FIELD}) public @interface NotHeadRequired { } \"]},\"21\":{\"h\":\"工具类\",\"t\":[\"import cn.moonlight.common.excel.interfaces.FieldRequired; import cn.moonlight.common.excel.interfaces.HeadVerification; import cn.moonlight.common.excel.interfaces.NotFieldRequired; import cn.moonlight.common.excel.interfaces.NotHeadRequired; import com.alibaba.excel.annotation.ExcelProperty; import com.alibaba.excel.context.AnalysisContext; import com.alibaba.excel.metadata.data.ReadCellData; import com.alibaba.fastjson2.JSON; import com.alibaba.fastjson2.JSONObject; import java.lang.reflect.Field; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; public class EasyExcelUtil { /** * 校验请求头,如果多行请求头 * * @param headCellMap 当前行头数据 * @param context 行 */ public static void verificationHead(Map<Integer, ReadCellData<?>> headCellMap, AnalysisContext context) { Map<Integer, String> headMap = getHeadMap(context.readWorkbookHolder().getClazz()); if (headMap == null) return; if (headCellMap.size() != headMap.size()) throw new RuntimeException(\\\"请检查导入模板是否正确!\\\"); headCellMap.forEach((k, v) -> { if (!v.getStringValue().equals(headMap.get(k))) throw new RuntimeException(\\\"请检查导入模板是否正确!\\\"); }); } /** * 校验请求头,如果多行请求头 * * @param headNumber 需要校验的行头是第几行? 从0开始 * @param headCellMap 当前行头数据 * @param context 行 */ public static void verificationHead(Map<Integer, ReadCellData<?>> headCellMap, AnalysisContext context, Integer headNumber) { if (context.readRowHolder().getRowIndex() < headNumber) return; Map<Integer, String> headMap = getHeadMap(context.readWorkbookHolder().getClazz()); if (headMap == null) return; if (headCellMap.size() != headMap.size()) throw new RuntimeException(\\\"请检查导入模板是否正确!\\\"); headCellMap.forEach((k, v) -> { if (!v.getStringValue().equals(headMap.get(k))) throw new RuntimeException(\\\"请检查导入模板是否正确!\\\"); }); } /** * 通过传入要校验的必填字段来判断都是那些字段需要进行校验 * * @param fieldNames 必填字段 * @param t 本次需校验的数据 * @param <T> 泛型 */ public static <T> boolean verificationData(List<String> fieldNames, T t) { if (fieldNames.isEmpty()) return true; boolean success = true; JSONObject json = JSON.parseObject(JSON.toJSONString(t)); for (String fileName : fieldNames) { String fileValue = json.getString(fileName); success = fileValue == null || fileValue.isEmpty(); } return success; } /** * @param fieldNames 必填参数 * @param t 当前行数据据 * @param <T> 泛型 * @return Map<Boolean, List < String>> 错误行数据 */ public static <T> Map<Boolean, List<String>> verificationData(Map<String, String> fieldNames, T t) { Map<Boolean, List<String>> map = new HashMap<>(); if (fieldNames.isEmpty()) return map; JSONObject json = JSON.parseObject(JSON.toJSONString(t)); List<String> fields = new ArrayList<>(); for (Map.Entry<String, String> field : fieldNames.entrySet()) { String fileValue = json.getString(field.getKey()); if (fileValue == null || fileValue.isEmpty()) { fields.add(field.getValue()); } } if (!fields.isEmpty()) map.put(false, fields); return map; } /** * 使用反射获取实体类的excel表头,与导入的表头进行对应校验来验证模板是否一致 * * @param clazz 需要校验的class */ public static Map<Integer, String> getHeadMap(Class<?> clazz) { // 如果当前要读取的类没有表头校验注解，则返回空 if (!clazz.isAnnotationPresent(HeadVerification.class)) return null; Map<Integer, String> map = new HashMap<>(); Field[] fields = clazz.getDeclaredFields(); for (int i = 0; i < fields.length; i++) { Field field = fields[i]; field.setAccessible(true); if (field.isAnnotationPresent(ExcelProperty.class) && !field.isAnnotationPresent(NotHeadRequired.class)) { String[] value = field.getAnnotation(ExcelProperty.class).value(); map.put(i, value[value.length - 1]); } } return map; } /** * @param clazz 通过class获获取需要必填校验的字段 * @return 必填字段List */ public static List<String> getFieldNames(Class<?> clazz) { List<String> list = new ArrayList<>(); Field[] fields = clazz.getDeclaredFields(); if (clazz.isAnnotationPresent(FieldRequired.class)) { for (Field field : fields) { field.setAccessible(true); if (field.isAnnotationPresent(ExcelProperty.class) && !field.isAnnotationPresent(NotFieldRequired.class)) { list.add(field.getName()); } } return list; } // 如果走到这里就是没有在导入类上添加 @ExcelFieldVerification,那么就判断字段上是否存在 @ExcelFieldVerification 注解 for (Field field : fields) { field.setAccessible(true); if (field.isAnnotationPresent(FieldRequired.class)) { list.add(field.getName()); } } return list; } /** * @param clazz 通过class获获取需要必填校验的字段 * @return 必填字段List */ public static Map<String, String> getFieldNameMap(Class<?> clazz) { Map<String, String> map = new HashMap<>(); Field[] fields = clazz.getDeclaredFields(); if (clazz.isAnnotationPresent(FieldRequired.class)) { for (Field field : fields) { field.setAccessible(true); if (field.isAnnotationPresent(ExcelProperty.class) && !field.isAnnotationPresent(NotFieldRequired.class)) { map.put(field.getName(), field.getAnnotation(ExcelProperty.class).annotationType().getName()); } } return map; } // 如果走到这里就是没有在导入类上添加 @ExcelFieldVerification,那么就判断字段上是否存在 @ExcelFieldVerification 注解 for (Field field : fields) { field.setAccessible(true); if (field.isAnnotationPresent(FieldRequired.class)) { map.put(field.getName(), field.getAnnotation(ExcelProperty.class).annotationType().getName()); } } return map; } } \"]},\"22\":{\"h\":\"示例Listener\",\"t\":[\"import cn.moonlight.common.excel.util.EasyExcelUtil; import com.alibaba.excel.context.AnalysisContext; import com.alibaba.excel.metadata.data.ReadCellData; import com.alibaba.excel.read.listener.ReadListener; import lombok.Getter; import java.util.ArrayList; import java.util.List; import java.util.Map; /** * 简易的示例监听器,本监听器智能校验参数是否必填,其他无法处理,如需其他处理请可以复制当前监听器后重写即可. * * @author 黑色的小火苗 */ @Getter public class EasyListener<T> implements ReadListener<T> { private final List<T> errorList; private final List<T> successList; public EasyListener() { errorList = new ArrayList<>(); successList = new ArrayList<>(); } @Override public void invoke(T t, AnalysisContext context) { List<String> fieldNames = EasyExcelUtil.getFieldNames(context.readWorkbookHolder().getClazz()); if (!fieldNames.isEmpty() && EasyExcelUtil.verificationData(fieldNames, t)) { errorList.add(t); return; } successList.add(t); } @Override public void invokeHead(Map<Integer, ReadCellData<?>> headCellMap, AnalysisContext context) { EasyExcelUtil.verificationHead(headCellMap, context); } @Override public void doAfterAllAnalysed(AnalysisContext analysisContext) {} } \"]},\"23\":{\"h\":\"fastjson2\",\"t\":[\"文档地址:\",\"github文档: https://github.com/alibaba/fastjson2\",\"gitee文档: https://gitee.com/wenshao/fastjson2\",\"maven引入依赖:\",\"<dependency> <groupId>com.alibaba.fastjson2</groupId> <artifactId>fastjson2</artifactId> <version>2.0.39</version> </dependency> \"]},\"24\":{\"h\":\"简单使用\"},\"25\":{\"h\":\"JSON字符串与JavaObject相互转换\",\"t\":[\" @Test public void jsonTest() { @Data class User { public int id; public String name; } User user = new User(); user.id = 2; user.name = \\\"FastJson2\\\"; String userJsonStr = JSON.toJSONString(user); log.info(\\\"Java对象转换为Json字符串: {}\\\", userJsonStr); // 输出结果 Java对象转换为Json字符串: {\\\"id\\\":2,\\\"name\\\":\\\"FastJson2\\\"} String userJsonStr1 = JSONObject.toJSONString(user); log.info(\\\"Java对象转换为Json字符串: {}\\\", userJsonStr1); // 输出结果 Java对象转换为Json字符串: {\\\"id\\\":2,\\\"name\\\":\\\"FastJson2\\\"} User user1 = JSON.parseObject(userJsonStr, User.class); log.info(\\\"JSON转换为Java对象后: {}\\\", user1); // 输出结果: JSON转换为Java对象后: User(id=2, name=FastJson2) User user2 = JSONObject.parseObject(userJsonStr1, User.class); log.info(\\\"JSON转换为Java对象后: {}\\\", user2); // 输出结果: JSON转换为Java对象后: User(id=2, name=FastJson2) /* 小结: 当我们仅转换一个对象时我们使用 JSON.parseObject()或JSONObject.parseObject()方法 都可以做到java对象的转换 */ } \"]},\"26\":{\"h\":\"JSONArray与Java的List相互转换\",\"t\":[\" @Test public void jsonArrayTest() { List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7); String jsonString = JSON.toJSONString(list); log.info(\\\"jsonString: {}\\\", jsonString); // 输出结果 jsonString: [1,2,3,4,5,6,7] String jsonString2 = JSONObject.toJSONString(list); log.info(\\\"jsonString: {}\\\", jsonString2); // 输出结果 jsonString: [1,2,3,4,5,6,7] String jsonString1 = JSONArray.toJSONString(list); log.info(\\\"jsonString: {}\\\", jsonString1); // 输出结果 jsonString: [1,2,3,4,5,6,7] List list1 = JSON.parseObject(jsonString, List.class); log.info(\\\"转换后的List: {}\\\", list1); // 输出结果 转换后的List: [1, 2, 3, 4, 5, 6, 7] List list2 = JSONObject.parseObject(jsonString2, List.class); log.info(\\\"转换后的List: {}\\\", list2); // 输出结果 转换后的List: [1, 2, 3, 4, 5, 6, 7] List<Integer> integers = JSONArray.parseArray(jsonString1, Integer.class); log.info(\\\"转换后的List: {}\\\", integers); // 输出结果 转换后的List: [1, 2, 3, 4, 5, 6, 7] /* 小结: 当在使用fastjson2时，如果要转换的json字符串是数组，那么需要使用JSONArray.parseArray()方法. 因为我们需要转换为指定的对象而不是List<Object> */ } \"]},\"27\":{\"h\":\"httpClient\"},\"28\":{\"h\":\"引入依赖\",\"t\":[\"<!-- 版本根据自己需要使用,我这里使用的是5.2.1 --> <dependency> <groupId>org.apache.httpcomponents.client5</groupId> <artifactId>httpclient5</artifactId> <version>5.2.1</version> </dependency> \"]},\"29\":{\"h\":\"HttpClient 发起请求\",\"t\":[\"@Slf4j public class HttpClientUtil { /** * 因为没有设置请求头等数据,所以简单请求可以封装一下 */ public static String get(String url) { CloseableHttpClient client = HttpClients.createDefault(); ClassicHttpRequest build = ClassicRequestBuilder.get(url).build(); try { return client.execute(build, response -> { if (response.getCode() == 200) { return EntityUtils.toString(response.getEntity()); } return \\\"\\\"; }); } catch (IOException e) { log.info(\\\"[ HTTP GET ] 请求失败!\\\"); return \\\"\\\"; } } /** * HttpPost简单请求 * * @param uri 请求地址 * @param data 请求参数 * @return String 类型的字符串 */ public static String post(String uri, List<BasicNameValuePair> data) { CloseableHttpClient client = HttpClients.createDefault(); ClassicHttpRequest httpPost = ClassicRequestBuilder.post(uri) .setEntity(new UrlEncodedFormEntity(data)) .build(); try { client.execute(httpPost, response -> { if (response.getCode() == 200) { return EntityUtils.toString(response.getEntity()); } return \\\"\\\"; }); } catch (IOException e) { log.info(\\\"[ HTTP POST ] 请求失败!\\\"); } return \\\"\\\"; } } \"]},\"30\":{\"h\":\"Java\",\"t\":[\"工具类:\",\"json字符串格式化工具类: fastjson2\",\"http请求时使用: http-client\"]},\"31\":{\"h\":\"Maven\"},\"32\":{\"h\":\"maven镜像源配置\",\"t\":[\"maven 配置华为云镜像官方文档地址: https://www.huaweicloud.com/special/maven-jingxiang.html\",\"<mirror> <id>huaweicloud</id> <mirrorOf>*</mirrorOf> <url>https://repo.huaweicloud.com/repository/maven/</url> </mirror> \",\"maven 配置阿里云镜像官网指南: https://developer.aliyun.com/mvn/guide\",\"<mirror> <id>aliyunmaven</id> <mirrorOf>*</mirrorOf> <name>阿里云公共仓库</name> <url>https://maven.aliyun.com/repository/public</url> </mirror> \"]},\"33\":{\"h\":\"mybatis\",\"t\":[\"简介:\",\"MyBatis 本是 apache 的一个开源项目 iBatis,2010 年这个项目由 apache software foundation 迁移到了 google code,并且改名为MyBatis 。 2013 年 11 月迁移到 Github。iBATIS 一词来源于“internet”和“abatis”的组合,是一个基于 Java 的持久层框架。 iBATIS 提供的持久层框架包括 SQL Maps 和 Data Access Objects(DAO)。 Mybatis 基于java的持久层框架,它的内部封装了JDBC,让开发人员只需要关注SQL语句本身,不需要花费精力在驱动的加载、连接的创建、Statement的创建等复杂的过程。 Mybatis通过XML或注解的方式将要执行的各种的statement配置起来,并通过java对象和statement中的sql的动态参数进行映射生成最终执行的SQL语句,最后由mybatis框架执行SQL,并将结果直接映射为java对象。 采用了ORM思想解决了实体类和数据库表映射的问题,对JDBC进行了封装,屏蔽了JDBCAPI底层的访问细节,避免我们与jdbc的api打交道,就能完成对数据的持久化操作。\",\"ORM 中分别表示为: O --> Object Java对象 POJO R --> Relation 关系,就是数据库中的一张表 M --> mapping 映射\"]},\"34\":{\"h\":\"Mybaits 对象分析\",\"t\":[\"Resources Resources 类,顾名思义就是资源,用于读取资源文件。其有很多方法通过加载并解析资源文件,返回不同类型的IO流对象。\",\"SqlSessionFactoryBuilderSqlSessionFactory的创建,需要使用SqlSessionFactoryBuilder对象的build()方法 事实上使用SqlSessionFactoryBuilder的原因是将SqlSessionFactory这个复杂对象的创建交由Builder来执行,也就是使用了建造者设计模式。\",\"建造者模式 又称生成器模式,是一种对象的创建模式。 可以将一个产品的内部表象与产品的生成过程分割开来, 从而可以使一个建造过程生成具有不同的内部表象的产品(将一个复杂对象的构建与它的表示分离, 使得同样的构建过程可以创建不同的表示). 这样用户只需指定需要建造的类型就可以得到具体产品,而不需要了解具体的建造过程和细节. 在建造者模式中,角色分指导者(Director)与建造者(Builder) 用户联系指导者, 指导者指挥建造者, 最后得到产品. 建造者模式可以强制实行一种分步骤进行的建造过程.\",\"SqlSessionFactory SqlSessionFactory 接口对象是一个重量级对象(系统开销大的对象),是线程安全的,所以一个应用只需要一个该对象即可。\",\"创建SqlSession需要使用SqlSessionFactory接口的的 openSession()方法。\",\"默认的 openSession()方法没有参数,它会创建有如下特性的 SqlSession\",\"会开启一个事务(也就是不自动提交)。\",\"将从由当前环境配置的 DataSource 实例中获取 Connection 对象。事务隔离级别将会使用驱动或数据源的默认设置。\",\"预处理语句不会被复用,也不会批量处理更新。\",\"当参数为 TRUE 是 会自动提交, FALSE 时需要手动提交, 默认为 false.\",\"SqlSession 接口对象用于执行持久化操作 SqlSession 中一次会话已创建SqlSession对象开始到SqlSession对象关闭为结束.\",\"PS: SqlSession 接口对象是线程不安全的,所以每次数据库会话结束前需要马上调用其 close()方法将其关闭。\"]},\"35\":{\"h\":\"Mybatis 单独使用\",\"t\":[\"本次使用的数据库需要自己创建,在创建时字符集选为utf8mb4排序规则选为utf8mb4_general_ci\"]},\"36\":{\"h\":\"导入依赖\",\"t\":[\"<dependencies> <!-- spring start --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.2.15.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>5.2.15.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-beans</artifactId> <version>5.2.15.RELEASE</version> </dependency> <!-- spring end --> <!-- Mybatis start --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.6</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <!-- Mybatis end --> <dependency> <!-- 测试依赖,可不导入 --> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13.1</version> </dependency> <dependency> <!-- lombok 依赖(减少get/set生成) --> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.24</version> </dependency> </dependencies> \"]},\"37\":{\"h\":\"创建配置文件\",\"t\":[\"ps: Resource文件夹中创建,文件名可自定义,我这里就定义为 mybatis.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <properties resource=\\\"db.properties\\\" /> <!--配置 mybatis 环境--> <environments default=\\\"development\\\"> <!--id:数据源的名称--> <environment id=\\\"development\\\"> <!--事务类型:使用 JDBC 事务,使用 Connection 的提交和回滚--> <transactionManager type=\\\"JDBC\\\"/> <!--数据源 dataSource:创建数据库 Connection 对象type: POOLED 使用数据库的连接池--> <dataSource type=\\\"POOLED\\\"> <!--连接数据库的四大参数注意数据库版本使用的是MySQL8,如果是mysql5的话,driver和url都不一样,参考学过的JDBC--> <property name=\\\"driver\\\" value=\\\"${database.driver}\\\"/> <property name=\\\"url\\\" value=\\\"${database.url}\\\"/> <property name=\\\"username\\\" value=\\\"${database.username}\\\"/> <property name=\\\"password\\\" value=\\\"${database.password}\\\"/> </dataSource> </environment> </environments> <mappers> <!-- 加上这个后就会扫描该路径下所用到的 *Mapper 和 *Mapper.xml 文件 --> <package name=\\\"扫描的包路径\\\"/> </mappers> </configuration> \"]},\"38\":{\"h\":\"数据库配置\",\"t\":[\"ps: 这些配置也可以在mybaits.xml文件中配置\",\"database.driver=com.mysql.cj.jdbc.Driver database.url=jdbc:mysql://ip:port/databaseName?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT database.username=root database.password=root \"]},\"39\":{\"h\":\"SqlSession获取Mapper\",\"t\":[\"import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import java.io.IOException; import java.io.Reader; /** * &#064;Author Sunset * <p> * 单独使用 Mybatis 时重点是如何获取 SqlSession. * <p> * 1. 通过 SqlSessionFactoryBuilder( 建造者模式对象创建) 来获取到 SqlSessionFactory 工厂. * <p> * 2. 从 SqlSessionFactory 工厂调取 openSession() 获取 SqlSession. */ public class MybatisUtil { /** * 将本次使用的 SqlSession 所处的线程封闭到 TreadLocal */ private static final ThreadLocal<SqlSession> THREAD_LOCAL = new ThreadLocal<>(); private static final SqlSessionFactory FACTORY; static { Reader reader = null; try { // 读取配置文件,参数是配置文件名车 reader = Resources.getResourceAsReader(\\\"mybatis.xml\\\"); } catch (IOException e) { e.printStackTrace(); } // 创建工厂 FACTORY = new SqlSessionFactoryBuilder().build(reader); } /** * 获取链接 * @return 返回 SqlSession */ public static SqlSession getSqlSession(){ // 从threadLocal中获取 SqlSession sqlSession = THREAD_LOCAL.get(); if (sqlSession == null){ // openSession 更改为true 会自动提交 sqlSession = FACTORY.openSession(); // 将sqlSession和线程进行绑定 THREAD_LOCAL.set(sqlSession); } return sqlSession; } /** * 关闭链接 */ public static void closeSqlSession(){ // 从threadLocal中获取 SqlSession sqlSession = THREAD_LOCAL.get(); if (sqlSession != null){ sqlSession.close(); THREAD_LOCAL.remove(); } } } \"]},\"40\":{\"h\":\"创建对应的Mapper和Mapper.xml\",\"t\":[\"UserMapper.java\",\"import org.apache.ibatis.annotations.Param; import org.sunset.cn.entity.User; import java.util.List; public interface UserMapper { List<User> queryAll(@Param(\\\"id\\\") Integer id); } \",\"UserMapper.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace 必须时 mapper 文件的完全限定名 --> <mapper namespace=\\\"org.sunset.cn.mapper.UserMapper\\\"> <select id=\\\"queryAll\\\" resultType=\\\"org.sunset.cn.entity.User\\\"> select id,name,age,email from user <where> <if test=\\\"id != null and id != 0\\\"> id = #{id}</if> </where> </select> </mapper> \"]},\"41\":{\"h\":\"调用Mapper\",\"t\":[\"UserService.java\",\"import org.sunset.cn.entity.User; import java.util.List; public interface UserService { /** * 传入 id 时根据 id查询,不传入时查询全部数据 * @param id 用户id * @return 用户数据 */ List<User> getUser(Integer id); } \",\"UserServiceImpl.java\",\"import org.sunset.cn.entity.User; import org.sunset.cn.mapper.UserMapper; import org.sunset.cn.util.MybatisUtil; import java.util.List; public class UserServiceImpl implements UserService { public UserMapper usersMapper = MybatisUtil.getSqlSession().getMapper(UserMapper.class); @Override public List<User> getUser(Integer id) { return usersMapper.queryAll(id); } // 直接使用 main 方法测试了,就不再去写测试方法调用了 public static void main(String[] args) { UserServiceImpl userService = new UserServiceImpl(); List<User> user = userService.getUser(null); user.forEach(System.out::println); } } \",\"ps: 在创建 Mapper 和Mapper.xml 文件时需要注意以下几点\",\"XML映射文件必须与实体类在同一个包下\",\"XML映射文件名称必须与实体类同名.\",\"XML映射文件需要注册到mybatis的全局配置文件中. (我这里使用的是包扫描所以不需要自己一个个进行注册)\"]},\"42\":{\"h\":\"配置文件标签\",\"t\":[\"配置文件中是有顺序的如果顺序错误也会报错,我们在 idea 中可以 ctrl+鼠标左键 点击 configuration 标签就可以看到.\",\"properties 标签有以下属性 \",\"resource: 该属性存在时是指定读取的 properties 文件.\",\"url: 这个属性不常用.\",\"environments \",\"default: 默认读取那个 environment\",\"environment 是 environments 的子标签 \",\"id: environment的id表示\",\"transactionManager 是 environment 的子标签 \",\"type: 选用的事务,我经常用的是 'JDBC'\",\"dataSource 是 environment 的子标签 \",\"type: 使用的连接池\",\"property \",\"name: 属性名\",\"value: 属性值\",\"mappers\",\"package 是 mappers 的子标签 \",\"name: 指定包下的所有Mapper接口\",\"mapper 是 mappers 的子标签 \",\"reource: 使用相对于类路径的资源,从 classpath 路径查找文件\",\"class: 使用的mapper接口的完全限定名,要求: 接口和映射文件同包同名\",\"url: 不常用\"]},\"43\":{\"h\":\"MapperXml标签\",\"t\":[\"select\",\"id 属性是这个 select 标签所对应的方法名,当前xml中唯一不可重复.\",\"此标签必须要有 resultType 或 resultMap 两个选一个使用.\",\"resultType 属性是指定要返回的java实体类.\",\"resultMap 属性是在实体类与数据库表字段不符时使用的.\",\"parameterType 属性是传入的参数类型\",\"update\",\"id 属性是这个 update 标签所对应的方法名,当前xml中唯一不可重复.\",\"parameterType 属性是传入的参数类型\",\"resultType/resultMap 在此标签中不常用.\",\"resultMap\",\"该标签用于处理数据库字段与实体类字段不一致的情况\",\"id 属性是这个 resultMap 标签的名称,当前xml中唯一不可重复.\",\"type 属性是 resultMaper的返回类型.\",\"id 子标签,主键列使用\",\"result 子标签 其他列使用\",\"id 子标签和 result 子标签的属性是一样的所以这里就写到一起了 \",\"column 表示数据库表中的列名,不区分大小写\",\"property 表示实体类中的对应的属性名,区分大小写\",\"javaType 实体类中的对应的属性的类型,可以省略,mybatis会自己推断\",\"jdbcType \\\"数据库中的类型column的类型\\\" 一般省略\",\"foreach标签 mapper 中的方法\",\" void addList(List<Users> list); \",\"xml 中定义对应的标签\",\" <!--批量添加--> <insert id=\\\"addList\\\" parameterType=\\\"arraylist\\\"> INSERT INTO users (loginname,password) VALUES <!-- collection:要遍历的集合,参数是集合类型,直接写list 如果使用 @Parm 指定的话就是 @Parm 中的字符串 item: 遍历的集合中的每一个数据 separator:将遍历的结果用 , 分割 --> <foreach collection=\\\"list\\\" item=\\\"t\\\" separator=\\\",\\\"> (#{t.loginName},#{t.passWord}) </foreach> </insert> \",\"sql 标签\",\"id 属性其他表中嵌套是用于指定当前 sql 标签使用, 当前 xml 唯一不可重复\",\"里面可以写通用的 sql 片段,其它标签引用时使用 include 标签即可.\",\"include 标签\",\"refid 要引用的标签 id\",\"以后遇到其他标签在进行补充吧,暂时常用的就这些.\",\"ps: parameterType属性需要注意: 如果传入的是 List/Set/.. 那么 parameterType 里传入的是 List 那组尖括号里所包的类型,例如传入的参数是 List<Integer> 那么 parameterType= integer.\"]},\"44\":{\"h\":\"转义字符\",\"t\":[\"字符\",\"转义符号\",\"备注\",\"<\",\"<\",\"小于\",\"<=\",\"<=\",\"小于等于\",\">\",\">\",\"大于\",\">=\",\">=\",\"大于等于\",\"<>\",\"<>\",\"不等于\",\"&\",\"&\",\"与\",\"’\",\"'\",\"单引号\",\"”\",\"\\\"\",\"双引号\"]},\"45\":{\"h\":\"Mybatis字段自动注入\"},\"46\":{\"h\":\"提取公共字段\",\"t\":[\"import com.baomidou.mybatisplus.annotation.FieldFill; import com.baomidou.mybatisplus.annotation.TableField; import com.fasterxml.jackson.annotation.JsonFormat; import io.swagger.annotations.ApiModelProperty; import lombok.Data; import lombok.experimental.Accessors; import java.io.Serializable; import java.time.LocalDateTime; @Data public class BaseEntity implements Serializable { private static final long serialVersionUID = 1L; /** * 创建人 */ @TableField(value = \\\"creator\\\", fill = FieldFill.INSERT) private Integer creator; /** * 更新人 */ @TableField(value = \\\"updater\\\", fill = FieldFill.UPDATE) private Integer updater; /** * 创建时间 * <p> * FieldFill.INSERT 仅在插入时进行处理 */ @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\") @TableField(value = \\\"create_time\\\", fill = FieldFill.INSERT) private LocalDateTime createTime; /** * 更新时间 * <p> * FieldFill.UPDATE 仅在更新时进行处理 * </p> * FieldFill.INSERT_UPDATE 更新和插入时都进行处理 * </p> * 未指定 FieldFill 时是不会进行自动注入的 */ @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\") @TableField(value = \\\"update_time\\\", fill = FieldFill.UPDATE) private LocalDateTime updateTime; /** * 是否删除 0: 使用中 1: 已删除 */ private Integer del; } \"]},\"47\":{\"h\":\"自动注入类\",\"t\":[\"import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler; import lombok.extern.slf4j.Slf4j; import org.apache.ibatis.reflection.MetaObject; import org.springframework.stereotype.Component; import java.time.LocalDateTime; @Slf4j @Component public class MybatisMetaObjectHandler implements MetaObjectHandler { static final ThreadLocal<Integer> THREAD_LOCAL = new ThreadLocal<>(); @Override public void insertFill(MetaObject metaObject) { this.setFieldValByName(\\\"createTime\\\", LocalDateTime.now(), metaObject); if (null != THREAD_LOCAL.get()) { this.setFieldValByName(\\\"creator\\\", THREAD_LOCAL.get(), metaObject); } else { this.setFieldValByName(\\\"creator\\\", 0, metaObject); } } @Override public void updateFill(MetaObject metaObject) { this.setFieldValByName(\\\"updateTime\\\", LocalDateTime.now(), metaObject); if (null != THREAD_LOCAL.get()) { this.setFieldValByName(\\\"updater\\\", THREAD_LOCAL.get(), metaObject); } else { this.setFieldValByName(\\\"updater\\\", 0, metaObject); } } } \",\"ps: 自动注入类中的用户ID需要在拦截器中进行设置,因为拦截器优先级较高.\"]},\"48\":{\"h\":\"poi-tl\",\"t\":[\"官网地址: http://deepoove.com/poi-tl/\",\"导入依赖\",\"<!-- poi-tl start --> <dependency> <groupId>com.deepoove</groupId> <artifactId>poi-tl</artifactId> <version>1.10.3</version> <exclusions> <exclusion> <groupId>org.apache.poi</groupId> <artifactId>poi-ooxml</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.apache.poi</groupId> <artifactId>ooxml-schemas</artifactId> <version>1.4</version> </dependency> <dependency> <groupId>io.github.draco1023</groupId> <artifactId>poi-tl-ext</artifactId> <version>0.3.3</version> <exclusions> <exclusion> <groupId>com.deepoove</groupId> <artifactId>poi-tl</artifactId> </exclusion> <exclusion> <groupId>org.apache.poi</groupId> <artifactId>ooxml-schemas</artifactId> </exclusion> </exclusions> </dependency> <!-- poi-tl end --> \"]},\"49\":{\"h\":\"工具类\",\"t\":[\"import com.deepoove.poi.XWPFTemplate; import com.deepoove.poi.config.Configure; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.InputStream; import java.util.Map; /** * @author sunset@黑色的小火苗 * @create: 2023-05-28 16:50 */ public class WordUtil { /** * 创建Word文档 * * @param stream 输入流 * @param config 模板绑定的配置 * @param data 模板所需数据 * @return byte[] * @throws IOException 可能会出现IO错误 */ public byte[] createWord(InputStream stream, Configure config, Map<String, Object> data) throws IOException { XWPFTemplate template = XWPFTemplate.compile(stream, config).render(data); ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); template.writeAndClose(outputStream); template.close(); return outputStream.toByteArray(); } } \"]},\"50\":{\"h\":\"案例\",\"t\":[\"创建输出时案例对象\",\"import com.deepoove.poi.data.PictureRenderData; import lombok.Data; import lombok.experimental.Accessors; import java.util.List; import java.util.Map; /** * Word 生成案例实体 * * @author sunset@黑色的小火苗 * @create: 2023/6/10 - 18:01 */ @Data @Accessors(chain = true) public class UserWordDemo { private String userName; /** * 例如库中图片地址 */ private String imgUrl; /** * 实际输出的图片 */ private PictureRenderData img; /** * 例如库中图片地址 */ private List<String> imgUrlList; /** * 当一个对象存在多个图片时处理 */ private List<Map<String,PictureRenderData>> imgList; } \",\"演示示例\",\"import com.deepoove.poi.config.Configure; import com.deepoove.poi.data.PictureRenderData; import com.deepoove.poi.data.Pictures; import com.deepoove.poi.plugin.table.LoopRowTableRenderPolicy; import com.sunset.common.util.WordUtil; import org.junit.Test; import org.springframework.core.io.ClassPathResource; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; /** * @author sunset@黑色的小火苗 * @create: 2023/6/10 - 18:05 */ public class WordDemoTest { /** * 测试生成 Word */ @Test public void testGenerateWord() throws IOException { // 1. 读取模板,获取模板输入流 InputStream inputStream = new ClassPathResource(\\\"templates/test.docx\\\").getInputStream(); // 绑定模板配置 LoopRowTableRenderPolicy rowPolicy = new LoopRowTableRenderPolicy(true); // 循环时在同一行进行循环 Configure config = Configure.builder() .bind(\\\"users\\\", rowPolicy) // 绑定列表 .bind(\\\"imgList\\\", rowPolicy) // 绑定列表 .useSpringEL(true) // 开启Spring表达式 .build(); // 模板标签与数据进行绑定 Map<String, Object> data = new HashMap<>(); // 循环给 demoList设置数据 这里就不写了 data.put(\\\"users\\\", getDemoList()); // 调用方法 byte[] wordBytes = WordUtil.createWord(inputStream, config, data); // 输出到文件 FileOutputStream fos = new FileOutputStream(new File(\\\"D:\\\\\\\\data\\\\\\\\temp\\\\\\\\test.docx\\\")); fos.write(wordBytes); fos.flush(); fos.close(); } /** * 生成需要的对象 <br/> * 读取本地图片使用 Pictures.ofStream(\\\"localImgPath\\\") [ localImgPath 本地图片所在地址 ]<br/> * 读取网络图片使用 Pictures.ofUrl(\\\"HttpUrl\\\") [ HttpUrl 网络URl路径 ]<br/> * <br/> * 当循环行中某一列中需要渲染多个图片/文字时 按当前示例这么做就可以 <br/> * * @return List<UserWordDemo> */ private List<UserWordDemo> getDemoList() throws IOException { List<UserWordDemo> demoList = new ArrayList<>(); for (int i = 0; i < 5; i++) { // 当循环行时在一列中生成多个图片/文字时按这种方式可以循环渲染 List<Map<String, PictureRenderData>> imgList = new ArrayList<>(); Map<String, PictureRenderData> map = new HashMap<>(); map.put(\\\"img1\\\", Pictures.ofStream(new ClassPathResource(\\\"static/2.jpg\\\").getInputStream()).size(100, 100).create()); imgList.add(map); Map<String, PictureRenderData> map1 = new HashMap<>(); map1.put(\\\"img1\\\", Pictures.ofStream(new ClassPathResource(\\\"static/2.jpg\\\").getInputStream()).size(100, 100).create()); imgList.add(map1); UserWordDemo userWordDemo = new UserWordDemo() .setUserName(\\\"测试用户名\\\" + i) .setImg(Pictures.ofStream(new ClassPathResource(\\\"static/1.jpg\\\").getInputStream()).size(100, 100).create()) .setImgList(imgList); demoList.add(userWordDemo); } return demoList; } } \",\"模板图片与生成的图片 模板图片 \",\"生成的图片\\n\"]},\"51\":{\"h\":\"redis设计实时排行榜\"},\"52\":{\"h\":\"使用redis先试思路可行性\",\"t\":[\"思路:\",\"由于redis的sort排序仅支持一个字段进行升序或降序,那么可以考虑将一个字段变更为升序排序且由于我们这边是以考试为思路来设计所以可以考虑使用考试的最高分减去当前人的考试分数获取一个新的升序分数.\",\"同分数时我们需要按照考试是时长进行升序,由此我们可以思考将两个分数组装为一个double类型的分数来进行排序,由此我们可以进行尝试是否可行\",\"准备测试数据\",\"# 我们使用hash来将各个数据进行存储 hmset exam_1_user:2001 examId 1 userId 2001 score 80 examTime 81 sortScore 20.81 hmset exam_1_user:2002 examId 1 userId 2002 score 82 examTime 83 sortScore 18.83 hmset exam_1_user:2003 examId 1 userId 2003 score 81 examTime 90 sortScore 19.90 hmset exam_1_user:2004 examId 1 userId 2004 score 90 examTime 80 sortScore 10.80 hmset exam_1_user:2005 examId 1 userId 2005 score 90 examTime 70 sortScore 10.70 hmset exam_1_user:2006 examId 1 userId 2006 score 90 examTime 90 sortScore 10.90 # 将其唯一值设置为外部列表进行存储且使用这个来进行存储 rpush exam_1_user_sort 2001 2002 2003 2004 2005 2006 \",\"我们使用sort将其进行排序后输出key\",\"sort exam_1_user_sort by exam_1_user:*->sortScore asc get # # 输出结果为: 2005 2004 2006 2002 2003 2001 # 和我们预期结果一致. \"]},\"53\":{\"h\":\"使用java来实现排行榜\",\"t\":[\"redis工具类不会写的可以去看redisUtil工具类\"]},\"54\":{\"h\":\"接收数据实体类\",\"t\":[\"package cn.moonlight.common.dto; import cn.moonlight.common.util.ExamRankUtil; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.experimental.Accessors; import java.util.HashMap; import java.util.Map; @Data @Accessors(chain = true) @NoArgsConstructor @AllArgsConstructor public class RedisRankDto { private Integer examId; private Integer userId; private Double score; private Integer examTime; private Double maxScore; public String getSortScore() { return String.valueOf((maxScore - score) + ((double) examTime / 100000)); } public Map<String, String> toMap() { return new HashMap<String, String>() {{ put(\\\"examId\\\", String.valueOf(examId)); put(\\\"userId\\\", String.valueOf(userId)); put(\\\"score\\\", String.valueOf(score)); put(\\\"examTime\\\", String.valueOf(examTime)); put(ExamRankUtil.SORT_SCORE, getSortScore()); }}; } } \"]},\"55\":{\"h\":\"排行榜工具类\",\"t\":[\"package cn.moonlight.common.util; import cn.moonlight.common.dto.RedisRankDto; import org.springframework.data.redis.connection.SortParameters; import org.springframework.data.redis.core.query.SortQuery; import org.springframework.data.redis.core.query.SortQueryBuilder; import java.util.ArrayList; import java.util.List; import java.util.Map; /** * 考试排行榜工具类 */ public class ExamRankUtil { /** * 过期时长 默认为一年,测试时请不要使用该参数 */ public static final long EXPIRE = 31536000; /** * 排行榜最大人数 -- 默认限制为50 */ public static final int MAX_RANK_NUMBER = 50; /** * 排行榜所存key,该字符串需要进行拼接 * <p> * 1. 需要使用 String.format(RANK_KEY, examId); 拼接为本场考试使用的key * <p> * 2. 需要再后面拼接本场考试是谁的数据也就是 String.format(RANK_KEY, examId) + userId; 来区分是谁的数据 */ private static final String RANK_KEY = \\\"exam_%d_user:\\\"; /** * 排序所用的key 同样需要使用 String.format(RANK_SOFT_KEY, examId); 来拼接为本场的数据 */ private static final String RANK_SORT_KEY = \\\"exam_%d_user_sort\\\"; public static final String SORT_SCORE = \\\"sortScore\\\"; private static final String RANK_SOFT_BY = RANK_KEY + \\\"*->\\\" + SORT_SCORE; /** * 根据考试ID获取对应的排行版数据 * * @param examId 考试ID * @return List<Map < String, String>> */ public static List<Map<String, String>> findRankByExamId(Integer examId) { String rankKey = String.format(RANK_KEY, examId); SortQuery<String> sortQuery = SortQueryBuilder.sort(String.format(RANK_SORT_KEY, examId)) .by(String.format(RANK_SOFT_BY, examId)) .order(SortParameters.Order.ASC) .build(); List<String> sort = RedisUtil.sort(sortQuery); List<Map<String, String>> list = new ArrayList<>(MAX_RANK_NUMBER); for (int i = 0; i < sort.size(); i++) { Map<String, String> map = RedisUtil.hashEntries(rankKey + sort.get(i)); map.put(\\\"rank\\\", String.valueOf(i + 1)); list.add(map); } return list; } /** * 给排行榜添加一个人员内部自动判断是否可以存在于排行榜中 * * @param dto 排行榜数据 */ public static void addRank(RedisRankDto dto) { // 设置变量 String SCORE = \\\"score\\\"; String EXAM_TIME = \\\"examTime\\\"; // 组装key String rankKey = String.format(RANK_KEY, dto.getExamId()); // 使用模糊查询获取当前场考试所有用户的key List<String> matchingKeys = RedisUtil.findMatchingKeys(rankKey + \\\"*\\\"); // 如果当前为空那么直接将本次数据添加进去即可 if (matchingKeys.isEmpty()) { rankPutData(dto); return; } // 组装key String examUserRedisKey = String.format(RANK_KEY, dto.getExamId()) + dto.getUserId(); // 如果exam_user在redis的hash表数据存在 if (RedisUtil.hasKey(examUserRedisKey)) { // 获取hash表中所有数据 Map<String, String> redisExamUser = RedisUtil.hashEntries(examUserRedisKey); // 只有当前分数大于redis中存储的分数或分数一直且时长更短时才更新数据 if (dto.getScore() > Double.parseDouble(redisExamUser.get(SCORE)) || (Double.valueOf(redisExamUser.get(SCORE)).equals(dto.getScore()) && Double.parseDouble(redisExamUser.get(EXAM_TIME)) > dto.getExamTime())) { RedisUtil.hmSet(examUserRedisKey, SCORE, String.valueOf(dto.getScore())); RedisUtil.hmSet(examUserRedisKey, EXAM_TIME, String.valueOf(dto.getExamTime())); RedisUtil.hmSet(examUserRedisKey, SORT_SCORE, String.valueOf(dto.getSortScore())); } return; } // 如果当前redis不存在相同key且未超过排行榜最大人数时直接放入redis即可 if (matchingKeys.size() < MAX_RANK_NUMBER) { rankPutData(dto); return; } // 排序key String rankSortKey = String.format(RANK_SORT_KEY, dto.getExamId()); // 排序条件组装 SortQuery<String> sortQuery = SortQueryBuilder.sort(rankSortKey) .by(String.format(RANK_SOFT_BY, dto.getExamId())) .order(SortParameters.Order.DESC) .build(); // 获取排序后所有的key List<String> sort = RedisUtil.sort(sortQuery); for (String userId : sort) { String examUserRedisTempKey = rankKey + userId; Map<String, String> redisExamUser = RedisUtil.hashEntries(examUserRedisTempKey); double redisScore = Double.parseDouble(redisExamUser.get(SCORE)); int examTime = Integer.parseInt(redisExamUser.get(EXAM_TIME)); // 如果当前分数大于redis中存储的分数或分数一致且时长更短时移除当前redis中的数据且将当前数据存入redis中 if (dto.getScore() > redisScore || (dto.getScore() == redisScore && examTime > dto.getExamTime())) { RedisUtil.del(examUserRedisTempKey); RedisUtil.lRemove(rankSortKey, userId); rankPutData(dto); break; } } } /** * 给Redis中push一条排行榜数据 * * @param dto redis中需要push的数据 */ public static void rankPutData(RedisRankDto dto) { // 组装key String key = String.format(RANK_KEY, dto.getExamId()) + dto.getUserId(); // 设置一张hash表数据 RedisUtil.hmSet(key, dto.toMap()); // 给定一个过期时间 RedisUtil.expire(key, EXPIRE); // 给排序的列表添加当前的为一值 RedisUtil.rightPush(String.format(RANK_SORT_KEY, dto.getExamId()), String.valueOf(dto.getUserId()), EXPIRE); } } \"]},\"56\":{\"h\":\"redis工具类\"},\"57\":{\"h\":\"RedisConfigBean配置\",\"t\":[\"import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.data.redis.connection.RedisConnectionFactory; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.data.redis.serializer.RedisSerializer; import org.springframework.data.redis.serializer.StringRedisSerializer; @Configuration public class RedisConfig { @Bean public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) { RedisTemplate<String, String> template = new RedisTemplate<>(); RedisSerializer<String> redisSerializer = new StringRedisSerializer(); template.setConnectionFactory(factory); //key序列化方式 template.setKeySerializer(redisSerializer); //value序列化 template.setValueSerializer(redisSerializer); //key haspMap序列化 template.setHashKeySerializer(redisSerializer); //value hashmap序列化 template.setHashValueSerializer(redisSerializer); return template; } } \"]},\"58\":{\"h\":\"RedisUtil工具类\",\"t\":[\"import org.springframework.data.redis.connection.RedisConnectionFactory; import org.springframework.data.redis.core.*; import org.springframework.data.redis.core.query.SortQuery; import org.springframework.stereotype.Component; import java.nio.charset.StandardCharsets; import java.util.ArrayList; import java.util.List; import java.util.Map; import java.util.Set; import java.util.concurrent.TimeUnit; @Component public class RedisUtil { public static RedisTemplate<String, String> redisTemplate; public static HashOperations<String, String, String> hashOperations; public static ValueOperations<String, String> valueOperations; public static ListOperations<String, String> listOperations; public static SetOperations<String, String> setOperations; public RedisUtil(RedisTemplate<String, String> redisTemplate) { RedisUtil.redisTemplate = redisTemplate; RedisUtil.hashOperations = redisTemplate.opsForHash(); RedisUtil.valueOperations = redisTemplate.opsForValue(); RedisUtil.listOperations = redisTemplate.opsForList(); RedisUtil.setOperations = redisTemplate.opsForSet(); } /** * 根据正则匹配key获取所有对应的key * * @param pattern 正则匹配路径 例如examUserId:* 获取 examUserId:101,examUserId:102,examUserId:103... * @return List<String> */ public static List<String> findMatchingKeys(String pattern) { List<String> matchedKeys = new ArrayList<>(); ScanOptions scanOptions = ScanOptions.scanOptions().match(pattern).count(100).build(); RedisConnectionFactory connectionFactory = redisTemplate.getConnectionFactory(); if (null == connectionFactory) { throw new RuntimeException(\\\"使用 ScanOptions 获取 keys 时 connectionFactory 获取为空\\\"); } try (Cursor<byte[]> cursor = connectionFactory.getConnection().scan(scanOptions)) { while (cursor.hasNext()) { byte[] rawKey = cursor.next(); String key = new String(rawKey, StandardCharsets.UTF_8); matchedKeys.add(key); } } return matchedKeys; } /** * 排序 * * @param sortQuery 排序条件 * @return List<String> */ public static List<String> sort(SortQuery<String> sortQuery) { return redisTemplate.sort(sortQuery); } /** * 给一个指定的 key 值附加过期时间 */ public static void expire(String key, long time) { redisTemplate.expire(key, time, TimeUnit.SECONDS); } /** * 根据key 获取过期时间 * * @param key 键 不能为null * @return 时间(秒) 返回 0 代表为永久有效 */ public static long getTime(String key) { Long expire = redisTemplate.getExpire(key, TimeUnit.SECONDS); return null == expire ? -1 : expire; } /** * 根据key 判断该key是否已过期 */ public static boolean hasKey(String key) { return Boolean.TRUE.equals(redisTemplate.hasKey(key)); } /** * 移除指定key 的过期时间 */ public static boolean persist(String key) { return Boolean.TRUE.equals(redisTemplate.boundValueOps(key).persist()); } /** * 从redis中删除指定的一个key * * @param key redisKey */ public static void del(String key) { redisTemplate.delete(key); } //region String类型 //- - - - - - - - - - - - - - - - - - - - - String类型 - - - - - - - - - - - - - - - - - - - - /** * 根据key获取值 * * @param key 键 * @return 值 */ public static Object get(String key) { return key == null ? null : valueOperations.get(key); } /** * 将值放入缓存 * * @param key 键 * @param value 值 */ public static void set(String key, String value) { valueOperations.set(key, value); } /** * 将值放入缓存并设置时间 * * @param key 键 * @param value 值 * @param time 时间(秒) -1为无期限 */ public static void set(String key, String value, long time) { valueOperations.set(key, value, time, TimeUnit.SECONDS); } /** * 批量添加 key (重复的键会覆盖) */ public static void batchSet(Map<String, String> keyAndValue) { valueOperations.multiSet(keyAndValue); } /** * 批量添加 key-value 只有在键不存在时,才添加 * map 中只要有一个key存在,则全部不添加 */ public static void batchSetIfAbsent(Map<String, String> keyAndValue) { valueOperations.multiSetIfAbsent(keyAndValue); } /** * 对一个 key-value 的值进行加减操作, * 如果该 key 不存在 将创建一个key 并赋值该 number * 如果 key 存在,但 value 不是长整型 ,将报错 */ public static Long increment(String key, long number) { return valueOperations.increment(key, number); } /** * 对一个 key-value 的值进行加减操作, * 如果该 key 不存在 将创建一个key 并赋值该 number * 如果 key 存在,但 value 不是 纯数字 ,将报错 */ public static Double increment(String key, double number) { return valueOperations.increment(key, number); } //endregion //region set类型 //- - - - - - - - - - - - - - - - - - - - - set类型 - - - - - - - - - - - - - - - - - - - - /** * 将数据放入set缓存 */ public static void sSet(String key, String value) { setOperations.add(key, value); } /** * 获取变量中的值 */ public static Set<String> members(String key) { return setOperations.members(key); } /** * 随机获取变量中指定个数的元素 */ public static void randomMembers(String key, long count) { setOperations.randomMembers(key, count); } /** * 随机获取变量中的元素 */ public static String randomMember(String key) { return setOperations.randomMember(key); } /** * 弹出变量中的元素 */ public static Object pop(String key) { return setOperations.pop(\\\"key\\\"); } /** * 获取变量中值的长度 */ public static long size(String key) { Long size = setOperations.size(key); return null == size ? -1 : size; } /** * 根据value从一个set中查询,是否存在 * * @param key 键 * @param value 值 * @return true 存在 false不存在 */ public static boolean sHasKey(String key, Object value) { return Boolean.TRUE.equals(setOperations.isMember(key, value)); } /** * 检查给定的元素是否在变量中。 */ public static boolean isMember(String key, Object obj) { return Boolean.TRUE.equals(setOperations.isMember(key, obj)); } /** * 转移变量的元素值到目的变量。 */ public static boolean move(String key, String value, String destKey) { return Boolean.TRUE.equals(setOperations.move(key, value, destKey)); } /** * 批量移除set缓存中元素 * * @param key set集合Key * @param values set集合中需要移除的元素值 */ public static void remove(String key, Object... values) { redisTemplate.opsForSet().remove(key, values); } /** * 通过给定的key求2个set变量的差值 * * @param key set集合Key * @param destKey set集合Key * @return Set<String> 两个set集合的差值 */ public static Set<String> difference(String key, String destKey) { return setOperations.difference(key, destKey); } /** * 弹出元素并删除 * * @param key 要弹出的key */ public static String popValue(String key) { return setOperations.pop(key); } //endregion //region hash类型 //- - - - - - - - - - - - - - - - - - - - - hash类型 - - - - - - - - - - - - - - - - - - - - /** * hash 添加一个hash类型的数据进行存储 * <p> * 给一个key设置所有相应的属性 */ public static void hmSet(String key, Map<String, String> map) { hashOperations.putAll(key, map); } /** * hash表设置一个值 * * @param key hash表Key * @param hashKey hash表字段Key * @param value hash表字段Key所对应的值 */ public static void hmSet(String key, String hashKey, String value) { hashOperations.put(key, hashKey, value); } /** * hash 获取某个key下所有的value */ public static List<String> hashValues(String key) { return hashOperations.values(key); } /** * 获取当前key下所有的键值对 * * @param key 要取的key值 * @return 返回所有键值对 */ public static Map<String, String> hashEntries(String key) { return hashOperations.entries(key); } /** * 获取某个 hash key 下指定hashKey的值 * * @param key key * @param hashKeys hashKeys * @return hashKey的value值 */ public static List<String> hashMultiGet(String key, List<String> hashKeys) { return hashOperations.multiGet(key, hashKeys); } /** * 验证指定 key 下 有没有指定的 hash key * * @param key hash表Key * @param hashKey hash表字段key * @return 存在为true, 不存在为false */ public static boolean hashKey(String key, String hashKey) { return redisTemplate.opsForHash().hasKey(key, hashKey); } /** * 获取指定key的值string * * @param key hash表Key * @param hashKey hash表字段key * @return String */ public static String hGet(String key, String hashKey) { return hashOperations.get(key, hashKey); } /** * 删除指定 hash 的 HashKey * * @param key hash表Key * @param hashKeys hash表字段Key(多个) * @return 删除成功的 数量 */ public static Long delete(String key, String... hashKeys) { return hashOperations.delete(key, (Object) hashKeys); } /** * 给指定 hash 的 hash key 做增减操作 * * @param key hash表Key * @param hashKey hash表字段Key,一般称为hashKey * @param number 增减值 * @return Double */ public static Double increment(String key, String hashKey, Double number) { return hashOperations.increment(key, hashKey, number); } /** * 获取 key 下的 所有 hash key 字段 * * @param key hash表Key * @return Set<String> */ public static Set<String> hashKeys(String key) { return hashOperations.keys(key); } /** * 获取指定 hash 下面的 键值对 数量 * * @param key hash表Key */ public static Long hashSize(String key) { return hashOperations.size(key); } //endregion //region list类型 //- - - - - - - - - - - - - - - - - - - - - list类型 - - - - - - - - - - - - - - - - - - - - /** * 在变量左边添加元素值 * * @param key listKey * @param value 元素值 */ public static void leftPush(String key, String value) { listOperations.leftPush(key, value); } /** * 获取集合指定位置的值。 * * @param key listKey * @param index 索引位置 * @return String */ public static String index(String key, long index) { return listOperations.index(key, index); } /** * 获取指定区间的值。 * * @param key listKey * @param start 起始区间 * @param end 结束区间 * @return List<String> */ public static List<String> range(String key, long start, long end) { return redisTemplate.opsForList().range(key, start, end); } /** * 把最后一个参数值放到指定集合的第一个出现中间参数的前面，如果中间参数值存在的话。 * * @param key listKey * @param pivot 某个值,将value放置于第一个该值前 * @param value 元素值 */ public static void leftPush(String key, String pivot, String value) { redisTemplate.opsForList().leftPush(key, pivot, value); } /** * 向左边批量添加参数元素。 * * @param key listKey * @param values 多个元素数组 */ public static void leftPushAll(String key, String... values) { redisTemplate.opsForList().leftPushAll(key, values); } /** * 向集合最右边添加元素。 * * @param key listKey * @param value 元素值 */ public static void rightPush(String key, String value) { listOperations.rightPush(key, value); } /** * 向集合最右边添加元素。 * * @param key listKey * @param value 元素值 * @param expireTime 过期时间 */ public static void rightPush(String key, String value, long expireTime) { listOperations.rightPush(key, value); expire(key, expireTime); } /** * 向左边批量添加参数元素。 * * @param key listKey * @param values 多个元素数组 */ public static void rightPushAll(String key, String... values) { listOperations.rightPushAll(key, values); } /** * 向已存在的集合中添加元素。 * * @param key listKey * @param value 元素值 */ public static void rightPushIfPresent(String key, String value) { listOperations.rightPushIfPresent(key, value); } /** * 向已存在的集合中添加元素。 */ public static long listLength(String key) { Long size = listOperations.size(key); return null == size ? -1 : size; } /** * 移除集合中的左边第一个元素。 * * @param key listKey */ public static void leftPop(String key) { listOperations.leftPop(key); } /** * 移除集合中左边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。 * * @param key redisKey * @param timeout 等待时间 * @param unit 时间类型 */ public static void leftPop(String key, long timeout, TimeUnit unit) { listOperations.leftPop(key, timeout, unit); } /** * 移除集合中右边的元素。 * * @param key 删除listKey中最右侧的元素 */ public static void rightPop(String key) { listOperations.rightPop(key); } /** * 移除集合中右边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。 * * @param key redisKey * @param timeout 等待时间 * @param unit 时间类型 */ public static void rightPop(String key, long timeout, TimeUnit unit) { listOperations.rightPop(key, timeout, unit); } //endregion } \"]},\"59\":{\"h\":\"rsa加密\",\"t\":[\"import org.apache.hc.client5.http.utils.Base64; import javax.crypto.Cipher; import java.io.ByteArrayOutputStream; import java.nio.charset.StandardCharsets; import java.security.*; import java.security.spec.PKCS8EncodedKeySpec; import java.security.spec.X509EncodedKeySpec; /** * RsaException 是我自己写的一个异常用于抛出并全局捕获,使用时可以自己定义. */ public class RsaUtil { /** * RSA最大加密明文大小 */ private static final int MAX_ENCRYPT_BLOCK = 117; /** * RSA最大解密密文大小 */ private static final int MAX_DECRYPT_BLOCK = 128; private static final KeyFactory keyFactory; static { try { keyFactory = KeyFactory.getInstance(\\\"RSA\\\"); } catch (NoSuchAlgorithmException e) { throw new RuntimeException(e); } } /** * 获取密钥对 * * @return 密钥对 */ public static KeyPair getKeyPair() throws Exception { KeyPairGenerator generator = KeyPairGenerator.getInstance(\\\"RSA\\\"); generator.initialize(1024); return generator.generateKeyPair(); } /** * 获取私钥 * * @param privateKey 私钥字符串 */ public static PrivateKey getPrivateKey(String privateKey) throws Exception { byte[] decodedKey = Base64.decodeBase64(privateKey.getBytes()); PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decodedKey); return keyFactory.generatePrivate(keySpec); } /** * 获取公钥 * * @param publicKey 公钥字符串 */ public static PublicKey getPublicKey(String publicKey) throws Exception { byte[] decodedKey = Base64.decodeBase64(publicKey.getBytes()); X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey); return keyFactory.generatePublic(keySpec); } /** * RSA加密 * * @param data 待加密数据 * @param publicKey 公钥 */ public static String encrypt(String data, String publicKey) { try { Cipher cipher = Cipher.getInstance(\\\"RSA\\\"); cipher.init(Cipher.ENCRYPT_MODE, getPublicKey(publicKey)); int inputLen = data.getBytes().length; ByteArrayOutputStream out = new ByteArrayOutputStream(); int offset = 0; byte[] cache; int i = 0; // 对数据分段加密 while (inputLen - offset > 0) { if (inputLen - offset > MAX_ENCRYPT_BLOCK) { cache = cipher.doFinal(data.getBytes(), offset, MAX_ENCRYPT_BLOCK); } else { cache = cipher.doFinal(data.getBytes(), offset, inputLen - offset); } out.write(cache, 0, cache.length); i++; offset = i * MAX_ENCRYPT_BLOCK; } byte[] encryptedData = out.toByteArray(); out.close(); // 获取加密内容使用base64进行编码,并以UTF-8为标准转化成字符串 // 加密后的字符串 return Base64.encodeBase64String(encryptedData); } catch (Exception e) { throw new RsaException(\\\"RSA 加密失败!\\\"); } } /** * RSA解密 * * @param data 待解密数据 * @param privateKey 私钥 */ public static String decrypt(String data, String privateKey) { try { Cipher cipher = Cipher.getInstance(\\\"RSA\\\"); cipher.init(Cipher.DECRYPT_MODE, getPrivateKey(privateKey)); byte[] dataBytes = Base64.decodeBase64(data); int inputLen = dataBytes.length; ByteArrayOutputStream out = new ByteArrayOutputStream(); int offset = 0; byte[] cache; int i = 0; // 对数据分段解密 while (inputLen - offset > 0) { if (inputLen - offset > MAX_DECRYPT_BLOCK) { cache = cipher.doFinal(dataBytes, offset, MAX_DECRYPT_BLOCK); } else { cache = cipher.doFinal(dataBytes, offset, inputLen - offset); } out.write(cache, 0, cache.length); i++; offset = i * MAX_DECRYPT_BLOCK; } byte[] decryptedData = out.toByteArray(); out.close(); // 解密后的内容 return new String(decryptedData, StandardCharsets.UTF_8); } catch (Exception e) { throw new RsaException(\\\"RSA 解密失败!\\\"); } } /** * 签名 * * @param data 待签名数据 * @param privateKey 私钥 * @return 签名 */ public static String sign(String data, String privateKey) throws Exception { byte[] keyBytes = getPrivateKey(privateKey).getEncoded(); PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes); KeyFactory keyFactory = KeyFactory.getInstance(\\\"RSA\\\"); PrivateKey key = keyFactory.generatePrivate(keySpec); Signature signature = Signature.getInstance(\\\"MD5withRSA\\\"); signature.initSign(key); signature.update(data.getBytes()); return new String(Base64.encodeBase64(signature.sign())); } /** * 验签 * * @param srcData 原始字符串 * @param publicKey 公钥 * @param sign 签名 * @return 是否验签通过 */ public static boolean verify(String srcData, String publicKey, String sign) throws Exception { byte[] keyBytes = getPublicKey(publicKey).getEncoded(); X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes); PublicKey key = keyFactory.generatePublic(keySpec); Signature signature = Signature.getInstance(\\\"MD5withRSA\\\"); signature.initVerify(key); signature.update(srcData.getBytes()); return signature.verify(Base64.decodeBase64(sign.getBytes())); } public static void demoMain() { try { // 生成密钥对 KeyPair keyPair = getKeyPair(); String privateKey = new String(Base64.encodeBase64(keyPair.getPrivate().getEncoded())); String publicKey = new String(Base64.encodeBase64(keyPair.getPublic().getEncoded())); System.out.println(\\\"私钥:\\\" + privateKey); System.out.println(\\\"公钥:\\\" + publicKey); // RSA加密 String data = \\\"待加密的文字内容\\\"; String encryptData = encrypt(data, publicKey); System.out.println(\\\"加密后内容:\\\" + encryptData); // RSA解密 String decryptData = decrypt(encryptData, privateKey); System.out.println(\\\"解密后内容:\\\" + decryptData); // RSA签名 String sign = sign(data, privateKey); // RSA验签 boolean result = verify(data, publicKey, sign); System.out.print(\\\"验签结果:\\\" + result); } catch (Exception e) { System.out.print(\\\"加解密异常\\\"); } } } \",\"ps: 生成一对密钥后就可以直接使用了,不要使用两次不同公钥对私钥进行解密.\"]},\"60\":{\"h\":\"Spring\",\"t\":[\"spring 优势\",\"方便解耦,简化开发 Spring 就是一个大工厂,可以将所有对象的创建和依赖关系的维护交给 Spring 管理。\",\"方便集成各种优秀框架 Spring 不排斥各种优秀的开源框架,其内部提供了对各种优秀框架(如 Struts2、Hibernate、MyBatis 等)的直接支持。\",\"降低 Java EE API 的使用难度 Spring 对 Java EE 开发中非常难用的一些 API(JDBC、JavaMail、远程调用等)都提供了封装,使这些 API 应用的难度大大降低。\",\"方便程序的测试 Spring 支持 JUnit4,可以通过注解方便地测试 Spring 程序。\",\"AOP 编程的支持 Spring 提供面向切面编程,可以方便地实现对程序进行权限拦截和运行监控等功能。\",\"声明式事务的支持 只需要通过配置就可以完成对事务的管理,而无须手动编程\",\"spring 核心容器由以下部分组成\",\"Spring-core 提供框架的基本组成部分,包括 IoC 和依赖注入功能\",\"Spring-beans 提供 BeanFactory,工厂模式的微妙实现,它移除了编码式单例的需要,并且可以把配置和依赖从实际编码逻辑中解耦。\",\"Spring-context 建立在由 core和 beans 模块的基础上建立起来的,它以一种类似于 JNDI 注册的方式访问对象。 Context 模块继承自 Bean 模块,并且添加了国际化(比如,使用资源束)、事件传播、资源加载和透明地创建上下文(比如,通过 Servelet 容器)等功能。Context 模块也支持 JavaEE 的功能,比如 EJB、JMX 和远程调用等。ApplicationContext 接口是 Context 模块的焦点。\",\"Spring-context-support 提供了对第三方集成到 Spring 上下文的支持,比如缓存(EhCache,Guava, JCache)、邮件(JavaMail)、调度(CommonJ, Quartz)、模板引擎(FreeMarker,JasperReports, Velocity)等\",\"Spring-expression(SpEL,Spring 表达式语言,Spring Expression Language)\"]},\"61\":{\"h\":\"控制反转(IOC)\",\"t\":[\"spring 提供了两种 IOC 容器\",\"BeanFactory \",\"BeanFactory 是基础类型的 IoC 容器,是一个管理 Bean 的工厂,它主要负责初始化各种 Bean,并调用它们的生命周期方法。\",\"BeanFactory 接口实现类最常见的是org.Springframework.beans.factory.xml.XmlBeanFactory,它是根据 XML 配置文件中的定义装配Bean 的.\",\"BeanFactory使用示例: BeanFactory beanFactory = new XmlBeanFactory(new FileSystemResource(Spring配置文件的名称));\",\"ApplicationContext \",\"ApplicationContext 是 BeanFactory 的子接口,也被称为应用上下文。它不仅提供了 BeanFactory 的所有功能,还添加了对 i18n(国际化)、资源访问、事件传播等方面的良好支持。\",\"ApplicationContext 接口有两个常用的实现类: \",\"ClassPathXmlApplicationContext——常用 该类从类路径 ClassPath 中寻找指定的 XML 配置文件,找到并装载完成 ApplicationContext 的实例化工作\",\"ClassPathXmlApplicationContext使用示例 Factory beanFactory = new XmlBeanFactory(new FileSystemResource(Spring配置文件的名称));\",\"FileSystemXmlApplicationContext 它与 ClassPathXmlApplicationContext 的区别是:在读取 Spring 的配置文件时,FileSystemXmlApplicationContext 不再从类路径中读取配置文件,而是通过参数指定配置文件的位置,它可以获取类路径之外的资源,如“D:\\\\application.xml”。 FileSystemXmlApplicationContext使用示例: ApplicationContext applicationContext = new FileSystemXmlApplicationContext(String configLocation);\"]},\"62\":{\"h\":\"配置文件中标签属性\",\"t\":[\"bean标签\",\"id: 自定义的对象名称 ,要求唯一\",\"name: bean对于的一个标识,一般使用id居多\",\"class: 类的完全限定名 [ 完全限定名: 包.类名]\",\"scope: 只有 singleton(单例)/prototype(多例) 两个值 \",\"singleton 默认值,单例:在容器启动的时候就已经创建了对象,而且整个容器只有为一个的一个对象\",\"prototype 多例,在使用对象的时候才创建对象,每次使用都创建新的对象\",\"lazy-init \",\"true/false 是否延迟创建对象,只针对单例有效\",\"true: 不延迟创建对象,容器加载的时候立即创建\",\"false: 默认加载,使用对象的时候才去创建对象\",\"init-method 创建对象之后执行的初始化方法\\\"\",\"destroy-method 对象销毁方法,调用容器destroy方法的时候执行\",\"constructor-arg [bean 子标签] (根据bean的构造器进行注入使用):\",\"name: 属性名称\",\"value: 属性值\",\"ref: 引用的 bean\",\"property[ bean 子标签]\",\"name: 属性名\",\"value: 属性值\",\"ref: 引用的 bean\"]},\"63\":{\"h\":\"DI注入\",\"t\":[\"DI 注入就是 bean 实例调用无参构造器创建对象并对其属性进行初始化,这个过程交给容器自动完成的称为注入. DI 注入有 4种方式分别为\",\"set注入 set 注入也叫设值注入, 是指通过 setter 方法传入被调用者的实例。 这种注入方式简单、直观,因而在Spring 的依赖注入中大量使用。\",\"构造器注入 构造注入是指,在构造调用者实例的同时,完成被调用者的实例化,使用构造器设置依赖关系。\",\"自动注入: 对于引用类型属性的注入,也可不在配置文件中显示的注入. 可以通过为标签 设置 autowire 属性值,为引用类型属性进行隐式自动注入(默认是不自动注入引用类型属性)。 根据自动注入判断标准的不同,可以分为两种: \",\"byName(根据名称自动注入) 当配置文件中被调用者 bean 的 id 值与代码中调用者 bean 类的属性名相同时,可使用byName 方式,让容器自动将被调用者 bean 注入给调用者 bean. 容器是通过调用者的 bean类的属性名与配置文件的被调用者 bean 的 id 进行比较而实现自动注入的。\",\"byType(根据类型自动注入) 配置文件中被调用者 bean 的 class 属性指定的类,要与代码中调用者 bean 类的某引用类型属性类型同源。 即要么相同,要么有 is-a 关系(子类,或是实现类)。 但这样的同源的被调用 bean 只能有一个。多于一个,容器就不知该匹配哪一个了.\"]},\"64\":{\"h\":\"注解注入\",\"t\":[\"@Vaule 属性注入 需要在属性上使用注解@Value,该注解的 value 属性用于指定要注入的值。\",\"byType自动注入@Autowired 需要在引用属性上使用注解@Autowired,该注解默认使用按类型自动装配 Bean 的方式。\",\"byName自动注入@Autowired和@Qualifier 需要在引用属性上联合使用注解@Autowired 与@Qualifier。 @Qualifier 的 value 属性用于指定要匹配的 Bean 的 id 值。\",\"自动注入@Resource Spring提供了对 jdk中@Resource注解的支持。使用该注解,要求 JDK 必须是 6 及以上版本。 @Resource 注解既可以按名称匹配Bean,也可以按类型匹配 Bean。默认是按名称注入。\",\" @Autowired(required = false) @Qualifier(\\\"personDao\\\") private PersonDao personDao; \"]},\"65\":{\"h\":\"Bean 控制注解\",\"t\":[\"@Component 声明当前是一个bean 并交给 spring 管理\",\"@Repository 用于dao实现类的的注解,在数据持久化对象中使用\",\"@Service 用户service实现类的注解\",\"@Controller 用于controller实现类的注解,该注解创建的对象可以作为处理器接收用户的请求。\",\"ps: @Repository,@Service,@Controller 是对@Component 注解的细化,标注不同层的对象。 即持久层对象,业务层对象,控制层对象。\"]},\"66\":{\"h\":\"AOP\",\"t\":[\"术语解释\",\"Target(目标对象): 要被增强的对象,一般是业务逻辑类的对象。\",\"Proxy(代理): 一个类被 AOP 织入增强后,就产生一个结果代理类。\",\"Aspect(切面): 表示增强的功能,就是一些代码完成的某个功能,非业务功能。 是切入点和通知的结合。\",\"Joinpoint(连接点): 所谓连接点是指那些被拦截到的点。 在Spring中,这些点指的是方法(一般是类中的业务方法),因为Spring只支持方法类型的连接点。\",\"Pointcut(切入点): 切入点指声明的一个或多个连接点的集合。通过切入点指定一组方法。 被标记为 final 的方法是不能作为连接点与切入点的。 因为最终的是不能被修改的,不能被增强的。\",\"Advice(通知/增强): 所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。通知定义了增强代码切入到目标代码的时间点,是目标方法执行之前执行,还是之后执行等。通知类型不同,切入时间不同。 通知的类型:前置通知,后置通知,异常通知,最终通知,环绕通知。 切入点定义切入的位置,通知定义切入的时间。\",\"Weaving(织入): 是指把增强应用到目标对象来创建新的代理对象的过程。 spring 采用动态代理织入,而 AspectJ 采用编译期织入和类装载期织入。\"]},\"67\":{\"h\":\"AspectJ 对 AOP 的实现\",\"t\":[\"AspectJ的通知类型\",\"前置通知\",\"后置通知\",\"环绕通知\",\"异常通知\",\"最终通知\",\"AspectJ 定义了专门的表达式用于指定切入点, 表达式的原型: execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern ?)\",\"modifiers-pattern 访问权限类型\",\"ret-type-pattern 返回值类型\",\"declaring-type-pattern 包名类名\",\"name-pattern(param-pattern) 方法名(参数类型和参数个数)\",\"throws-pattern 抛出异常类型\",\"？表示可选的部分\",\"语法: execution(访问权限 方法返回值 方法声明(参数) 异常类型) 访问权限和异常类型可以省略或用符号代替.\",\"符号解释:\",\"*: 0-多个任意字符\",\"..: 用在方法参数中,表示任意个参数；用在包名后,表示当前及其子包路径\",\"+: 用在类名后,表示当前及其子类；用在接口后,表示当前接口及其实现类\",\"切入点示例:\",\"execution(* com.sunset.service.*.*(..)) : 指定切入点为:定义在 service 包里的任意类的任意方法。\",\"execution(* com.sunset.service..*.*(..)): 指定切入点为: 定义在 service 包或者子包里的任意类的任意方法 .. 出现在类名中时,后面必须跟 *,表示包、子包下的所有类。\",\"execution(* com.sunset.service.IUserService+.*(..)): 指定切入点为: IUserService 若为接口,则为接口中的任意方法及其所有实现类中的任意方法 若为类,则为该类及其子类中的任意方法。\"]},\"68\":{\"h\":\"AOP 实现示例\",\"t\":[\"引入依赖\",\"<!--spring 核心依赖--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.2.13.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>5.2.13.RELEASE</version> </dependency> <!--测试依赖--> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> <scope>test</scope> </dependency> \",\"创建业务接口 与实现类\",\"/** * Service 接口 */ public interface PersonService { void add(); } /** * 实现类 */ @Service public class PersonServiceImpl implements PersonService { @Override public void add() { System.out.println(\\\"add ---\\\"); } } \",\"定义 aop 切面类\",\"import org.aspectj.lang.JoinPoint; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.*; import org.springframework.stereotype.Component; /* * 在定义好切面 Aspect 后,需要通知 Spring 容器,让容器生成“目标类+ 切面”的代理对象。 * 这个代理是由容器自动生成的,只需要在 Spring 配置文件中注册一个基于 aspectj 的自动代理生成器,其就会自动扫描到@Aspect 注解,并按通知类型与切入点,将其织入,并生成代理。 */ @Component @Aspect public class MyAspect { /** * 当较多的通知增强方法使用相同的 execution 切入点表达式时,编写、维护均较为麻烦。 * AspectJ 提供了@Pointcut 注解,用于定义 execution 切入点表达式。 * 其用法是,将@Pointcut 注解在一个方法之上,以后所有的 execution 的 value 属性值均 * 可使用该方法名作为切入点。代表的就是@Pointcut 定义的切入点。 * 这个使用@Pointcut 注解方法一般使用 private 的标识方法,即没有实际作用的方法。 */ @Pointcut(\\\"execution(* com.blackFire.service..*.*(..))\\\") private void pointCut() { } @Pointcut(\\\"execution(* com.blackFire.service..*.add*(..))\\\") private void pointCut2() { } /** * 声明前置通知 * */ @Before(\\\"pointCut()\\\") public void before(JoinPoint jp) { System.out.println(\\\"前置通知:在目标方法执行之前被调用的通知\\\"); String name = jp.getSignature().getName(); System.out.println(\\\"拦截的方法名称:\\\" + name); Object[] args = jp.getArgs(); System.out.println(\\\"方法的参数格式:\\\" + args.length); System.out.println(\\\"方法参数列表:\\\"); for (Object arg : args) { System.out.println(\\\"\\\\t\\\" + arg); } } /** * AfterReturning 注解声明后置通知 * value: 表示切入点表达式 * returning 属性表示 返回的结果,如果需要的话可以在后置通知的方法中修改结果 */ @AfterReturning(value = \\\"pointCut2()\\\",returning = \\\"result\\\") public Object afterReturn(Object result){ if(result!=null){ boolean res=(boolean)result; if(res){ result=false; } } System.out.println(\\\"后置通知:在目标方法执行之后被调用的通知,result=\\\"+result); return result; } /** * Around 注解声明环绕通知 * ProceedingJoinPoint 中的proceed方法表示目标方法被执行 */ @Around(value = \\\"pointCut()\\\") public Object around(ProceedingJoinPoint pjp) throws Throwable { System.out.println(\\\"环绕方法---目标方法的执行之前\\\"); Object proceed = pjp.proceed(); System.out.println(\\\"环绕方法---目标方法的执行之后\\\"); return proceed; } /** * AfterThrowing 注解声明异常通知方法 * value: 表示切入点表达式 * returning 属性表示 返回的结果,如果需要的话可以在后置通知的方法中修改结果 */ @AfterThrowing(value = \\\"pointCut()\\\",throwing = \\\"ex\\\") public void exception(JoinPoint jp,Throwable ex){ //一般会把异常发生的时间、位置、原有都记录下来 System.out.println(\\\"异常通知:在目标方法执行出现异常的时候才会别调用的通知,否则不执行\\\"); System.out.println(jp.getSignature()+\\\"方法出现异常,异常信息是:\\\"+ex.getMessage()); } /** * After 注解声明为最终通知 */ @After( \\\"pointCut()\\\") public void myFinally(){ System.out.println(\\\"最终通知:无论是否出现异常都是最后被调用的通知\\\"); } } \",\"在 spring 配置文件中注册 aspectj 的代理\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd \\\"> <!-- 配置包扫描, 在 base-package 中配置多个包扫描时使用 `;` 进行分割,也可以使用空格进行分割 --> <context:component-scan base-package=\\\"com.blackFire.domain;com.blackFire.service;com.blackFire.aop\\\"/> <!-- 开启 aspectj 使用--> <aop:aspectj-autoproxy proxy-target-class=\\\"true\\\"/> <!-- aop:aspectj-autoproxy的底层是由 AnnotationAwareAspectJAutoProxyCreator 实现的, 是基于 AspectJ 的注解适配自动代理生成器。 其工作原理是,aop:aspectj-autoproxy通过扫描找到@Aspect 定义的切面类,再由切面类根据切入点找到目标类的目标方法,再由通知类型找到切入的时间点。 --> </beans> \"]},\"69\":{\"h\":\"Spring Mvc\",\"t\":[\"Spring Mvc 组件\",\"DispatcherServlet: 前端控制器,也称为中央控制器或者核心控制器。 用户请求的入口控制器,它就相当于 mvc 模式中的c,DispatcherServlet 是整个流程控制的中心,相当于是 SpringMVC 的大脑,由它调用其它组件处理用户的请求,DispatcherServlet 的存在降低了组件之间的耦合性。 SpringMVC框架提供的该核心控制器需要我们在web.xml文件中配置。\",\"HandlerMapping: 处理器映射器 HandlerMapping也是控制器,派发请求的控制器。 我们不需要自己控制该类,但是他是springmvc运转历程中的重要的一个控制器。 HandlerMapping负责根据用户请求找到 Handler 即处理器(也就是我们所说的 Controller),SpringMVC 提供了不同的映射器实现不同的映射方式,\",\"Handler: 处理器 Handler 是继 DispatcherServlet 前端控制器的后端控制器,在DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理。 由于 Handler 涉及到具体的用户业务请求,所以一般情况需要程序员根据业务需求开发 Handler。(这里所说的 Handler 就是指我们的 Controller)\",\"HandlAdapter: 处理器适配器 通过 HandlerAdapter 对处理器进行执行,这是适配器模式的应用,通过扩展处理器适配器,支持更多类型的处理器,调用处理器传递参数等工作。\",\"ViewResolver: 视图解析器 ViewResolver 负责将处理结果生成 View 视图,ViewResolver 首先根据逻辑视图名解析成物理视图名称,即具体的页面地址,再生成 View 视图对象,最后对 View 进行渲染将处理结果通过页面展示给用户。 SpringMVC 框架提供了很多的 View 视图类型,包括:jstlView、freemarkerView、pdfView 等。\",\"spring Mvc 工作原理\",\"用户在浏览器中访问相应网页时,浏览器会向服务器发送一个请求,此时服务器中接收此请求的时前端控制器DispatcherServlet\",\"前端控制器DispatcherServlet接收到此请求后,像Spring中的映射器发起请求HandlerMapping中查询对应的处理类\",\"映射器找到相应的处理类时,将结果返回给前端控制器DispatCherServlet,此时前端控制会去找处理适配器HandlerAdaptor\",\"处理适配器接收到来自前端控制器DispathCherServlet后,对相应的处理器发起处理\",\"相应的处理器类接收到指令后,找到对应方法进行执行\",\"最终将执行结果返回给处理适配器HandlerAdaptor. [ 返回的结果可以是 modelAndView也可以是其他 ]\",\"处理适配器接收到返回的结果后,将结果直接返回给前端控制器DispathCherServlet\",\"前端控制器接收到来自处理适配器的结果后,将结果交给视图解析器ViewResolver进行解析\",\"视图解析器ViewResolver解析完成后将视图地址以及携带的数据返回给前端控制器\",\"前端控制接收到视图地址和数据后,请求相应的视图,拿到对应的视图\",\"最终将视图和数据反馈给用户请求的浏览器.\"]},\"70\":{\"h\":\"MVC 注解\",\"t\":[\"@Controller: 和在 spring 中是一样的,都是交给容器来创建对象,只不过在 springmvc中默认返回的是页面.如果在这个注解的类中想要返回对象,需要在方法上添加 @ResponseBody 注解.\",\"@ResponseBody: 可以添加到方法上,表示当前方法的返回值是对象,而不是转发页面\",\"@RestController: 这个注解可以理解为 @Controller 和 @ResponseBody 的组合. 使用这个注解后,在当前类中,默认返回的是对象而不是请求或转发的页面. 如果使用这个注解后想要转发页面,需要使用 ModelAndView 进行封装才可以转发.\",\"@RequestMapping: \",\"该注解可以定义在类上,也可以定义方法上,但是含义不同。 \",\"在类上时类似与一级请求,如果这个类处理的请求方法是 (\\\"/user/add\\\") (\\\"/user/update\\\") ... 这种就可以把 user 提取到类上作为一级请求使用.\",\"在方法上时,如果有一级请求的情况下,类似与二级请求 也就是 上面示例中 user 后面 不同的请求路径. 在方法上时,不指定 method 时是所有类型的请求都会进行处理.\",\"method 属性是由 RequestMethod 进行限定的,也就是 method 只能使用 RequestMethod 枚举类中的方法. RequestMethod 枚举类有 GET/POST/PUT/HEAD 等方法.\",\"@GetMapping/@PostMapping/@PutMapping 都是 @RequestMapping 的延申标签,分别对应各个请求.\"]},\"71\":{\"h\":\"拦截器\",\"t\":[\"自定义拦截器需要实现 HandlerInterceptor 接口. HandlerInterceptor 接口中的方法:\",\"preHandle(request,response, Object handler): 该方法在处理器方法执行之前执行。 返回值为boolean,若为true,则紧接着会执行处理器方法,且会将afterCompletion() 方法放入到一个专门的方法栈中等待执行。\",\"postHandle(request,response, Object handler,modelAndView): 该方法在处理器方法执行之后执行。 处理器方法若最终未被执行,则该方法不会执行。 由于该方法是在处理器方法执行完后执行,且该方法参数中包含 ModelAndView,所以该方法可以修改处理器方法的处理结果数据,且可以修改跳转方向。\",\"afterCompletion(request,response, Object handler, Exception ex): 当 preHandle()方法返回true时,会将该方法放到专门的方法栈中,等到对请求进行响应的所工作完成之后才执行该方法。 即该方法是在前端控制器渲染(数据填充)了响应页面之后执行的,此时对ModelAndView再操作也对响应无济于事。\",\"afterCompletion: 最后执行的方法,清除资源,例如在Controller方法中加入数据\",\"配置拦截器需要在 springMvc 配置文件中配置\",\"<mvc:interceptors> <!-- 这里可以同时配置多个拦截器,配置的顺序就是拦截器的拦截顺序 --> <mvc:interceptor> <!-- 拦截器要拦截的请求路径 拦截所有用/** --> <mvc:mapping path=\\\"/**\\\"/> <!-- 指定干活的拦截器 --> <bean class=\\\"com.blackFire.interceptor.MyInterceptor2\\\" id=\\\"myInterceptor\\\"></bean> </mvc:interceptor> <mvc:interceptor> <!-- 拦截器要拦截的请求路径 拦截所有用/** --> <mvc:mapping path=\\\"/**\\\"/> <!-- 指定干活的拦截器 --> <bean class=\\\"com.blackFire.interceptor.MyInterceptor2\\\" id=\\\"myInterceptor2\\\"></bean> </mvc:interceptor> </mvc:interceptors> <!-- 如果有多个拦截器的时候: preHandle: 按照配置前后顺序执行 postHandle: 按照配置前后逆序执行 afterCompletion: 按照配置前后逆序执行 --> \"]},\"72\":{\"h\":\"Spring SpringMvc 联合使用\",\"t\":[\"导入依赖\",\"<dependencies> <!-- SpringMvc所需的依赖 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.2.13.RELEASE</version> </dependency> <!-- SpringServlet, 因为spring底层封装的还是servlet所以还是需要此依赖的. --> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>4.0.1</version> <scope>provided</scope> </dependency> <!-- json所需依赖 --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-core</artifactId> <version>2.9.0</version> </dependency> <!-- json所需依赖 --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.9.0</version> </dependency> </dependencies> <build> <plugins> <plugin> <!-- maven编译 --> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.0</version> <configuration> <source>1.8</source> <target>1.8</target> </configuration> </plugin> <!--tomcat插件--> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.2</version> <configuration> <path>/</path> <port>8080</port> </configuration> </plugin> </plugins> </build> \",\"spring 的配置文件 application.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd \\\"> <!--spring的配置文件:除了控制器之外的bean对象都在这里扫描--> <context:component-scan base-package=\\\"com.xxx.domain;com.xxx.service\\\"/> </beans> \",\"spring Mvc 配置文件 applicationMvc.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:mvc=\\\"http://www.springframework.org/schema/mvc\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd \\\"> <!--springmvc的配置文件:控制器的bean对象都在这里扫描--> <context:component-scan base-package=\\\"com.xxx.controller\\\"/> <!--视图解析器--> <bean id=\\\"internalResourceViewResolver\\\" class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"> <!-- 配置前缀 --> <property name=\\\"prefix\\\" value=\\\"/\\\"></property> <!-- 配置后缀 --> <property name=\\\"suffix\\\" value=\\\".jsp\\\"></property> </bean> <!-- annotation-driven是一种简写形式,也可以手动配置替代这种简写形式,简写形式可以让初学者快速应用默认配置方案。 该注解会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是springMVC为@Controller分发用户请求所必须的,解决了@Controller注解使用的前提配置。 同时它还提供了: 数据绑定支持,@NumberFormatannotation支持,@DateTimeFormat支持,@Valid支持,读写XML的支持(JAXB,读写JSON的支持(Jackson)。 我们处理响应ajax请求时,就使用到了对json的支持(配置之后,在加入了jackson的core和mapper包之后,不写配置文件也能自动转换成json)。 --> <mvc:annotation-driven/> <!-- 配置静态资源 location 静态资源所在 mapping 资源的请求 一般都是在静态资源型下的所有 也就是 -> /静态资源/** --> <mvc:resources mapping=\\\"/imgs/**\\\" location=\\\"/imgs/\\\" /> <mvc:resources mapping=\\\"/js/**\\\" location=\\\"/js/\\\" /> <mvc:resources mapping=\\\"/css/**\\\" location=\\\"/css/\\\" /> </beans> \",\"在 webapp/WEN-INF 下的 web.xml 中启用 spring 和 spring mvc 的配置\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <!--spring的配置--> <context-param> <!--contextConfigLocation: 表示用于加载 Bean的配置文件 --> <param-name>contextConfigLocation</param-name> <!-- 指定spring配置文件的位置 这个配置文件也有一些默认规则,它的配置文件名默认就叫 applicationContext.xml,如果将这个配置文件放在 WEB-INF 目录下那么这里就可以不用指定配置文件位置,只需要指定监听器就可以。 这段配置是 Spring 集成 Web 环境的通用配置；一般用于加载除控制器层的 Bean (如dao、service 等),以便于与其他任何Web框架集成。 --> <param-value>classpath:application.xml</param-value> </context-param> <listener> <!-- ContextLoaderListener 默认监听 WEB-INF文件夹下的applicationContext.xml文件, 而我们写上面的 contextConfigLocation 就是为了让他监听到我们 resources 下的 applicationContext.xml 文件 --> <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> </listener> <!-- SpringMVC的配置 前端控制器:所有的请求都会经过此控制器,然后通过此控制器分发到各个分控制器. 前端控制器本质上还是一个Servlet,因为SpringMVC底层就是使用Servlet编写的 --> <servlet> <servlet-name>dispatcherServlet</servlet-name> <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> <!-- 创建前端控制器的时候读取springmvc配置文件启动ioc容器 --> <init-param> <param-name>contextConfigLocation</param-name> <param-value>classpath:springmvc.xml</param-value> </init-param> <!-- Tomcat启动就创建此对象 --> <load-on-startup>1</load-on-startup> </servlet> <!-- 配置拦截路径url,所有以.do结尾的请求都会被前端控制器拦截处理 --> <servlet-mapping> <servlet-name>dispatcherServlet</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> <!-- 配置中文乱码的过滤器 --> <filter> <filter-name>characterEncodingFilter</filter-name> <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class> <!--指定字符集--> <init-param> <param-name>encoding</param-name> <param-value>UTF-8</param-value> </init-param> <!--强制request使用字符集encoding--> <init-param> <param-name>forceRequestEncoding</param-name> <param-value>true</param-value> </init-param> <!--强制response使用字符集encoding--> <init-param> <param-name>forceResponseEncoding</param-name> <param-value>true</param-value> </init-param> </filter> <filter-mapping> <filter-name>characterEncodingFilter</filter-name> <url-pattern>/*</url-pattern> </filter-mapping> </web-app> \",\"示例 Controller\",\"/* * 前端参数示例 userName=\\\"张\\\"&userName=\\\"李\\\"\\\"&userName=\\\"王\\\" * 可以使用 @RequestParam(\\\"前端参数名\\\") 接收,示例如下 */ @GetMapping(value = \\\"test01\\\") public void test01(@RequestParam(\\\"userName\\\") List<String> name){} // 也可以使用数组形式进行接收,示例如下 @GetMapping(value = \\\"test02\\\") public void test02(String[] teamName){} /** * 当前端传入的参数与 java 对象中的属性一致时 * 前端示例: id=1&name=\\\"张\\\"&age=18 * java对象属性有 [id,name,age] * 可以直接使用 java 对象进行接收 */ @RequestMapping(value = \\\"test03\\\") public void test03(User user){} /** * 当前端传入参数以请求路径时传入 * 示例路径: http://locahost:8080/param/test04/1001/zhang/15 * 可以使用 @PathVariable 接收 */ @RequestMapping(\\\"test04/{id}/{name}/{age}\\\") public void test04( @PathVariable(\\\"id\\\") Integer personId, @PathVariable(\\\"name\\\") String name, @PathVariable(\\\"age\\\") String age){} /** * 当请求的参数不一致时,可以使用@RequestParam对其进行矫正 * value 属性表示请求中的参数名称 * required 表述赋值是否必须 * true表示必须赋值, * false表示可以不赋值 */ @RequestMapping(\\\"test04\\\") public void test04( @RequestParam(value = \\\"userId\\\",required = true) Integer id, @RequestParam(\\\"userName\\\") String name, @RequestParam(\\\"userLocation\\\")String loc){} \"]},\"73\":{\"h\":\"Spring 事务\",\"t\":[\"事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量\",\"事务隔离级别\",\"事务传播行为\",\"事务默认超时时限\",\"事务隔离级别常量,这些常量均是以 ISOLATION_开头\",\"DEFAULT: 采用 DB 默认的事务隔离级别。 MySql 的默认为REPEATABLE_READ； Oracle默认为READ_COMMITTED。\",\"READ_UNCOMMITTED: 读未提交,未解决任何并发问题。\",\"READ_COMMITTED: 读已提交,解决脏读,存在不可重复读与幻读。\",\"REPEATABLE_READ: 可重复读。解决脏读、不可重复读,存在幻读\",\"SERIALIZABLE: 串行化。不存在并发问题。\",\"事务传播行为常量, 所谓事务传播行为是指,处于不同事务中的方法在相互调用时,执行期间事务的维护情况。 如,A 事务中的方法 doSome()调用 B 事务中的方法 doOther(),在调用执行期间事务的维护情况,就称为事务传播行为。事务传播行为是加在方法上的。\",\"Propagation.REQUIRED 当前没有事务的时候,就会创建一个新的事务,如果当前有事务就直接加入该事务,比较常用的设置\",\"Propagation.SUPPORTS 如果当前有事务就直接加入该事务,当前没有事务的时候就以非事务方式执行\",\"Propagation.MANDATORY 支持当前事务,如果当前有事务就直接加入该事务,当前没有事务的时候就抛出异常\",\"Propagation.REQUIRES_NEW 创建新事务,无论当前是否有事务都会创建新的\",\"PROPAGATION_NESTED\",\"PROPAGATION_NEVER\",\"PROPAGATION_NOT_SUPPORTED\",\"默认事务超时时限: 常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限,sql 语句的执行时长。\",\"声明式事务控制, Spring提供的对事务的管理,就叫做声明式事务管理。 如果用户需要使用spring的声明式事务管理,在配置文件中配置即可:不想使用的时候直接移除配置。 这种方式实现了对事务控制的最大程度的解耦。 声明式事务管理,核心实现就是基于AOP。 Spring中提供了对事务的管理,事务必须在service层统一控制。\",\"事务的粗细粒度:\",\"细粒度:对方法中的某几行的代码进行开启提交回滚；\",\"粗粒度:对整个方法进行开启提交回滚；\",\"Spring中的aop只能对方法进行拦截,所有我们也就针对方法进行事务的控制。\",\"如果只有单条的查询语句,可以省略事务\",\"如果一次执行的是多条查询语句, 例如统计结果、报表查询,必须开启事务。\"]},\"74\":{\"h\":\"注解形式控制事务\",\"t\":[\"导入依赖\",\"<dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>com.mchange</groupId> <artifactId>c3p0</artifactId> <version>0.9.5.2</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> \",\"在 service 实现类的方法上添加事务注解\",\"import com.sunset.service.PersonService; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Propagation; import org.springframework.transaction.annotation.Transactional; @Service public class PersonServiceImpl implements PersonService { /** * @Transactional 属性 说明: * readOnly:是否只读 * * rollbackFor={Exception.class}: 遇到什么异常会回滚 * * propagation事务的传播: * Propagation.REQUIRED:当前没有事务的时候,就会创建一个新的事务；如果当前有事务,就直 接加入该事务,比较常用的设置 * Propagation.SUPPORTS:支持当前事务,如果当前有事务,就直接加入该事务；当前没有事务的 时候,就以非事务方式执行 * Propagation.MANDATORY:支持当前事务,如果当前有事务,就直接加入该事务；当前没有事务的 时候,就抛出异常 * Propagation.REQUIRES_NEW:创建新事务,无论当前是否有事务都会创建新的 * * isolation=Isolation.DEFAULT:事务的隔离级别:默认是数据库的隔离级别 * */ @Transactional(propagation = Propagation.REQUIRED,rollbackFor = {Exception.class}) @Override public void add() { System.out.println(\\\"add ---\\\"); } } \",\"在配置文件中配置事务开启\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd \\\"> <!-- 链接数据库的数据源--> <bean id=\\\"dataSource\\\" class=\\\"com.mchange.v2.c3p0.ComboPooledDataSource\\\"> <property name=\\\"driverClass\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"jdbcUrl\\\" value=\\\"\\\"/> <property name=\\\"user\\\" value=\\\"\\\" /> <property name=\\\"password\\\" value=\\\"\\\" /> </bean> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\" /> </bean> <tx:annotation-driven transaction-manager=\\\"transactionManager\\\" /> </beans> \"]},\"75\":{\"h\":\"SpringSSM整合\"},\"76\":{\"h\":\"Spring 整合 mybatis(SSM)\"},\"77\":{\"h\":\"依赖导入\",\"t\":[\" <!-- 注意这个 packaging 标签必须存在,不然 tomcat 插件一启动就结束了 --> <packaging>war</packaging> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <maven.compiler.target>1.8</maven.compiler.target> <maven.compiler.source>1.8</maven.compiler.source> <spring.version>5.2.15.RELEASE</spring.version> <servlet-api.version>3.0.1</servlet-api.version> <mysql.version>8.0.28</mysql.version> <druid.version>1.2.3</druid.version> <pagehelper.version>5.1.10</pagehelper.version> <log4j.version>1.2.17</log4j.version> <mybatis.version>3.5.6</mybatis.version> <mybatis.spring.version>1.3.3</mybatis.spring.version> <jackson.version>2.9.6</jackson.version> <lombok.version>1.16.14</lombok.version> <junit.version>4.12</junit.version> <lombok.version>1.18.24</lombok.version> </properties> <dependencies> <!-- spring start --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> <version>${spring.version}</version> </dependency> <dependency> <!-- tomcat7 插件依赖 和视图解析器也需要此依赖 --> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>${servlet-api.version}</version> <scope>provided</scope> </dependency> <dependency> <!-- 开启事务使用 --> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>${spring.version}</version> </dependency> <!-- spring end --> <!-- Mybatis start --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <dependency> <!-- alibaba 的 druid --> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>${druid.version}</version> </dependency> <dependency> <!-- github 上的分页插件 --> <groupId>com.github.pagehelper</groupId> <artifactId>pagehelper</artifactId> <version>${pagehelper.version}</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>${mybatis.version}</version> </dependency> <!-- mybatis-spring 与spring组合为 spring ssm 时需要引入,因为 --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>${mybatis.spring.version}</version> </dependency> <!-- Mybatis end --> <dependency> <!-- Jackson Json处理工具包 --> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>${jackson.version}</version> </dependency> <dependency> <!-- lombok 依赖(减少get/set生成) --> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>${lombok.version}</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.2</version> <configuration> <path>/</path> <port>80</port> <uriEncoding>UTF-8</uriEncoding> </configuration> </plugin> </plugins> </build> \"]},\"78\":{\"h\":\"数据库连接配置文件\",\"t\":[\"文件名: db.properties\",\"database.driver=com.mysql.cj.jdbc.Driver database.url=jdbc:mysql://ip:3306/tableName?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT database.username=mysqlUserName database.password=mysqlUserPwd \"]},\"79\":{\"h\":\"配置spring\",\"t\":[\"mybatis.xml(如果不需要可以不创建) 除了 setting 用到 mybatis.xml 文件其他都交给 spring 来管理\"]},\"80\":{\"h\":\"创建spring配置文件application.xml\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd \\\"> <!-- 将这些包中添加注解之后对象的创建权限交给Spring容器--> <context:component-scan base-package=\\\"org.sunset.cn.entity;org.sunset.cn.service;\\\" /> <!-- 读取db 配置文件 --> <context:property-placeholder location=\\\"classpath*:db.properties\\\"/> <!-- 配置数据库链接数据源--> <bean id=\\\"dataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"driverClassName\\\" value=\\\"${database.driver}\\\"/> <property name=\\\"url\\\" value=\\\"${database.url}\\\"/> <property name=\\\"username\\\" value=\\\"${database.username}\\\"/> <property name=\\\"password\\\" value=\\\"${database.password}\\\"/> </bean> <!-- 配置 sqlSessionFactory Bean --> <bean id=\\\"sqlSessionFactory\\\" class=\\\"org.mybatis.spring.SqlSessionFactoryBean\\\"> <!-- 如果有mybatis的单独配置文件,需要在此插入 --> <property name=\\\"configLocation\\\" value=\\\"classpath:mybatis.xml\\\"/> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\"/> <property name=\\\"plugins\\\"> <array> <!-- 分页 --> <bean class=\\\"com.github.pagehelper.PageInterceptor\\\"> <property name=\\\"properties\\\"> <value> reasonable = true </value> </property> </bean> </array> </property> </bean> <!-- 配置 mapper 扫描 --> <bean id=\\\"mapperScannerConfigurer\\\" class=\\\"org.mybatis.spring.mapper.MapperScannerConfigurer\\\"> <property name=\\\"sqlSessionFactoryBeanName\\\" value=\\\"sqlSessionFactory\\\"/> <property name=\\\"basePackage\\\" value=\\\"org.sunset.cn.mapper\\\" /> </bean> <!-- 通过注解方式实现事务 --> <tx:annotation-driven transaction-manager=\\\"transactionManager\\\"/> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\" /> </bean> </beans> \"]},\"81\":{\"h\":\"创建mvc的配置文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:mvc=\\\"http://www.springframework.org/schema/mvc\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd \\\"> <!--springmvc的配置文件:控制器的bean对象都在这里扫描--> <context:component-scan base-package=\\\"org.sunset.cn.controller\\\"/> <mvc:annotation-driven/> <!--视图解析器--> <bean id=\\\"internalResourceViewResolver\\\" class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"> <property name=\\\"prefix\\\" value=\\\"/html/\\\"/> <property name=\\\"suffix\\\" value=\\\".html\\\"/> </bean> <!--静态资源处理--> <mvc:resources mapping=\\\"/html/**\\\" location=\\\"/html/\\\"/> </beans> \"]},\"82\":{\"h\":\"创建 web.xml\",\"t\":[\"idea中需要创建 webapp/WEB-INF/web.xml 来使用. 也就是需要配置 web.\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <!-- 监听器 监听 spring 配置文件 --> <context-param> <param-name>contextConfigLocation</param-name> <param-value>classpath*:application.xml</param-value> </context-param> <listener> <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> </listener> <servlet> <servlet-name>DispatcherServlet</servlet-name> <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> <init-param> <param-name>contextConfigLocation</param-name> <param-value>classpath*:springMvcApplication-local.xml</param-value> </init-param> </servlet> <servlet-mapping> <servlet-name>DispatcherServlet</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> </web-app> \"]},\"83\":{\"h\":\"创建一个 controller 测试下是否成功\",\"t\":[\"import lombok.RequiredArgsConstructor; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.*; @Controller @ResponseBody @RequestMapping(\\\"user\\\") public class UserController { @GetMapping(value = \\\"\\\") public String queryAllOrById()) { return \\\"success\\\"; } } \",\"ps: 启动时使用 tomcat 插件启动,也可以去 idea 的启动配置里选择 mavan ,再在页面中配置运行命令为 tomcat7:run.\"]},\"84\":{\"h\":\"springBoot配置swagger\",\"t\":[\"本文使用的是knife4j(页面好看!!)\",\"导入依赖\",\" <!--region swagger-knife4j--> <dependency> <groupId>com.github.xiaoymin</groupId> <artifactId>knife4j-openapi2-spring-boot-starter</artifactId> <version>${knife4j.version}</version> </dependency> <!--endregion--> \"]},\"85\":{\"h\":\"swaggerConfig\",\"t\":[\"import com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j; import io.swagger.annotations.ApiOperation; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.service.ApiInfo; import springfox.documentation.service.Contact; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc; @EnableKnife4j @Configuration @EnableSwagger2WebMvc public class SwaggerConfig { /** * 创建API */ @Bean() public Docket createRestApi() { return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .host(\\\"https://127.0.0.1:8001\\\") .groupName(\\\"0.1 版本\\\") .select() .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) .paths(PathSelectors.any()) .build(); } /** * 添加摘要信息 */ private ApiInfo apiInfo() { Contact contact = new Contact(\\\"黑色的小火苗\\\", \\\"https://test.com/test\\\", \\\"test@163.com\\\"); // 用ApiInfoBuilder进行定制 return new ApiInfoBuilder() // 设置标题 .title(\\\"月光后台接口服务\\\") // 描述 .description(\\\"描述：月光后台接口服务\\\") // 作者信息 .version(\\\"0.1\\\") .contact(contact) .build(); } } \"]},\"86\":{\"h\":\"webConfig配置swagger\",\"t\":[\"import cn.moonlight.framework.interceptor.HeaderResolveInterceptor; import cn.moonlight.framework.interceptor.AuthorityInterceptor; import cn.moonlight.framework.resolver.UserAnnotationArgumentResolver; import lombok.RequiredArgsConstructor; import org.springframework.context.annotation.Configuration; import org.springframework.web.method.support.HandlerMethodArgumentResolver; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; import java.util.Arrays; import java.util.List; @Configuration @RequiredArgsConstructor public class WebConfig implements WebMvcConfigurer { private final AuthorityInterceptor authorityInterceptor; private final HeaderResolveInterceptor headerResolveInterceptor; private static final List<String> exclude_path = Arrays.asList(\\\"/login/*\\\", \\\"/error\\\", \\\"/swagger-resources\\\", \\\"/swagger-resources/configuration/ui\\\", \\\"/doc.html\\\", \\\"/webjars/css/**\\\", \\\"/webjars/js/**\\\", \\\"/favicon.ico\\\"); /** * 接口放开以下接口的访问 */ public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(authorityInterceptor) .addPathPatterns(\\\"/**\\\") .excludePathPatterns(exclude_path); registry.addInterceptor(headerResolveInterceptor) .addPathPatterns(\\\"/**\\\") .excludePathPatterns(exclude_path); } /** * 放开以下静态资源的访问 */ public void addResourceHandlers(ResourceHandlerRegistry registry) { // swagger配置 registry.addResourceHandler(\\\"/**\\\") .addResourceLocations(\\\"classpath:/static/\\\"); registry.addResourceHandler(\\\"/swagger-ui.html\\\", \\\"doc.html\\\") .addResourceLocations(\\\"classpath:/META-INF/resources/\\\"); registry.addResourceHandler(\\\"/webjars/**\\\") .addResourceLocations(\\\"classpath:/META-INF/resources/webjars/\\\"); } } \"]},\"87\":{\"h\":\"全局异常拦截器\",\"t\":[\"我们也可以拦截自定义的异常类,下面是一个异常类的demo\",\"public class RsaException extends RuntimeException { public RsaException(String message) { super(message); } } \",\"全局拦截异常案例\",\"import cn.moonlight.exception.ExcelException; import cn.moonlight.exception.RsaException; import cn.moonlight.response.ResponseBo; import cn.moonlight.response.ResultCode; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.MethodArgumentNotValidException; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.ResponseBody; import org.springframework.web.bind.annotation.RestControllerAdvice; import java.io.ByteArrayOutputStream; import java.io.PrintStream; import java.util.Objects; @Slf4j @RestControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(RsaException.class) public ResponseBo<?> rasException(RsaException e) { log.error(\\\"异常信息：{}，{}\\\", e.getMessage(), e.getClass()); return ResponseBo.error(ResultCode.EXCEL_ERROR, e.getMessage()); } @ExceptionHandler(MethodArgumentNotValidException.class) public ResponseBo<?> bindException(MethodArgumentNotValidException e) { log.error(\\\"异常信息：{}，{}\\\", e.getMessage(), e.getClass()); return ResponseBo.error(Objects.requireNonNull(e.getBindingResult().getFieldError()).getDefaultMessage()); } @ExceptionHandler(Exception.class) @ResponseBody public ResponseBo<?> handleException(Exception exception) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); exception.printStackTrace(new PrintStream(byteArrayOutputStream)); log.info(byteArrayOutputStream.toString()); log.error(\\\"异常信息：\\\" + exception.getMessage()); return ResponseBo.error(ResultCode.ERROR_CODE, exception.getMessage()); } } \"]},\"88\":{\"h\":\"SpringBoot 拦截器注入数据\"},\"89\":{\"h\":\"创建注解\",\"t\":[\"import java.lang.annotation.*; @Target(ElementType.PARAMETER) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface CurrentUser {} \"]},\"90\":{\"h\":\"创建拦截器\",\"t\":[\"/** * redis 中存在的key */ public class KeyConstant { public final static String REQUEST_HEADER_TOKEN_KEY = \\\"token\\\"; public final static String USER_SESSION_KEY = \\\"CARBON_TOKEN_\\\"; public final static long TOKEN_TIMEOUT = 86400; public final static String CURRENT_USER_KEY = \\\"CURRENT_USER\\\"; public final static String NOW_CARBON_PRICE = \\\"NOW_CARBON_PRICE_\\\"; } import com.alibaba.fastjson2.JSONObject; import lombok.extern.slf4j.Slf4j; import org.springframework.context.annotation.Configuration; import org.springframework.stereotype.Component; import org.springframework.web.servlet.HandlerInterceptor; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @Slf4j @Component public class HeaderResolveInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) { try { //获取当前用户redis session, UserSession 就是我们在redis中存储的数据.具体怎么从redis获取可以根据自己情况进行获取 Integer userId = TokenUtil.getUserId(request.getHeader(KeyConstant.REQUEST_HEADER_TOKEN_KEY)); MybatisMetaObjectHandler.THREAD_LOCAL.set(userId); UserSession userSession = JSONObject.parseObject((String) RedisUtil.get(KeyConstant.USER_SESSION_KEY + userId), UserSession.class); log.info(\\\"[ preHandle ] 获取的 userSession 为: {}\\\", userSession); if (userSession != null) { //绑定到request request.setAttribute(KeyConstant.CURRENT_USER_KEY, userSession); } } catch (Exception e) { log.error(\\\"解析请求头失败:{}\\\", e.toString()); } return true; } } \"]},\"91\":{\"h\":\"接口注入数据\",\"t\":[\"import lombok.extern.slf4j.Slf4j; import org.springframework.core.MethodParameter; import org.springframework.stereotype.Component; import org.springframework.web.bind.support.WebDataBinderFactory; import org.springframework.web.context.request.NativeWebRequest; import org.springframework.web.context.request.RequestAttributes; import org.springframework.web.method.support.HandlerMethodArgumentResolver; import org.springframework.web.method.support.ModelAndViewContainer; @Slf4j @Component public class UserAnnotationArgumentResolver implements HandlerMethodArgumentResolver { /** * 判断当前请求方法中是否存在 @CurrUser/@CurrOrg 注解,存在则返回 true 不存在则返回 false * * @param methodParameter 参数集合 * @return 存在则返回 true 不存在则返回 false */ @Override public boolean supportsParameter(MethodParameter methodParameter) { return methodParameter.hasParameterAnnotation(CurrentUser.class) && methodParameter.getParameterType().equals(UserSession.class); } /** * @param methodParameter 入参集合 * @param modelAndViewContainer model 和 view * @param nativeWebRequest web相关 * @param webDataBinderFactory 入参解析 * @return 参数值 */ @Override public Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) { CurrentUser currUser = methodParameter.getParameterAnnotation(CurrentUser.class); UserSession session = (UserSession) nativeWebRequest.getAttribute(KeyConstant.CURRENT_USER_KEY, RequestAttributes.SCOPE_REQUEST); log.info(\\\" [ resolveArgument ] 获取的 userSession 为: {}\\\", session); if (null != currUser && null != session) { return session; } return null; } } \"]},\"92\":{\"h\":\"将拦截器进行注册\",\"t\":[\"import lombok.RequiredArgsConstructor; import org.springframework.context.annotation.Configuration; import org.springframework.web.method.support.HandlerMethodArgumentResolver; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; import java.util.Arrays; import java.util.List; @Configuration @RequiredArgsConstructor public class WebConfig implements WebMvcConfigurer { private final AuthorityInterceptor authorityInterceptor; private final HeaderResolveInterceptor headerResolveInterceptor; private static final List<String> exclude_path = Arrays.asList(\\\"/login/*\\\", \\\"/error\\\", \\\"/swagger-resources\\\", \\\"/swagger-resources/configuration/ui\\\", \\\"/doc.html\\\"); public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(headerResolveInterceptor) .addPathPatterns(\\\"/**\\\") .excludePathPatterns(exclude_path); } @Override public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) { // 这里切记使用的是new而不是spring管理的实体,否则会注入失败. resolvers.add(new UserAnnotationArgumentResolver()); } } \"]},\"93\":{\"h\":\"springBoot统一数据返回类\"},\"94\":{\"h\":\"code枚举类\",\"t\":[\"public enum ResultCode { OK(200, \\\"OK\\\"), ERROR_CODE(-1, \\\"请求失败\\\"), public final int code; public final String msg; ResultCode(int code, String msg) { this.code = code; this.msg = msg; } } \"]},\"95\":{\"h\":\"统一返回数据类\",\"t\":[\"import lombok.Getter; import java.io.Serializable; /** * 统一的 HTTP 响应格式。<br/> * code 为 \\\"ok\\\" 表示业务调用成功，否则是失败的错误码，如果有多个则以逗号分隔。<br/> * data 是业务数据，如果失败了则是 null。 * <p/> */ @Getter public class ResponseBo<T> implements Serializable { /** * 响应码 */ private final int code; /** * 错误信息 */ private final String message; /** * 相应数据 */ private final T data; private ResponseBo(int code, String message, T data) { this.code = code; this.data = data; this.message = message; } public static ResponseBo<?> error() { return error(ResultCode.ERROR_CODE, null); } public static <T> ResponseBo<T> error(String msg) { return error(ResultCode.ERROR_CODE, msg); } public static <T> ResponseBo<T> error(ResultCode code, String msg) { return all(code, msg, null); } public static <T> ResponseBo<T> error(ResultCode code) { return all(code, code.msg, null); } public static ResponseBo<?> ok() { return all(ResultCode.OK, null, null); } public static <T> ResponseBo<T> ok(T data) { return all(ResultCode.OK, null, data); } /** * 全参数自定义 * * @param enumCode 错误的枚举 * @param data 返回的数据实体 * @param message 错误信息 * @param <T> 泛型 * @return ResponseBo<T> */ public static <T> ResponseBo<T> all(ResultCode enumCode, String message, T data) { return new ResponseBo<>(enumCode.code, message, data); } } \"]},\"96\":{\"h\":\"springBoot实现自定义脱敏注解\"},\"97\":{\"h\":\"创建脱敏枚举\",\"t\":[\"/** * 隐私数据类型枚举 */ public enum PrivacyTypeEnum { /** * 身份证号 */ ID_CARD(\\\"(\\\\\\\\d{4})\\\\\\\\d{10}(\\\\\\\\w{4})\\\", \\\"$1*****$2\\\"), /** * 手机号 */ PHONE(\\\"(\\\\\\\\d{3})\\\\\\\\d{4}(\\\\\\\\d{4})\\\", \\\"$1****$2\\\"), /** * 邮箱 */ EMAIL(\\\"(\\\\\\\\w?)(\\\\\\\\w+)(\\\\\\\\w)(@\\\\\\\\w+\\\\\\\\.[a-z]+(\\\\\\\\.[a-z]+)?)\\\", \\\"$1****$3$4\\\"); public final String regex; public final String replacement; PrivacyTypeEnum(String regex, String replacement) { this.regex = regex; this.replacement = replacement; } } \"]},\"98\":{\"h\":\"创建脱敏注解处理类\",\"t\":[\"import cn.moonlight.common.enums.PrivacyTypeEnum; import cn.moonlight.common.interfaces.PrivacyEncrypt; import cn.moonlight.common.util.StringUtil; import com.alibaba.excel.util.StringUtils; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.BeanProperty; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.JsonSerializer; import com.fasterxml.jackson.databind.SerializerProvider; import com.fasterxml.jackson.databind.ser.ContextualSerializer; import lombok.AllArgsConstructor; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import java.io.IOException; import java.util.Objects; @Slf4j @NoArgsConstructor @AllArgsConstructor public class PrivacySerializer extends JsonSerializer<String> implements ContextualSerializer { private PrivacyEncrypt encrypt; @Override public com.fasterxml.jackson.databind.JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException { // 如果bean为null那么直接设置为null if (property == null) { return prov.findNullValueSerializer(null); } // 如果不是String类型或者当前属性没有脱敏注解那么直接设置为原始处理的BeanProperty PrivacyEncrypt privacyEncrypt = property.getAnnotation(PrivacyEncrypt.class); if (!Objects.equals(property.getType().getRawClass(), String.class) || privacyEncrypt == null) { return prov.findNullValueSerializer(property); } // 走到这里说明是String类型且存在脱敏注解那么将脱敏注解设置为当前String的处理就好 return new PrivacySerializer(privacyEncrypt); } @Override public void serialize(String value, JsonGenerator gen, SerializerProvider serializers) throws IOException { // 如果值为空那么直接退出不再处理 if (StringUtils.isBlank(value)) return; // 如果处理类型不为空那么根据处理类型进行处理 if (encrypt.type() != null) { PrivacyTypeEnum privacyTypeEnum = encrypt.type(); gen.writeString(value.replaceAll(privacyTypeEnum.regex, privacyTypeEnum.replacement)); return; } // 如果处理类型为空那么根据正则表达式和替换字符串进行处理 if (StringUtils.isNotBlank(encrypt.regex()) && StringUtils.isNotBlank(encrypt.replacement())) { gen.writeString(value.replaceAll(encrypt.regex(), encrypt.replacement())); return; } // 如果处理类型为空且正则表达式和替换字符串都为空那么根据前缀不脱敏长度和后缀不脱敏长度进行处理 if (encrypt.prefixNoMaskLen() >= 0 && encrypt.suffixNoMaskLen() > 0) { gen.writeString(StringUtil.privacyEncrypt(value, encrypt.prefixNoMaskLen(), encrypt.suffixNoMaskLen(), encrypt.symbol())); } } } \"]},\"99\":{\"h\":\"创建脱敏注解\",\"t\":[\"import cn.moonlight.common.enums.PrivacyTypeEnum; import cn.moonlight.common.serializer.PrivacySerializer; import com.fasterxml.jackson.annotation.JacksonAnnotationsInside; import com.fasterxml.jackson.databind.annotation.JsonSerialize; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; /** * 自定义数据脱敏注解 */ @Target(ElementType.FIELD) // 作用在字段上 @Retention(RetentionPolicy.RUNTIME) // class文件中保留，运行时也保留，能通过反射读取到 @JacksonAnnotationsInside // 表示自定义自己的注解PrivacyEncrypt @JsonSerialize(using = PrivacySerializer.class) // 该注解使用序列化的方式 public @interface PrivacyEncrypt { /** * 脱敏数据类型（没给默认值，所以使用时必须指定type） */ PrivacyTypeEnum type(); /** * 正则表达式 */ String regex() default \\\"\\\"; /** * 表达式替换 */ String replacement() default \\\"\\\"; /** * 前置不需要打码的长度 */ int prefixNoMaskLen() default 0; /** * 后置不需要打码的长度 */ int suffixNoMaskLen() default 0; /** * 用什么打码 */ char symbol() default '*'; } \"]},\"100\":{\"h\":\"SpringBoot定时任务\"},\"101\":{\"h\":\"定时任务\",\"t\":[\"需要在springBoot启动类上添加 @EnableScheduling 注解表示开启定时任务\",\"在一个方法上添加 @Scheduled 注解表示当前任务是定时指定该方法, @Scheduled 需要传入 cron 表达式\",\"cron 表达式可以在 https://qqe2.com/cron 调试cron表达式是否是想要的执行\"]},\"102\":{\"h\":\"案例\",\"t\":[\"import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.springframework.scheduling.annotation.Scheduled; import org.springframework.stereotype.Component; @Slf4j @Component public class PullDataTask { @Scheduled(cron = \\\"0 5 0 * * ?\\\") // 每天零点5分调用 public void pullData() {} } \"]},\"103\":{\"h\":\"cron表达式解释\",\"t\":[\"cron 表达式格式: {秒数} {分钟} {小时} {日期} {月份} {星期} {年份(可为空)}\",\"{秒数}{分钟} ==> 允许值范围: 0~59 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常\",\"\\\"*\\\" 代表每隔1秒钟触发；\",\"\\\",\\\" 代表在指定的秒数触发，比如\\\"0,15,45\\\"代表0秒、15秒和45秒时触发任务\",\"\\\"-\\\"代表在指定的范围内触发，比如\\\"25-45\\\"代表从25秒开始触发到45秒结束触发，每隔1秒触发1次\",\"\\\"/\\\"代表触发步进(step)，\\\"/\\\"前面的值代表初始值(\\\"\\\"等同\\\"0\\\")，后面的值代表偏移量，比如\\\"0/20\\\"或者\\\"/20\\\"代表从0秒钟开始，每隔20秒钟触发1次，即0秒触发1次，20秒触发1次，40秒触发1次；\\\"5/20\\\"代表5秒触发1次，25秒触发1次，45秒触发1次；\\\"10-45/20\\\"代表在[10,45]内步进20秒命中的时间点触发，即10秒触发1次，30秒触发1次\",\"{小时} ==> 允许值范围: 0~23 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常,占位符和秒数一样\",\"{日期} ==> 允许值范围: 1~31 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常\",\"{星期} ==> 允许值范围: 1~7 (SUN-SAT),1代表星期天(一星期的第一天)，以此类推，7代表星期六(一星期的最后一天)，不允许为空值，若值不合法，调度器将抛出SchedulerException异常\",\"{年份} ==> 允许值范围: 1970~2099 ,允许为空，若值不合法，调度器将抛出SchedulerException异常\",\"注意：除了{日期}和{星期}可以使用\\\"?\\\"来实现互斥，表达无意义的信息之外，其他占位符都要具有具体的时间含义，且依赖关系为：年->月->日期(星期)->小时->分钟->秒数\"]},\"104\":{\"h\":\"corn 经典表达式\",\"t\":[\"\\\"30 **** ?\\\" 每半分钟触发任务\",\"\\\"30 10 ***?\\\" 每小时的10分30秒触发任务\",\"\\\"30 10 1**?\\\" 每天1点10分30秒触发任务\",\"\\\"30 10 1 20* ?\\\" 每月20号1点10分30秒触发任务\",\"\\\"30 10 1 20 10 ? *\\\" 每年10月20号1点10分30秒触发任务\",\"\\\"30 10 1 20 10 ? 2011\\\" 2011年10月20号1点10分30秒触发任务\",\"\\\"30 10 1 ? 10* 2011\\\" 2011年10月每天1点10分30秒触发任务\",\"\\\"30 10 1 ? 10 SUN 2011\\\" 2011年10月每周日1点10分30秒触发任务\",\"\\\"15,30,45****?\\\" 每15秒，30秒，45秒时触发任务\",\"\\\"15-45****?\\\" 15到45秒内，每秒都触发任务\",\"\\\"15/5****?\\\" 每分钟的每15秒开始触发，每隔5秒触发一次\",\"\\\"15-30/5****?\\\" 每分钟的15秒到30秒之间开始触发，每隔5秒触发一次\",\"\\\"0 0/3** *?\\\" 每小时的第0分0秒开始，每三分钟触发一次\",\"\\\"0 15 10 ?* MON-FRI\\\" 星期一到星期五的10点15分0秒触发任务\",\"\\\"0 15 10 L *?\\\" 每个月最后一天的10点15分0秒触发任务\",\"\\\"0 15 10 LW* ?\\\" 每个月最后一个工作日的10点15分0秒触发任务\",\"\\\"0 15 10 ? *5L\\\" 每个月最后一个星期四的10点15分0秒触发任务\",\"\\\"0 15 10 ?* 5#3\\\" 每个月第三周的星期四的10点15分0秒触发任务\",\"ps: corn在线表达式网站: https://qqe2.com/cron\"]},\"105\":{\"h\":\"工厂模式\"},\"106\":{\"h\":\"介绍\",\"t\":[\"定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。\"]},\"107\":{\"h\":\"案例\",\"t\":[\"我们可以根据情况来创建绘画形状为需求来说明并实现工厂模式.\"]},\"108\":{\"h\":\"创建工厂接口\",\"t\":[\"public interface Shape { /** * 判断是否应该自身执行 * * @param shape 枚举类 * @return boolean 应该本身执行是返回true 不应该执行返回false */ boolean supportsInternal(ShapeEnum shape); /** * 执行绘画操作 */ void draw(); } \",\"创建枚举\",\"public enum ShapeEnum { /** * 圆形 */ CIRCLE, /** * 矩形 */ RECTANGLE, /** * 正方形 */ SQUARE; } \"]},\"109\":{\"h\":\"创建相应形状类\",\"t\":[\"/** * 圆形形状类 */ public class Circle implements Shape { @Override public boolean supportsInternal(ShapeEnum shape) { return ShapeEnum.CIRCLE.equals(shape); } @Override public void draw() { System.out.println(\\\"Inside Circle::draw() method.\\\"); } } \",\"/** * 正方形形状类 */ public class Square implements Shape { @Override public boolean supportsInternal(ShapeEnum shape) { return ShapeEnum.SQUARE.equals(shape); } @Override public void draw() { System.out.println(\\\"Inside Square::draw() method.\\\"); } } \",\"/** * 矩形形状类 */ public class Rectangle implements Shape { @Override public boolean supportsInternal(ShapeEnum shape) { return ShapeEnum.RECTANGLE.equals(shape); } @Override public void draw() { System.out.println(\\\"Inside Rectangle::draw() method.\\\"); } } \"]},\"110\":{\"h\":\"使用工厂创建对应形状\",\"t\":[\"import java.util.Objects; import java.util.ServiceLoader; public class ShapeFactory { public static Shape getShape(ShapeEnum shapeEnum) { ServiceLoader<Shape> shapes = ServiceLoader.load(Shape.class); Shape result = null; for (Shape shape : shapes) { if (shape.supportsInternal(shapeEnum)) { result = shape; break; } } // 最终应该是有匹配结果的,如果没有匹配结果那么我应该直接报错回去 return Objects.requireNonNull(result); } } \",\"使用ServiceLoader扫描相关对象时我们需要在META-INF/services下创建以Shape的全路径为名的文件[以我的为例文件名就是 org.bamboo.shape.Shape],将要扫描的文件全路径写入到对应文件\",\"org.bamboo.shape.Circle org.bamboo.shape.Rectangle org.bamboo.shape.Square \",\"ps: ServiceLoader 为java本身的工具类所以不需要担心兼容问题但是jdk应该是需要1.8以上.并且读取顺序为从第一行顺序向下读取.\"]},\"111\":{\"h\":\"测试是否可行\",\"t\":[\"public class ShapeTest { public static void main(String[] args) { ShapeFactory.getShape(ShapeEnum.CIRCLE).draw(); // 输出结果为: Inside Circle::draw() method. // 说明这个方法是可行的. } } \"]},\"112\":{\"h\":\"责任链模式\",\"t\":[\"现在模拟一个需求:\",\"需要检查一个产品的是否合格,需要从三个方面进行检查.\",\"长度 必须为15\",\"宽度 必须为15\",\"高度 必须为10\",\"如果我们直接进行判断的话后续如果产品又添加了其他检查类型,那么我们可能会一直if判断下去.\",\"此时我们就可以使用责任链模式,将每个检查流程进行分隔处理且互相不影响各自的执行.\"]},\"113\":{\"h\":\"实现代码\"},\"114\":{\"h\":\"创建产品实体类\",\"t\":[\"package org.bamboo.product.entity; import lombok.Data; import lombok.experimental.Accessors; import org.bamboo.product.handler.HeightQCHandler; import org.bamboo.product.handler.LengthQCHandler; import org.bamboo.product.handler.WidthQCHandler; @Data @Accessors(chain = true) public class Product { private Integer id; /** * 产品长度 */ private Integer length; /** * 产品宽度 */ private Integer width; /** * 产品高度 */ private Integer height; } \"]},\"115\":{\"h\":\"创建责任链抽象类\",\"t\":[\"package org.bamboo.product.handler; import org.bamboo.product.entity.Product; public abstract class QCHandler { protected QCHandler nextHandler; /** * 检查产品 * * @param product 产品 * @return Boolean */ public abstract Boolean check(Product product); /** * 设置下一级处理器 * * @param nextHandler 下一级处理器 */ public void setNextHandler(QCHandler nextHandler) { this.nextHandler = nextHandler; } /** * 判断是否存在下一级处理器 * * @param product 产品 * @return Boolean */ protected Boolean checkNextHandler(Product product) { //没有下一级处理器，直接返回false if (nextHandler == null) return false; // 存在下一级处理器，则校验下一级处理器 return nextHandler.check(product); } } \"]},\"116\":{\"h\":\"创建长度处理器\",\"t\":[\"package org.bamboo.product.handler; import org.bamboo.product.entity.Product; public class LengthQCHandler extends QCHandler { { setNextHandler(new WidthQCHandler()); } @Override public Boolean check(Product product) { if (product.getLength() != 15) { System.out.println(\\\"长度检查不合格!\\\"); return false; } return checkNextHandler(product); } } \"]},\"117\":{\"h\":\"创建宽度处理器\",\"t\":[\"import org.bamboo.product.entity.Product; public class WidthQCHandler extends QCHandler { { setNextHandler(new HeightQCHandler()); } @Override public Boolean check(Product product) { if (product.getWidth() != 15) { System.out.println(\\\"宽度检查不合格!\\\"); return false; } return checkNextHandler(product); } } \"]},\"118\":{\"h\":\"创建高度处理器\",\"t\":[\"import org.bamboo.product.entity.Product; public class HeightQCHandler extends QCHandler { @Override public Boolean check(Product product) { if (product.getHeight() != 15) { System.out.println(\\\"高度检查不合格!\\\"); return false; } return checkNextHandler(product); } } \"]},\"119\":{\"h\":\"调用测试\",\"t\":[\" public static void main(String[] args) { Product product = new Product().setLength(15).setWidth(3).setHeight(1); LengthQCHandler lengthQCHandler = new LengthQCHandler(); // 这里是使用默认写好的内置责任链来使用 System.out.println(lengthQCHandler.check(product)); // 这里是自己手动去设置责任链调用,已知顺序的情况可以直接默认一条. HeightQCHandler heightQCHandler = new HeightQCHandler(); WidthQCHandler widthQCHandler = new WidthQCHandler(); lengthQCHandler.setNextHandler(heightQCHandler); heightQCHandler.setNextHandler(widthQCHandler); System.out.println(lengthQCHandler.check(product)); } \"]},\"120\":{\"h\":\"工厂创建责任链\",\"t\":[\"import org.bamboo.product.handler.LengthQCHandler; import org.bamboo.product.handler.QCHandler; import java.util.List; public class QCFactory { /** * 获取默认执行责任练 * * @return QCHandler */ public static QCHandler getDefaultQCHandler() { return new LengthQCHandler(); } /** * 根据list顺序生成责任链并返回第一个 * * @param handlerList 责任链集合 * @return QCHandler */ public static QCHandler getQCHandler(List<QCHandler> handlerList) { if (handlerList.isEmpty()) { throw new RuntimeException(\\\"handlerList is empty\\\"); } QCHandler qcHandler = null; if (handlerList.size() > 1) { int item = handlerList.size() - 1; while (item > 0) { handlerList.get(item - 1).setNextHandler(handlerList.get(item)); item--; } } qcHandler = handlerList.get(0); return qcHandler; } } \"]},\"121\":{\"h\":\"错误收集\"},\"122\":{\"h\":\"Lombok错误\"},\"123\":{\"h\":\"继承时出现警告解决\",\"t\":[\"springboot项目根下创建lombok.config文件(与启动类平级). 添加以下内容即可不再提示该警告.\",\"# lombok 配置类 config.stopbubbling=true lombok.equalsandhashcode.callsuper=call \"]},\"124\":{\"h\":\"swagger/knife4j\"},\"125\":{\"h\":\"请求接口文档地址失败解决\",\"t\":[\"原因: 我们使用拦截器后需要注册,注册后会将所有的请求都进行拦截,如果我们不将所有请求拦截就不会出现这些个情况,但是我们是不能放开所有请求的,所以我们需要在全局配置中进行配置.\",\"@Configuration @RequiredArgsConstructor public class WebConfig implements WebMvcConfigurer { private final AuthorityInterceptor authorityInterceptor; // 全局拦截器 // 需要放开的接口请求,因为我这边使用的是knife4j的4.3版本所以放开的有一些多. private static final List<String> exclude_path = Arrays.asList(\\\"/login/*\\\", \\\"/error\\\", \\\"/swagger-resources\\\", \\\"/swagger-resources/configuration/ui\\\", \\\"/doc.html\\\"); public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(authorityInterceptor) .addPathPatterns(\\\"/**\\\") .excludePathPatterns(exclude_path); } public void addResourceHandlers(ResourceHandlerRegistry registry) { // swagger配置 registry.addResourceHandler(\\\"/**\\\") .addResourceLocations(\\\"classpath:/static/\\\"); registry.addResourceHandler(\\\"swagger-ui.html\\\", \\\"doc.html\\\") .addResourceLocations(\\\"classpath:/META-INF/resources/\\\"); registry.addResourceHandler(\\\"/webjars/**\\\") .addResourceLocations(\\\"classpath:/META-INF/resources/webjars/\\\"); } } \"]},\"126\":{\"h\":\"knife4j使用html导出接口出现打不开问题解决\",\"t\":[\"导出html文件后页面怎么刷新都无法正常显示页面,f12打开devtools中网络请求时发现vue.js/antd.min.js两个文件找不到. 这里我们可以打开导出的html文件找多两个js引用,将其替换为字节公共库中的资源就可以打开. 这里示例展示我这边找到的文件替换的js 字节公共库地址: https://cdn.bytedance.com/\",\" <script src=\\\"https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue/2.6.9/vue.js\\\"></script> <script src=\\\"https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/ant-design-vue/1.5.0/antd.min.js\\\"></script> \"]},\"127\":{\"h\":\"MySql\"},\"128\":{\"h\":\"find_in_set\",\"t\":[\"find_in_set 使用方式与 in 相似只不过参数变为了使用 ,分割的字符串,且写法也有一些区别.\",\"/* 示例 当在select时会如果搜索值在strlist中存在那么会返回查询的值,如下例就是会返回1 */ select find_in_set(1,'1,2,3,4'); /* 示例 当在where作为条件时则是会返回满足条件的数据 当查询的数据为2时则是查询name中包含2的数据就会返回 */ select * from ((select '1,2,3,4' as name) union (select '1,2,3' as name) union (select '1,2' as name) union (select '1' as name)) users where find_in_set(2,name) \"]},\"129\":{\"h\":\"递归查询\",\"t\":[\"父级递归查询子级\",\"WITH RECURSIVE cte as ( select id,name,parent_id from '要查询的表' where id = '父级id' union ALL select temp.id,temp.name,temp.parent_id from '要查询的表' temp,cte c where temp.parent_id = c.id ) select * from cte \",\"子id递归查询父级\",\"WITH RECURSIVE cte as ( select id,name,parent_id from org where id = '子集id' union ALL select temp.id,temp.name,temp.parent_id from org temp,cte c where temp.id = c.parent_id ) select * from cte \",\"输入父级获取子父级的组织拼接\",\"/* 输出示例: 测试顶级部门 测试顶级部门->测试部门1 测试顶级部门->测试部门1 -> 测试部门2 测试顶级部门->测试部门1 -> 测试部门2 -> 测试部门3 */ WITH RECURSIVE cte as ( select id,name,parent_id,name as path from '要查询的表' where id = '父级id' union ALL select temp.id,temp.name,temp.parent_id, concat(c.path ,'->',temp.name )as path from '要查询的表' temp,cte c where temp.parent_id = c.id ) select * from cte \",\"输入子集获取从父级到当前子集的组织拼接\",\"/* 输出示例: 测试顶级部门 测试顶级部门->测试部门1 测试顶级部门->测试部门1 -> 测试部门2 测试顶级部门->测试部门1 -> 测试部门2 -> 测试部门3 */ WITH RECURSIVE cte as ( select id,name,parent_id,name as path from '要查询的表' where id = '子集ID' union ALL select temp.id,temp.name,temp.parent_id, concat(temp.name ,'->', c.path )as path from '要查询的表' temp,cte c where temp. id = c.parent_id ) select * from cte \",\"ps: 前四个写法需要注意 MySql 版本为 8.0 以上,可以使用 select version(); 来查看版本号\"]},\"130\":{\"h\":\"ddl\",\"t\":[\"-- 创建数据库,数据库不存在时创建 create database if not exists `database_name` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; \"]},\"131\":{\"h\":\"PostgreSql\"},\"132\":{\"h\":\"不常用sql方法\"},\"133\":{\"h\":\"查询所有表中是否存在某个字段\",\"t\":[\"select * from information_schema.columns WHERE table_schema = 'public' and column_name = '要查询的字段名'; \"]},\"134\":{\"h\":\"自增序列\",\"t\":[\"-- 生成自增序列 定义自增序列时一般使用 表名称_id_seq 来表示 CREATE SEQUENCE \\\"public\\\".\\\"xxx_id_seq\\\" INCREMENT 1 MINVALUE 1 NO MAXVALUE START 1 CACHE 1; -- 将自增序列以下面这种形式弄好后,放至ID 默认值即可 nextval('xxx_id_seq'::regclass) -- 查询序列最大值 select nextval('xxx_id_seq'::regclass) --将当前序列值设置为当前表最大ID值 SELECT setval( 'xxx_id_seq', (SELECT MAX(id) FROM `表名称` ) +1 ); \"]},\"135\":{\"h\":\"递归查询\"},\"136\":{\"h\":\"父级递归查询子级\",\"t\":[\"WITH RECURSIVE cte as ( select id,name,parent_id from '要查询的表' where id = '父级ID' union all select temp.id,temp.name,temp.parent_id from '要查询的表' temp INNER JOIN cte c on temp.parent_id = c.id ) select * from cte \"]},\"137\":{\"h\":\"子级递归查询父级\",\"t\":[\"WITH RECURSIVE cte as ( select id,name,parent_id from '要查询的表' where id = '子集ID' union all select temp.id,temp.name,temp.parent_id from '要查询的表' temp INNER JOIN cte c on temp.id = c.parent_id ) select * from cte \"]},\"138\":{\"h\":\"根据父级获取子父级的组织拼接\",\"t\":[\"/* 输出示例: 测试顶级部门 测试顶级部门->测试部门1 测试顶级部门->测试部门1 -> 测试部门2 测试顶级部门->测试部门1 -> 测试部门2 -> 测试部门3 */ WITH RECURSIVE cte as ( select id,name,parent_id,cast(name as TEXT) as path from '要查询的表' where id = '父级ID' and is_delete = 0 union all select temp.id,temp.name,temp.parent_id,cast( c.path|| '->'|| temp.name as TEXT)path from '要查询的表' temp INNER JOIN cte c on temp.parent_id = c. id where temp.is_delete = 0 ) select * from cte \"]},\"139\":{\"h\":\"根据子集获取从父级到当前子集的组织拼接\",\"t\":[\"/* 输出示例: 测试顶级部门 测试顶级部门->测试部门1 测试顶级部门->测试部门1 -> 测试部门2 测试顶级部门->测试部门1 -> 测试部门2 -> 测试部门3 */ WITH RECURSIVE cte as ( select id,name,parent_id,cast(name as TEXT) as path from '要查询的表' where id = '子集ID' union all select temp.id,temp.name,temp.parent_id,cast( temp.name || '->'|| c.path as TEXT)path from '要查询的表' temp INNER JOIN cte c on temp.id = c. parent_id ) select * from cte \"]},\"140\":{\"h\":\"Json操作\",\"t\":[\"可以参考官网Json 字符串的解释\"]},\"141\":{\"h\":\"json和 jsonb操作符\"},\"142\":{\"h\":\"额外jsonb操作符\"},\"143\":{\"h\":\"Centos7安装emqx\",\"t\":[\"我们可以去 emqx 中下载对应的版本,当然你也可以去看 emqx 官方文档.\",\"下载对应的安装包可以去 emqx官网下载\",\"wget https://www.emqx.com/zh/downloads/broker/5.0.9/emqx-5.0.9-el7-amd64.rpm sudo yum install emqx-5.0.9-el7-amd64.rpm emqx start # 或者执行: sudo systemctl start emqx \"]},\"144\":{\"h\":\"错误解决\"},\"145\":{\"h\":\"中给的解决方法\",\"t\":[\"wget https://www.openssl.org/source/openssl-1.1.1c.tar.gz tar zxf openssl-1.1.1c.tar.gz cd openssl-1.1.1c ./config make test # 执行测试；如果输出 PASS 则继续 # 如果这一步报 Parse errors: No plan found in TAP output 那么执行 yum install perl-Test-Simple 后消失 make install # 为了确保库的引用可以之心下面两行,当然可以选择不执行 ln -s /usr/local/lib64/libssl.so.1.1 /usr/lib64/libssl.so.1.1 ln -s /usr/local/lib64/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1 \"]},\"146\":{\"h\":\"如果Centos8使用tar包进行安装可能会遇到下面的错误 解决此错误有两个方法我个人是用第二个方法解决的\",\"t\":[\"运行 yum install libtinfo.so.5\",\"在 tar 解压的包中找到 dynlibs 将这个目录下的 libtinfo.so.5 复制到 /usr/lib64 下即可解决\"]},\"147\":{\"h\":\"Centos7安装Mysql8\"},\"148\":{\"h\":\"下载所需要的安装包\",\"t\":[\"本次下载包所用的是清华大学镜像站中提供的mysql包. 下载包时需要下载四个类型的Rpm文件\",\"mysql-community-libs-8.0.33-1.el7.x86_64.rpm\",\"mysql-community-common-8.0.33-1.el7.x86_64.rpm\",\"mysql-community-server-8.0.33-1.el7.x86_64.rpm\",\"mysql-community-client-8.0.33-1.el7.x86_64.rpm\"]},\"149\":{\"h\":\"安装流程\",\"t\":[\"查看与卸载原有的包\",\"# 查看是否存在安装包 rpm -qa|grep mariadb # 存在的话卸载当前已安装的包 rpm -e --nodeps mariadb-libs \",\"安装RPM包\",\"sudo rpm -ivh mysql*.rpm --nodeps --force \",\"启动Mysql和查看是否启动成功\",\"systemctl start mysqld systemctl status mysqld \",\"获取临时密码\",\"grep 'temporary password' /var/log/mysqld.log # 执行后 # [root@VM-24-10-centos temp]# grep 'temporary password' /var/log/mysqld.log # 2023-06-30T01:28:56.524220Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: tXdMBrtik2<d \",\"修改Root密码\",\"-- 目前Mysql8 不支持简单密码了,需要使用简单密码时需要另做修改 ALTER USER 'root'@'localhost' IDENTIFIED BY 'mysql密码'; \",\"授权远程链接\",\"SHOW databases; USE mysql; UPDATE user SET host = \\\"%\\\" WHERE user='root'; SELECT host, user, authentication_string, plugin FROM user; FLUSH privileges; \",\"Mysql8 设置简单密码\",\"SHOW VARIABLES LIKE 'validate_password%'; set global validate_password.policy=0; set global validate_password.length=1; ALTER USER 'root'@'localhost' IDENTIFIED BY '123456'; \"]},\"150\":{\"h\":\"定时运行备份脚本\",\"t\":[\"写shell脚本时不要再win下写好再放进去.不然会出现奇怪的问题\",\"#!/bin.sh # mysql备份使用的shell脚本 #includ <studio.h> #includ <time.h> #includ <stdlib.h> #includ <sys/time.h> log=\\\"/usr/local/mysql-back/mysql-echo.log\\\" echo $(date +\\\"%Y-%m-%d %H:%M:%S\\\")\\\"脚本执行开始\\\">> $log; data_time=$(date '+%Y%m%d') path=\\\"/usr/local/mysql-back/${data_time}\\\" if [ ! -d $path ]; then echo \\\"文件不存在! 创建文件夹\\\" >> $log sudo mkdir $path fi mysqldump -uroot -p`Mysql密码` 导出的数据库名称 > /usr/local/mysql-back/${data_time}/导出的数据库名称.sql echo \\\"执行结束\\\" >> $log echo \\\"开始移除7天之前的备份数据\\\" >> $log # 移除几天前就将 7 改为几天 daysAgo=$(date -d \\\"7 day ago \\\"$date '+%Y%m%d'); function del_directory(){ if [ $(($1)) -lt $(($daysAgo)) ]; then echo \\\"移除 ${1} 目录\\\" >> $log `rm -rf $1` fi } function read_dir() { #注意此处这是两个反引号，表示运行系统命令 for file in `ls $1` do if [ -d $file ];then del_directory $file fi done } #读取第一个参数 read_dir $1 echo \\\"结束删除之前备份数据\\\" >> $log echo $(date +\\\"%Y-%m-%d %H:%M:%S\\\")\\\"脚本执行结束\\\">> $log; \",\"# 输入下面命令可以进到编辑页面 crontab -e # 将下面这个定时任务写进去 00 1 * * * '/usr/local/mysql-back/mysql-back.sh' > /usr/local/mysql-back/back-err.log & # 下面命令可以查看当前有的定时任务 crontab -l \",\"# 还原命令 mysql -uroot -p`Mysql密码` < db_202306301501.sql # 指定库还原 mysql -uroot -p`Mysql密码` databaseName < db_202306301501.sql \"]},\"151\":{\"h\":\"Win安装Mysql8\"},\"152\":{\"h\":\"下载安装包\",\"t\":[\"官网下载地址为: https://dev.mysql.com/downloads/mysql/\"]},\"153\":{\"h\":\"配置Mysql\",\"t\":[\"MySQL根目录下创建my.ini文件\",\"[mysql] ; 配置MySQL默认编码 default-character-set=utf8mb4 [mysqld] port=3306 ; 设置mysql的安装目录 basedir=D:/devTools/mysql/mysql-8.3.0/ ; mysql 库数据存储地址 datadir=D:/devTools/mysql/data ; 默认数据库引擎 default-storage-engine=InnoDB ; 错误日志收集地址 log-error=\\\"D:\\\\devTools\\\\mysql\\\\logs.err\\\" innodb_fast_shutdown = 0 init_connect='SET collation_connection = utf8mb4_unicode_ci' init_connect='SET collation_database = utf8mb4_unicode_ci' ; 超时设置 wait_timeout=2147483 interactive_timeout=2147483 \"]},\"154\":{\"h\":\"启动Mysql服务\"},\"155\":{\"h\":\"初始化Mysql实例\",\"t\":[\"mysqld --initialize --user=mysql --console \"]},\"156\":{\"h\":\"安装Mysql服务\",\"t\":[\"# 如果之前已经存在过mysql服务需要先删除掉 sc declete mysql # 安装mysql服务 mysqld install # 启动mysql服务 net start mysql \",\"安装成功示例: \"]},\"157\":{\"h\":\"修改Root密码\",\"t\":[\"-- 目前Mysql8 不支持简单密码了,需要使用简单密码时需要另做修改 ALTER USER 'root'@'localhost' IDENTIFIED BY 'mysql密码'; -- 下面是设置简单密码 SHOW VARIABLES LIKE 'validate_password%'; set global validate_password.policy=0; set global validate_password.length=1; ALTER USER 'root'@'localhost' IDENTIFIED BY '123456'; \"]},\"158\":{\"h\":\"nvm\"},\"159\":{\"h\":\"安装NVM\",\"t\":[\"如果已经安装了node请先卸载.\",\"从github中找到nvm所在仓库进行下载.\",\"nvm下载地址:https://github.com/coreybutler/nvm-windows/releases\",\"nvm下载时请选择下图所框选的包 \",\"下载的虽然是压缩包但是解压后是exe安装包. \"]},\"160\":{\"h\":\"配置下载源\",\"t\":[\"在nvm安装根目录[也就是安装时配置的目录]下找到配置文件 \",\"配置nvm下载源\",\"node_mirror https://npmmirror.com/mirrors/node/ npm_mirror: https://npmmirror.com/mirrors/npm/ \"]},\"161\":{\"h\":\"配置全局NPM\",\"t\":[\"npm config set prefix \\\"D:\\\\devTools\\\\nvm\\\\npm-repository\\\" 配置npm下载包时的全局包路径\",\"npm config set registry https://registry.npmmirror.com 安装全局npm，不同的node都使用这个npm。想更新全局的npm的话首先删除全局路径(就是上一行命令的地址，可以使用npm config ls查看)下的npm，再执行一次这个命令即可。\",\"在用户变量中添加 NPM_HOME = E:\\\\nvm\\\\npm，path中添加%NPM_HOME%。这里需要注意的是，%NPM_HOME%要添加在%NVM_SYMLINK%之前，避免npm访问到的是nodejs中自带的npm包管理工具。\",\"ps: npmmirror 镜像站 https://www.npmmirror.com/\"]},\"162\":{\"h\":\"nvm使用\",\"t\":[\"查看nvm版本号: nvm version 查看网络可以安装的版本: nvm list available\",\"指定一个版本进行安装: nvm install 18.20.2 查看已安装的node版本: nvm list\",\"选择一个版本进行使用: nvm use 18.20.2\"]},\"163\":{\"h\":\"nvm常用命令\",\"t\":[\"命令\",\"说明\",\"nvm list\",\"查看已经安装的版本\",\"nvm list installed\",\"查看已经安装的版本\",\"nvm list available\",\"查看网络可以安装的版本\",\"nvm arch\",\"查看当前系统的位数和当前nodejs的位数\",\"nvm install [arch]\",\"安装制定版本的node 并且可以指定平台 version 版本号 arch 平台\",\"nvm on\",\"打开nodejs版本控制\",\"nvm off\",\"关闭nodejs版本控制\",\"nvm proxy [url]\",\"查看和设置代理\",\"nvm node_mirror [url]\",\"设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/\",\"nvm npm_mirror [url]\",\"设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是：https://github.com/npm/npm/archive/.\",\"nvm uninstall\",\"卸载指定的版本\",\"nvm use [version] [arch]\",\"切换指定的node版本和位数\",\"nvm root [path]\",\"设置和查看root路径\",\"nvm version\",\"查看当前的版本\"]},\"164\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"卸载指定的版本\",{\"1\":{\"163\":1}}],[\"打开nodejs版本控制\",{\"1\":{\"163\":1}}],[\"平台\",{\"1\":{\"163\":1}}],[\"命令\",{\"1\":{\"163\":1}}],[\"选择一个版本进行使用\",{\"1\":{\"162\":1}}],[\"选用的事务\",{\"1\":{\"42\":1}}],[\"避免npm访问到的是nodejs中自带的npm包管理工具\",{\"1\":{\"161\":1}}],[\"避免我们与jdbc的api打交道\",{\"1\":{\"33\":1}}],[\"之前\",{\"1\":{\"161\":1}}],[\"之后所要做的事情就是通知\",{\"1\":{\"66\":1}}],[\"想更新全局的npm的话首先删除全局路径\",{\"1\":{\"161\":1}}],[\"初始化mysql实例\",{\"0\":{\"155\":1}}],[\"超时设置\",{\"1\":{\"153\":1}}],[\"库数据存储地址\",{\"1\":{\"153\":1}}],[\"脚本执行结束\",{\"1\":{\"150\":1}}],[\"脚本执行开始\",{\"1\":{\"150\":1}}],[\"结束删除之前备份数据\",{\"1\":{\"150\":1}}],[\"结束区间\",{\"1\":{\"58\":1}}],[\"改为几天\",{\"1\":{\"150\":1}}],[\"写shell脚本时不要再win下写好再放进去\",{\"1\":{\"150\":1}}],[\"授权远程链接\",{\"1\":{\"149\":1}}],[\"修改root密码\",{\"0\":{\"157\":1},\"1\":{\"149\":1}}],[\"启动mysql服务\",{\"0\":{\"154\":1},\"1\":{\"156\":1}}],[\"启动mysql和查看是否启动成功\",{\"1\":{\"149\":1}}],[\"启动时使用\",{\"1\":{\"83\":1}}],[\"安装制定版本的node\",{\"1\":{\"163\":1}}],[\"安装全局npm\",{\"1\":{\"161\":1}}],[\"安装nvm\",{\"0\":{\"159\":1}}],[\"安装成功示例\",{\"1\":{\"156\":1}}],[\"安装mysql服务\",{\"0\":{\"156\":1},\"1\":{\"156\":1}}],[\"安装rpm包\",{\"1\":{\"149\":1}}],[\"安装流程\",{\"0\":{\"149\":1}}],[\"查看当前的版本\",{\"1\":{\"163\":1}}],[\"查看当前系统的位数和当前nodejs的位数\",{\"1\":{\"163\":1}}],[\"查看和设置代理\",{\"1\":{\"163\":1}}],[\"查看已经安装的版本\",{\"1\":{\"163\":2}}],[\"查看已安装的node版本\",{\"1\":{\"162\":1}}],[\"查看网络可以安装的版本\",{\"1\":{\"162\":1,\"163\":1}}],[\"查看nvm版本号\",{\"1\":{\"162\":1}}],[\"查看是否存在安装包\",{\"1\":{\"149\":1}}],[\"查看与卸载原有的包\",{\"1\":{\"149\":1}}],[\"查询序列最大值\",{\"1\":{\"134\":1}}],[\"查询所有表中是否存在某个字段\",{\"0\":{\"133\":1}}],[\"复制到\",{\"1\":{\"146\":1}}],[\"运行\",{\"1\":{\"146\":1}}],[\"运行时也保留\",{\"1\":{\"99\":1}}],[\"官方文档\",{\"1\":{\"143\":1}}],[\"官网下载地址为\",{\"1\":{\"152\":1}}],[\"官网地址\",{\"0\":{\"9\":1},\"1\":{\"48\":1}}],[\"官网\",{\"1\":{\"1\":2}}],[\"额外jsonb操作符\",{\"0\":{\"142\":1}}],[\"放至id\",{\"1\":{\"134\":1}}],[\"放开以下静态资源的访问\",{\"1\":{\"86\":1}}],[\"父级id\",{\"1\":{\"129\":2,\"136\":1,\"138\":1}}],[\"父级递归查询子级\",{\"0\":{\"136\":1},\"1\":{\"129\":1}}],[\"递归查询\",{\"0\":{\"129\":1,\"135\":1}}],[\"导出的数据库名称\",{\"1\":{\"150\":2}}],[\"导出html文件后页面怎么刷新都无法正常显示页面\",{\"1\":{\"126\":1}}],[\"导入依赖\",{\"0\":{\"36\":1},\"1\":{\"48\":1,\"72\":1,\"74\":1,\"84\":1}}],[\"继承时出现警告解决\",{\"0\":{\"123\":1}}],[\"责任链集合\",{\"1\":{\"120\":1}}],[\"责任链模式\",{\"0\":{\"112\":1}}],[\"已知顺序的情况可以直接默认一条\",{\"1\":{\"119\":1}}],[\"已删除\",{\"1\":{\"46\":1}}],[\"没有下一级处理器\",{\"1\":{\"115\":1}}],[\"没给默认值\",{\"1\":{\"99\":1}}],[\"检查产品\",{\"1\":{\"115\":1}}],[\"检查给定的元素是否在变量中\",{\"1\":{\"58\":1}}],[\"产品\",{\"1\":{\"115\":2}}],[\"产品高度\",{\"1\":{\"114\":1}}],[\"产品宽度\",{\"1\":{\"114\":1}}],[\"产品长度\",{\"1\":{\"114\":1}}],[\"高度检查不合格\",{\"1\":{\"118\":1}}],[\"高度\",{\"1\":{\"112\":1}}],[\"宽度检查不合格\",{\"1\":{\"117\":1}}],[\"宽度\",{\"1\":{\"112\":1}}],[\"长度检查不合格\",{\"1\":{\"116\":1}}],[\"长度\",{\"1\":{\"112\":1}}],[\"现在模拟一个需求\",{\"1\":{\"112\":1}}],[\"正方形形状类\",{\"1\":{\"109\":1}}],[\"正方形\",{\"1\":{\"108\":1}}],[\"正则表达式\",{\"1\":{\"99\":1}}],[\"正则匹配路径\",{\"1\":{\"58\":1}}],[\"矩形形状类\",{\"1\":{\"109\":1}}],[\"矩形\",{\"1\":{\"108\":1}}],[\"圆形形状类\",{\"1\":{\"109\":1}}],[\"圆形\",{\"1\":{\"108\":1}}],[\"执行结束\",{\"1\":{\"150\":1}}],[\"执行后\",{\"1\":{\"149\":1}}],[\"执行测试\",{\"1\":{\"145\":1}}],[\"执行绘画操作\",{\"1\":{\"108\":1}}],[\"执行期间事务的维护情况\",{\"1\":{\"73\":1}}],[\"应该本身执行是返回true\",{\"1\":{\"108\":1}}],[\"应用的难度大大降低\",{\"1\":{\"60\":1}}],[\"介绍\",{\"0\":{\"106\":1}}],[\"经典表达式\",{\"0\":{\"104\":1}}],[\"允许为空\",{\"1\":{\"103\":1}}],[\"允许值范围\",{\"1\":{\"103\":5}}],[\"占位符和秒数一样\",{\"1\":{\"103\":1}}],[\"内步进20秒命中的时间点触发\",{\"1\":{\"103\":1}}],[\"若值不合法\",{\"1\":{\"103\":5}}],[\"若为true\",{\"1\":{\"71\":1}}],[\"若为类\",{\"1\":{\"67\":1}}],[\"若为接口\",{\"1\":{\"67\":1}}],[\"星期一到星期五的10点15分0秒触发任务\",{\"1\":{\"104\":1}}],[\"星期\",{\"1\":{\"103\":4}}],[\"日期\",{\"1\":{\"103\":3}}],[\"每个月第三周的星期四的10点15分0秒触发任务\",{\"1\":{\"104\":1}}],[\"每个月最后一个星期四的10点15分0秒触发任务\",{\"1\":{\"104\":1}}],[\"每个月最后一个工作日的10点15分0秒触发任务\",{\"1\":{\"104\":1}}],[\"每个月最后一天的10点15分0秒触发任务\",{\"1\":{\"104\":1}}],[\"每三分钟触发一次\",{\"1\":{\"104\":1}}],[\"每小时的第0分0秒开始\",{\"1\":{\"104\":1}}],[\"每小时的10分30秒触发任务\",{\"1\":{\"104\":1}}],[\"每分钟的15秒到30秒之间开始触发\",{\"1\":{\"104\":1}}],[\"每分钟的每15秒开始触发\",{\"1\":{\"104\":1}}],[\"每秒都触发任务\",{\"1\":{\"104\":1}}],[\"每15秒\",{\"1\":{\"104\":1}}],[\"每年10月20号1点10分30秒触发任务\",{\"1\":{\"104\":1}}],[\"每月20号1点10分30秒触发任务\",{\"1\":{\"104\":1}}],[\"每天1点10分30秒触发任务\",{\"1\":{\"104\":1}}],[\"每天零点5分调用\",{\"1\":{\"102\":1}}],[\"每半分钟触发任务\",{\"1\":{\"104\":1}}],[\"每隔5秒触发一次\",{\"1\":{\"104\":2}}],[\"每隔20秒钟触发1次\",{\"1\":{\"103\":1}}],[\"每隔1秒触发1次\",{\"1\":{\"103\":1}}],[\"每次使用都创建新的对象\",{\"1\":{\"62\":1}}],[\"定时运行备份脚本\",{\"0\":{\"150\":1}}],[\"定时任务\",{\"0\":{\"101\":1}}],[\"定义自增序列时一般使用\",{\"1\":{\"134\":1}}],[\"定义一个创建对象的接口\",{\"1\":{\"106\":1}}],[\"定义了事务底层默认的超时时限\",{\"1\":{\"73\":1}}],[\"定义了专门的表达式用于指定切入点\",{\"1\":{\"67\":1}}],[\"定义的切面类\",{\"1\":{\"68\":1}}],[\"定义的切入点\",{\"1\":{\"68\":1}}],[\"定义\",{\"1\":{\"68\":1}}],[\"定义在\",{\"1\":{\"67\":2}}],[\"脱敏数据类型\",{\"1\":{\"99\":1}}],[\"能通过反射读取到\",{\"1\":{\"99\":1}}],[\"作用在字段上\",{\"1\":{\"99\":1}}],[\"作者信息\",{\"1\":{\"85\":1}}],[\"走到这里说明是string类型且存在脱敏注解那么将脱敏注解设置为当前string的处理就好\",{\"1\":{\"98\":1}}],[\"邮箱\",{\"1\":{\"97\":1}}],[\"邮件\",{\"1\":{\"60\":1}}],[\"手机号\",{\"1\":{\"97\":1}}],[\"身份证号\",{\"1\":{\"97\":1}}],[\"隐私数据类型枚举\",{\"1\":{\"97\":1}}],[\"全参数自定义\",{\"1\":{\"95\":1}}],[\"全局拦截器\",{\"1\":{\"125\":1}}],[\"全局拦截异常案例\",{\"1\":{\"87\":1}}],[\"全局异常拦截器\",{\"0\":{\"87\":1}}],[\"错误日志收集地址\",{\"1\":{\"153\":1}}],[\"错误解决\",{\"0\":{\"144\":1}}],[\"错误收集\",{\"0\":{\"121\":1}}],[\"错误的枚举\",{\"1\":{\"95\":1}}],[\"错误信息\",{\"1\":{\"95\":2}}],[\"错误行数据\",{\"1\":{\"21\":1}}],[\"响应码\",{\"1\":{\"95\":1}}],[\"响应格式\",{\"1\":{\"95\":1}}],[\"统一的\",{\"1\":{\"95\":1}}],[\"统一返回数据类\",{\"0\":{\"95\":1}}],[\"否则是失败的错误码\",{\"1\":{\"95\":1}}],[\"否则会注入失败\",{\"1\":{\"92\":1}}],[\"否则不执行\",{\"1\":{\"68\":1}}],[\"入参解析\",{\"1\":{\"91\":1}}],[\"入参集合\",{\"1\":{\"91\":1}}],[\"判断是否存在下一级处理器\",{\"1\":{\"115\":1}}],[\"判断是否应该自身执行\",{\"1\":{\"108\":1}}],[\"判断当前请求方法中是否存在\",{\"1\":{\"91\":1}}],[\"判断该key是否已过期\",{\"1\":{\"58\":1}}],[\"为了确保库的引用可以之心下面两行\",{\"1\":{\"145\":1}}],[\"为java本身的工具类所以不需要担心兼容问题但是jdk应该是需要1\",{\"1\":{\"110\":1}}],[\"为\",{\"1\":{\"90\":1,\"91\":1,\"95\":1}}],[\"为引用类型属性进行隐式自动注入\",{\"1\":{\"63\":1}}],[\"具体怎么从redis获取可以根据自己情况进行获取\",{\"1\":{\"90\":1}}],[\"描述\",{\"1\":{\"85\":2}}],[\"月份\",{\"1\":{\"103\":1}}],[\"月光后台接口服务\",{\"1\":{\"85\":2}}],[\"月迁移到\",{\"1\":{\"33\":1}}],[\"添加以下内容即可不再提示该警告\",{\"1\":{\"123\":1}}],[\"添加摘要信息\",{\"1\":{\"85\":1}}],[\"添加一个hash类型的数据进行存储\",{\"1\":{\"58\":1}}],[\"版本号\",{\"1\":{\"163\":1}}],[\"版本为\",{\"1\":{\"129\":1}}],[\"版本\",{\"1\":{\"85\":1}}],[\"版本根据自己需要使用\",{\"1\":{\"28\":1}}],[\"页面好看\",{\"1\":{\"84\":1}}],[\"监听\",{\"1\":{\"82\":1}}],[\"监听器\",{\"1\":{\"82\":1}}],[\"扫描\",{\"1\":{\"80\":1}}],[\"扫描的包路径\",{\"1\":{\"37\":1}}],[\"除了\",{\"1\":{\"79\":1,\"103\":1}}],[\"除了控制器之外的bean对象都在这里扫描\",{\"1\":{\"72\":1}}],[\"插件启动\",{\"1\":{\"83\":1}}],[\"插件依赖\",{\"1\":{\"77\":1}}],[\"插件一启动就结束了\",{\"1\":{\"77\":1}}],[\"插件收集\",{\"0\":{\"3\":1}}],[\"整合\",{\"0\":{\"76\":1}}],[\"链接数据库的数据源\",{\"1\":{\"74\":1}}],[\"遇到什么异常会回滚\",{\"1\":{\"74\":1}}],[\"说明这个方法是可行的\",{\"1\":{\"111\":1}}],[\"说明\",{\"1\":{\"74\":1,\"163\":1}}],[\"报表查询\",{\"1\":{\"73\":1}}],[\"粗粒度\",{\"1\":{\"73\":1}}],[\"细粒度\",{\"1\":{\"73\":1}}],[\"语句的执行时长\",{\"1\":{\"73\":1}}],[\"语法\",{\"1\":{\"67\":1}}],[\"常量\",{\"1\":{\"73\":1}}],[\"常用\",{\"1\":{\"61\":1}}],[\"无论当前是否有事务都会创建新的\",{\"1\":{\"73\":1,\"74\":1}}],[\"无论是否出现异常都是最后被调用的通知\",{\"1\":{\"68\":1}}],[\"比较常用的设置\",{\"1\":{\"73\":1,\"74\":1}}],[\"比如缓存\",{\"1\":{\"60\":1}}],[\"比如\",{\"1\":{\"60\":3,\"103\":3}}],[\"处于不同事务中的方法在相互调用时\",{\"1\":{\"73\":1}}],[\"处理适配器接收到返回的结果后\",{\"1\":{\"69\":1}}],[\"处理适配器接收到来自前端控制器dispathcherservlet后\",{\"1\":{\"69\":1}}],[\"处理器方法若最终未被执行\",{\"1\":{\"71\":1}}],[\"处理器适配器\",{\"1\":{\"69\":1}}],[\"处理器\",{\"1\":{\"69\":1}}],[\"处理器映射器\",{\"1\":{\"69\":1}}],[\"串行化\",{\"1\":{\"73\":1}}],[\"未解决任何并发问题\",{\"1\":{\"73\":1}}],[\"未指定\",{\"1\":{\"46\":1}}],[\"王\",{\"1\":{\"72\":1}}],[\"李\",{\"1\":{\"72\":1}}],[\"张\",{\"1\":{\"72\":2}}],[\"示例路径\",{\"1\":{\"72\":1}}],[\"示例如下\",{\"1\":{\"72\":2}}],[\"示例\",{\"1\":{\"72\":1,\"128\":2}}],[\"示例listener\",{\"0\":{\"22\":1}}],[\"强制response使用字符集encoding\",{\"1\":{\"72\":1}}],[\"强制request使用字符集encoding\",{\"1\":{\"72\":1}}],[\"然后通过此控制器分发到各个分控制器\",{\"1\":{\"72\":1}}],[\"以上\",{\"1\":{\"129\":1}}],[\"以我的为例文件名就是\",{\"1\":{\"110\":1}}],[\"以此类推\",{\"1\":{\"103\":1}}],[\"以便于与其他任何web框架集成\",{\"1\":{\"72\":1}}],[\"以后所有的\",{\"1\":{\"68\":1}}],[\"以后遇到其他标签在进行补充吧\",{\"1\":{\"43\":1}}],[\"集成\",{\"1\":{\"72\":1}}],[\"目录\",{\"1\":{\"150\":1}}],[\"目录下那么这里就可以不用指定配置文件位置\",{\"1\":{\"72\":1}}],[\"目前mysql8\",{\"1\":{\"149\":1,\"157\":1}}],[\"目标方法的执行之后\",{\"1\":{\"68\":1}}],[\"目标方法的执行之前\",{\"1\":{\"68\":1}}],[\"目标类+\",{\"1\":{\"68\":1}}],[\"目标对象\",{\"1\":{\"66\":1}}],[\"静态资源处理\",{\"1\":{\"81\":1}}],[\"静态资源\",{\"1\":{\"72\":1}}],[\"静态资源所在\",{\"1\":{\"72\":1}}],[\"静态资源库\",{\"0\":{\"7\":1}}],[\"读已提交\",{\"1\":{\"73\":1}}],[\"读未提交\",{\"1\":{\"73\":1}}],[\"读写json的支持\",{\"1\":{\"72\":1}}],[\"读写xml的支持\",{\"1\":{\"72\":1}}],[\"读取第一个参数\",{\"1\":{\"150\":1}}],[\"读取db\",{\"1\":{\"80\":1}}],[\"读取网络图片使用\",{\"1\":{\"50\":1}}],[\"读取本地图片使用\",{\"1\":{\"50\":1}}],[\"读取模板\",{\"1\":{\"50\":1}}],[\"读取配置文件\",{\"1\":{\"39\":1}}],[\"解压的包中找到\",{\"1\":{\"146\":1}}],[\"解析请求头失败\",{\"1\":{\"90\":1}}],[\"解决此错误有两个方法我个人是用第二个方法解决的\",{\"0\":{\"146\":1}}],[\"解决脏读\",{\"1\":{\"73\":2}}],[\"解决了\",{\"1\":{\"72\":1}}],[\"解密后内容\",{\"1\":{\"59\":1}}],[\"解密后的内容\",{\"1\":{\"59\":1}}],[\"解密失败\",{\"1\":{\"59\":1}}],[\"9\",{\"1\":{\"72\":2,\"74\":1,\"77\":1,\"126\":1,\"143\":3}}],[\"90\",{\"1\":{\"52\":7}}],[\"联合使用\",{\"0\":{\"72\":1}}],[\"按照配置前后逆序执行\",{\"1\":{\"71\":2}}],[\"按照配置前后顺序执行\",{\"1\":{\"71\":1}}],[\"按当前示例这么做就可以\",{\"1\":{\"50\":1}}],[\"清除资源\",{\"1\":{\"71\":1}}],[\"清华大学镜像站\",{\"1\":{\"10\":1}}],[\"了响应页面之后执行的\",{\"1\":{\"71\":1}}],[\"且写法也有一些区别\",{\"1\":{\"128\":1}}],[\"且依赖关系为\",{\"1\":{\"103\":1}}],[\"且可以修改跳转方向\",{\"1\":{\"71\":1}}],[\"且该方法参数中包含\",{\"1\":{\"71\":1}}],[\"且会将aftercompletion\",{\"1\":{\"71\":1}}],[\"拦截所有用\",{\"1\":{\"71\":2}}],[\"拦截器注入数据\",{\"0\":{\"88\":1}}],[\"拦截器要拦截的请求路径\",{\"1\":{\"71\":2}}],[\"拦截器\",{\"0\":{\"71\":1}}],[\"拦截的方法名称\",{\"1\":{\"68\":1}}],[\"分钟\",{\"1\":{\"103\":2}}],[\"分页\",{\"1\":{\"80\":1}}],[\"分别对应各个请求\",{\"1\":{\"70\":1}}],[\"分割的字符串\",{\"1\":{\"128\":1}}],[\"分割\",{\"1\":{\"43\":1}}],[\"枚举类\",{\"1\":{\"108\":1}}],[\"枚举类有\",{\"1\":{\"70\":1}}],[\"枚举类中的方法\",{\"1\":{\"70\":1}}],[\"拿到对应的视图\",{\"1\":{\"69\":1}}],[\"找到对应方法进行执行\",{\"1\":{\"69\":1}}],[\"找到并装载完成\",{\"1\":{\"61\":1}}],[\"相似只不过参数变为了使用\",{\"1\":{\"128\":1}}],[\"相应数据\",{\"1\":{\"95\":1}}],[\"相应的处理器类接收到指令后\",{\"1\":{\"69\":1}}],[\"相当于是\",{\"1\":{\"69\":1}}],[\"像spring中的映射器发起请求handlermapping中查询对应的处理类\",{\"1\":{\"69\":1}}],[\"此时我们就可以使用责任链模式\",{\"1\":{\"112\":1}}],[\"此时对modelandview再操作也对响应无济于事\",{\"1\":{\"71\":1}}],[\"此时前端控制会去找处理适配器handleradaptor\",{\"1\":{\"69\":1}}],[\"此时服务器中接收此请求的时前端控制器dispatcherservlet\",{\"1\":{\"69\":1}}],[\"此标签必须要有\",{\"1\":{\"43\":1}}],[\"浏览器会向服务器发送一个请求\",{\"1\":{\"69\":1}}],[\"浏览器插件站\",{\"1\":{\"5\":1}}],[\"框架提供了很多的\",{\"1\":{\"69\":1}}],[\"再执行一次这个命令即可\",{\"1\":{\"161\":1}}],[\"再在页面中配置运行命令为\",{\"1\":{\"83\":1}}],[\"再生成\",{\"1\":{\"69\":1}}],[\"再由通知类型找到切入的时间点\",{\"1\":{\"68\":1}}],[\"再由切面类根据切入点找到目标类的目标方法\",{\"1\":{\"68\":1}}],[\"首先根据逻辑视图名解析成物理视图名称\",{\"1\":{\"69\":1}}],[\"负责将处理结果生成\",{\"1\":{\"69\":1}}],[\"视图类型\",{\"1\":{\"69\":1}}],[\"视图对象\",{\"1\":{\"69\":1}}],[\"视图\",{\"1\":{\"69\":1}}],[\"视图解析器viewresolver解析完成后将视图地址以及携带的数据返回给前端控制器\",{\"1\":{\"69\":1}}],[\"视图解析器\",{\"1\":{\"69\":1,\"72\":1,\"81\":1}}],[\"视频播放器\",{\"1\":{\"1\":1}}],[\"涉及到具体的用户业务请求\",{\"1\":{\"69\":1}}],[\"派发请求的控制器\",{\"1\":{\"69\":1}}],[\"前四个写法需要注意\",{\"1\":{\"129\":1}}],[\"前面的值代表初始值\",{\"1\":{\"103\":1}}],[\"前置不需要打码的长度\",{\"1\":{\"99\":1}}],[\"前置通知\",{\"1\":{\"66\":1,\"67\":1,\"68\":1}}],[\"前端示例\",{\"1\":{\"72\":1}}],[\"前端参数名\",{\"1\":{\"72\":1}}],[\"前端参数示例\",{\"1\":{\"72\":1}}],[\"前端控制接收到视图地址和数据后\",{\"1\":{\"69\":1}}],[\"前端控制器本质上还是一个servlet\",{\"1\":{\"72\":1}}],[\"前端控制器接收到来自处理适配器的结果后\",{\"1\":{\"69\":1}}],[\"前端控制器dispatcherservlet接收到此请求后\",{\"1\":{\"69\":1}}],[\"前端控制器的后端控制器\",{\"1\":{\"69\":1}}],[\"前端控制器\",{\"1\":{\"69\":1,\"72\":1}}],[\"组件\",{\"1\":{\"69\":1}}],[\"组装key\",{\"1\":{\"55\":3}}],[\"进行限定的\",{\"1\":{\"70\":1}}],[\"进行封装才可以转发\",{\"1\":{\"70\":1}}],[\"进行渲染将处理结果通过页面展示给用户\",{\"1\":{\"69\":1}}],[\"进行分割\",{\"1\":{\"68\":1}}],[\"进行比较而实现自动注入的\",{\"1\":{\"63\":1}}],[\"`ls\",{\"1\":{\"150\":1}}],[\"`rm\",{\"1\":{\"150\":1}}],[\"`表名称`\",{\"1\":{\"134\":1}}],[\"`database\",{\"1\":{\"130\":1}}],[\"`\",{\"1\":{\"68\":2}}],[\"原因\",{\"1\":{\"125\":1}}],[\"原有都记录下来\",{\"1\":{\"68\":1}}],[\"原始字符串\",{\"1\":{\"59\":1}}],[\"位置\",{\"1\":{\"68\":1}}],[\"维护均较为麻烦\",{\"1\":{\"68\":1}}],[\"编写\",{\"1\":{\"68\":1}}],[\"编程的支持\",{\"1\":{\"60\":1}}],[\"核心实现就是基于aop\",{\"1\":{\"73\":1}}],[\"核心依赖\",{\"1\":{\"68\":1}}],[\"核心容器由以下部分组成\",{\"1\":{\"60\":1}}],[\"后消失\",{\"1\":{\"145\":1}}],[\"后置不需要打码的长度\",{\"1\":{\"99\":1}}],[\"后置通知\",{\"1\":{\"66\":1,\"67\":1,\"68\":1}}],[\"后面的值代表偏移量\",{\"1\":{\"103\":1}}],[\"后面\",{\"1\":{\"70\":1}}],[\"后面必须跟\",{\"1\":{\"67\":1}}],[\"后\",{\"1\":{\"68\":1}}],[\"出现在类名中时\",{\"1\":{\"67\":1}}],[\"符号解释\",{\"1\":{\"67\":1}}],[\"符号表\",{\"1\":{\"14\":1}}],[\"异常信息\",{\"1\":{\"87\":3}}],[\"异常信息是\",{\"1\":{\"68\":1}}],[\"异常类型\",{\"1\":{\"67\":1}}],[\"异常通知\",{\"1\":{\"66\":1,\"67\":1,\"68\":1}}],[\"访问权限和异常类型可以省略或用符号代替\",{\"1\":{\"67\":1}}],[\"访问权限\",{\"1\":{\"67\":1}}],[\"访问权限类型\",{\"1\":{\"67\":1}}],[\"抛出异常类型\",{\"1\":{\"67\":1}}],[\"采用\",{\"1\":{\"73\":1}}],[\"采用编译期织入和类装载期织入\",{\"1\":{\"66\":1}}],[\"采用动态代理织入\",{\"1\":{\"66\":1}}],[\"采用了orm思想解决了实体类和数据库表映射的问题\",{\"1\":{\"33\":1}}],[\"织入\",{\"1\":{\"66\":1}}],[\"织入增强后\",{\"1\":{\"66\":1}}],[\"环绕方法\",{\"1\":{\"68\":2}}],[\"环绕通知\",{\"1\":{\"66\":1,\"67\":1}}],[\"环境的通用配置\",{\"1\":{\"72\":1}}],[\"环境\",{\"1\":{\"37\":1}}],[\"最终应该是有匹配结果的\",{\"1\":{\"110\":1}}],[\"最终将视图和数据反馈给用户请求的浏览器\",{\"1\":{\"69\":1}}],[\"最终将执行结果返回给处理适配器handleradaptor\",{\"1\":{\"69\":1}}],[\"最终通知\",{\"1\":{\"66\":1,\"67\":1,\"68\":1}}],[\"最后执行的方法\",{\"1\":{\"71\":1}}],[\"最后对\",{\"1\":{\"69\":1}}],[\"最后得到产品\",{\"1\":{\"34\":1}}],[\"最后由mybatis框架执行sql\",{\"1\":{\"33\":1}}],[\"还原命令\",{\"1\":{\"150\":1}}],[\"还是之后执行等\",{\"1\":{\"66\":1}}],[\"还添加了对\",{\"1\":{\"61\":1}}],[\"增强\",{\"1\":{\"66\":1}}],[\"增减值\",{\"1\":{\"58\":1}}],[\"被标记为\",{\"1\":{\"66\":1}}],[\"切换指定的node版本和位数\",{\"1\":{\"163\":1}}],[\"切入时间不同\",{\"1\":{\"66\":1}}],[\"切入点表达式\",{\"1\":{\"68\":1}}],[\"切入点表达式时\",{\"1\":{\"68\":1}}],[\"切入点示例\",{\"1\":{\"67\":1}}],[\"切入点定义切入的位置\",{\"1\":{\"66\":1}}],[\"切入点指声明的一个或多个连接点的集合\",{\"1\":{\"66\":1}}],[\"切入点\",{\"1\":{\"66\":1}}],[\"切面类\",{\"1\":{\"68\":1}}],[\"切面\",{\"1\":{\"66\":1,\"68\":1}}],[\"非业务功能\",{\"1\":{\"66\":1}}],[\"代表在\",{\"1\":{\"103\":1}}],[\"代表在指定的范围内触发\",{\"1\":{\"103\":1}}],[\"代表在指定的秒数触发\",{\"1\":{\"103\":1}}],[\"代表5秒触发1次\",{\"1\":{\"103\":1}}],[\"代表从0秒钟开始\",{\"1\":{\"103\":1}}],[\"代表从25秒开始触发到45秒结束触发\",{\"1\":{\"103\":1}}],[\"代表触发步进\",{\"1\":{\"103\":1}}],[\"代表0秒\",{\"1\":{\"103\":1}}],[\"代表每隔1秒钟触发\",{\"1\":{\"103\":1}}],[\"代表的就是\",{\"1\":{\"68\":1}}],[\"代表为永久有效\",{\"1\":{\"58\":1}}],[\"代理\",{\"1\":{\"66\":1}}],[\"术语解释\",{\"1\":{\"66\":1}}],[\"业务层对象\",{\"1\":{\"65\":1}}],[\"即10秒触发1次\",{\"1\":{\"103\":1}}],[\"即0秒触发1次\",{\"1\":{\"103\":1}}],[\"即该方法是在前端控制器渲染\",{\"1\":{\"71\":1}}],[\"即具体的页面地址\",{\"1\":{\"69\":1}}],[\"即处理器\",{\"1\":{\"69\":1}}],[\"即没有实际作用的方法\",{\"1\":{\"68\":1}}],[\"即持久层对象\",{\"1\":{\"65\":1}}],[\"即要么相同\",{\"1\":{\"63\":1}}],[\"标注不同层的对象\",{\"1\":{\"65\":1}}],[\"标签必须存在\",{\"1\":{\"77\":1}}],[\"标签即可\",{\"1\":{\"43\":1}}],[\"标签使用\",{\"1\":{\"43\":1}}],[\"标签\",{\"1\":{\"43\":2}}],[\"标签的名称\",{\"1\":{\"43\":1}}],[\"标签所对应的方法名\",{\"1\":{\"43\":2}}],[\"标签有以下属性\",{\"1\":{\"42\":1}}],[\"标签就可以看到\",{\"1\":{\"42\":1}}],[\"声明式事务管理\",{\"1\":{\"73\":1}}],[\"声明式事务控制\",{\"1\":{\"73\":1}}],[\"声明式事务的支持\",{\"1\":{\"60\":1}}],[\"声明前置通知\",{\"1\":{\"68\":1}}],[\"声明当前是一个bean\",{\"1\":{\"65\":1}}],[\"控制器的bean对象都在这里扫描\",{\"1\":{\"72\":1,\"81\":1}}],[\"控制层对象\",{\"1\":{\"65\":1}}],[\"控制注解\",{\"0\":{\"65\":1}}],[\"控制反转\",{\"0\":{\"61\":1}}],[\"及以上版本\",{\"1\":{\"64\":1}}],[\"子级递归查询父级\",{\"0\":{\"137\":1}}],[\"子集id\",{\"1\":{\"129\":2,\"137\":1,\"139\":1}}],[\"子id递归查询父级\",{\"1\":{\"129\":1}}],[\"子包下的所有类\",{\"1\":{\"67\":1}}],[\"子类\",{\"1\":{\"63\":1}}],[\"子标签的属性是一样的所以这里就写到一起了\",{\"1\":{\"43\":1}}],[\"子标签和\",{\"1\":{\"43\":1}}],[\"子标签\",{\"1\":{\"43\":2,\"62\":2}}],[\"让其子类自己决定实例化哪一个工厂类\",{\"1\":{\"106\":1}}],[\"让容器生成\",{\"1\":{\"68\":1}}],[\"让容器自动将被调用者\",{\"1\":{\"63\":1}}],[\"让开发人员只需要关注sql语句本身\",{\"1\":{\"33\":1}}],[\"完成被调用者的实例化\",{\"1\":{\"63\":1}}],[\"完全限定名\",{\"1\":{\"62\":1}}],[\"构造注入是指\",{\"1\":{\"63\":1}}],[\"构造器注入\",{\"1\":{\"63\":1}}],[\"因而在spring\",{\"1\":{\"63\":1}}],[\"因为我这边使用的是knife4j的4\",{\"1\":{\"125\":1}}],[\"因为我们需要转换为指定的对象而不是list<object>\",{\"1\":{\"26\":1}}],[\"因为\",{\"1\":{\"77\":1}}],[\"因为springmvc底层就是使用servlet编写的\",{\"1\":{\"72\":1}}],[\"因为spring底层封装的还是servlet所以还是需要此依赖的\",{\"1\":{\"72\":1}}],[\"因为spring只支持方法类型的连接点\",{\"1\":{\"66\":1}}],[\"因为最终的是不能被修改的\",{\"1\":{\"66\":1}}],[\"因为拦截器优先级较高\",{\"1\":{\"47\":1}}],[\"因为没有设置请求头等数据\",{\"1\":{\"29\":1}}],[\"直观\",{\"1\":{\"63\":1}}],[\"直接返回false\",{\"1\":{\"115\":1}}],[\"直接写list\",{\"1\":{\"43\":1}}],[\"直接使用\",{\"1\":{\"41\":1}}],[\"引用的\",{\"1\":{\"62\":2}}],[\"引入依赖\",{\"0\":{\"28\":1},\"1\":{\"68\":1}}],[\"包或者子包里的任意类的任意方法\",{\"1\":{\"67\":1}}],[\"包里的任意类的任意方法\",{\"1\":{\"67\":1}}],[\"包名类名\",{\"1\":{\"67\":1}}],[\"包\",{\"1\":{\"62\":1}}],[\"包括\",{\"1\":{\"60\":1,\"69\":1}}],[\"自增序列\",{\"0\":{\"134\":1}}],[\"自定义数据脱敏注解\",{\"1\":{\"99\":1}}],[\"自定义拦截器需要实现\",{\"1\":{\"71\":1}}],[\"自定义的对象名称\",{\"1\":{\"62\":1}}],[\"自动注入\",{\"1\":{\"63\":1,\"64\":1}}],[\"自动注入类中的用户id需要在拦截器中进行设置\",{\"1\":{\"47\":1}}],[\"自动注入类\",{\"0\":{\"47\":1}}],[\"国际化\",{\"1\":{\"61\":1}}],[\"表名称\",{\"1\":{\"134\":1}}],[\"表达无意义的信息之外\",{\"1\":{\"103\":1}}],[\"表达式格式\",{\"1\":{\"103\":1}}],[\"表达式可以在\",{\"1\":{\"101\":1}}],[\"表达式\",{\"1\":{\"101\":1}}],[\"表达式替换\",{\"1\":{\"99\":1}}],[\"表达式的原型\",{\"1\":{\"67\":1}}],[\"表达式语言\",{\"1\":{\"60\":1}}],[\"表述赋值是否必须\",{\"1\":{\"72\":1}}],[\"表示运行系统命令\",{\"1\":{\"150\":1}}],[\"表示自定义自己的注解privacyencrypt\",{\"1\":{\"99\":1}}],[\"表示业务调用成功\",{\"1\":{\"95\":1}}],[\"表示用于加载\",{\"1\":{\"72\":1}}],[\"表示切入点表达式\",{\"1\":{\"68\":2}}],[\"表示包\",{\"1\":{\"67\":1}}],[\"表示当前方法的返回值是对象\",{\"1\":{\"70\":1}}],[\"表示当前接口及其实现类\",{\"1\":{\"67\":1}}],[\"表示当前及其子类\",{\"1\":{\"67\":1}}],[\"表示当前及其子包路径\",{\"1\":{\"67\":1}}],[\"表示任意个参数\",{\"1\":{\"67\":1}}],[\"表示可选的部分\",{\"1\":{\"67\":1}}],[\"表示增强的功能\",{\"1\":{\"66\":1}}],[\"表示实体类中的对应的属性名\",{\"1\":{\"43\":1}}],[\"表示数据库表中的列名\",{\"1\":{\"43\":1}}],[\"表示该字段不必须\",{\"1\":{\"19\":1}}],[\"调试cron表达式是否是想要的执行\",{\"1\":{\"101\":1}}],[\"调度器将抛出schedulerexception异常\",{\"1\":{\"103\":5}}],[\"调度\",{\"1\":{\"60\":1}}],[\"调用测试\",{\"0\":{\"119\":1}}],[\"调用\",{\"1\":{\"73\":1}}],[\"调用处理器传递参数等工作\",{\"1\":{\"69\":1}}],[\"调用容器destroy方法的时候执行\",{\"1\":{\"62\":1}}],[\"调用方法\",{\"1\":{\"50\":1}}],[\"调用mapper\",{\"0\":{\"41\":1}}],[\"上的分页插件\",{\"1\":{\"77\":1}}],[\"上面示例中\",{\"1\":{\"70\":1}}],[\"上下文的支持\",{\"1\":{\"60\":1}}],[\"上海交通大学linux用户资源\",{\"1\":{\"8\":1}}],[\"容器就不知该匹配哪一个了\",{\"1\":{\"63\":1}}],[\"容器是通过调用者的\",{\"1\":{\"63\":1}}],[\"容器加载的时候立即创建\",{\"1\":{\"62\":1}}],[\"容器\",{\"1\":{\"60\":1,\"61\":2,\"68\":1}}],[\"注册后会将所有的请求都进行拦截\",{\"1\":{\"125\":1}}],[\"注册的方式访问对象\",{\"1\":{\"60\":1}}],[\"注意此处这是两个反引号\",{\"1\":{\"150\":1}}],[\"注意\",{\"1\":{\"103\":1}}],[\"注意这个\",{\"1\":{\"77\":1}}],[\"注入给调用者\",{\"1\":{\"63\":1}}],[\"注入也叫设值注入\",{\"1\":{\"63\":1}}],[\"注入有\",{\"1\":{\"63\":1}}],[\"注入就是\",{\"1\":{\"63\":1}}],[\"注解表示当前任务是定时指定该方法\",{\"1\":{\"101\":1}}],[\"注解表示开启定时任务\",{\"1\":{\"101\":1}}],[\"注解形式控制事务\",{\"0\":{\"74\":1}}],[\"注解声明为最终通知\",{\"1\":{\"68\":1}}],[\"注解声明异常通知方法\",{\"1\":{\"68\":1}}],[\"注解声明环绕通知\",{\"1\":{\"68\":1}}],[\"注解声明后置通知\",{\"1\":{\"68\":1}}],[\"注解方法一般使用\",{\"1\":{\"68\":1}}],[\"注解在一个方法之上\",{\"1\":{\"68\":1}}],[\"注解的细化\",{\"1\":{\"65\":1}}],[\"注解既可以按名称匹配bean\",{\"1\":{\"64\":1}}],[\"注解注入\",{\"0\":{\"64\":1}}],[\"注解\",{\"0\":{\"70\":1},\"1\":{\"21\":2,\"68\":2,\"70\":1,\"91\":1}}],[\"模式中的c\",{\"1\":{\"69\":1}}],[\"模块的焦点\",{\"1\":{\"60\":1}}],[\"模块的基础上建立起来的\",{\"1\":{\"60\":1}}],[\"模块也支持\",{\"1\":{\"60\":1}}],[\"模块\",{\"1\":{\"60\":1}}],[\"模块继承自\",{\"1\":{\"60\":1}}],[\"模板引擎\",{\"1\":{\"60\":1}}],[\"模板图片\",{\"1\":{\"50\":1}}],[\"模板图片与生成的图片\",{\"1\":{\"50\":1}}],[\"模板标签与数据进行绑定\",{\"1\":{\"50\":1}}],[\"模板所需数据\",{\"1\":{\"49\":1}}],[\"模板绑定的配置\",{\"1\":{\"49\":1}}],[\"建立在由\",{\"1\":{\"60\":1}}],[\"建造者模式对象创建\",{\"1\":{\"39\":1}}],[\"建造者模式可以强制实行一种分步骤进行的建造过程\",{\"1\":{\"34\":1}}],[\"建造者模式\",{\"1\":{\"34\":1}}],[\"而我们写上面的\",{\"1\":{\"72\":1}}],[\"而不是转发页面\",{\"1\":{\"70\":1}}],[\"而不需要了解具体的建造过程和细节\",{\"1\":{\"34\":1}}],[\"而\",{\"1\":{\"66\":1}}],[\"而且整个容器只有为一个的一个对象\",{\"1\":{\"62\":1}}],[\"而是通过参数指定配置文件的位置\",{\"1\":{\"61\":1}}],[\"而无须手动编程\",{\"1\":{\"60\":1}}],[\"只能使用\",{\"1\":{\"70\":1}}],[\"只能有一个\",{\"1\":{\"63\":1}}],[\"只不过在\",{\"1\":{\"70\":1}}],[\"只需要指定监听器就可以\",{\"1\":{\"72\":1}}],[\"只需要在\",{\"1\":{\"68\":1}}],[\"只需要通过配置就可以完成对事务的管理\",{\"1\":{\"60\":1}}],[\"只针对单例有效\",{\"1\":{\"62\":1}}],[\"只有\",{\"1\":{\"62\":1}}],[\"只有在键不存在时\",{\"1\":{\"58\":1}}],[\"只有当前分数大于redis中存储的分数或分数一直且时长更短时才更新数据\",{\"1\":{\"55\":1}}],[\"程序\",{\"1\":{\"60\":1}}],[\"支持当前事务\",{\"1\":{\"73\":1,\"74\":2}}],[\"支持更多类型的处理器\",{\"1\":{\"69\":1}}],[\"支持\",{\"1\":{\"60\":1}}],[\"都是\",{\"1\":{\"70\":1}}],[\"都是交给容器来创建对象\",{\"1\":{\"70\":1}}],[\"都提供了封装\",{\"1\":{\"60\":1}}],[\"都可以做到java对象的转换\",{\"1\":{\"25\":1}}],[\"都可以\",{\"1\":{\"3\":1}}],[\"远程调用等\",{\"1\":{\"60\":1}}],[\"开始移除7天之前的备份数据\",{\"1\":{\"150\":1}}],[\"开头\",{\"1\":{\"73\":1}}],[\"开启事务使用\",{\"1\":{\"77\":1}}],[\"开启\",{\"1\":{\"68\":1}}],[\"开启spring表达式\",{\"1\":{\"50\":1}}],[\"开发中非常难用的一些\",{\"1\":{\"60\":1}}],[\"降低\",{\"1\":{\"60\":1}}],[\"等同\",{\"1\":{\"103\":1}}],[\"等到对请求进行响应的所工作完成之后才执行该方法\",{\"1\":{\"71\":1}}],[\"等方法\",{\"1\":{\"70\":1}}],[\"等功能\",{\"1\":{\"60\":1}}],[\"等\",{\"1\":{\"60\":2,\"69\":1,\"72\":1}}],[\"等待时间\",{\"1\":{\"58\":2}}],[\"管理\",{\"1\":{\"60\":1,\"65\":1}}],[\"方式\",{\"1\":{\"63\":1}}],[\"方便程序的测试\",{\"1\":{\"60\":1}}],[\"方便集成各种优秀框架\",{\"1\":{\"60\":1}}],[\"方便解耦\",{\"1\":{\"60\":1}}],[\"方法返回true时\",{\"1\":{\"71\":1}}],[\"方法返回值\",{\"1\":{\"67\":1}}],[\"方法放入到一个专门的方法栈中等待执行\",{\"1\":{\"71\":1}}],[\"方法出现异常\",{\"1\":{\"68\":1}}],[\"方法参数列表\",{\"1\":{\"68\":1}}],[\"方法的参数格式\",{\"1\":{\"68\":1}}],[\"方法声明\",{\"1\":{\"67\":1}}],[\"方法名\",{\"1\":{\"67\":1}}],[\"方法传入被调用者的实例\",{\"1\":{\"63\":1}}],[\"方法测试了\",{\"1\":{\"41\":1}}],[\"方法将其关闭\",{\"1\":{\"34\":1}}],[\"方法没有参数\",{\"1\":{\"34\":1}}],[\"方法\",{\"1\":{\"25\":1,\"26\":1,\"34\":2}}],[\"优势\",{\"1\":{\"60\":1}}],[\"验签结果\",{\"1\":{\"59\":1}}],[\"验签\",{\"1\":{\"59\":1}}],[\"验证指定\",{\"1\":{\"58\":1}}],[\"签名\",{\"1\":{\"59\":3}}],[\"私钥\",{\"1\":{\"59\":3}}],[\"私钥字符串\",{\"1\":{\"59\":1}}],[\"待加密的文字内容\",{\"1\":{\"59\":1}}],[\"待加密数据\",{\"1\":{\"59\":1}}],[\"待签名数据\",{\"1\":{\"59\":1}}],[\"待解密数据\",{\"1\":{\"59\":1}}],[\"加解密异常\",{\"1\":{\"59\":1}}],[\"加密后内容\",{\"1\":{\"59\":1}}],[\"加密后的字符串\",{\"1\":{\"59\":1}}],[\"加密失败\",{\"1\":{\"59\":1}}],[\"加上这个后就会扫描该路径下所用到的\",{\"1\":{\"37\":1}}],[\"公钥\",{\"1\":{\"59\":3}}],[\"公钥字符串\",{\"1\":{\"59\":1}}],[\"密钥对\",{\"1\":{\"59\":1}}],[\"移除\",{\"1\":{\"150\":1}}],[\"移除几天前就将\",{\"1\":{\"150\":1}}],[\"移除集合中右边的元素在等待的时间里\",{\"1\":{\"58\":1}}],[\"移除集合中右边的元素\",{\"1\":{\"58\":1}}],[\"移除集合中左边的元素在等待的时间里\",{\"1\":{\"58\":1}}],[\"移除集合中的左边第一个元素\",{\"1\":{\"58\":1}}],[\"移除指定key\",{\"1\":{\"58\":1}}],[\"过期时间\",{\"1\":{\"58\":1}}],[\"过期时长\",{\"1\":{\"55\":1}}],[\"向已存在的集合中添加元素\",{\"1\":{\"58\":2}}],[\"向集合最右边添加元素\",{\"1\":{\"58\":2}}],[\"向左边批量添加参数元素\",{\"1\":{\"58\":2}}],[\"某个值\",{\"1\":{\"58\":1}}],[\"把最后一个参数值放到指定集合的第一个出现中间参数的前面\",{\"1\":{\"58\":1}}],[\"起始区间\",{\"1\":{\"58\":1}}],[\"索引位置\",{\"1\":{\"58\":1}}],[\"元素值\",{\"1\":{\"58\":5}}],[\"做增减操作\",{\"1\":{\"58\":1}}],[\"删除listkey中最右侧的元素\",{\"1\":{\"58\":1}}],[\"删除成功的\",{\"1\":{\"58\":1}}],[\"删除指定\",{\"1\":{\"58\":1}}],[\"多于一个\",{\"1\":{\"63\":1}}],[\"多例\",{\"1\":{\"62\":2}}],[\"多个任意字符\",{\"1\":{\"67\":1}}],[\"多个元素数组\",{\"1\":{\"58\":2}}],[\"多个\",{\"1\":{\"58\":1}}],[\"多平台文本编辑器\",{\"1\":{\"1\":1}}],[\"多平台使用\",{\"1\":{\"1\":1}}],[\"多平台\",{\"1\":{\"1\":2}}],[\"有没有指定的\",{\"1\":{\"58\":1}}],[\"下找到配置文件\",{\"1\":{\"160\":1}}],[\"下载的虽然是压缩包但是解压后是exe安装包\",{\"1\":{\"159\":1}}],[\"下载安装包\",{\"0\":{\"152\":1}}],[\"下载包时需要下载四个类型的rpm文件\",{\"1\":{\"148\":1}}],[\"下载所需要的安装包\",{\"0\":{\"148\":1}}],[\"下载对应的安装包可以去\",{\"1\":{\"143\":1}}],[\"下即可解决\",{\"1\":{\"146\":1}}],[\"下一级处理器\",{\"1\":{\"115\":1}}],[\"下面是设置简单密码\",{\"1\":{\"157\":1}}],[\"下面是一个异常类的demo\",{\"1\":{\"87\":1}}],[\"下面命令可以查看当前有的定时任务\",{\"1\":{\"150\":1}}],[\"下面的\",{\"1\":{\"58\":1}}],[\"下的npm\",{\"1\":{\"161\":1}}],[\"下的\",{\"1\":{\"58\":1,\"72\":2}}],[\"下\",{\"1\":{\"58\":1}}],[\"下指定hashkey的值\",{\"1\":{\"58\":1}}],[\"下次一定网\",{\"1\":{\"14\":1}}],[\"弹出元素并删除\",{\"1\":{\"58\":1}}],[\"弹出变量中的元素\",{\"1\":{\"58\":1}}],[\"两个bean\",{\"1\":{\"72\":1}}],[\"两个值\",{\"1\":{\"62\":1}}],[\"两个set集合的差值\",{\"1\":{\"58\":1}}],[\"两个选一个使用\",{\"1\":{\"43\":1}}],[\"批量移除set缓存中元素\",{\"1\":{\"58\":1}}],[\"批量添加\",{\"1\":{\"43\":1,\"58\":2}}],[\"随机获取变量中的元素\",{\"1\":{\"58\":1}}],[\"随机获取变量中指定个数的元素\",{\"1\":{\"58\":1}}],[\"纯数字\",{\"1\":{\"58\":1}}],[\"但是我们是不能放开所有请求的\",{\"1\":{\"125\":1}}],[\"但是含义不同\",{\"1\":{\"70\":1}}],[\"但是他是springmvc运转历程中的重要的一个控制器\",{\"1\":{\"69\":1}}],[\"但这样的同源的被调用\",{\"1\":{\"63\":1}}],[\"但\",{\"1\":{\"58\":2}}],[\"存在的话卸载当前已安装的包\",{\"1\":{\"149\":1}}],[\"存在下一级处理器\",{\"1\":{\"115\":1}}],[\"存在则返回\",{\"1\":{\"91\":2}}],[\"存在幻读\",{\"1\":{\"73\":1}}],[\"存在不可重复读与幻读\",{\"1\":{\"73\":1}}],[\"存在为true\",{\"1\":{\"58\":1}}],[\"存在\",{\"1\":{\"58\":3}}],[\"则继续\",{\"1\":{\"145\":1}}],[\"则校验下一级处理器\",{\"1\":{\"115\":1}}],[\"则该方法不会执行\",{\"1\":{\"71\":1}}],[\"则紧接着会执行处理器方法\",{\"1\":{\"71\":1}}],[\"则为该类及其子类中的任意方法\",{\"1\":{\"67\":1}}],[\"则为接口中的任意方法及其所有实现类中的任意方法\",{\"1\":{\"67\":1}}],[\"则全部不添加\",{\"1\":{\"58\":1}}],[\"则返回空\",{\"1\":{\"21\":1}}],[\"才添加\",{\"1\":{\"58\":1}}],[\"重复的键会覆盖\",{\"1\":{\"58\":1}}],[\"值与代码中调用者\",{\"1\":{\"63\":1}}],[\"值\",{\"1\":{\"58\":4,\"64\":1}}],[\"值附加过期时间\",{\"1\":{\"58\":1}}],[\"秒数\",{\"1\":{\"103\":2}}],[\"秒\",{\"1\":{\"58\":2}}],[\"键值对\",{\"1\":{\"58\":1}}],[\"键\",{\"1\":{\"58\":5}}],[\"根据子集获取从父级到当前子集的组织拼接\",{\"0\":{\"139\":1}}],[\"根据父级获取子父级的组织拼接\",{\"0\":{\"138\":1}}],[\"根据list顺序生成责任链并返回第一个\",{\"1\":{\"120\":1}}],[\"根据类型自动注入\",{\"1\":{\"63\":1}}],[\"根据名称自动注入\",{\"1\":{\"63\":1}}],[\"根据自动注入判断标准的不同\",{\"1\":{\"63\":1}}],[\"根据bean的构造器进行注入使用\",{\"1\":{\"62\":1}}],[\"根据value从一个set中查询\",{\"1\":{\"58\":1}}],[\"根据key获取值\",{\"1\":{\"58\":1}}],[\"根据key\",{\"1\":{\"58\":2}}],[\"根据正则匹配key获取所有对应的key\",{\"1\":{\"58\":1}}],[\"根据考试id获取对应的排行版数据\",{\"1\":{\"55\":1}}],[\"设置和查看root路径\",{\"1\":{\"163\":1}}],[\"设置或者查看setting\",{\"1\":{\"163\":2}}],[\"设置mysql的安装目录\",{\"1\":{\"153\":1}}],[\"设置简单密码\",{\"1\":{\"149\":1}}],[\"设置下一级处理器\",{\"1\":{\"115\":1}}],[\"设置标题\",{\"1\":{\"85\":1}}],[\"设置\",{\"1\":{\"63\":1}}],[\"设置一张hash表数据\",{\"1\":{\"55\":1}}],[\"设置变量\",{\"1\":{\"55\":1}}],[\"给指定\",{\"1\":{\"58\":1}}],[\"给一个key设置所有相应的属性\",{\"1\":{\"58\":1}}],[\"给一个指定的\",{\"1\":{\"58\":1}}],[\"给排序的列表添加当前的为一值\",{\"1\":{\"55\":1}}],[\"给排行榜添加一个人员内部自动判断是否可以存在于排行榜中\",{\"1\":{\"55\":1}}],[\"给定一个过期时间\",{\"1\":{\"55\":1}}],[\"给redis中push一条排行榜数据\",{\"1\":{\"55\":1}}],[\"考试id\",{\"1\":{\"55\":1}}],[\"考试排行榜工具类\",{\"1\":{\"55\":1}}],[\"排序条件\",{\"1\":{\"58\":1}}],[\"排序条件组装\",{\"1\":{\"55\":1}}],[\"排序\",{\"1\":{\"58\":1}}],[\"排序key\",{\"1\":{\"55\":1}}],[\"排序所用的key\",{\"1\":{\"55\":1}}],[\"排行榜数据\",{\"1\":{\"55\":1}}],[\"排行榜所存key\",{\"1\":{\"55\":1}}],[\"排行榜最大人数\",{\"1\":{\"55\":1}}],[\"排行榜工具类\",{\"0\":{\"55\":1}}],[\"来表示\",{\"1\":{\"134\":1}}],[\"来查看版本号\",{\"1\":{\"129\":1}}],[\"来实现互斥\",{\"1\":{\"103\":1}}],[\"来使用\",{\"1\":{\"82\":1}}],[\"来管理\",{\"1\":{\"79\":1}}],[\"来拼接为本场的数据\",{\"1\":{\"55\":1}}],[\"来区分是谁的数据\",{\"1\":{\"55\":1}}],[\"来获取到\",{\"1\":{\"39\":1}}],[\"拼接为本场考试使用的key\",{\"1\":{\"55\":1}}],[\"接加入该事务\",{\"1\":{\"74\":1}}],[\"接收\",{\"1\":{\"72\":2}}],[\"接收数据实体类\",{\"0\":{\"54\":1}}],[\"接口注入数据\",{\"0\":{\"91\":1}}],[\"接口放开以下接口的访问\",{\"1\":{\"86\":1}}],[\"接口中的方法\",{\"1\":{\"71\":1}}],[\"接口\",{\"1\":{\"68\":1,\"71\":1}}],[\"接口有两个常用的实现类\",{\"1\":{\"61\":1}}],[\"接口实现类最常见的是org\",{\"1\":{\"61\":1}}],[\"接口是\",{\"1\":{\"60\":1}}],[\"接口和映射文件同包同名\",{\"1\":{\"42\":1}}],[\"接口对象是线程不安全的\",{\"1\":{\"34\":1}}],[\"接口对象是一个重量级对象\",{\"1\":{\"34\":1}}],[\"接口对象用于执行持久化操作\",{\"1\":{\"34\":1}}],[\"准备测试数据\",{\"1\":{\"52\":1}}],[\"由于该方法是在处理器方法执行完后执行\",{\"1\":{\"71\":1}}],[\"由于\",{\"1\":{\"69\":1}}],[\"由于redis的sort排序仅支持一个字段进行升序或降序\",{\"1\":{\"52\":1}}],[\"由它调用其它组件处理用户的请求\",{\"1\":{\"69\":1}}],[\"由此我们可以进行尝试是否可行\",{\"1\":{\"52\":1}}],[\"由此我们可以思考将两个分数组装为一个double类型的分数来进行排序\",{\"1\":{\"52\":1}}],[\"同时它还提供了\",{\"1\":{\"72\":1}}],[\"同时使用会进行两次判断\",{\"1\":{\"17\":1}}],[\"同样需要使用\",{\"1\":{\"55\":1}}],[\"同分数时我们需要按照考试是时长进行升序\",{\"1\":{\"52\":1}}],[\"思路\",{\"1\":{\"52\":1}}],[\"+1\",{\"1\":{\"134\":1}}],[\"+ex\",{\"1\":{\"68\":1}}],[\"+result\",{\"1\":{\"68\":1}}],[\"+\",{\"1\":{\"50\":1,\"54\":1,\"55\":9,\"59\":5,\"67\":1,\"68\":4,\"87\":1,\"90\":1,\"97\":2,\"150\":4}}],[\"网络url路径\",{\"1\":{\"50\":1}}],[\"网址收集\",{\"0\":{\"4\":1}}],[\"生成自增序列\",{\"1\":{\"134\":1}}],[\"生成一对密钥后就可以直接使用了\",{\"1\":{\"59\":1}}],[\"生成密钥对\",{\"1\":{\"59\":1}}],[\"生成的图片\",{\"1\":{\"50\":1}}],[\"生成需要的对象\",{\"1\":{\"50\":1}}],[\"生成案例实体\",{\"1\":{\"50\":1}}],[\"循环给\",{\"1\":{\"50\":1}}],[\"循环时在同一行进行循环\",{\"1\":{\"50\":1}}],[\"绑定到request\",{\"1\":{\"90\":1}}],[\"绑定列表\",{\"1\":{\"50\":2}}],[\"绑定模板配置\",{\"1\":{\"50\":1}}],[\"测试部门3\",{\"1\":{\"129\":2,\"138\":1,\"139\":1}}],[\"测试部门2\",{\"1\":{\"129\":4,\"138\":2,\"139\":2}}],[\"测试顶级部门\",{\"1\":{\"129\":8,\"138\":4,\"139\":4}}],[\"测试是否可行\",{\"0\":{\"111\":1}}],[\"测试下是否成功\",{\"0\":{\"83\":1}}],[\"测试时请不要使用该参数\",{\"1\":{\"55\":1}}],[\"测试用户名\",{\"1\":{\"50\":1}}],[\"测试生成\",{\"1\":{\"50\":1}}],[\"测试依赖\",{\"1\":{\"36\":1,\"68\":1}}],[\"演示示例\",{\"1\":{\"50\":1}}],[\"例如统计结果\",{\"1\":{\"73\":1}}],[\"例如在controller方法中加入数据\",{\"1\":{\"71\":1}}],[\"例如examuserid\",{\"1\":{\"58\":1}}],[\"例如库中图片地址\",{\"1\":{\"50\":2}}],[\"例如传入的参数是\",{\"1\":{\"43\":1}}],[\"案例\",{\"0\":{\"50\":1,\"102\":1,\"107\":1}}],[\"输入下面命令可以进到编辑页面\",{\"1\":{\"150\":1}}],[\"输入子集获取从父级到当前子集的组织拼接\",{\"1\":{\"129\":1}}],[\"输入父级获取子父级的组织拼接\",{\"1\":{\"129\":1}}],[\"输入流\",{\"1\":{\"49\":1}}],[\"输出示例\",{\"1\":{\"129\":2,\"138\":1,\"139\":1}}],[\"输出到文件\",{\"1\":{\"50\":1}}],[\"输出结果为\",{\"1\":{\"52\":1,\"111\":1}}],[\"输出结果\",{\"1\":{\"25\":4,\"26\":6}}],[\"仅在更新时进行处理\",{\"1\":{\"46\":1}}],[\"仅在插入时进行处理\",{\"1\":{\"46\":1}}],[\"更新和插入时都进行处理\",{\"1\":{\"46\":1}}],[\"更新时间\",{\"1\":{\"46\":1}}],[\"更新人\",{\"1\":{\"46\":1}}],[\"更改为true\",{\"1\":{\"39\":1}}],[\"提取到类上作为一级请求使用\",{\"1\":{\"70\":1}}],[\"提取公共字段\",{\"0\":{\"46\":1}}],[\"提供了不同的映射器实现不同的映射方式\",{\"1\":{\"69\":1}}],[\"提供了\",{\"1\":{\"68\":1}}],[\"提供了两种\",{\"1\":{\"61\":1}}],[\"提供了对第三方集成到\",{\"1\":{\"60\":1}}],[\"提供\",{\"1\":{\"60\":1}}],[\"提供框架的基本组成部分\",{\"1\":{\"60\":1}}],[\"提供面向切面编程\",{\"1\":{\"60\":1}}],[\"提供的持久层框架包括\",{\"1\":{\"33\":1}}],[\"双引号\",{\"1\":{\"44\":1}}],[\"单例\",{\"1\":{\"62\":2}}],[\"单引号\",{\"1\":{\"44\":1}}],[\"单独使用\",{\"0\":{\"35\":1},\"1\":{\"39\":1}}],[\"大于等于\",{\"1\":{\"44\":1}}],[\"大于\",{\"1\":{\"44\":1}}],[\"大圣云沙箱\",{\"1\":{\"13\":1}}],[\"备注\",{\"1\":{\"44\":1}}],[\"字节公共库地址\",{\"1\":{\"126\":1}}],[\"字节跳动静态资源公共库\",{\"1\":{\"7\":1}}],[\"字段\",{\"1\":{\"58\":1}}],[\"字符串的解释\",{\"1\":{\"140\":1}}],[\"字符\",{\"1\":{\"44\":1}}],[\"转移变量的元素值到目的变量\",{\"1\":{\"58\":1}}],[\"转义符号\",{\"1\":{\"44\":1}}],[\"转义字符\",{\"0\":{\"44\":1}}],[\"转换后的list\",{\"1\":{\"26\":6}}],[\"那组尖括号里所包的类型\",{\"1\":{\"43\":1}}],[\"那么执行\",{\"1\":{\"145\":1}}],[\"那么我们可能会一直if判断下去\",{\"1\":{\"112\":1}}],[\"那么可以考虑将一个字段变更为升序排序且由于我们这边是以考试为思路来设计所以可以考虑使用考试的最高分减去当前人的考试分数获取一个新的升序分数\",{\"1\":{\"52\":1}}],[\"那么\",{\"1\":{\"43\":2}}],[\"那么需要使用jsonarray\",{\"1\":{\"26\":1}}],[\"那么就判断字段上是否存在\",{\"1\":{\"21\":2}}],[\"里传入的是\",{\"1\":{\"43\":1}}],[\"里面可以写通用的\",{\"1\":{\"43\":1}}],[\"暂时常用的就这些\",{\"1\":{\"43\":1}}],[\"片段\",{\"1\":{\"43\":1}}],[\"唯一不可重复\",{\"1\":{\"43\":1}}],[\"遍历的集合中的每一个数据\",{\"1\":{\"43\":1}}],[\"要添加在\",{\"1\":{\"161\":1}}],[\"要查询的字段名\",{\"1\":{\"133\":1}}],[\"要查询的表\",{\"1\":{\"129\":6,\"136\":2,\"137\":2,\"138\":2,\"139\":2}}],[\"要被增强的对象\",{\"1\":{\"66\":1}}],[\"要么有\",{\"1\":{\"63\":1}}],[\"要与代码中调用者\",{\"1\":{\"63\":1}}],[\"要取的key值\",{\"1\":{\"58\":1}}],[\"要弹出的key\",{\"1\":{\"58\":1}}],[\"要引用的标签\",{\"1\":{\"43\":1}}],[\"要遍历的集合\",{\"1\":{\"43\":1}}],[\"要求唯一\",{\"1\":{\"62\":1}}],[\"要求\",{\"1\":{\"42\":1,\"64\":1}}],[\"一星期的最后一天\",{\"1\":{\"103\":1}}],[\"一星期的第一天\",{\"1\":{\"103\":1}}],[\"一个类被\",{\"1\":{\"66\":1}}],[\"一般用于加载除控制器层的\",{\"1\":{\"72\":1}}],[\"一般都是在静态资源型下的所有\",{\"1\":{\"72\":1}}],[\"一般会把异常发生的时间\",{\"1\":{\"68\":1}}],[\"一般是类中的业务方法\",{\"1\":{\"66\":1}}],[\"一般是业务逻辑类的对象\",{\"1\":{\"66\":1}}],[\"一般使用id居多\",{\"1\":{\"62\":1}}],[\"一般称为hashkey\",{\"1\":{\"58\":1}}],[\"一般省略\",{\"1\":{\"43\":1}}],[\"一词来源于\",{\"1\":{\"33\":1}}],[\"实现代码\",{\"0\":{\"113\":1}}],[\"实现的\",{\"1\":{\"68\":1}}],[\"实现类的方法上添加事务注解\",{\"1\":{\"74\":1}}],[\"实现类\",{\"1\":{\"68\":1}}],[\"实现示例\",{\"0\":{\"68\":1}}],[\"实例调用无参构造器创建对象并对其属性进行初始化\",{\"1\":{\"63\":1}}],[\"实例中获取\",{\"1\":{\"34\":1}}],[\"实际输出的图片\",{\"1\":{\"50\":1}}],[\"实体类中的对应的属性的类型\",{\"1\":{\"43\":1}}],[\"区分大小写\",{\"1\":{\"43\":1}}],[\"主键列使用\",{\"1\":{\"43\":1}}],[\"或者执行\",{\"1\":{\"143\":1}}],[\"或者\",{\"1\":{\"103\":1}}],[\"或是实现类\",{\"1\":{\"63\":1}}],[\"或\",{\"1\":{\"43\":1}}],[\"或jsonobject\",{\"1\":{\"25\":1}}],[\"路径查找文件\",{\"1\":{\"42\":1}}],[\"指定一个版本进行安装\",{\"1\":{\"162\":1}}],[\"指定库还原\",{\"1\":{\"150\":1}}],[\"指定字符集\",{\"1\":{\"72\":1}}],[\"指定spring配置文件的位置\",{\"1\":{\"72\":1}}],[\"指定干活的拦截器\",{\"1\":{\"71\":2}}],[\"指定切入点为\",{\"1\":{\"67\":3}}],[\"指定的话就是\",{\"1\":{\"43\":1}}],[\"指定包下的所有mapper接口\",{\"1\":{\"42\":1}}],[\"指导者指挥建造者\",{\"1\":{\"34\":1}}],[\"属性\",{\"1\":{\"74\":1}}],[\"属性表示请求中的参数名称\",{\"1\":{\"72\":1}}],[\"属性表示\",{\"1\":{\"68\":2}}],[\"属性用于指定要匹配的\",{\"1\":{\"64\":1}}],[\"属性用于指定要注入的值\",{\"1\":{\"64\":1}}],[\"属性注入\",{\"1\":{\"64\":1}}],[\"属性指定的类\",{\"1\":{\"63\":1}}],[\"属性其他表中嵌套是用于指定当前\",{\"1\":{\"43\":1}}],[\"属性是由\",{\"1\":{\"70\":1}}],[\"属性是\",{\"1\":{\"43\":1}}],[\"属性是传入的参数类型\",{\"1\":{\"43\":2}}],[\"属性是在实体类与数据库表字段不符时使用的\",{\"1\":{\"43\":1}}],[\"属性是指定要返回的java实体类\",{\"1\":{\"43\":1}}],[\"属性是这个\",{\"1\":{\"43\":3}}],[\"属性值均\",{\"1\":{\"68\":1}}],[\"属性值\",{\"1\":{\"42\":1,\"62\":2,\"63\":1}}],[\"属性名称\",{\"1\":{\"62\":1}}],[\"属性名\",{\"1\":{\"42\":1,\"62\":1}}],[\"点击\",{\"1\":{\"42\":1}}],[\"不同的node都使用这个npm\",{\"1\":{\"161\":1}}],[\"不同的请求路径\",{\"1\":{\"70\":1}}],[\"不支持简单密码了\",{\"1\":{\"149\":1,\"157\":1}}],[\"不应该执行返回false\",{\"1\":{\"108\":1}}],[\"不允许为空值\",{\"1\":{\"103\":4}}],[\"不然会出现奇怪的问题\",{\"1\":{\"150\":1}}],[\"不然\",{\"1\":{\"77\":1}}],[\"不想使用的时候直接移除配置\",{\"1\":{\"73\":1}}],[\"不可重复读\",{\"1\":{\"73\":1}}],[\"不写配置文件也能自动转换成json\",{\"1\":{\"72\":1}}],[\"不指定\",{\"1\":{\"70\":1}}],[\"不能被增强的\",{\"1\":{\"66\":1}}],[\"不能为null\",{\"1\":{\"58\":1}}],[\"不延迟创建对象\",{\"1\":{\"62\":1}}],[\"不再从类路径中读取配置文件\",{\"1\":{\"61\":1}}],[\"不排斥各种优秀的开源框架\",{\"1\":{\"60\":1}}],[\"不要使用两次不同公钥对私钥进行解密\",{\"1\":{\"59\":1}}],[\"不是\",{\"1\":{\"58\":1}}],[\"不是长整型\",{\"1\":{\"58\":1}}],[\"不存在则返回\",{\"1\":{\"91\":2}}],[\"不存在并发问题\",{\"1\":{\"73\":1}}],[\"不存在为false\",{\"1\":{\"58\":1}}],[\"不存在\",{\"1\":{\"58\":2}}],[\"不等于\",{\"1\":{\"44\":1}}],[\"不区分大小写\",{\"1\":{\"43\":1}}],[\"不常用sql方法\",{\"0\":{\"132\":1}}],[\"不常用\",{\"1\":{\"42\":1}}],[\"不传入时查询全部数据\",{\"1\":{\"41\":1}}],[\"不需要花费精力在驱动的加载\",{\"1\":{\"33\":1}}],[\"传入\",{\"1\":{\"41\":1}}],[\"必须为10\",{\"1\":{\"112\":1}}],[\"必须为15\",{\"1\":{\"112\":2}}],[\"必须开启事务\",{\"1\":{\"73\":1}}],[\"必须是\",{\"1\":{\"64\":1}}],[\"必须时\",{\"1\":{\"40\":1}}],[\"必填参数\",{\"1\":{\"21\":1}}],[\"必填字段list\",{\"1\":{\"21\":2}}],[\"必填字段\",{\"1\":{\"21\":1}}],[\"关闭nodejs版本控制\",{\"1\":{\"163\":1}}],[\"关闭链接\",{\"1\":{\"39\":1}}],[\"关系\",{\"1\":{\"33\":1,\"63\":1}}],[\"返回的数据实体\",{\"1\":{\"95\":1}}],[\"返回的结果可以是\",{\"1\":{\"69\":1}}],[\"返回的结果\",{\"1\":{\"68\":2}}],[\"返回值为boolean\",{\"1\":{\"71\":1}}],[\"返回值类型\",{\"1\":{\"67\":1}}],[\"返回所有键值对\",{\"1\":{\"58\":1}}],[\"返回\",{\"1\":{\"39\":1,\"58\":1}}],[\"返回不同类型的io流对象\",{\"1\":{\"34\":1}}],[\"参数值\",{\"1\":{\"91\":1}}],[\"参数集合\",{\"1\":{\"91\":1}}],[\"参数\",{\"1\":{\"67\":1}}],[\"参数类型和参数个数\",{\"1\":{\"67\":1}}],[\"参数是集合类型\",{\"1\":{\"43\":1}}],[\"参数是配置文件名车\",{\"1\":{\"39\":1}}],[\"参考学过的jdbc\",{\"1\":{\"37\":1}}],[\"所谓事务传播行为是指\",{\"1\":{\"73\":1}}],[\"所谓通知是指拦截到\",{\"1\":{\"66\":1}}],[\"所谓连接点是指那些被拦截到的点\",{\"1\":{\"66\":1}}],[\"所有我们也就针对方法进行事务的控制\",{\"1\":{\"73\":1}}],[\"所有以\",{\"1\":{\"72\":1}}],[\"所有的请求都会经过此控制器\",{\"1\":{\"72\":1}}],[\"所有\",{\"1\":{\"58\":1}}],[\"所处的线程封闭到\",{\"1\":{\"39\":1}}],[\"所以我们需要在全局配置中进行配置\",{\"1\":{\"125\":1}}],[\"所以使用时必须指定type\",{\"1\":{\"99\":1}}],[\"所以该方法可以修改处理器方法的处理结果数据\",{\"1\":{\"71\":1}}],[\"所以一般情况需要程序员根据业务需求开发\",{\"1\":{\"69\":1}}],[\"所以一个应用只需要一个该对象即可\",{\"1\":{\"34\":1}}],[\"所以每次数据库会话结束前需要马上调用其\",{\"1\":{\"34\":1}}],[\"所以简单请求可以封装一下\",{\"1\":{\"29\":1}}],[\"获取临时密码\",{\"1\":{\"149\":1}}],[\"获取默认执行责任练\",{\"1\":{\"120\":1}}],[\"获取的\",{\"1\":{\"90\":1,\"91\":1}}],[\"获取当前用户redis\",{\"1\":{\"90\":1}}],[\"获取当前key下所有的键值对\",{\"1\":{\"58\":1}}],[\"获取加密内容使用base64进行编码\",{\"1\":{\"59\":1}}],[\"获取公钥\",{\"1\":{\"59\":1}}],[\"获取私钥\",{\"1\":{\"59\":1}}],[\"获取密钥对\",{\"1\":{\"59\":1}}],[\"获取集合指定位置的值\",{\"1\":{\"58\":1}}],[\"获取指定区间的值\",{\"1\":{\"58\":1}}],[\"获取指定\",{\"1\":{\"58\":1}}],[\"获取指定key的值string\",{\"1\":{\"58\":1}}],[\"获取某个\",{\"1\":{\"58\":1}}],[\"获取某个key下所有的value\",{\"1\":{\"58\":1}}],[\"获取变量中值的长度\",{\"1\":{\"58\":1}}],[\"获取变量中的值\",{\"1\":{\"58\":1}}],[\"获取过期时间\",{\"1\":{\"58\":1}}],[\"获取为空\",{\"1\":{\"58\":1}}],[\"获取排序后所有的key\",{\"1\":{\"55\":1}}],[\"获取hash表中所有数据\",{\"1\":{\"55\":1}}],[\"获取模板输入流\",{\"1\":{\"50\":1}}],[\"获取链接\",{\"1\":{\"39\":1}}],[\"获取\",{\"1\":{\"39\":1,\"58\":3}}],[\"工作原理\",{\"1\":{\"69\":1}}],[\"工厂创建责任链\",{\"0\":{\"120\":1}}],[\"工厂模式使其创建过程延迟到子类进行\",{\"1\":{\"106\":1}}],[\"工厂模式\",{\"0\":{\"105\":1}}],[\"工厂模式的微妙实现\",{\"1\":{\"60\":1}}],[\"工厂调取\",{\"1\":{\"39\":1}}],[\"工厂\",{\"1\":{\"39\":1}}],[\"工具类\",{\"0\":{\"15\":1,\"21\":1,\"49\":1},\"1\":{\"30\":1}}],[\"时需要引入\",{\"1\":{\"77\":1}}],[\"时需要手动提交\",{\"1\":{\"34\":1}}],[\"时候\",{\"1\":{\"74\":2}}],[\"时是所有类型的请求都会进行处理\",{\"1\":{\"70\":1}}],[\"时是不会进行自动注入的\",{\"1\":{\"46\":1}}],[\"时间类型\",{\"1\":{\"58\":2}}],[\"时间\",{\"1\":{\"58\":2}}],[\"时\",{\"1\":{\"58\":1}}],[\"时根据\",{\"1\":{\"41\":1}}],[\"时重点是如何获取\",{\"1\":{\"39\":1}}],[\"这段配置是\",{\"1\":{\"72\":1}}],[\"这种方式实现了对事务控制的最大程度的解耦\",{\"1\":{\"73\":1}}],[\"这种就可以把\",{\"1\":{\"70\":1}}],[\"这种注入方式简单\",{\"1\":{\"63\":1}}],[\"这是适配器模式的应用\",{\"1\":{\"69\":1}}],[\"这里需要注意的是\",{\"1\":{\"161\":1}}],[\"这里示例展示我这边找到的文件替换的js\",{\"1\":{\"126\":1}}],[\"这里我们可以打开导出的html文件找多两个js引用\",{\"1\":{\"126\":1}}],[\"这里是自己手动去设置责任链调用\",{\"1\":{\"119\":1}}],[\"这里是使用默认写好的内置责任链来使用\",{\"1\":{\"119\":1}}],[\"这里切记使用的是new而不是spring管理的实体\",{\"1\":{\"92\":1}}],[\"这里可以同时配置多个拦截器\",{\"1\":{\"71\":1}}],[\"这里所说的\",{\"1\":{\"69\":1}}],[\"这里就不写了\",{\"1\":{\"50\":1}}],[\"这些常量均是以\",{\"1\":{\"73\":1}}],[\"这些点指的是方法\",{\"1\":{\"66\":1}}],[\"这些配置也可以在mybaits\",{\"1\":{\"38\":1}}],[\"这个配置文件也有一些默认规则\",{\"1\":{\"72\":1}}],[\"这个注解可以理解为\",{\"1\":{\"70\":1}}],[\"这个使用\",{\"1\":{\"68\":1}}],[\"这个代理是由容器自动生成的\",{\"1\":{\"68\":1}}],[\"这个过程交给容器自动完成的称为注入\",{\"1\":{\"63\":1}}],[\"这个属性不常用\",{\"1\":{\"42\":1}}],[\"这样用户只需指定需要建造的类型就可以得到具体产品\",{\"1\":{\"34\":1}}],[\"$file\",{\"1\":{\"150\":2}}],[\"$daysago\",{\"1\":{\"150\":1}}],[\"$date\",{\"1\":{\"150\":1}}],[\"$path\",{\"1\":{\"150\":2}}],[\"$log\",{\"1\":{\"150\":7}}],[\"$3$4\",{\"1\":{\"97\":1}}],[\"$2\",{\"1\":{\"97\":2}}],[\"$1`\",{\"1\":{\"150\":2}}],[\"$1\",{\"1\":{\"97\":3,\"150\":2}}],[\"$\",{\"1\":{\"37\":4,\"80\":4,\"150\":7}}],[\"连接点\",{\"1\":{\"66\":1}}],[\"连接数据库的四大参数注意数据库版本使用的是mysql8\",{\"1\":{\"37\":1}}],[\"连接的创建\",{\"1\":{\"33\":1}}],[\"数量\",{\"1\":{\"58\":2}}],[\"数据绑定支持\",{\"1\":{\"72\":1}}],[\"数据填充\",{\"1\":{\"71\":1}}],[\"数据库不存在时创建\",{\"1\":{\"130\":1}}],[\"数据库连接配置文件\",{\"0\":{\"78\":1}}],[\"数据库中的类型column的类型\",{\"1\":{\"43\":1}}],[\"数据库配置\",{\"0\":{\"38\":1}}],[\"数据源\",{\"1\":{\"37\":1}}],[\"数据源的名称\",{\"1\":{\"37\":1}}],[\"数学科学计算器\",{\"1\":{\"14\":1}}],[\"8以上\",{\"1\":{\"110\":1}}],[\"86400\",{\"1\":{\"90\":1}}],[\"8<\",{\"1\":{\"72\":3,\"77\":4}}],[\"8为标准转化成字符串\",{\"1\":{\"59\":1}}],[\"83\",{\"1\":{\"52\":2}}],[\"82\",{\"1\":{\"52\":1}}],[\"81\",{\"1\":{\"52\":3}}],[\"8001\",{\"1\":{\"85\":1}}],[\"8080\",{\"1\":{\"72\":1}}],[\"80\",{\"1\":{\"52\":3}}],[\"8\",{\"1\":{\"37\":1,\"38\":1,\"40\":1,\"58\":1,\"59\":1,\"68\":1,\"72\":4,\"74\":1,\"78\":1,\"80\":1,\"81\":1,\"82\":1,\"129\":1,\"148\":4,\"153\":1}}],[\"文字时按这种方式可以循环渲染\",{\"1\":{\"50\":1}}],[\"文字时\",{\"1\":{\"50\":1}}],[\"文件不存在\",{\"1\":{\"150\":1}}],[\"文件其他都交给\",{\"1\":{\"79\":1}}],[\"文件名\",{\"1\":{\"78\":1}}],[\"文件名可自定义\",{\"1\":{\"37\":1}}],[\"文件时需要注意以下几点\",{\"1\":{\"41\":1}}],[\"文件的完全限定名\",{\"1\":{\"40\":1}}],[\"文件\",{\"1\":{\"37\":1,\"42\":1,\"72\":1}}],[\"文档\",{\"1\":{\"6\":1}}],[\"文档地址\",{\"0\":{\"6\":1},\"1\":{\"23\":1}}],[\"减少get\",{\"1\":{\"36\":1,\"77\":1}}],[\"依赖导入\",{\"0\":{\"77\":1}}],[\"依赖\",{\"1\":{\"36\":1,\"77\":1}}],[\"可为空\",{\"1\":{\"103\":1}}],[\"可重复读\",{\"1\":{\"73\":1}}],[\"可使用该方法名作为切入点\",{\"1\":{\"68\":1}}],[\"可使用byname\",{\"1\":{\"63\":1}}],[\"可能会出现io错误\",{\"1\":{\"49\":1}}],[\"可以参考官网json\",{\"1\":{\"140\":1}}],[\"可以直接使用\",{\"1\":{\"72\":1}}],[\"可以使用npm\",{\"1\":{\"161\":1}}],[\"可以使用\",{\"1\":{\"72\":3,\"103\":1,\"129\":1}}],[\"可以添加到方法上\",{\"1\":{\"70\":1}}],[\"可以分为两种\",{\"1\":{\"63\":1}}],[\"可以通过为标签\",{\"1\":{\"63\":1}}],[\"可以通过注解方便地测试\",{\"1\":{\"60\":1}}],[\"可以方便地实现对程序进行权限拦截和运行监控等功能\",{\"1\":{\"60\":1}}],[\"可以将所有对象的创建和依赖关系的维护交给\",{\"1\":{\"60\":1}}],[\"可以将一个产品的内部表象与产品的生成过程分割开来\",{\"1\":{\"34\":1}}],[\"可以省略事务\",{\"1\":{\"73\":1}}],[\"可以省略\",{\"1\":{\"43\":1}}],[\"可不导入\",{\"1\":{\"36\":1}}],[\"中给的解决方法\",{\"0\":{\"145\":1}}],[\"中下载对应的版本\",{\"1\":{\"143\":1}}],[\"中存在的key\",{\"1\":{\"90\":1}}],[\"中定义了事务描述相关的三类常量\",{\"1\":{\"73\":1}}],[\"中定义对应的标签\",{\"1\":{\"43\":1}}],[\"中启用\",{\"1\":{\"72\":1}}],[\"中是一样的\",{\"1\":{\"70\":1}}],[\"中配置多个包扫描时使用\",{\"1\":{\"68\":1}}],[\"中寻找指定的\",{\"1\":{\"61\":1}}],[\"中只要有一个key存在\",{\"1\":{\"58\":1}}],[\"中的proceed方法表示目标方法被执行\",{\"1\":{\"68\":1}}],[\"中的字符串\",{\"1\":{\"43\":1}}],[\"中的方法\",{\"1\":{\"43\":1}}],[\"中可以\",{\"1\":{\"42\":1}}],[\"中一次会话已创建sqlsession对象开始到sqlsession对象关闭为结束\",{\"1\":{\"34\":1}}],[\"中分别表示为\",{\"1\":{\"33\":1}}],[\"默认数据库引擎\",{\"1\":{\"153\":1}}],[\"默认事务超时时限\",{\"1\":{\"73\":1}}],[\"默认监听\",{\"1\":{\"72\":1}}],[\"默认返回的是对象而不是请求或转发的页面\",{\"1\":{\"70\":1}}],[\"默认是数据库的隔离级别\",{\"1\":{\"74\":1}}],[\"默认是按名称注入\",{\"1\":{\"64\":1}}],[\"默认是不自动注入引用类型属性\",{\"1\":{\"63\":1}}],[\"默认加载\",{\"1\":{\"62\":1}}],[\"默认值即可\",{\"1\":{\"134\":1}}],[\"默认值\",{\"1\":{\"62\":1}}],[\"默认限制为50\",{\"1\":{\"55\":1}}],[\"默认读取那个\",{\"1\":{\"42\":1}}],[\"默认为一年\",{\"1\":{\"55\":1}}],[\"默认为\",{\"1\":{\"34\":1}}],[\"默认的事务隔离级别\",{\"1\":{\"73\":1}}],[\"默认的\",{\"1\":{\"34\":1}}],[\"会将该方法放到专门的方法栈中\",{\"1\":{\"71\":1}}],[\"会自动提交\",{\"1\":{\"34\":1,\"39\":1}}],[\"会开启一个事务\",{\"1\":{\"34\":1}}],[\"也称为中央控制器或者核心控制器\",{\"1\":{\"69\":1}}],[\"也可以去\",{\"1\":{\"83\":1}}],[\"也可以使用数组形式进行接收\",{\"1\":{\"72\":1}}],[\"也可以使用空格进行分割\",{\"1\":{\"68\":1}}],[\"也可以手动配置替代这种简写形式\",{\"1\":{\"72\":1}}],[\"也可以定义方法上\",{\"1\":{\"70\":1}}],[\"也可以按类型匹配\",{\"1\":{\"64\":1}}],[\"也可不在配置文件中显示的注入\",{\"1\":{\"63\":1}}],[\"也被称为应用上下文\",{\"1\":{\"61\":1}}],[\"也不会批量处理更新\",{\"1\":{\"34\":1}}],[\"也就是安装时配置的目录\",{\"1\":{\"160\":1}}],[\"也就是需要配置\",{\"1\":{\"82\":1}}],[\"也就是\",{\"1\":{\"70\":2,\"72\":1}}],[\"也就是我们所说的\",{\"1\":{\"69\":1}}],[\"也就是不自动提交\",{\"1\":{\"34\":1}}],[\"也就是使用了建造者设计模式\",{\"1\":{\"34\":1}}],[\"预处理语句不会被复用\",{\"1\":{\"34\":1}}],[\"事件传播等方面的良好支持\",{\"1\":{\"61\":1}}],[\"事件传播\",{\"1\":{\"60\":1}}],[\"事务的隔离级别\",{\"1\":{\"74\":1}}],[\"事务的粗细粒度\",{\"1\":{\"73\":1}}],[\"事务必须在service层统一控制\",{\"1\":{\"73\":1}}],[\"事务中的方法\",{\"1\":{\"73\":2}}],[\"事务默认超时时限\",{\"1\":{\"73\":1}}],[\"事务传播行为是加在方法上的\",{\"1\":{\"73\":1}}],[\"事务传播行为常量\",{\"1\":{\"73\":1}}],[\"事务传播行为\",{\"1\":{\"73\":1}}],[\"事务隔离级别常量\",{\"1\":{\"73\":1}}],[\"事务隔离级别\",{\"1\":{\"73\":1}}],[\"事务隔离级别将会使用驱动或数据源的默认设置\",{\"1\":{\"34\":1}}],[\"事务定义接口\",{\"1\":{\"73\":1}}],[\"事务\",{\"0\":{\"73\":1},\"1\":{\"37\":1}}],[\"事务类型\",{\"1\":{\"37\":1}}],[\"事实上使用sqlsessionfactorybuilder的原因是将sqlsessionfactory这个复杂对象的创建交由builder来执行\",{\"1\":{\"34\":1}}],[\"将下面这个定时任务写进去\",{\"1\":{\"150\":1}}],[\"将这个目录下的\",{\"1\":{\"146\":1}}],[\"将这些包中添加注解之后对象的创建权限交给spring容器\",{\"1\":{\"80\":1}}],[\"将当前序列值设置为当前表最大id值\",{\"1\":{\"134\":1}}],[\"将自增序列以下面这种形式弄好后\",{\"1\":{\"134\":1}}],[\"将每个检查流程进行分隔处理且互相不影响各自的执行\",{\"1\":{\"112\":1}}],[\"将要扫描的文件全路径写入到对应文件\",{\"1\":{\"110\":1}}],[\"将拦截器进行注册\",{\"0\":{\"92\":1}}],[\"将结果交给视图解析器viewresolver进行解析\",{\"1\":{\"69\":1}}],[\"将结果直接返回给前端控制器dispathcherservlet\",{\"1\":{\"69\":1}}],[\"将结果返回给前端控制器dispatcherservlet\",{\"1\":{\"69\":1}}],[\"将\",{\"1\":{\"68\":1}}],[\"将其替换为字节公共库中的资源就可以打开\",{\"1\":{\"126\":1}}],[\"将其织入\",{\"1\":{\"68\":1}}],[\"将其唯一值设置为外部列表进行存储且使用这个来进行存储\",{\"1\":{\"52\":1}}],[\"将value放置于第一个该值前\",{\"1\":{\"58\":1}}],[\"将数据放入set缓存\",{\"1\":{\"58\":1}}],[\"将报错\",{\"1\":{\"58\":2}}],[\"将创建一个key\",{\"1\":{\"58\":2}}],[\"将值放入缓存并设置时间\",{\"1\":{\"58\":1}}],[\"将值放入缓存\",{\"1\":{\"58\":1}}],[\"将遍历的结果用\",{\"1\":{\"43\":1}}],[\"将sqlsession和线程进行绑定\",{\"1\":{\"39\":1}}],[\"将本次使用的\",{\"1\":{\"39\":1}}],[\"将从由当前环境配置的\",{\"1\":{\"34\":1}}],[\"将一个复杂对象的构建与它的表示分离\",{\"1\":{\"34\":1}}],[\"它的配置文件名默认就叫\",{\"1\":{\"72\":1}}],[\"它的内部封装了jdbc\",{\"1\":{\"33\":1}}],[\"它就相当于\",{\"1\":{\"69\":1}}],[\"它可以获取类路径之外的资源\",{\"1\":{\"61\":1}}],[\"它与\",{\"1\":{\"61\":1}}],[\"它不仅提供了\",{\"1\":{\"61\":1}}],[\"它是根据\",{\"1\":{\"61\":1}}],[\"它主要负责初始化各种\",{\"1\":{\"61\":1}}],[\"它以一种类似于\",{\"1\":{\"60\":1}}],[\"它移除了编码式单例的需要\",{\"1\":{\"60\":1}}],[\"它会创建有如下特性的\",{\"1\":{\"34\":1}}],[\"是业务数据\",{\"1\":{\"95\":1}}],[\"是springmvc为\",{\"1\":{\"72\":1}}],[\"是继\",{\"1\":{\"69\":1}}],[\"是整个流程控制的中心\",{\"1\":{\"69\":1}}],[\"是基于\",{\"1\":{\"68\":1}}],[\"是基础类型的\",{\"1\":{\"61\":1}}],[\"是指把增强应用到目标对象来创建新的代理对象的过程\",{\"1\":{\"66\":1}}],[\"是指通过\",{\"1\":{\"63\":1}}],[\"是目标方法执行之前执行\",{\"1\":{\"66\":1}}],[\"是切入点和通知的结合\",{\"1\":{\"66\":1}}],[\"是对\",{\"1\":{\"65\":1}}],[\"是我自己写的一个异常用于抛出并全局捕获\",{\"1\":{\"59\":1}}],[\"是否只读\",{\"1\":{\"74\":1}}],[\"是否延迟创建对象\",{\"1\":{\"62\":1}}],[\"是否验签通过\",{\"1\":{\"59\":1}}],[\"是否存在\",{\"1\":{\"58\":1}}],[\"是否删除\",{\"1\":{\"46\":1}}],[\"是\",{\"1\":{\"34\":1,\"42\":5,\"61\":1}}],[\"是线程安全的\",{\"1\":{\"34\":1}}],[\"是一个管理\",{\"1\":{\"61\":1}}],[\"是一个基于\",{\"1\":{\"33\":1}}],[\"是一种对象的创建模式\",{\"1\":{\"34\":1}}],[\"系统开销大的对象\",{\"1\":{\"34\":1}}],[\"用什么打码\",{\"1\":{\"99\":1}}],[\"用apiinfobuilder进行定制\",{\"1\":{\"85\":1}}],[\"用到\",{\"1\":{\"79\":1}}],[\"用在接口后\",{\"1\":{\"67\":1}}],[\"用在类名后\",{\"1\":{\"67\":1}}],[\"用在包名后\",{\"1\":{\"67\":1}}],[\"用在方法参数中\",{\"1\":{\"67\":1}}],[\"用于定义\",{\"1\":{\"68\":1}}],[\"用于controller实现类的注解\",{\"1\":{\"65\":1}}],[\"用于dao实现类的的注解\",{\"1\":{\"65\":1}}],[\"用于读取资源文件\",{\"1\":{\"34\":1}}],[\"用户在浏览器中访问相应网页时\",{\"1\":{\"69\":1}}],[\"用户请求的入口控制器\",{\"1\":{\"69\":1}}],[\"用户service实现类的注解\",{\"1\":{\"65\":1}}],[\"用户数据\",{\"1\":{\"41\":1}}],[\"用户id\",{\"1\":{\"41\":1}}],[\"用户联系指导者\",{\"1\":{\"34\":1}}],[\"与启动类平级\",{\"1\":{\"123\":1}}],[\"与spring组合为\",{\"1\":{\"77\":1}}],[\"与实现类\",{\"1\":{\"68\":1}}],[\"与\",{\"1\":{\"44\":1,\"64\":1}}],[\"与建造者\",{\"1\":{\"34\":1}}],[\"与导入的表头进行对应校验来验证模板是否一致\",{\"1\":{\"21\":1}}],[\"角色分指导者\",{\"1\":{\"34\":1}}],[\"使这些\",{\"1\":{\"60\":1}}],[\"使得同样的构建过程可以创建不同的表示\",{\"1\":{\"34\":1}}],[\"使用serviceloader扫描相关对象时我们需要在meta\",{\"1\":{\"110\":1}}],[\"使用工厂创建对应形状\",{\"0\":{\"110\":1}}],[\"使用这个注解后\",{\"1\":{\"70\":1}}],[\"使用该注解\",{\"1\":{\"64\":1}}],[\"使用构造器设置依赖关系\",{\"1\":{\"63\":1}}],[\"使用对象的时候才去创建对象\",{\"1\":{\"62\":1}}],[\"使用资源束\",{\"1\":{\"60\":1}}],[\"使用时可以自己定义\",{\"1\":{\"59\":1}}],[\"使用模糊查询获取当前场考试所有用户的key\",{\"1\":{\"55\":1}}],[\"使用java来实现排行榜\",{\"0\":{\"53\":1}}],[\"使用redis先试思路可行性\",{\"0\":{\"52\":1}}],[\"使用中\",{\"1\":{\"46\":1}}],[\"使用的mapper接口的完全限定名\",{\"1\":{\"42\":1}}],[\"使用的连接池\",{\"1\":{\"42\":1}}],[\"使用相对于类路径的资源\",{\"1\":{\"42\":1}}],[\"使用数据库的连接池\",{\"1\":{\"37\":1}}],[\"使用\",{\"1\":{\"37\":2,\"58\":1,\"68\":1}}],[\"使用反射获取实体类的excel表头\",{\"1\":{\"21\":1}}],[\"使用方式与\",{\"1\":{\"128\":1}}],[\"使用方式\",{\"1\":{\"3\":1}}],[\"从github中找到nvm所在仓库进行下载\",{\"1\":{\"159\":1}}],[\"从redis中删除指定的一个key\",{\"1\":{\"58\":1}}],[\"从threadlocal中获取\",{\"1\":{\"39\":2}}],[\"从\",{\"1\":{\"39\":1,\"42\":1}}],[\"从而可以使一个建造过程生成具有不同的内部表象的产品\",{\"1\":{\"34\":1}}],[\"从0开始\",{\"1\":{\"21\":1}}],[\"又称生成器模式\",{\"1\":{\"34\":1}}],[\"需要放开的接口请求\",{\"1\":{\"125\":1}}],[\"需要从三个方面进行检查\",{\"1\":{\"112\":1}}],[\"需要检查一个产品的是否合格\",{\"1\":{\"112\":1}}],[\"需要传入\",{\"1\":{\"101\":1}}],[\"需要通知\",{\"1\":{\"68\":1}}],[\"需要在springboot启动类上添加\",{\"1\":{\"101\":1}}],[\"需要在此插入\",{\"1\":{\"80\":1}}],[\"需要在方法上添加\",{\"1\":{\"70\":1}}],[\"需要在引用属性上联合使用注解\",{\"1\":{\"64\":1}}],[\"需要在引用属性上使用注解\",{\"1\":{\"64\":1}}],[\"需要在属性上使用注解\",{\"1\":{\"64\":1}}],[\"需要再后面拼接本场考试是谁的数据也就是\",{\"1\":{\"55\":1}}],[\"需要使用简单密码时需要另做修改\",{\"1\":{\"149\":1,\"157\":1}}],[\"需要使用\",{\"1\":{\"55\":1,\"70\":1}}],[\"需要使用sqlsessionfactorybuilder对象的build\",{\"1\":{\"34\":1}}],[\"需要校验的class\",{\"1\":{\"21\":1}}],[\"需要校验的行头是第几行\",{\"1\":{\"21\":1}}],[\"其工作原理是\",{\"1\":{\"68\":1}}],[\"其用法是\",{\"1\":{\"68\":1}}],[\"其就会自动扫描到\",{\"1\":{\"68\":1}}],[\"其内部提供了对各种优秀框架\",{\"1\":{\"60\":1}}],[\"其它标签引用时使用\",{\"1\":{\"43\":1}}],[\"其他占位符都要具有具体的时间含义\",{\"1\":{\"103\":1}}],[\"其他列使用\",{\"1\":{\"43\":1}}],[\"其他无法处理\",{\"1\":{\"22\":1}}],[\"其有很多方法通过加载并解析资源文件\",{\"1\":{\"34\":1}}],[\"顾名思义就是资源\",{\"1\":{\"34\":1}}],[\"类似与二级请求\",{\"1\":{\"70\":1}}],[\"类的某引用类型属性类型同源\",{\"1\":{\"63\":1}}],[\"类的属性名相同时\",{\"1\":{\"63\":1}}],[\"类的完全限定名\",{\"1\":{\"62\":1}}],[\"类名\",{\"1\":{\"62\":1}}],[\"类\",{\"1\":{\"34\":1}}],[\"类型的字符串\",{\"1\":{\"29\":1}}],[\"对整个方法进行开启提交回滚\",{\"1\":{\"73\":1}}],[\"对方法中的某几行的代码进行开启提交回滚\",{\"1\":{\"73\":1}}],[\"对相应的处理器发起处理\",{\"1\":{\"69\":1}}],[\"对处理器进行执行\",{\"1\":{\"69\":1}}],[\"对具体的用户请求进行处理\",{\"1\":{\"69\":1}}],[\"对于引用类型属性的注入\",{\"1\":{\"63\":1}}],[\"对\",{\"0\":{\"67\":1},\"1\":{\"60\":1}}],[\"对数据分段解密\",{\"1\":{\"59\":1}}],[\"对数据分段加密\",{\"1\":{\"59\":1}}],[\"对一个\",{\"1\":{\"58\":2}}],[\"对象进行接收\",{\"1\":{\"72\":1}}],[\"对象中的属性一致时\",{\"1\":{\"72\":1}}],[\"对象销毁方法\",{\"1\":{\"62\":1}}],[\"对象type\",{\"1\":{\"37\":1}}],[\"对象\",{\"1\":{\"34\":1}}],[\"对象分析\",{\"0\":{\"34\":1}}],[\"对jdbc进行了封装\",{\"1\":{\"33\":1}}],[\"映射器找到相应的处理类时\",{\"1\":{\"69\":1}}],[\"映射\",{\"1\":{\"33\":1}}],[\"就抛出异常\",{\"1\":{\"74\":1}}],[\"就以非事务方式执行\",{\"1\":{\"74\":1}}],[\"就直接加入该事务\",{\"1\":{\"74\":2}}],[\"就直\",{\"1\":{\"74\":1}}],[\"就叫做声明式事务管理\",{\"1\":{\"73\":1}}],[\"就会创建一个新的事务\",{\"1\":{\"73\":1,\"74\":1}}],[\"就称为事务传播行为\",{\"1\":{\"73\":1}}],[\"就使用到了对json的支持\",{\"1\":{\"72\":1}}],[\"就产生一个结果代理类\",{\"1\":{\"66\":1}}],[\"就是上一行命令的地址\",{\"1\":{\"161\":1}}],[\"就是我们在redis中存储的数据\",{\"1\":{\"90\":1}}],[\"就是为了让他监听到我们\",{\"1\":{\"72\":1}}],[\"就是指我们的\",{\"1\":{\"69\":1}}],[\"就是一些代码完成的某个功能\",{\"1\":{\"66\":1}}],[\"就是一个大工厂\",{\"1\":{\"60\":1}}],[\"就是数据库中的一张表\",{\"1\":{\"33\":1}}],[\"就不再去写测试方法调用了\",{\"1\":{\"41\":1}}],[\"就能完成对数据的持久化操作\",{\"1\":{\"33\":1}}],[\"屏蔽了jdbcapi底层的访问细节\",{\"1\":{\"33\":1}}],[\"并生成代理\",{\"1\":{\"68\":1}}],[\"并按通知类型与切入点\",{\"1\":{\"68\":1}}],[\"并交给\",{\"1\":{\"65\":1}}],[\"并调用它们的生命周期方法\",{\"1\":{\"61\":1}}],[\"并且可以指定平台\",{\"1\":{\"163\":1}}],[\"并且可以把配置和依赖从实际编码逻辑中解耦\",{\"1\":{\"60\":1}}],[\"并且读取顺序为从第一行顺序向下读取\",{\"1\":{\"110\":1}}],[\"并且添加了国际化\",{\"1\":{\"60\":1}}],[\"并且改名为mybatis\",{\"1\":{\"33\":1}}],[\"并以utf\",{\"1\":{\"59\":1}}],[\"并赋值该\",{\"1\":{\"58\":2}}],[\"并将结果直接映射为java对象\",{\"1\":{\"33\":1}}],[\"并通过java对象和statement中的sql的动态参数进行映射生成最终执行的sql语句\",{\"1\":{\"33\":1}}],[\"基于java的持久层框架\",{\"1\":{\"33\":1}}],[\"的启动配置里选择\",{\"1\":{\"83\":1}}],[\"的默认为repeatable\",{\"1\":{\"73\":1}}],[\"的配置\",{\"1\":{\"72\":1}}],[\"的配置文件\",{\"1\":{\"72\":1}}],[\"的配置文件时\",{\"1\":{\"61\":1}}],[\"的延申标签\",{\"1\":{\"70\":1}}],[\"的控制下\",{\"1\":{\"69\":1}}],[\"的存在降低了组件之间的耦合性\",{\"1\":{\"69\":1}}],[\"的大脑\",{\"1\":{\"69\":1}}],[\"的注解适配自动代理生成器\",{\"1\":{\"68\":1}}],[\"的代理\",{\"1\":{\"68\":1}}],[\"的代理对象\",{\"1\":{\"68\":1}}],[\"的标识方法\",{\"1\":{\"68\":1}}],[\"的自动代理生成器\",{\"1\":{\"68\":1}}],[\"的实现\",{\"0\":{\"67\":1}}],[\"的实例化工作\",{\"1\":{\"61\":1}}],[\"的方法是不能作为连接点与切入点的\",{\"1\":{\"66\":1}}],[\"的方式\",{\"1\":{\"64\":1}}],[\"的依赖注入中大量使用\",{\"1\":{\"63\":1}}],[\"的区别是\",{\"1\":{\"61\":1}}],[\"的所有功能\",{\"1\":{\"61\":1}}],[\"的子接口\",{\"1\":{\"61\":1}}],[\"的子标签\",{\"1\":{\"42\":5}}],[\"的工厂\",{\"1\":{\"61\":1}}],[\"的功能\",{\"1\":{\"60\":1}}],[\"的使用难度\",{\"1\":{\"60\":1}}],[\"的直接支持\",{\"1\":{\"60\":1}}],[\"的\",{\"1\":{\"58\":2,\"61\":1,\"63\":3,\"64\":2,\"68\":1,\"77\":1}}],[\"的值进行加减操作\",{\"1\":{\"58\":2}}],[\"的过期时间\",{\"1\":{\"58\":1}}],[\"的提交和回滚\",{\"1\":{\"37\":1}}],[\"的持久层框架\",{\"1\":{\"33\":1}}],[\"的组合\",{\"1\":{\"33\":1,\"70\":1}}],[\"的一个开源项目\",{\"1\":{\"33\":1}}],[\"年份\",{\"1\":{\"103\":2}}],[\"年\",{\"1\":{\"33\":1,\"103\":1}}],[\"年这个项目由\",{\"1\":{\"33\":1}}],[\"迁移到了\",{\"1\":{\"33\":1}}],[\"配置npm下载包时的全局包路径\",{\"1\":{\"161\":1}}],[\"配置nvm下载源\",{\"1\":{\"160\":1}}],[\"配置全局npm\",{\"0\":{\"161\":1}}],[\"配置下载源\",{\"0\":{\"160\":1}}],[\"配置mysql默认编码\",{\"1\":{\"153\":1}}],[\"配置mysql\",{\"0\":{\"153\":1}}],[\"配置类\",{\"1\":{\"123\":1}}],[\"配置数据库链接数据源\",{\"1\":{\"80\":1}}],[\"配置spring\",{\"0\":{\"79\":1}}],[\"配置中文乱码的过滤器\",{\"1\":{\"72\":1}}],[\"配置拦截路径url\",{\"1\":{\"72\":1}}],[\"配置拦截器需要在\",{\"1\":{\"71\":1}}],[\"配置静态资源\",{\"1\":{\"72\":1}}],[\"配置之后\",{\"1\":{\"72\":1}}],[\"配置后缀\",{\"1\":{\"72\":1}}],[\"配置前缀\",{\"1\":{\"72\":1}}],[\"配置的顺序就是拦截器的拦截顺序\",{\"1\":{\"71\":1}}],[\"配置包扫描\",{\"1\":{\"68\":1}}],[\"配置文件\",{\"1\":{\"61\":1,\"72\":1,\"80\":1,\"82\":1}}],[\"配置文件中配置\",{\"1\":{\"71\":1}}],[\"配置文件中注册\",{\"1\":{\"68\":1}}],[\"配置文件中注册一个基于\",{\"1\":{\"68\":1}}],[\"配置文件中被调用者\",{\"1\":{\"63\":1}}],[\"配置文件中标签属性\",{\"0\":{\"62\":1}}],[\"配置文件中的定义装配bean\",{\"1\":{\"61\":1}}],[\"配置文件中是有顺序的如果顺序错误也会报错\",{\"1\":{\"42\":1}}],[\"配置文件标签\",{\"0\":{\"42\":1}}],[\"配置\",{\"1\":{\"37\":1,\"80\":2}}],[\"配置阿里云镜像官网指南\",{\"1\":{\"32\":1}}],[\"配置华为云镜像官方文档地址\",{\"1\":{\"32\":1}}],[\"发起请求\",{\"0\":{\"29\":1}}],[\"我们可以去\",{\"1\":{\"143\":1}}],[\"我们可以根据情况来创建绘画形状为需求来说明并实现工厂模式\",{\"1\":{\"107\":1}}],[\"我们也可以拦截自定义的异常类\",{\"1\":{\"87\":1}}],[\"我们处理响应ajax请求时\",{\"1\":{\"72\":1}}],[\"我们不需要自己控制该类\",{\"1\":{\"69\":1}}],[\"我们使用拦截器后需要注册\",{\"1\":{\"125\":1}}],[\"我们使用sort将其进行排序后输出key\",{\"1\":{\"52\":1}}],[\"我们使用hash来将各个数据进行存储\",{\"1\":{\"52\":1}}],[\"我们在\",{\"1\":{\"42\":1}}],[\"我经常用的是\",{\"1\":{\"42\":1}}],[\"我这里使用的是包扫描所以不需要自己一个个进行注册\",{\"1\":{\"41\":1}}],[\"我这里使用的是5\",{\"1\":{\"28\":1}}],[\"我这里就定义为\",{\"1\":{\"37\":1}}],[\"我的小站\",{\"1\":{\"5\":1}}],[\"64\",{\"1\":{\"148\":4}}],[\"6<\",{\"1\":{\"36\":1,\"77\":2}}],[\"6\",{\"1\":{\"26\":7,\"50\":2,\"64\":1,\"126\":1,\"149\":1}}],[\"33\",{\"1\":{\"148\":4}}],[\"3306\",{\"1\":{\"78\":1}}],[\"3版本所以放开的有一些多\",{\"1\":{\"125\":1}}],[\"30t01\",{\"1\":{\"149\":1}}],[\"30秒\",{\"1\":{\"104\":1}}],[\"30秒触发1次\",{\"1\":{\"103\":1}}],[\"30\",{\"1\":{\"104\":10}}],[\"31536000\",{\"1\":{\"55\":1}}],[\"3<\",{\"1\":{\"48\":2,\"77\":2}}],[\"3\",{\"1\":{\"26\":7,\"37\":2,\"40\":2,\"48\":1,\"77\":1,\"97\":1,\"104\":2,\"119\":1,\"128\":3,\"153\":1}}],[\"39<\",{\"1\":{\"23\":1}}],[\"小时\",{\"1\":{\"103\":2}}],[\"小于等于\",{\"1\":{\"44\":1}}],[\"小于\",{\"1\":{\"44\":1}}],[\"小结\",{\"1\":{\"25\":1,\"26\":1}}],[\"小贱贱图床\",{\"1\":{\"12\":1}}],[\"24\",{\"1\":{\"149\":1}}],[\"24<\",{\"1\":{\"36\":1,\"77\":1}}],[\"25秒触发1次\",{\"1\":{\"103\":1}}],[\"25\",{\"1\":{\"103\":1}}],[\"2<\",{\"1\":{\"72\":1,\"74\":1,\"77\":1}}],[\"28\",{\"1\":{\"49\":1,\"149\":1}}],[\"28<\",{\"1\":{\"36\":1,\"74\":1,\"77\":2}}],[\"20秒触发1次\",{\"1\":{\"103\":1}}],[\"20\",{\"1\":{\"52\":1,\"103\":4,\"104\":3,\"162\":2}}],[\"202306301501\",{\"1\":{\"150\":2}}],[\"2023\",{\"1\":{\"49\":1,\"50\":2,\"149\":1}}],[\"2011年10月每周日1点10分30秒触发任务\",{\"1\":{\"104\":1}}],[\"2011年10月每天1点10分30秒触发任务\",{\"1\":{\"104\":1}}],[\"2011年10月20号1点10分30秒触发任务\",{\"1\":{\"104\":1}}],[\"2011\",{\"1\":{\"104\":3}}],[\"2013\",{\"1\":{\"33\":1}}],[\"2010\",{\"1\":{\"33\":1}}],[\"2006\",{\"1\":{\"52\":4}}],[\"2005\",{\"1\":{\"52\":4}}],[\"2004\",{\"1\":{\"52\":4}}],[\"2003\",{\"1\":{\"52\":4}}],[\"2002\",{\"1\":{\"52\":4}}],[\"2001\",{\"1\":{\"52\":4,\"68\":1,\"72\":3,\"74\":1,\"80\":1,\"81\":1,\"82\":1}}],[\"200\",{\"1\":{\"29\":2,\"94\":1}}],[\"2\",{\"1\":{\"25\":3,\"26\":7,\"28\":2,\"36\":3,\"39\":1,\"50\":2,\"55\":1,\"68\":2,\"72\":1,\"77\":3,\"85\":1,\"126\":1,\"128\":5,\"162\":2}}],[\"简写形式可以让初学者快速应用默认配置方案\",{\"1\":{\"72\":1}}],[\"简化开发\",{\"1\":{\"60\":1}}],[\"简介\",{\"1\":{\"33\":1}}],[\"简单使用\",{\"0\":{\"24\":1}}],[\"简易的示例监听器\",{\"1\":{\"22\":1}}],[\"如下例就是会返回1\",{\"1\":{\"128\":1}}],[\"如dao\",{\"1\":{\"72\":1}}],[\"如\",{\"1\":{\"60\":1,\"61\":1,\"73\":1}}],[\"如需其他处理请可以复制当前监听器后重写即可\",{\"1\":{\"22\":1}}],[\"如果已经安装了node请先卸载\",{\"1\":{\"159\":1}}],[\"如果之前已经存在过mysql服务需要先删除掉\",{\"1\":{\"156\":1}}],[\"如果centos8使用tar包进行安装可能会遇到下面的错误\",{\"0\":{\"146\":1}}],[\"如果这一步报\",{\"1\":{\"145\":1}}],[\"如果这个类处理的请求方法是\",{\"1\":{\"70\":1}}],[\"如果输出\",{\"1\":{\"145\":1}}],[\"如果我们不将所有请求拦截就不会出现这些个情况\",{\"1\":{\"125\":1}}],[\"如果我们直接进行判断的话后续如果产品又添加了其他检查类型\",{\"1\":{\"112\":1}}],[\"如果没有匹配结果那么我应该直接报错回去\",{\"1\":{\"110\":1}}],[\"如果处理类型为空且正则表达式和替换字符串都为空那么根据前缀不脱敏长度和后缀不脱敏长度进行处理\",{\"1\":{\"98\":1}}],[\"如果处理类型为空那么根据正则表达式和替换字符串进行处理\",{\"1\":{\"98\":1}}],[\"如果处理类型不为空那么根据处理类型进行处理\",{\"1\":{\"98\":1}}],[\"如果值为空那么直接退出不再处理\",{\"1\":{\"98\":1}}],[\"如果不设置的话默认的是\",{\"1\":{\"163\":1}}],[\"如果不设置的默认是\",{\"1\":{\"163\":1}}],[\"如果不是string类型或者当前属性没有脱敏注解那么直接设置为原始处理的beanproperty\",{\"1\":{\"98\":1}}],[\"如果不需要可以不创建\",{\"1\":{\"79\":1}}],[\"如果bean为null那么直接设置为null\",{\"1\":{\"98\":1}}],[\"如果失败了则是\",{\"1\":{\"95\":1}}],[\"如果一次执行的是多条查询语句\",{\"1\":{\"73\":1}}],[\"如果只有单条的查询语句\",{\"1\":{\"73\":1}}],[\"如果用户需要使用spring的声明式事务管理\",{\"1\":{\"73\":1}}],[\"如果将这个配置文件放在\",{\"1\":{\"72\":1}}],[\"如果有多个则以逗号分隔\",{\"1\":{\"95\":1}}],[\"如果有多个拦截器的时候\",{\"1\":{\"71\":1}}],[\"如果有mybatis的单独配置文件\",{\"1\":{\"80\":1}}],[\"如果有一级请求的情况下\",{\"1\":{\"70\":1}}],[\"如果在这个注解的类中想要返回对象\",{\"1\":{\"70\":1}}],[\"如果需要的话可以在后置通知的方法中修改结果\",{\"1\":{\"68\":2}}],[\"如果超过等待的时间仍没有元素则退出\",{\"1\":{\"58\":2}}],[\"如果中间参数值存在的话\",{\"1\":{\"58\":1}}],[\"如果\",{\"1\":{\"58\":2}}],[\"如果该\",{\"1\":{\"58\":2}}],[\"如果exam\",{\"1\":{\"55\":1}}],[\"如果当前有事务\",{\"1\":{\"74\":3}}],[\"如果当前有事务就直接加入该事务\",{\"1\":{\"73\":3}}],[\"如果当前分数大于redis中存储的分数或分数一致且时长更短时移除当前redis中的数据且将当前数据存入redis中\",{\"1\":{\"55\":1}}],[\"如果当前redis不存在相同key且未超过排行榜最大人数时直接放入redis即可\",{\"1\":{\"55\":1}}],[\"如果当前为空那么直接将本次数据添加进去即可\",{\"1\":{\"55\":1}}],[\"如果当前要读取的类没有表头校验注解\",{\"1\":{\"21\":1}}],[\"如果传入的是\",{\"1\":{\"43\":1}}],[\"如果使用这个注解后想要转发页面\",{\"1\":{\"70\":1}}],[\"如果使用\",{\"1\":{\"43\":1}}],[\"如果是mysql5的话\",{\"1\":{\"37\":1}}],[\"如果要转换的json字符串是数组\",{\"1\":{\"26\":1}}],[\"如果走到这里就是没有在导入类上添加\",{\"1\":{\"21\":2}}],[\"如果多行请求头\",{\"1\":{\"21\":2}}],[\"本文使用的是knife4j\",{\"1\":{\"84\":1}}],[\"本地图片所在地址\",{\"1\":{\"50\":1}}],[\"本次下载包所用的是清华大学镜像站中提供的mysql包\",{\"1\":{\"148\":1}}],[\"本次使用的数据库需要自己创建\",{\"1\":{\"35\":1}}],[\"本次需校验的数据\",{\"1\":{\"21\":1}}],[\"本是\",{\"1\":{\"33\":1}}],[\"本监听器智能校验参数是否必填\",{\"1\":{\"22\":1}}],[\"1c\",{\"1\":{\"145\":3}}],[\"1代表星期天\",{\"1\":{\"103\":1}}],[\"1~7\",{\"1\":{\"103\":1}}],[\"1~31\",{\"1\":{\"103\":1}}],[\"14<\",{\"1\":{\"77\":1}}],[\"17<\",{\"1\":{\"77\":1}}],[\"123456\",{\"1\":{\"149\":1,\"157\":1}}],[\"127\",{\"1\":{\"85\":1}}],[\"12<\",{\"1\":{\"68\":1,\"77\":1}}],[\"128\",{\"1\":{\"59\":1}}],[\"1为无期限\",{\"1\":{\"58\":1}}],[\"1970~2099\",{\"1\":{\"103\":1}}],[\"19\",{\"1\":{\"52\":1}}],[\"163\",{\"1\":{\"85\":1}}],[\"16\",{\"1\":{\"49\":1,\"77\":1}}],[\"10<\",{\"1\":{\"77\":1}}],[\"103\",{\"1\":{\"58\":1}}],[\"1024\",{\"1\":{\"59\":1}}],[\"102\",{\"1\":{\"58\":1}}],[\"101\",{\"1\":{\"58\":1}}],[\"1001\",{\"1\":{\"72\":1}}],[\"100000\",{\"1\":{\"54\":1}}],[\"100\",{\"1\":{\"50\":6,\"58\":1}}],[\"10\",{\"1\":{\"48\":1,\"50\":2,\"52\":3,\"97\":1,\"103\":2,\"104\":16,\"149\":1}}],[\"1l\",{\"1\":{\"46\":1}}],[\"18\",{\"1\":{\"36\":1,\"50\":2,\"52\":1,\"77\":1,\"162\":2}}],[\"13\",{\"1\":{\"36\":1,\"68\":2,\"72\":1}}],[\"1357310795\",{\"1\":{\"1\":1}}],[\"15到45秒内\",{\"1\":{\"104\":1}}],[\"15秒和45秒时触发任务\",{\"1\":{\"103\":1}}],[\"15\",{\"1\":{\"36\":3,\"72\":1,\"77\":1,\"103\":1,\"104\":9,\"116\":1,\"117\":1,\"118\":1,\"119\":1}}],[\"117\",{\"1\":{\"59\":1}}],[\"11\",{\"1\":{\"33\":1}}],[\"1<\",{\"1\":{\"28\":1,\"36\":1,\"72\":1,\"77\":1}}],[\"1\",{\"1\":{\"21\":1,\"26\":7,\"28\":1,\"37\":1,\"39\":1,\"40\":1,\"46\":1,\"50\":2,\"52\":15,\"55\":2,\"58\":3,\"68\":1,\"72\":3,\"74\":1,\"77\":1,\"80\":1,\"81\":1,\"82\":1,\"85\":3,\"94\":1,\"104\":6,\"119\":1,\"120\":3,\"126\":3,\"128\":6,\"134\":4,\"145\":14,\"148\":4,\"150\":2}}],[\"00\",{\"1\":{\"150\":1}}],[\"06\",{\"1\":{\"149\":1}}],[\"064\",{\"1\":{\"39\":1}}],[\"0~23\",{\"1\":{\"103\":1}}],[\"0~59\",{\"1\":{\"103\":1}}],[\"0<\",{\"1\":{\"72\":3}}],[\"010454\",{\"1\":{\"149\":1}}],[\"01\",{\"1\":{\"50\":1}}],[\"05\",{\"1\":{\"49\":1,\"50\":1}}],[\"0\",{\"1\":{\"21\":1,\"23\":1,\"36\":1,\"37\":2,\"40\":3,\"46\":1,\"47\":2,\"50\":1,\"55\":1,\"58\":1,\"59\":8,\"67\":1,\"68\":1,\"72\":6,\"74\":2,\"77\":3,\"80\":1,\"81\":1,\"82\":3,\"85\":4,\"98\":2,\"99\":2,\"102\":2,\"103\":3,\"104\":7,\"120\":2,\"126\":1,\"129\":1,\"138\":2,\"143\":3,\"148\":4,\"153\":2}}],[\"||\",{\"1\":{\"21\":2,\"55\":2,\"98\":1,\"138\":1,\"139\":2}}],[\"泛型\",{\"1\":{\"21\":2,\"95\":1}}],[\"通知定义切入的时间\",{\"1\":{\"66\":1}}],[\"通知定义了增强代码切入到目标代码的时间点\",{\"1\":{\"66\":1}}],[\"通知的类型\",{\"1\":{\"66\":1}}],[\"通知类型不同\",{\"1\":{\"66\":1}}],[\"通知\",{\"1\":{\"66\":1}}],[\"通过注解方式实现事务\",{\"1\":{\"80\":1}}],[\"通过扩展处理器适配器\",{\"1\":{\"69\":1}}],[\"通过切入点指定一组方法\",{\"1\":{\"66\":1}}],[\"通过给定的key求2个set变量的差值\",{\"1\":{\"58\":1}}],[\"通过\",{\"1\":{\"39\":1,\"60\":1,\"69\":1}}],[\"通过class获获取需要必填校验的字段\",{\"1\":{\"21\":2}}],[\"通过传入要校验的必填字段来判断都是那些字段需要进行校验\",{\"1\":{\"21\":1}}],[\"通灵义码\",{\"1\":{\"2\":1}}],[\"<value>\",{\"1\":{\"80\":1}}],[\"<version>$\",{\"1\":{\"74\":2,\"77\":10,\"84\":1}}],[\"<version>0\",{\"1\":{\"48\":1,\"74\":1}}],[\"<version>1\",{\"1\":{\"36\":1,\"48\":2}}],[\"<version>4\",{\"1\":{\"36\":1,\"68\":1,\"72\":1}}],[\"<version>8\",{\"1\":{\"36\":1,\"74\":1,\"77\":1}}],[\"<version>3\",{\"1\":{\"36\":1,\"72\":1}}],[\"<version>5\",{\"1\":{\"28\":1,\"36\":3,\"68\":2,\"72\":1}}],[\"<version>2\",{\"1\":{\"23\":1,\"72\":3,\"77\":1}}],[\"<uriencoding>utf\",{\"1\":{\"77\":1}}],[\"<url\",{\"1\":{\"72\":2,\"82\":1}}],[\"<url>https\",{\"1\":{\"32\":2}}],[\"<junit\",{\"1\":{\"77\":1}}],[\"<jackson\",{\"1\":{\"77\":1}}],[\"<filter\",{\"1\":{\"72\":4}}],[\"<filter>\",{\"1\":{\"72\":1}}],[\"<foreach\",{\"1\":{\"43\":1}}],[\"<lombok\",{\"1\":{\"77\":2}}],[\"<log4j\",{\"1\":{\"77\":1}}],[\"<load\",{\"1\":{\"72\":1}}],[\"<listener\",{\"1\":{\"72\":1,\"82\":1}}],[\"<listener>\",{\"1\":{\"72\":1,\"82\":1}}],[\"<web\",{\"1\":{\"72\":1,\"82\":1}}],[\"<where>\",{\"1\":{\"40\":1}}],[\"<array>\",{\"1\":{\"80\":1}}],[\"<artifactid>knife4j\",{\"1\":{\"84\":1}}],[\"<artifactid>pagehelper<\",{\"1\":{\"77\":1}}],[\"<artifactid>poi\",{\"1\":{\"48\":4}}],[\"<artifactid>druid<\",{\"1\":{\"77\":1}}],[\"<artifactid>c3p0<\",{\"1\":{\"74\":1}}],[\"<artifactid>tomcat7\",{\"1\":{\"72\":1,\"77\":1}}],[\"<artifactid>maven\",{\"1\":{\"72\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"77\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"36\":1,\"77\":1}}],[\"<artifactid>mysql\",{\"1\":{\"36\":1,\"74\":1,\"77\":1}}],[\"<artifactid>jackson\",{\"1\":{\"72\":2,\"77\":1}}],[\"<artifactid>javax\",{\"1\":{\"72\":1,\"77\":1}}],[\"<artifactid>junit<\",{\"1\":{\"36\":1,\"68\":1}}],[\"<artifactid>ooxml\",{\"1\":{\"48\":2}}],[\"<artifactid>lombok<\",{\"1\":{\"36\":1,\"77\":1}}],[\"<artifactid>spring\",{\"1\":{\"36\":3,\"68\":2,\"72\":1,\"74\":2,\"77\":3}}],[\"<artifactid>httpclient5<\",{\"1\":{\"28\":1}}],[\"<artifactid>fastjson2<\",{\"1\":{\"23\":1}}],[\"<aop\",{\"1\":{\"68\":1}}],[\"<context\",{\"1\":{\"68\":1,\"72\":3,\"80\":2,\"81\":1,\"82\":1}}],[\"<configuration>\",{\"1\":{\"37\":1,\"72\":2,\"77\":1}}],[\"<build>\",{\"1\":{\"72\":1,\"77\":1}}],[\"<bean\",{\"1\":{\"71\":2,\"72\":1,\"74\":2,\"80\":5,\"81\":1}}],[\"<beans\",{\"1\":{\"68\":1,\"72\":2,\"74\":1,\"80\":1,\"81\":1}}],[\"<br\",{\"1\":{\"50\":5,\"95\":2}}],[\"<sys\",{\"1\":{\"150\":1}}],[\"<stdlib\",{\"1\":{\"150\":1}}],[\"<studio\",{\"1\":{\"150\":1}}],[\"<script\",{\"1\":{\"126\":2}}],[\"<scope>provided<\",{\"1\":{\"72\":1,\"77\":1}}],[\"<scope>test<\",{\"1\":{\"68\":1}}],[\"<spring\",{\"1\":{\"77\":1}}],[\"<servlet\",{\"1\":{\"72\":4,\"77\":1,\"82\":4}}],[\"<servlet>\",{\"1\":{\"72\":1,\"82\":1}}],[\"<select\",{\"1\":{\"40\":1}}],[\"<source>1\",{\"1\":{\"72\":1}}],[\"<exclusion>\",{\"1\":{\"48\":3}}],[\"<exclusions>\",{\"1\":{\"48\":2}}],[\"<environment\",{\"1\":{\"37\":1}}],[\"<environments\",{\"1\":{\"37\":1}}],[\"<>\",{\"1\":{\"44\":2}}],[\"<=\",{\"1\":{\"44\":2}}],[\"<init\",{\"1\":{\"72\":4,\"82\":1}}],[\"<insert\",{\"1\":{\"43\":1}}],[\"<if\",{\"1\":{\"40\":1}}],[\"<id>aliyunmaven<\",{\"1\":{\"32\":1}}],[\"<id>huaweicloud<\",{\"1\":{\"32\":1}}],[\"<mybatis\",{\"1\":{\"77\":2}}],[\"<mysql\",{\"1\":{\"77\":1}}],[\"<maven\",{\"1\":{\"77\":2}}],[\"<mapper\",{\"1\":{\"40\":1}}],[\"<mappers>\",{\"1\":{\"37\":1}}],[\"<mvc\",{\"1\":{\"71\":5,\"72\":4,\"81\":2}}],[\"<mirrorof>\",{\"1\":{\"32\":2}}],[\"<mirror>\",{\"1\":{\"32\":2}}],[\"<druid\",{\"1\":{\"77\":1}}],[\"<datasource\",{\"1\":{\"37\":1}}],[\"<dependencies>\",{\"1\":{\"36\":1,\"72\":1,\"77\":1}}],[\"<dependency>\",{\"1\":{\"23\":1,\"28\":1,\"36\":7,\"48\":3,\"68\":3,\"72\":4,\"74\":4,\"77\":11,\"84\":1}}],[\"<time\",{\"1\":{\"150\":1}}],[\"<tx\",{\"1\":{\"74\":1,\"80\":1}}],[\"<target>1\",{\"1\":{\"72\":1}}],[\"<transactionmanager\",{\"1\":{\"37\":1}}],[\"<t>\",{\"1\":{\"21\":4,\"95\":6}}],[\"<p\",{\"1\":{\"95\":1}}],[\"<port>80<\",{\"1\":{\"77\":1}}],[\"<port>8080<\",{\"1\":{\"72\":1}}],[\"<project\",{\"1\":{\"77\":1}}],[\"<property\",{\"1\":{\"37\":4,\"72\":2,\"74\":5,\"80\":11,\"81\":2}}],[\"<properties>\",{\"1\":{\"77\":1}}],[\"<properties\",{\"1\":{\"37\":1}}],[\"<pagehelper\",{\"1\":{\"77\":1}}],[\"<packaging>war<\",{\"1\":{\"77\":1}}],[\"<package\",{\"1\":{\"37\":1}}],[\"<param\",{\"1\":{\"72\":10,\"82\":4}}],[\"<path>\",{\"1\":{\"72\":1,\"77\":1}}],[\"<plugin>\",{\"1\":{\"72\":2,\"77\":1}}],[\"<plugins>\",{\"1\":{\"72\":1,\"77\":1}}],[\"<p>\",{\"1\":{\"17\":2,\"19\":2,\"20\":1,\"39\":3,\"46\":2,\"55\":2,\"58\":1}}],[\"<name>阿里云公共仓库<\",{\"1\":{\"32\":1}}],[\"<groupid>javax\",{\"1\":{\"72\":1,\"77\":1}}],[\"<groupid>junit<\",{\"1\":{\"36\":1,\"68\":1}}],[\"<groupid>io\",{\"1\":{\"48\":1}}],[\"<groupid>mysql<\",{\"1\":{\"36\":1,\"74\":1,\"77\":1}}],[\"<groupid>org\",{\"1\":{\"28\":1,\"36\":5,\"48\":3,\"68\":2,\"72\":3,\"74\":2,\"77\":7}}],[\"<groupid>com\",{\"1\":{\"23\":1,\"48\":2,\"72\":2,\"74\":1,\"77\":3,\"84\":1}}],[\"<\",{\"1\":{\"21\":3,\"23\":1,\"28\":2,\"32\":5,\"36\":14,\"37\":13,\"40\":7,\"43\":4,\"44\":2,\"46\":2,\"48\":10,\"50\":1,\"55\":3,\"68\":10,\"71\":9,\"72\":56,\"74\":11,\"77\":40,\"80\":19,\"81\":6,\"82\":9,\"84\":4,\"150\":2}}],[\">测试部门1\",{\"1\":{\"129\":6,\"138\":3,\"139\":3}}],[\">秒数\",{\"1\":{\"103\":1}}],[\">分钟\",{\"1\":{\"103\":1}}],[\">小时\",{\"1\":{\"103\":1}}],[\">日期\",{\"1\":{\"103\":1}}],[\">月\",{\"1\":{\"103\":1}}],[\"><\",{\"1\":{\"71\":2,\"72\":2,\"126\":2}}],[\">sortscore\",{\"1\":{\"52\":1}}],[\">=\",{\"1\":{\"44\":2,\"98\":1}}],[\">\",{\"1\":{\"21\":5,\"28\":1,\"29\":2,\"33\":3,\"36\":6,\"37\":18,\"40\":6,\"43\":4,\"44\":2,\"48\":2,\"50\":5,\"55\":5,\"58\":1,\"59\":4,\"68\":9,\"71\":8,\"72\":39,\"74\":11,\"77\":12,\"80\":29,\"81\":11,\"82\":3,\"84\":2,\"87\":3,\"95\":5,\"98\":2,\"120\":2,\"129\":8,\"138\":4,\"139\":4,\"150\":2}}],[\">>\",{\"1\":{\"21\":2,\"22\":1,\"150\":7}}],[\"keyconstant\",{\"1\":{\"90\":4,\"91\":1}}],[\"keybytes\",{\"1\":{\"59\":4}}],[\"keypairgenerator\",{\"1\":{\"59\":2}}],[\"keypair\",{\"1\":{\"59\":5}}],[\"keyfactory\",{\"1\":{\"59\":11}}],[\"keyandvalue\",{\"1\":{\"58\":4}}],[\"keyspec\",{\"1\":{\"59\":8}}],[\"keys\",{\"1\":{\"58\":2}}],[\"key序列化方式\",{\"1\":{\"57\":1}}],[\"key\",{\"1\":{\"55\":16,\"57\":1,\"58\":145,\"59\":4,\"90\":6,\"91\":1}}],[\"k\",{\"1\":{\"21\":4}}],[\"knife4j使用html导出接口出现打不开问题解决\",{\"0\":{\"126\":1}}],[\"knife4j\",{\"0\":{\"124\":1},\"1\":{\"6\":1,\"84\":2,\"85\":1}}],[\"请求接口文档地址失败解决\",{\"0\":{\"125\":1}}],[\"请求相应的视图\",{\"1\":{\"69\":1}}],[\"请求参数\",{\"1\":{\"29\":1}}],[\"请求地址\",{\"1\":{\"29\":1}}],[\"请求失败\",{\"1\":{\"29\":2,\"94\":1}}],[\"请检查导入模板是否正确\",{\"1\":{\"21\":4}}],[\"请不要同时在类和成员变量上同时使用\",{\"1\":{\"17\":1}}],[\"=null\",{\"1\":{\"68\":1}}],[\"==>\",{\"1\":{\"103\":5}}],[\"==\",{\"1\":{\"21\":4,\"29\":2,\"39\":1,\"55\":1,\"58\":5,\"98\":2,\"115\":1}}],[\"=\",{\"1\":{\"21\":21,\"22\":3,\"25\":7,\"26\":7,\"29\":4,\"39\":8,\"40\":3,\"41\":3,\"46\":11,\"47\":3,\"49\":2,\"50\":13,\"54\":1,\"55\":26,\"57\":2,\"58\":14,\"59\":44,\"61\":3,\"64\":1,\"68\":8,\"72\":5,\"74\":2,\"80\":1,\"83\":1,\"85\":1,\"86\":1,\"87\":1,\"90\":8,\"91\":4,\"92\":1,\"94\":2,\"95\":3,\"97\":2,\"98\":3,\"99\":1,\"102\":1,\"110\":3,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":4,\"120\":3,\"125\":1,\"129\":8,\"133\":2,\"136\":2,\"137\":2,\"138\":4,\"139\":2,\"149\":1,\"153\":3,\"161\":1}}],[\"行\",{\"1\":{\"21\":2}}],[\"校验请求头\",{\"1\":{\"21\":2}}],[\"该方法在处理器方法执行之后执行\",{\"1\":{\"71\":1}}],[\"该方法在处理器方法执行之前执行\",{\"1\":{\"71\":1}}],[\"该类从类路径\",{\"1\":{\"61\":1}}],[\"该字符串需要进行拼接\",{\"1\":{\"55\":1}}],[\"该字段只可以使用在字段上\",{\"1\":{\"19\":1,\"20\":1}}],[\"该标签用于处理数据库字段与实体类字段不一致的情况\",{\"1\":{\"43\":1}}],[\"该属性存在时是指定读取的\",{\"1\":{\"42\":1}}],[\"该注解使用序列化的方式\",{\"1\":{\"99\":1}}],[\"该注解会自动注册defaultannotationhandlermapping与annotationmethodhandleradapter\",{\"1\":{\"72\":1}}],[\"该注解可以定义在类上\",{\"1\":{\"70\":1}}],[\"该注解可以使用在字段上\",{\"1\":{\"19\":1}}],[\"该注解创建的对象可以作为处理器接收用户的请求\",{\"1\":{\"65\":1}}],[\"该注解默认使用按类型自动装配\",{\"1\":{\"64\":1}}],[\"该注解的\",{\"1\":{\"64\":1}}],[\"该注解在字段上使用会将其认为不需要进行校验的行头参数\",{\"1\":{\"20\":1}}],[\"当然可以选择不执行\",{\"1\":{\"145\":1}}],[\"当然你也可以去看\",{\"1\":{\"143\":1}}],[\"当查询的数据为2时则是查询name中包含2的数据就会返回\",{\"1\":{\"128\":1}}],[\"当在where作为条件时则是会返回满足条件的数据\",{\"1\":{\"128\":1}}],[\"当在select时会如果搜索值在strlist中存在那么会返回查询的值\",{\"1\":{\"128\":1}}],[\"当在使用fastjson2时\",{\"1\":{\"26\":1}}],[\"当请求的参数不一致时\",{\"1\":{\"72\":1}}],[\"当较多的通知增强方法使用相同的\",{\"1\":{\"68\":1}}],[\"当配置文件中被调用者\",{\"1\":{\"63\":1}}],[\"当循环行时在一列中生成多个图片\",{\"1\":{\"50\":1}}],[\"当循环行中某一列中需要渲染多个图片\",{\"1\":{\"50\":1}}],[\"当一个对象存在多个图片时处理\",{\"1\":{\"50\":1}}],[\"当参数为\",{\"1\":{\"34\":1}}],[\"当我们仅转换一个对象时我们使用\",{\"1\":{\"25\":1}}],[\"当前没有事务的\",{\"1\":{\"74\":2}}],[\"当前没有事务的时候就抛出异常\",{\"1\":{\"73\":1}}],[\"当前没有事务的时候就以非事务方式执行\",{\"1\":{\"73\":1}}],[\"当前没有事务的时候\",{\"1\":{\"73\":1,\"74\":1}}],[\"当前端传入参数以请求路径时传入\",{\"1\":{\"72\":1}}],[\"当前端传入的参数与\",{\"1\":{\"72\":1}}],[\"当前\",{\"1\":{\"43\":1}}],[\"当前xml中唯一不可重复\",{\"1\":{\"43\":3}}],[\"当前行数据据\",{\"1\":{\"21\":1}}],[\"当前行头数据\",{\"1\":{\"21\":2}}],[\"当前注解可以使用在类或成员变量上\",{\"1\":{\"17\":1}}],[\"当\",{\"1\":{\"19\":1,\"20\":1,\"71\":1}}],[\"和视图解析器也需要此依赖\",{\"1\":{\"77\":1}}],[\"和在\",{\"1\":{\"70\":1}}],[\"和远程调用等\",{\"1\":{\"60\":1}}],[\"和依赖注入功能\",{\"1\":{\"60\":1}}],[\"和我们预期结果一致\",{\"1\":{\"52\":1}}],[\"和mapper\",{\"1\":{\"41\":1}}],[\"和\",{\"1\":{\"19\":1,\"20\":1,\"33\":2,\"37\":1,\"70\":1,\"72\":1,\"91\":1,\"103\":1}}],[\"头校验\",{\"1\":{\"18\":1}}],[\"黑色的小火苗\",{\"1\":{\"17\":1,\"18\":1,\"22\":1,\"49\":1,\"50\":2,\"85\":1}}],[\"在用户变量中添加\",{\"1\":{\"161\":1}}],[\"在nvm安装根目录\",{\"1\":{\"160\":1}}],[\"在一个方法上添加\",{\"1\":{\"101\":1}}],[\"在配置文件中配置事务开启\",{\"1\":{\"74\":1}}],[\"在配置文件中配置即可\",{\"1\":{\"73\":1}}],[\"在调用执行期间事务的维护情况\",{\"1\":{\"73\":1}}],[\"在加入了jackson的core和mapper包之后\",{\"1\":{\"72\":1}}],[\"在方法上时\",{\"1\":{\"70\":2}}],[\"在类上时类似与一级请求\",{\"1\":{\"70\":1}}],[\"在当前类中\",{\"1\":{\"70\":1}}],[\"在dispatcherservlet\",{\"1\":{\"69\":1}}],[\"在\",{\"1\":{\"68\":2,\"72\":1,\"74\":1,\"146\":1}}],[\"在目标方法执行出现异常的时候才会别调用的通知\",{\"1\":{\"68\":1}}],[\"在目标方法执行之后被调用的通知\",{\"1\":{\"68\":1}}],[\"在目标方法执行之前被调用的通知\",{\"1\":{\"68\":1}}],[\"在定义好切面\",{\"1\":{\"68\":1}}],[\"在spring中\",{\"1\":{\"66\":1}}],[\"在数据持久化对象中使用\",{\"1\":{\"65\":1}}],[\"在构造调用者实例的同时\",{\"1\":{\"63\":1}}],[\"在使用对象的时候才创建对象\",{\"1\":{\"62\":1}}],[\"在容器启动的时候就已经创建了对象\",{\"1\":{\"62\":1}}],[\"在读取\",{\"1\":{\"61\":1}}],[\"在变量左边添加元素值\",{\"1\":{\"58\":1}}],[\"在此标签中不常用\",{\"1\":{\"43\":1}}],[\"在创建\",{\"1\":{\"41\":1}}],[\"在创建时字符集选为utf8mb4排序规则选为utf8mb4\",{\"1\":{\"35\":1}}],[\"在建造者模式中\",{\"1\":{\"34\":1}}],[\"在成员变量上使用时表示当前成员变量需要进行必填校验\",{\"1\":{\"17\":1}}],[\"在头部使用时表示当前所有成员变量都需要进行必填校验\",{\"1\":{\"17\":1}}],[\"在线cron生成器\",{\"1\":{\"14\":1}}],[\"在线代码高亮\",{\"1\":{\"14\":1}}],[\"在线检测软件病毒\",{\"0\":{\"13\":1}}],[\"创建文件夹\",{\"1\":{\"150\":1}}],[\"创建高度处理器\",{\"0\":{\"118\":1}}],[\"创建宽度处理器\",{\"0\":{\"117\":1}}],[\"创建长度处理器\",{\"0\":{\"116\":1}}],[\"创建责任链抽象类\",{\"0\":{\"115\":1}}],[\"创建产品实体类\",{\"0\":{\"114\":1}}],[\"创建相应形状类\",{\"0\":{\"109\":1}}],[\"创建相关注解\",{\"0\":{\"16\":1}}],[\"创建枚举\",{\"1\":{\"108\":1}}],[\"创建脱敏注解\",{\"0\":{\"99\":1}}],[\"创建脱敏注解处理类\",{\"0\":{\"98\":1}}],[\"创建脱敏枚举\",{\"0\":{\"97\":1}}],[\"创建拦截器\",{\"0\":{\"90\":1}}],[\"创建注解\",{\"0\":{\"89\":1}}],[\"创建api\",{\"1\":{\"85\":1}}],[\"创建一个\",{\"0\":{\"83\":1}}],[\"创建\",{\"0\":{\"82\":1}}],[\"创建mvc的配置文件\",{\"0\":{\"81\":1}}],[\"创建spring配置文件application\",{\"0\":{\"80\":1}}],[\"创建sqlsession需要使用sqlsessionfactory接口的的\",{\"1\":{\"34\":1}}],[\"创建新事务\",{\"1\":{\"73\":1,\"74\":1}}],[\"创建前端控制器的时候读取springmvc配置文件启动ioc容器\",{\"1\":{\"72\":1}}],[\"创建业务接口\",{\"1\":{\"68\":1}}],[\"创建对象之后执行的初始化方法\",{\"1\":{\"62\":1}}],[\"创建对应的mapper和mapper\",{\"0\":{\"40\":1}}],[\"创建输出时案例对象\",{\"1\":{\"50\":1}}],[\"创建word文档\",{\"1\":{\"49\":1}}],[\"创建时间\",{\"1\":{\"46\":1}}],[\"创建人\",{\"1\":{\"46\":1}}],[\"创建工厂接口\",{\"0\":{\"108\":1}}],[\"创建工厂\",{\"1\":{\"39\":1}}],[\"创建数据库\",{\"1\":{\"37\":1,\"130\":1}}],[\"创建配置文件\",{\"0\":{\"37\":1}}],[\"创建后缀为dio\",{\"1\":{\"3\":1}}],[\"奇q工具网\",{\"1\":{\"14\":1}}],[\"油猴脚本网址\",{\"1\":{\"14\":1}}],[\"杂项\",{\"0\":{\"14\":1}}],[\"function\",{\"1\":{\"150\":2}}],[\"f12打开devtools中网络请求时发现vue\",{\"1\":{\"126\":1}}],[\"flush\",{\"1\":{\"50\":1,\"149\":1}}],[\"fri\",{\"1\":{\"104\":1}}],[\"framework\",{\"1\":{\"86\":3}}],[\"freemarkerview\",{\"1\":{\"69\":1}}],[\"freemarker\",{\"1\":{\"60\":1}}],[\"freebuf\",{\"1\":{\"13\":1}}],[\"from\",{\"1\":{\"40\":1,\"128\":1,\"129\":12,\"133\":1,\"134\":1,\"136\":3,\"137\":3,\"138\":3,\"139\":3,\"149\":1}}],[\"found\",{\"1\":{\"145\":1,\"164\":1}}],[\"foundation\",{\"1\":{\"33\":1}}],[\"fos\",{\"1\":{\"50\":4}}],[\"force\",{\"1\":{\"149\":1}}],[\"format\",{\"1\":{\"55\":12}}],[\"for\",{\"1\":{\"21\":7,\"50\":1,\"55\":2,\"68\":1,\"110\":1,\"149\":1,\"150\":1}}],[\"foreach>\",{\"1\":{\"43\":1}}],[\"foreach标签\",{\"1\":{\"43\":1}}],[\"foreach\",{\"1\":{\"21\":2,\"41\":1}}],[\"favicon\",{\"1\":{\"86\":1}}],[\"fast\",{\"1\":{\"153\":1}}],[\"fasterxml\",{\"1\":{\"46\":1,\"72\":2,\"77\":1,\"98\":7,\"99\":2}}],[\"fastjson2<\",{\"1\":{\"23\":1}}],[\"fastjson2\",{\"0\":{\"23\":1},\"1\":{\"6\":1,\"21\":2,\"23\":2,\"25\":3,\"30\":1,\"90\":1}}],[\"fastjson\",{\"1\":{\"6\":1}}],[\"factory\",{\"1\":{\"39\":3,\"57\":2,\"61\":2}}],[\"false表示可以不赋值\",{\"1\":{\"72\":1}}],[\"false不存在\",{\"1\":{\"58\":1}}],[\"false\",{\"1\":{\"21\":1,\"34\":2,\"62\":2,\"64\":1,\"91\":2,\"115\":1,\"116\":1,\"117\":1,\"118\":1}}],[\"fi\",{\"1\":{\"150\":3}}],[\"find\",{\"0\":{\"128\":1},\"1\":{\"128\":3}}],[\"findnullvalueserializer\",{\"1\":{\"98\":2}}],[\"findmatchingkeys\",{\"1\":{\"55\":1,\"58\":1}}],[\"findrankbyexamid\",{\"1\":{\"55\":1}}],[\"final\",{\"1\":{\"22\":2,\"39\":2,\"46\":1,\"47\":1,\"55\":6,\"59\":3,\"66\":1,\"86\":3,\"90\":5,\"92\":3,\"94\":2,\"95\":3,\"97\":2,\"125\":2}}],[\"filter>\",{\"1\":{\"72\":1}}],[\"filter\",{\"1\":{\"72\":5}}],[\"fill\",{\"1\":{\"46\":4}}],[\"filesystemxmlapplicationcontext使用示例\",{\"1\":{\"61\":1}}],[\"filesystemxmlapplicationcontext\",{\"1\":{\"61\":3}}],[\"filesystemresource\",{\"1\":{\"61\":2}}],[\"fileoutputstream\",{\"1\":{\"50\":3}}],[\"file\",{\"1\":{\"50\":2,\"150\":1}}],[\"filevalue\",{\"1\":{\"21\":6}}],[\"filename\",{\"1\":{\"21\":2}}],[\"fieldfill\",{\"1\":{\"46\":9}}],[\"fields\",{\"1\":{\"21\":13}}],[\"fieldnames\",{\"1\":{\"21\":8,\"22\":3}}],[\"field\",{\"1\":{\"17\":1,\"19\":1,\"20\":1,\"21\":37,\"99\":1}}],[\"fieldrequired注解放在class上是才起作用\",{\"1\":{\"19\":1}}],[\"fieldrequired注解存在时\",{\"1\":{\"19\":1}}],[\"fieldrequired注解搭配使用\",{\"1\":{\"19\":1}}],[\"fieldrequired\",{\"0\":{\"17\":1},\"1\":{\"17\":1,\"21\":5}}],[\"微步云沙箱\",{\"1\":{\"13\":1}}],[\"光速图床\",{\"1\":{\"12\":1}}],[\"聚合图床\",{\"1\":{\"12\":1}}],[\"图床\",{\"0\":{\"12\":1},\"1\":{\"12\":1}}],[\"图片查看器\",{\"1\":{\"1\":1}}],[\"华为仓库\",{\"1\":{\"11\":1}}],[\"华为云镜像站\",{\"1\":{\"10\":1}}],[\"阿里云maven仓库\",{\"1\":{\"11\":1}}],[\"阿里云盘资源共享站\",{\"1\":{\"5\":1}}],[\"阿里云盘资源分享论坛\",{\"1\":{\"5\":1}}],[\"仓库\",{\"0\":{\"11\":1}}],[\"镜像站\",{\"0\":{\"10\":1},\"1\":{\"161\":1}}],[\"join\",{\"1\":{\"136\":1,\"137\":1,\"138\":1,\"139\":1}}],[\"joinpoint\",{\"1\":{\"66\":2,\"68\":3}}],[\"jcp\",{\"1\":{\"72\":3,\"82\":3}}],[\"jcache\",{\"1\":{\"60\":1}}],[\"js两个文件找不到\",{\"1\":{\"126\":1}}],[\"js\",{\"1\":{\"72\":2,\"86\":1,\"126\":3}}],[\"jsp\",{\"1\":{\"72\":1}}],[\"jstlview\",{\"1\":{\"69\":1}}],[\"jsonb操作符\",{\"0\":{\"141\":1}}],[\"json和\",{\"0\":{\"141\":1}}],[\"json操作\",{\"0\":{\"140\":1}}],[\"jsonserialize\",{\"1\":{\"99\":2}}],[\"jsonserializer<\",{\"1\":{\"98\":1}}],[\"jsonserializer<string>\",{\"1\":{\"98\":1}}],[\"jsonserializer\",{\"1\":{\"98\":1}}],[\"jsonstring1\",{\"1\":{\"26\":3}}],[\"jsonstring2\",{\"1\":{\"26\":3}}],[\"jsonstring\",{\"1\":{\"26\":9}}],[\"jsonmappingexception\",{\"1\":{\"98\":2}}],[\"jsongenerator\",{\"1\":{\"98\":2}}],[\"json处理工具包\",{\"1\":{\"77\":1}}],[\"json所需依赖\",{\"1\":{\"72\":2}}],[\"jsonformat\",{\"1\":{\"46\":3}}],[\"json字符串格式化工具类\",{\"1\":{\"30\":1}}],[\"json字符串与javaobject相互转换\",{\"0\":{\"25\":1}}],[\"jsonarray\",{\"1\":{\"26\":2}}],[\"jsonarraytest\",{\"1\":{\"26\":1}}],[\"jsonarray与java的list相互转换\",{\"0\":{\"26\":1}}],[\"json转换为java对象后\",{\"1\":{\"25\":4}}],[\"jsontest\",{\"1\":{\"25\":1}}],[\"jsonobject\",{\"1\":{\"21\":3,\"25\":2,\"26\":2,\"90\":2}}],[\"json\",{\"1\":{\"21\":9,\"25\":3,\"26\":2}}],[\"jp\",{\"1\":{\"68\":5}}],[\"jpg\",{\"1\":{\"12\":2,\"50\":3}}],[\"jmx\",{\"1\":{\"60\":1}}],[\"jndi\",{\"1\":{\"60\":1}}],[\"junit4\",{\"1\":{\"60\":1}}],[\"junit\",{\"1\":{\"50\":1,\"77\":1}}],[\"jaxb\",{\"1\":{\"72\":1}}],[\"jasperreports\",{\"1\":{\"60\":1}}],[\"jacksonannotationsinside\",{\"1\":{\"99\":2}}],[\"jackson\",{\"1\":{\"46\":1,\"72\":3,\"77\":4,\"98\":7,\"99\":2}}],[\"javaee\",{\"1\":{\"60\":1,\"72\":3,\"82\":3}}],[\"javamail\",{\"1\":{\"60\":2}}],[\"javax\",{\"1\":{\"59\":1,\"90\":2}}],[\"javatype\",{\"1\":{\"43\":1}}],[\"java<\",{\"1\":{\"36\":1,\"74\":1,\"77\":1}}],[\"java对象属性有\",{\"1\":{\"72\":1}}],[\"java对象\",{\"1\":{\"33\":1}}],[\"java对象转换为json字符串\",{\"1\":{\"25\":4}}],[\"java\",{\"0\":{\"30\":1},\"1\":{\"9\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":5,\"22\":3,\"33\":1,\"39\":2,\"40\":2,\"41\":4,\"46\":2,\"47\":1,\"49\":4,\"50\":10,\"54\":2,\"55\":3,\"58\":6,\"59\":5,\"60\":2,\"72\":2,\"86\":2,\"87\":3,\"89\":1,\"92\":2,\"95\":1,\"98\":2,\"99\":4,\"110\":2,\"120\":1}}],[\"jingxiang\",{\"1\":{\"32\":1}}],[\"jdk\",{\"1\":{\"64\":1}}],[\"jdk中\",{\"1\":{\"64\":1}}],[\"jdk反编译软件\",{\"1\":{\"9\":1}}],[\"jdbcurl\",{\"1\":{\"74\":1}}],[\"jdbc<\",{\"1\":{\"74\":1,\"77\":1}}],[\"jdbctype\",{\"1\":{\"43\":1}}],[\"jdbc\",{\"1\":{\"37\":2,\"38\":1,\"42\":1,\"60\":1,\"74\":2,\"78\":1,\"80\":1}}],[\"jd\",{\"1\":{\"9\":1}}],[\"usr\",{\"1\":{\"145\":4,\"146\":1,\"150\":5}}],[\"using\",{\"1\":{\"99\":1}}],[\"use\",{\"1\":{\"149\":1,\"162\":1,\"163\":1}}],[\"usespringel\",{\"1\":{\"50\":1}}],[\"usessl=false\",{\"1\":{\"38\":1,\"78\":1}}],[\"useunicode=true\",{\"1\":{\"38\":1,\"78\":1}}],[\"user=mysql\",{\"1\":{\"155\":1}}],[\"user=\",{\"1\":{\"149\":1}}],[\"userannotationargumentresolver\",{\"1\":{\"86\":1,\"91\":1,\"92\":1}}],[\"usercontroller\",{\"1\":{\"83\":1}}],[\"userlocation\",{\"1\":{\"72\":1}}],[\"user在redis的hash表数据存在\",{\"1\":{\"55\":1}}],[\"userid\",{\"1\":{\"52\":6,\"54\":3,\"55\":4,\"72\":1,\"90\":3}}],[\"userworddemo\",{\"1\":{\"50\":5}}],[\"usersession\",{\"1\":{\"90\":8,\"91\":4}}],[\"userserviceimpl\",{\"1\":{\"41\":4}}],[\"userservice\",{\"1\":{\"41\":5}}],[\"users\",{\"1\":{\"43\":1,\"50\":2,\"128\":1}}],[\"usersmapper\",{\"1\":{\"41\":2}}],[\"usermapper\",{\"1\":{\"40\":4,\"41\":3}}],[\"username=mysqlusername\",{\"1\":{\"78\":1}}],[\"username=\",{\"1\":{\"72\":3}}],[\"username=root\",{\"1\":{\"38\":1}}],[\"username\",{\"1\":{\"37\":2,\"50\":1,\"72\":2,\"80\":2}}],[\"user2\",{\"1\":{\"25\":2}}],[\"user1\",{\"1\":{\"25\":2}}],[\"userjsonstr1\",{\"1\":{\"25\":3}}],[\"userjsonstr\",{\"1\":{\"25\":3}}],[\"user\",{\"1\":{\"25\":14,\"40\":3,\"41\":4,\"52\":9,\"55\":2,\"70\":4,\"72\":2,\"74\":1,\"83\":1,\"90\":5,\"91\":1,\"149\":5,\"157\":2}}],[\"ui\",{\"1\":{\"86\":2,\"92\":1,\"125\":2}}],[\"uncommitted\",{\"1\":{\"73\":1}}],[\"uninstall\",{\"1\":{\"163\":1}}],[\"uninstaller\",{\"1\":{\"1\":1}}],[\"union\",{\"1\":{\"128\":3,\"129\":4,\"136\":1,\"137\":1,\"138\":1,\"139\":1}}],[\"unit\",{\"1\":{\"58\":6}}],[\"unicode\",{\"1\":{\"14\":2,\"130\":1,\"153\":2}}],[\"updatefill\",{\"1\":{\"47\":1}}],[\"updatetime\",{\"1\":{\"46\":1,\"47\":1}}],[\"updater\",{\"1\":{\"46\":2,\"47\":2}}],[\"update\",{\"1\":{\"43\":2,\"46\":5,\"59\":2,\"70\":1,\"149\":1}}],[\"upload\",{\"1\":{\"13\":1}}],[\"utf8mb4\",{\"1\":{\"130\":2,\"153\":2}}],[\"utf\",{\"1\":{\"37\":1,\"40\":1,\"58\":1,\"59\":1,\"68\":1,\"72\":3,\"74\":1,\"80\":1,\"81\":1,\"82\":1}}],[\"utils\",{\"1\":{\"59\":1}}],[\"util\",{\"1\":{\"21\":4,\"22\":4,\"40\":1,\"41\":3,\"49\":1,\"50\":7,\"54\":3,\"55\":4,\"58\":5,\"86\":2,\"87\":1,\"92\":2,\"98\":3,\"110\":2,\"120\":1}}],[\"uroot\",{\"1\":{\"150\":3}}],[\"uriencoding>\",{\"1\":{\"77\":1}}],[\"uri\",{\"1\":{\"29\":3}}],[\"url=jdbc\",{\"1\":{\"38\":1,\"78\":1}}],[\"url>\",{\"1\":{\"32\":2}}],[\"urlencodedformentity\",{\"1\":{\"29\":1}}],[\"url\",{\"1\":{\"29\":2,\"37\":2,\"42\":2,\"72\":2,\"80\":2,\"82\":1,\"163\":3}}],[\"ubuntu\",{\"1\":{\"8\":2}}],[\"ubuntu资源下载站\",{\"1\":{\"8\":1}}],[\"资源的请求\",{\"1\":{\"72\":1}}],[\"资源访问\",{\"1\":{\"61\":1}}],[\"资源加载和透明地创建上下文\",{\"1\":{\"60\":1}}],[\"资源下载\",{\"1\":{\"8\":1}}],[\"资源分享\",{\"0\":{\"5\":1}}],[\"rf\",{\"1\":{\"150\":1}}],[\"run\",{\"1\":{\"83\":1}}],[\"runtimeexception\",{\"1\":{\"21\":4,\"58\":1,\"59\":1,\"87\":1,\"120\":1}}],[\"runtime\",{\"1\":{\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"89\":1,\"99\":1}}],[\"root\",{\"1\":{\"149\":5,\"157\":2,\"163\":1}}],[\"rollbackfor\",{\"1\":{\"74\":1}}],[\"rollbackfor=\",{\"1\":{\"74\":1}}],[\"rowpolicy\",{\"1\":{\"50\":3}}],[\"rsa验签\",{\"1\":{\"59\":1}}],[\"rsa签名\",{\"1\":{\"59\":1}}],[\"rsa解密\",{\"1\":{\"59\":2}}],[\"rsa\",{\"1\":{\"59\":7}}],[\"rsa最大解密密文大小\",{\"1\":{\"59\":1}}],[\"rsa最大加密明文大小\",{\"1\":{\"59\":1}}],[\"rsautil\",{\"1\":{\"59\":1}}],[\"rsaexception\",{\"1\":{\"59\":3,\"87\":5}}],[\"rsa加密\",{\"0\":{\"59\":1},\"1\":{\"59\":2}}],[\"rightpop\",{\"1\":{\"58\":4}}],[\"rightpushifpresent\",{\"1\":{\"58\":2}}],[\"rightpushall\",{\"1\":{\"58\":2}}],[\"rightpush\",{\"1\":{\"55\":1,\"58\":4}}],[\"rasexception\",{\"1\":{\"87\":1}}],[\"range\",{\"1\":{\"58\":2}}],[\"randommember\",{\"1\":{\"58\":2}}],[\"randommembers\",{\"1\":{\"58\":2}}],[\"ranksortkey\",{\"1\":{\"55\":3}}],[\"rankputdata\",{\"1\":{\"55\":4}}],[\"rankkey\",{\"1\":{\"55\":5}}],[\"rank\",{\"1\":{\"55\":20}}],[\"rawkey\",{\"1\":{\"58\":2}}],[\"rpush\",{\"1\":{\"52\":1}}],[\"rpm\",{\"1\":{\"8\":1,\"143\":2,\"148\":4,\"149\":4}}],[\"r\",{\"1\":{\"33\":1}}],[\"recursive\",{\"1\":{\"129\":4,\"136\":1,\"137\":1,\"138\":1,\"139\":1}}],[\"rectangle\",{\"1\":{\"108\":1,\"109\":3,\"110\":1}}],[\"regclass\",{\"1\":{\"134\":2}}],[\"regex\",{\"1\":{\"97\":4,\"98\":3,\"99\":1}}],[\"registry\",{\"1\":{\"86\":7,\"92\":2,\"125\":6,\"161\":2}}],[\"region\",{\"1\":{\"58\":4,\"84\":1}}],[\"reasonable\",{\"1\":{\"80\":1}}],[\"readonly\",{\"1\":{\"74\":1}}],[\"reader\",{\"1\":{\"39\":5}}],[\"readlistener<t>\",{\"1\":{\"22\":1}}],[\"readlistener\",{\"1\":{\"22\":1}}],[\"read\",{\"1\":{\"22\":1,\"73\":4,\"150\":2}}],[\"readrowholder\",{\"1\":{\"21\":1}}],[\"readworkbookholder\",{\"1\":{\"21\":2,\"22\":1}}],[\"readcelldata<\",{\"1\":{\"21\":2,\"22\":1}}],[\"readcelldata\",{\"1\":{\"21\":1,\"22\":1}}],[\"replaceall\",{\"1\":{\"98\":2}}],[\"replacement\",{\"1\":{\"97\":4,\"98\":3,\"99\":1}}],[\"repeatable\",{\"1\":{\"73\":1}}],[\"repo\",{\"1\":{\"32\":1}}],[\"repository\",{\"1\":{\"11\":1,\"32\":2,\"65\":2,\"161\":1}}],[\"requirenonnull\",{\"1\":{\"87\":1,\"110\":1}}],[\"requires\",{\"1\":{\"73\":1,\"74\":1}}],[\"requiredargsconstructor\",{\"1\":{\"83\":1,\"86\":2,\"92\":2,\"102\":1,\"125\":1}}],[\"required\",{\"1\":{\"64\":1,\"72\":2,\"73\":1,\"74\":2}}],[\"requestattributes\",{\"1\":{\"91\":2}}],[\"requesthandlerselectors\",{\"1\":{\"85\":2}}],[\"requestparam对其进行矫正\",{\"1\":{\"72\":1}}],[\"requestparam\",{\"1\":{\"72\":5}}],[\"request\",{\"1\":{\"71\":3,\"90\":5,\"91\":3}}],[\"requestmethod\",{\"1\":{\"70\":3}}],[\"requestmapping\",{\"1\":{\"70\":2,\"72\":3,\"83\":1}}],[\"rediskey\",{\"1\":{\"58\":3}}],[\"redisserializer<string>\",{\"1\":{\"57\":1}}],[\"redisserializer\",{\"1\":{\"57\":6}}],[\"redisscore\",{\"1\":{\"55\":3}}],[\"redistemplate<>\",{\"1\":{\"57\":1}}],[\"redistemplate<string\",{\"1\":{\"57\":2,\"58\":2}}],[\"redistemplate\",{\"1\":{\"57\":2,\"58\":20}}],[\"redisconfig\",{\"1\":{\"57\":1}}],[\"redisconfigbean配置\",{\"0\":{\"57\":1}}],[\"redisconnectionfactory\",{\"1\":{\"57\":2,\"58\":2}}],[\"redis工具类\",{\"0\":{\"56\":1}}],[\"redis工具类不会写的可以去看redisutil工具类\",{\"1\":{\"53\":1}}],[\"redis中需要push的数据\",{\"1\":{\"55\":1}}],[\"redisexamuser\",{\"1\":{\"55\":7}}],[\"redisutil工具类\",{\"0\":{\"58\":1}}],[\"redisutil\",{\"1\":{\"55\":15,\"58\":7,\"90\":1}}],[\"redis\",{\"1\":{\"55\":3,\"57\":4,\"58\":3,\"90\":1}}],[\"redisrankdto\",{\"1\":{\"54\":1,\"55\":3}}],[\"redis设计实时排行榜\",{\"0\":{\"51\":1}}],[\"render\",{\"1\":{\"49\":1}}],[\"ref=\",{\"1\":{\"74\":1,\"80\":2}}],[\"ref\",{\"1\":{\"62\":2}}],[\"refid\",{\"1\":{\"43\":1}}],[\"reflection\",{\"1\":{\"47\":1}}],[\"reflect\",{\"1\":{\"21\":1}}],[\"reource\",{\"1\":{\"42\":1}}],[\"remove\",{\"1\":{\"39\":1,\"58\":2}}],[\"resolveargument\",{\"1\":{\"91\":2}}],[\"resolvers\",{\"1\":{\"92\":2}}],[\"resolver\",{\"1\":{\"86\":1}}],[\"resourcehandlerregistry\",{\"1\":{\"86\":2,\"92\":1,\"125\":1}}],[\"resource注解的支持\",{\"1\":{\"64\":1}}],[\"resource\",{\"1\":{\"42\":1,\"64\":2}}],[\"resource=\",{\"1\":{\"37\":1}}],[\"resource文件夹中创建\",{\"1\":{\"37\":1}}],[\"resources\",{\"1\":{\"34\":2,\"39\":2,\"72\":4,\"81\":1,\"86\":4,\"92\":2,\"125\":4}}],[\"restcontrolleradvice\",{\"1\":{\"87\":2}}],[\"restcontroller\",{\"1\":{\"70\":1}}],[\"res\",{\"1\":{\"68\":1}}],[\"res=\",{\"1\":{\"68\":1}}],[\"resultcode\",{\"1\":{\"87\":3,\"94\":2,\"95\":7}}],[\"result=\",{\"1\":{\"68\":1}}],[\"result=false\",{\"1\":{\"68\":1}}],[\"result\",{\"1\":{\"43\":2,\"59\":2,\"68\":5,\"110\":3}}],[\"resultmaper的返回类型\",{\"1\":{\"43\":1}}],[\"resultmap\",{\"1\":{\"43\":5}}],[\"resulttype\",{\"1\":{\"43\":3}}],[\"resulttype=\",{\"1\":{\"40\":1}}],[\"responsebo<>\",{\"1\":{\"95\":1}}],[\"responsebo<t>\",{\"1\":{\"95\":7}}],[\"responsebo<\",{\"1\":{\"87\":3,\"95\":2}}],[\"responsebo\",{\"1\":{\"87\":4,\"95\":1}}],[\"responsebody\",{\"1\":{\"70\":3,\"83\":1,\"87\":2}}],[\"response\",{\"1\":{\"29\":6,\"71\":3,\"87\":2,\"90\":1}}],[\"release<\",{\"1\":{\"36\":3,\"68\":2,\"72\":1,\"77\":1}}],[\"releases\",{\"1\":{\"1\":4,\"159\":1}}],[\"relation\",{\"1\":{\"33\":1}}],[\"ret\",{\"1\":{\"67\":2}}],[\"returning\",{\"1\":{\"68\":3}}],[\"return\",{\"1\":{\"21\":16,\"22\":1,\"29\":8,\"39\":2,\"41\":2,\"49\":2,\"50\":2,\"54\":2,\"55\":5,\"57\":1,\"58\":44,\"59\":10,\"68\":2,\"83\":1,\"85\":2,\"87\":3,\"90\":1,\"91\":5,\"95\":8,\"98\":6,\"108\":1,\"109\":3,\"110\":1,\"115\":4,\"116\":2,\"117\":2,\"118\":2,\"120\":4}}],[\"retentionpolicy\",{\"1\":{\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"89\":1,\"99\":2}}],[\"retention\",{\"1\":{\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"89\":1,\"99\":2}}],[\"524220z\",{\"1\":{\"149\":1}}],[\"56\",{\"1\":{\"149\":1}}],[\"5l\",{\"1\":{\"104\":1}}],[\"50\",{\"1\":{\"49\":1,\"55\":1}}],[\"5\",{\"1\":{\"6\":1,\"26\":7,\"36\":1,\"50\":1,\"74\":1,\"77\":1,\"102\":1,\"103\":1,\"104\":3,\"126\":1,\"143\":3,\"146\":2}}],[\"404\",{\"1\":{\"164\":1}}],[\"40秒触发1次\",{\"1\":{\"103\":1}}],[\"45秒时触发任务\",{\"1\":{\"104\":1}}],[\"45秒触发1次\",{\"1\":{\"103\":1}}],[\"45\",{\"1\":{\"103\":4,\"104\":2}}],[\"4种方式分别为\",{\"1\":{\"63\":1}}],[\"4<\",{\"1\":{\"48\":1}}],[\"4\",{\"1\":{\"6\":1,\"26\":7,\"72\":2,\"82\":2,\"97\":4,\"128\":2}}],[\"err\",{\"1\":{\"150\":1,\"153\":1}}],[\"error=\",{\"1\":{\"153\":1}}],[\"errors\",{\"1\":{\"145\":1}}],[\"error\",{\"1\":{\"86\":1,\"87\":8,\"90\":1,\"92\":1,\"94\":1,\"95\":8,\"125\":1}}],[\"errorlist\",{\"1\":{\"22\":3}}],[\"echo\",{\"1\":{\"150\":8}}],[\"echarts\",{\"1\":{\"9\":1}}],[\"ehcache\",{\"1\":{\"60\":1}}],[\"ejb\",{\"1\":{\"60\":1}}],[\"ee\",{\"1\":{\"60\":2}}],[\"el7\",{\"1\":{\"143\":2,\"148\":4}}],[\"else\",{\"1\":{\"47\":2,\"59\":2}}],[\"elementtype\",{\"1\":{\"17\":2,\"18\":1,\"19\":1,\"20\":1,\"89\":1,\"99\":2}}],[\"empty\",{\"1\":{\"120\":1}}],[\"email\",{\"1\":{\"40\":1,\"97\":1}}],[\"emqx官网下载\",{\"1\":{\"143\":1}}],[\"emqx官网下载地址\",{\"1\":{\"9\":1}}],[\"emqx\",{\"1\":{\"9\":1,\"143\":7}}],[\"engine=innodb\",{\"1\":{\"153\":1}}],[\"enums\",{\"1\":{\"98\":1,\"99\":1}}],[\"enumcode\",{\"1\":{\"95\":3}}],[\"enum\",{\"1\":{\"94\":1,\"97\":1,\"108\":1}}],[\"enablescheduling\",{\"1\":{\"101\":1}}],[\"enableswagger2webmvc\",{\"1\":{\"85\":2}}],[\"enableknife4j\",{\"1\":{\"85\":2}}],[\"encodebase64\",{\"1\":{\"59\":3}}],[\"encodebase64string\",{\"1\":{\"59\":1}}],[\"encoding=\",{\"1\":{\"37\":1,\"40\":1,\"68\":1,\"72\":3,\"74\":1,\"80\":1,\"81\":1,\"82\":1}}],[\"encryptdata\",{\"1\":{\"59\":3}}],[\"encrypteddata\",{\"1\":{\"59\":2}}],[\"encrypt\",{\"1\":{\"59\":7,\"98\":12}}],[\"environment的id表示\",{\"1\":{\"42\":1}}],[\"environment\",{\"1\":{\"42\":4}}],[\"environments\",{\"1\":{\"42\":2}}],[\"environments>\",{\"1\":{\"37\":1}}],[\"environment>\",{\"1\":{\"37\":1}}],[\"en\",{\"1\":{\"37\":1,\"40\":1}}],[\"endregion\",{\"1\":{\"58\":4,\"84\":1}}],[\"end\",{\"1\":{\"36\":2,\"48\":1,\"58\":3,\"77\":2}}],[\"entries\",{\"1\":{\"58\":1}}],[\"entryset\",{\"1\":{\"21\":1}}],[\"entry<string\",{\"1\":{\"21\":1}}],[\"entity\",{\"1\":{\"40\":2,\"41\":2,\"80\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1}}],[\"entityutils\",{\"1\":{\"29\":2}}],[\"e\",{\"1\":{\"29\":2,\"39\":2,\"59\":5,\"87\":8,\"90\":2,\"149\":1,\"150\":1,\"161\":1}}],[\"easylistener\",{\"1\":{\"22\":1}}],[\"easylistener<t>\",{\"1\":{\"22\":1}}],[\"easyexcelutil\",{\"1\":{\"21\":1,\"22\":4}}],[\"easyexcel\",{\"0\":{\"15\":1},\"1\":{\"6\":1,\"18\":1}}],[\"easyexcel文档\",{\"1\":{\"6\":1}}],[\"equalsandhashcode\",{\"1\":{\"123\":1}}],[\"equals\",{\"1\":{\"21\":2,\"55\":1,\"58\":5,\"91\":1,\"98\":1,\"109\":3}}],[\"exists\",{\"1\":{\"130\":1}}],[\"ex\",{\"1\":{\"68\":2,\"71\":1}}],[\"execution\",{\"1\":{\"67\":5,\"68\":5}}],[\"execute\",{\"1\":{\"29\":2}}],[\"expression\",{\"1\":{\"60\":2}}],[\"expiretime\",{\"1\":{\"58\":3}}],[\"expire\",{\"1\":{\"55\":4,\"58\":6,\"126\":2}}],[\"experimental\",{\"1\":{\"46\":1,\"50\":1,\"54\":1,\"114\":1}}],[\"examuserid\",{\"1\":{\"58\":3}}],[\"examuserredistempkey\",{\"1\":{\"55\":3}}],[\"examuserrediskey\",{\"1\":{\"55\":6}}],[\"examrankutil\",{\"1\":{\"54\":2,\"55\":1}}],[\"examtime\",{\"1\":{\"52\":6,\"54\":4,\"55\":3}}],[\"examid\",{\"1\":{\"52\":6,\"54\":3,\"55\":8}}],[\"exam\",{\"1\":{\"52\":9,\"55\":6}}],[\"examples\",{\"1\":{\"9\":1}}],[\"extends\",{\"1\":{\"87\":1,\"98\":1,\"116\":1,\"117\":1,\"118\":1}}],[\"extern\",{\"1\":{\"47\":1,\"87\":1,\"90\":1,\"91\":1,\"98\":1,\"102\":1}}],[\"ext<\",{\"1\":{\"48\":1}}],[\"excludepathpatterns\",{\"1\":{\"86\":2,\"92\":1,\"125\":1}}],[\"exclude\",{\"1\":{\"86\":3,\"92\":2,\"125\":2}}],[\"exclusions>\",{\"1\":{\"48\":2}}],[\"exclusion>\",{\"1\":{\"48\":3}}],[\"exceptionhandler\",{\"1\":{\"87\":4}}],[\"exception\",{\"1\":{\"59\":8,\"68\":1,\"71\":1,\"74\":2,\"87\":8,\"90\":1}}],[\"excelexception\",{\"1\":{\"87\":1}}],[\"excelfieldverification\",{\"1\":{\"21\":4}}],[\"excelproperty\",{\"1\":{\"21\":7}}],[\"excel\",{\"1\":{\"21\":7,\"22\":4,\"87\":1,\"98\":1}}],[\"edu\",{\"1\":{\"8\":1,\"10\":1}}],[\"everything\",{\"1\":{\"1\":1}}],[\"qa|grep\",{\"1\":{\"149\":1}}],[\"qcfactory\",{\"1\":{\"120\":1}}],[\"qchandler\",{\"1\":{\"115\":3,\"116\":1,\"117\":1,\"118\":1,\"120\":9}}],[\"qualifier\",{\"1\":{\"64\":4}}],[\"quartz\",{\"1\":{\"60\":1}}],[\"query\",{\"1\":{\"55\":2,\"58\":1}}],[\"queryallorbyid\",{\"1\":{\"83\":1}}],[\"queryall\",{\"1\":{\"40\":2,\"41\":1}}],[\"quickstart\",{\"1\":{\"6\":1}}],[\"quick\",{\"1\":{\"6\":1}}],[\"qqe2\",{\"1\":{\"14\":1,\"101\":1,\"104\":1}}],[\"qq351605872\",{\"1\":{\"5\":1}}],[\"x86\",{\"1\":{\"148\":4}}],[\"xxx\",{\"1\":{\"72\":3,\"134\":4}}],[\"xsd\",{\"1\":{\"68\":3,\"72\":6,\"74\":4,\"80\":3,\"81\":3,\"82\":1}}],[\"xsi\",{\"1\":{\"68\":1,\"72\":3,\"74\":1,\"80\":1,\"81\":1,\"82\":1}}],[\"xsi=\",{\"1\":{\"68\":1,\"72\":3,\"74\":1,\"80\":1,\"81\":1,\"82\":1}}],[\"x509encodedkeyspec\",{\"1\":{\"59\":5}}],[\"xwpftemplate\",{\"1\":{\"49\":3}}],[\"xml文件\",{\"1\":{\"72\":1}}],[\"xml文件中配置\",{\"1\":{\"38\":1,\"69\":1}}],[\"xml<\",{\"1\":{\"72\":2,\"82\":2}}],[\"xmlschema\",{\"1\":{\"68\":1,\"72\":3,\"74\":1,\"80\":1,\"81\":1,\"82\":1}}],[\"xmlns\",{\"1\":{\"68\":3,\"72\":9,\"74\":4,\"80\":3,\"81\":3,\"82\":4}}],[\"xmlns=\",{\"1\":{\"68\":1,\"72\":3,\"74\":1,\"80\":1,\"81\":1,\"82\":1}}],[\"xmlbeanfactory\",{\"1\":{\"61\":3}}],[\"xml映射文件需要注册到mybatis的全局配置文件中\",{\"1\":{\"41\":1}}],[\"xml映射文件名称必须与实体类同名\",{\"1\":{\"41\":1}}],[\"xml映射文件必须与实体类在同一个包下\",{\"1\":{\"41\":1}}],[\"xml\",{\"0\":{\"40\":1,\"80\":1,\"82\":1},\"1\":{\"37\":3,\"39\":1,\"40\":2,\"41\":1,\"43\":2,\"61\":4,\"68\":1,\"72\":11,\"74\":1,\"79\":2,\"80\":2,\"81\":1,\"82\":5}}],[\"xml相互跳转\",{\"1\":{\"2\":1}}],[\"xiaoymin\",{\"1\":{\"85\":1}}],[\"xiaoymin<\",{\"1\":{\"84\":1}}],[\"xiaojianjian\",{\"1\":{\"12\":1}}],[\"xiaominfo\",{\"1\":{\"6\":1}}],[\"x\",{\"1\":{\"6\":1}}],[\"云盘分享社\",{\"1\":{\"5\":1}}],[\"云盘资源发布页\",{\"1\":{\"5\":1}}],[\"云盘资源搜索站\",{\"1\":{\"5\":1}}],[\"npm\",{\"1\":{\"160\":2,\"161\":7,\"163\":3}}],[\"npmmirror\",{\"1\":{\"160\":2,\"161\":3}}],[\"nvm常用命令\",{\"0\":{\"163\":1}}],[\"nvm使用\",{\"0\":{\"162\":1}}],[\"nvm下载时请选择下图所框选的包\",{\"1\":{\"159\":1}}],[\"nvm下载地址\",{\"1\":{\"159\":1}}],[\"nvm\",{\"0\":{\"158\":1},\"1\":{\"159\":1,\"161\":3,\"162\":5,\"163\":14}}],[\"nativewebrequest\",{\"1\":{\"91\":5}}],[\"name`\",{\"1\":{\"130\":1}}],[\"namespace=\",{\"1\":{\"40\":1}}],[\"namespace\",{\"1\":{\"40\":1}}],[\"name=\",{\"1\":{\"37\":5,\"72\":3,\"74\":5,\"80\":11,\"81\":2}}],[\"name=fastjson2\",{\"1\":{\"25\":2}}],[\"name>forceresponseencoding<\",{\"1\":{\"72\":1}}],[\"name>forcerequestencoding<\",{\"1\":{\"72\":1}}],[\"name>encoding<\",{\"1\":{\"72\":1}}],[\"name>characterencodingfilter<\",{\"1\":{\"72\":2}}],[\"name>contextconfiglocation<\",{\"1\":{\"72\":2,\"82\":2}}],[\"name>dispatcherservlet<\",{\"1\":{\"72\":2,\"82\":2}}],[\"name>\",{\"1\":{\"32\":1,\"72\":9,\"82\":4}}],[\"name\",{\"1\":{\"25\":4,\"40\":1,\"42\":2,\"62\":3,\"67\":2,\"68\":2,\"72\":6,\"128\":5,\"129\":12,\"133\":1,\"136\":2,\"137\":2,\"138\":4,\"139\":4}}],[\"ns\",{\"1\":{\"72\":3,\"82\":3}}],[\"nio\",{\"1\":{\"58\":1,\"59\":1}}],[\"numberformatannotation支持\",{\"1\":{\"72\":1}}],[\"number\",{\"1\":{\"55\":3,\"58\":9}}],[\"null\",{\"1\":{\"21\":5,\"39\":3,\"40\":1,\"41\":1,\"47\":2,\"58\":6,\"90\":1,\"91\":3,\"95\":7,\"98\":4,\"110\":1,\"115\":1,\"120\":1}}],[\"nodejs\",{\"1\":{\"163\":1}}],[\"node\",{\"1\":{\"160\":2,\"163\":1}}],[\"nodeps\",{\"1\":{\"149\":2}}],[\"no\",{\"1\":{\"134\":1,\"145\":1}}],[\"nosuchalgorithmexception\",{\"1\":{\"59\":1}}],[\"noargsconstructor\",{\"1\":{\"54\":2,\"98\":2}}],[\"now\",{\"1\":{\"47\":2,\"90\":2}}],[\"note\",{\"1\":{\"149\":1}}],[\"notepad\",{\"1\":{\"1\":2}}],[\"not\",{\"1\":{\"73\":1,\"130\":1,\"164\":1}}],[\"notheadrequired\",{\"0\":{\"20\":1},\"1\":{\"20\":1,\"21\":2}}],[\"notfieldrequired\",{\"0\":{\"19\":1},\"1\":{\"19\":1,\"21\":3}}],[\"never\",{\"1\":{\"73\":1}}],[\"nested\",{\"1\":{\"73\":1}}],[\"nextval\",{\"1\":{\"134\":2}}],[\"nexthandler\",{\"1\":{\"115\":7}}],[\"next\",{\"1\":{\"58\":1}}],[\"new\",{\"1\":{\"21\":9,\"22\":2,\"25\":1,\"29\":1,\"39\":2,\"41\":1,\"47\":1,\"49\":1,\"50\":13,\"54\":1,\"55\":1,\"57\":2,\"58\":3,\"59\":13,\"61\":5,\"73\":1,\"74\":1,\"85\":3,\"87\":2,\"92\":1,\"95\":1,\"98\":1,\"116\":1,\"117\":1,\"119\":4,\"120\":2}}],[\"netty\",{\"1\":{\"6\":3}}],[\"netty文档\",{\"1\":{\"6\":1}}],[\"net\",{\"1\":{\"5\":1,\"12\":1,\"14\":1,\"156\":1}}],[\"y\",{\"1\":{\"150\":4}}],[\"yum\",{\"1\":{\"143\":1,\"145\":1,\"146\":1}}],[\"yunpanfenxiang\",{\"1\":{\"5\":1}}],[\"yunpan1\",{\"1\":{\"5\":1}}],[\"yunpanziyuan\",{\"1\":{\"5\":1}}],[\"yyyy\",{\"1\":{\"46\":2}}],[\"ysepan\",{\"1\":{\"5\":1}}],[\"记忆力博客网盘\",{\"1\":{\"5\":1}}],[\"p`mysql密码`\",{\"1\":{\"150\":3}}],[\"perl\",{\"1\":{\"145\":1}}],[\"personid\",{\"1\":{\"72\":1}}],[\"personserviceimpl\",{\"1\":{\"68\":1,\"74\":1}}],[\"personservice\",{\"1\":{\"68\":2,\"74\":2}}],[\"persondao\",{\"1\":{\"64\":3}}],[\"persist\",{\"1\":{\"58\":2}}],[\"phone\",{\"1\":{\"97\":1}}],[\"php\",{\"1\":{\"12\":1}}],[\"plan\",{\"1\":{\"145\":1}}],[\"placeholder\",{\"1\":{\"80\":1}}],[\"plugins\",{\"1\":{\"80\":1,\"85\":1}}],[\"plugins>\",{\"1\":{\"72\":1,\"77\":1}}],[\"plugins<\",{\"1\":{\"72\":1}}],[\"plugin>\",{\"1\":{\"72\":2,\"77\":1}}],[\"plugin<\",{\"1\":{\"72\":2,\"77\":1}}],[\"plugin\",{\"1\":{\"50\":1,\"149\":1}}],[\"pjp\",{\"1\":{\"68\":2}}],[\"pkcs8encodedkeyspec\",{\"1\":{\"59\":5}}],[\"pkgs\",{\"1\":{\"8\":1}}],[\"pivot\",{\"1\":{\"58\":3}}],[\"pic\",{\"1\":{\"12\":1}}],[\"pictures\",{\"1\":{\"50\":6}}],[\"picturerenderdata>\",{\"1\":{\"50\":2}}],[\"picturerenderdata>>\",{\"1\":{\"50\":2}}],[\"picturerenderdata\",{\"1\":{\"50\":3}}],[\"picture\",{\"1\":{\"12\":1}}],[\"p>\",{\"1\":{\"46\":2}}],[\"prefixnomasklen\",{\"1\":{\"98\":2,\"99\":1}}],[\"prefix\",{\"1\":{\"72\":1,\"81\":1,\"161\":1}}],[\"prehandle\",{\"1\":{\"71\":3,\"90\":2}}],[\"privileges\",{\"1\":{\"149\":1}}],[\"privacyserializer\",{\"1\":{\"98\":2,\"99\":2}}],[\"privacyencrypt\",{\"1\":{\"98\":8,\"99\":1}}],[\"privacytypeenum\",{\"1\":{\"97\":2,\"98\":5,\"99\":2}}],[\"privatekey\",{\"1\":{\"59\":15}}],[\"private\",{\"1\":{\"22\":2,\"39\":2,\"46\":6,\"50\":6,\"54\":5,\"55\":3,\"59\":3,\"64\":1,\"68\":3,\"85\":1,\"86\":3,\"92\":3,\"95\":4,\"98\":1,\"114\":4,\"125\":2}}],[\"price\",{\"1\":{\"90\":2}}],[\"printstream\",{\"1\":{\"87\":2}}],[\"printstacktrace\",{\"1\":{\"39\":1,\"87\":1}}],[\"print\",{\"1\":{\"59\":2}}],[\"println\",{\"1\":{\"41\":1,\"59\":4,\"68\":12,\"74\":1,\"109\":3,\"116\":1,\"117\":1,\"118\":1,\"119\":2}}],[\"protected\",{\"1\":{\"115\":2}}],[\"prototype\",{\"1\":{\"62\":2}}],[\"product\",{\"1\":{\"114\":5,\"115\":10,\"116\":7,\"117\":6,\"118\":6,\"119\":5,\"120\":2}}],[\"product=broker\",{\"1\":{\"9\":1}}],[\"prov\",{\"1\":{\"98\":3}}],[\"project\",{\"1\":{\"77\":1}}],[\"projectlombok<\",{\"1\":{\"36\":1,\"77\":1}}],[\"propagation事务的传播\",{\"1\":{\"74\":1}}],[\"propagation\",{\"1\":{\"73\":7,\"74\":7}}],[\"property>\",{\"1\":{\"72\":2,\"80\":2}}],[\"property\",{\"1\":{\"42\":1,\"43\":1,\"62\":1,\"80\":1,\"98\":5}}],[\"properties>\",{\"1\":{\"77\":1}}],[\"properties\",{\"1\":{\"37\":1,\"42\":2,\"78\":1,\"80\":2}}],[\"proceed\",{\"1\":{\"68\":3}}],[\"proceedingjoinpoint\",{\"1\":{\"68\":3}}],[\"proxy\",{\"1\":{\"66\":1,\"68\":1,\"163\":1}}],[\"pulldata\",{\"1\":{\"102\":1}}],[\"pulldatatask\",{\"1\":{\"102\":1}}],[\"putmapping\",{\"1\":{\"70\":1}}],[\"putall\",{\"1\":{\"58\":1}}],[\"put\",{\"1\":{\"21\":4,\"50\":3,\"54\":5,\"55\":1,\"58\":1,\"70\":1}}],[\"publickey\",{\"1\":{\"59\":15}}],[\"public<\",{\"1\":{\"32\":1}}],[\"public\",{\"1\":{\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":8,\"22\":5,\"25\":3,\"26\":1,\"29\":3,\"37\":1,\"39\":3,\"40\":2,\"41\":5,\"46\":1,\"47\":3,\"49\":2,\"50\":3,\"54\":3,\"55\":7,\"57\":2,\"58\":58,\"59\":9,\"68\":9,\"72\":5,\"74\":2,\"83\":2,\"85\":2,\"86\":3,\"87\":6,\"89\":1,\"90\":8,\"91\":3,\"92\":3,\"94\":3,\"95\":8,\"97\":3,\"98\":3,\"99\":1,\"102\":2,\"108\":2,\"109\":9,\"110\":2,\"111\":2,\"114\":1,\"115\":3,\"116\":2,\"117\":2,\"118\":2,\"119\":1,\"120\":3,\"125\":3,\"133\":1,\"134\":1}}],[\"pass\",{\"1\":{\"145\":1}}],[\"password=mysqluserpwd\",{\"1\":{\"78\":1}}],[\"password=root\",{\"1\":{\"38\":1}}],[\"password\",{\"1\":{\"37\":2,\"43\":2,\"74\":1,\"80\":2,\"149\":6,\"157\":3}}],[\"pageinterceptor\",{\"1\":{\"80\":1}}],[\"pagehelper<\",{\"1\":{\"77\":1}}],[\"pagehelper\",{\"1\":{\"77\":2,\"80\":1}}],[\"packaging>\",{\"1\":{\"77\":1}}],[\"packaging\",{\"1\":{\"77\":1}}],[\"package=\",{\"1\":{\"68\":1,\"72\":2,\"80\":1,\"81\":1}}],[\"package\",{\"1\":{\"42\":1,\"54\":1,\"55\":1,\"68\":1,\"114\":1,\"115\":1,\"116\":1}}],[\"path中添加\",{\"1\":{\"161\":1}}],[\"path||\",{\"1\":{\"138\":1}}],[\"path\",{\"1\":{\"86\":3,\"92\":2,\"125\":2,\"129\":6,\"138\":2,\"139\":3,\"163\":1}}],[\"paths\",{\"1\":{\"85\":1}}],[\"pathselectors\",{\"1\":{\"85\":2}}],[\"pathvariable\",{\"1\":{\"72\":4}}],[\"path>\",{\"1\":{\"72\":1,\"77\":1}}],[\"path=\",{\"1\":{\"71\":2,\"150\":1}}],[\"pattern>\",{\"1\":{\"72\":4,\"82\":2}}],[\"pattern\",{\"1\":{\"46\":2,\"58\":3,\"67\":12}}],[\"parent\",{\"1\":{\"129\":12,\"136\":3,\"137\":3,\"138\":3,\"139\":3}}],[\"parm\",{\"1\":{\"43\":2}}],[\"parse\",{\"1\":{\"145\":1}}],[\"parseint\",{\"1\":{\"55\":1}}],[\"parsedouble\",{\"1\":{\"55\":3}}],[\"parsearray\",{\"1\":{\"26\":2}}],[\"parseobject\",{\"1\":{\"21\":2,\"25\":4,\"26\":2,\"90\":1}}],[\"parameter\",{\"1\":{\"89\":1}}],[\"parametertype属性需要注意\",{\"1\":{\"43\":1}}],[\"parametertype=\",{\"1\":{\"43\":2}}],[\"parametertype\",{\"1\":{\"43\":3}}],[\"param>\",{\"1\":{\"72\":10,\"82\":4}}],[\"param\",{\"1\":{\"21\":14,\"29\":2,\"40\":2,\"41\":1,\"49\":3,\"55\":3,\"58\":63,\"59\":11,\"67\":2,\"72\":11,\"82\":4,\"91\":5,\"95\":4,\"108\":1,\"115\":3,\"120\":1}}],[\"pan666\",{\"1\":{\"5\":1}}],[\"ps\",{\"1\":{\"19\":1,\"34\":1,\"37\":1,\"38\":1,\"41\":1,\"43\":1,\"47\":1,\"59\":1,\"65\":1,\"83\":1,\"104\":1,\"110\":1,\"129\":1,\"161\":1}}],[\"policy=0\",{\"1\":{\"149\":1,\"157\":1}}],[\"popvalue\",{\"1\":{\"58\":1}}],[\"pop\",{\"1\":{\"58\":3}}],[\"pointcut2\",{\"1\":{\"68\":2}}],[\"pointcut\",{\"1\":{\"66\":1,\"68\":11}}],[\"poi<\",{\"1\":{\"48\":3}}],[\"poi\",{\"0\":{\"48\":1},\"1\":{\"48\":3,\"49\":2,\"50\":5}}],[\"port=3306\",{\"1\":{\"153\":1}}],[\"port>\",{\"1\":{\"72\":1,\"77\":1}}],[\"port\",{\"1\":{\"38\":1}}],[\"pojo\",{\"1\":{\"33\":1}}],[\"postgresql\",{\"0\":{\"131\":1}}],[\"posthandle\",{\"1\":{\"71\":2}}],[\"postmapping\",{\"1\":{\"70\":1}}],[\"post\",{\"1\":{\"29\":3,\"70\":1}}],[\"postimages\",{\"1\":{\"12\":1}}],[\"postimages图床\",{\"1\":{\"12\":1}}],[\"pooled\",{\"1\":{\"37\":2}}],[\"pool\",{\"1\":{\"8\":1,\"80\":1}}],[\"png\",{\"1\":{\"3\":1}}],[\"pdfview\",{\"1\":{\"69\":1}}],[\"pdf\",{\"1\":{\"1\":1}}],[\"pdfgear\",{\"1\":{\"1\":2}}],[\"流程图绘图\",{\"1\":{\"3\":1}}],[\"available\",{\"1\":{\"162\":1,\"163\":1}}],[\"ago\",{\"1\":{\"150\":1}}],[\"age=18\",{\"1\":{\"72\":1}}],[\"age\",{\"1\":{\"40\":1,\"72\":4}}],[\"agedm\",{\"1\":{\"14\":1}}],[\"age动漫网\",{\"1\":{\"14\":1}}],[\"amd64\",{\"1\":{\"143\":2}}],[\"abstract\",{\"1\":{\"115\":2}}],[\"abatis\",{\"1\":{\"33\":1}}],[\"aftercompletion\",{\"1\":{\"71\":3}}],[\"after\",{\"1\":{\"68\":2}}],[\"afterthrowing\",{\"1\":{\"68\":2}}],[\"afterreturn\",{\"1\":{\"68\":1}}],[\"afterreturning\",{\"1\":{\"68\":2}}],[\"advice\",{\"1\":{\"66\":1}}],[\"addargumentresolvers\",{\"1\":{\"92\":1}}],[\"addresourcelocations\",{\"1\":{\"86\":3,\"125\":3}}],[\"addresourcehandler\",{\"1\":{\"86\":3,\"125\":3}}],[\"addresourcehandlers\",{\"1\":{\"86\":1,\"125\":1}}],[\"addrank\",{\"1\":{\"55\":1}}],[\"addpathpatterns\",{\"1\":{\"86\":2,\"92\":1,\"125\":1}}],[\"addinterceptor\",{\"1\":{\"86\":2,\"92\":1,\"125\":1}}],[\"addinterceptors\",{\"1\":{\"86\":1,\"92\":1,\"125\":1}}],[\"addlist\",{\"1\":{\"43\":2}}],[\"add\",{\"1\":{\"21\":3,\"22\":2,\"50\":3,\"55\":1,\"58\":2,\"68\":4,\"70\":1,\"74\":2,\"92\":1}}],[\"a\",{\"1\":{\"63\":1,\"73\":1,\"97\":2,\"149\":1}}],[\"authentication\",{\"1\":{\"149\":1}}],[\"authorityinterceptor\",{\"1\":{\"86\":4,\"92\":2,\"125\":3}}],[\"author\",{\"1\":{\"17\":1,\"18\":1,\"22\":1,\"39\":1,\"49\":1,\"50\":2}}],[\"autoproxy通过扫描找到\",{\"1\":{\"68\":1}}],[\"autoproxy的底层是由\",{\"1\":{\"68\":1}}],[\"autoproxy\",{\"1\":{\"68\":1}}],[\"autowired和\",{\"1\":{\"64\":1}}],[\"autowired\",{\"1\":{\"64\":4}}],[\"autowire\",{\"1\":{\"63\":1}}],[\"aop=\",{\"1\":{\"68\":1,\"74\":1}}],[\"aop\",{\"0\":{\"66\":1,\"67\":1,\"68\":1},\"1\":{\"60\":1,\"66\":1,\"68\":8,\"74\":4}}],[\"alter\",{\"1\":{\"149\":2,\"157\":2}}],[\"all\",{\"1\":{\"95\":5,\"129\":4,\"136\":1,\"137\":1,\"138\":1,\"139\":1}}],[\"allargsconstructor\",{\"1\":{\"54\":2,\"98\":2}}],[\"aliyun\",{\"1\":{\"11\":1,\"32\":2}}],[\"alibaba<\",{\"1\":{\"77\":1}}],[\"alibaba\",{\"1\":{\"6\":2,\"21\":5,\"22\":3,\"23\":2,\"77\":1,\"80\":1,\"90\":1,\"98\":1}}],[\"app>\",{\"1\":{\"72\":1,\"82\":1}}],[\"app\",{\"1\":{\"72\":2,\"82\":2}}],[\"applicationmvc\",{\"1\":{\"72\":1}}],[\"application\",{\"1\":{\"61\":1,\"72\":2,\"82\":1}}],[\"applicationcontext\",{\"1\":{\"60\":1,\"61\":6,\"72\":2}}],[\"apis\",{\"1\":{\"85\":1}}],[\"apiinfo\",{\"1\":{\"85\":5}}],[\"apiinfobuilder\",{\"1\":{\"85\":2}}],[\"apioperation\",{\"1\":{\"85\":2}}],[\"api<\",{\"1\":{\"72\":1,\"77\":1}}],[\"api\",{\"1\":{\"60\":3,\"77\":3}}],[\"apimodelproperty\",{\"1\":{\"46\":1}}],[\"apachecharts\",{\"1\":{\"9\":1}}],[\"apache\",{\"1\":{\"6\":2,\"9\":1,\"28\":1,\"33\":2,\"39\":4,\"40\":1,\"47\":1,\"48\":3,\"59\":1,\"72\":2,\"77\":1}}],[\"accessors\",{\"1\":{\"46\":1,\"50\":2,\"54\":2,\"114\":2}}],[\"access\",{\"1\":{\"33\":1}}],[\"arch\",{\"1\":{\"163\":4}}],[\"archive\",{\"1\":{\"8\":1,\"163\":1}}],[\"around\",{\"1\":{\"68\":3}}],[\"arg\",{\"1\":{\"62\":1,\"68\":2}}],[\"args\",{\"1\":{\"41\":1,\"68\":3,\"111\":1,\"119\":1}}],[\"array>\",{\"1\":{\"80\":1}}],[\"arrays\",{\"1\":{\"26\":1,\"86\":2,\"92\":2,\"125\":1}}],[\"arraylist<>\",{\"1\":{\"21\":2,\"22\":2,\"50\":2,\"55\":1,\"58\":1}}],[\"arraylist\",{\"1\":{\"21\":1,\"22\":1,\"43\":1,\"50\":1,\"55\":1,\"58\":1}}],[\"artifactid>\",{\"1\":{\"23\":1,\"28\":1,\"36\":7,\"48\":6,\"68\":3,\"72\":6,\"74\":4,\"77\":12,\"84\":1}}],[\"as\",{\"1\":{\"128\":4,\"129\":8,\"136\":1,\"137\":1,\"138\":4,\"139\":4}}],[\"aspects<\",{\"1\":{\"68\":1}}],[\"aspectj的通知类型\",{\"1\":{\"67\":1}}],[\"aspectj\",{\"0\":{\"67\":1},\"1\":{\"66\":1,\"67\":1,\"68\":11}}],[\"aspect\",{\"1\":{\"66\":1,\"68\":4}}],[\"asc\",{\"1\":{\"52\":1,\"55\":1}}],[\"ascii\",{\"1\":{\"14\":1}}],[\"aslist\",{\"1\":{\"26\":1,\"86\":1,\"92\":1,\"125\":1}}],[\"assistant\",{\"1\":{\"2\":1}}],[\"ai\",{\"1\":{\"2\":1}}],[\"ant\",{\"1\":{\"126\":1}}],[\"antd\",{\"1\":{\"126\":2}}],[\"any\",{\"1\":{\"85\":1}}],[\"and\",{\"1\":{\"40\":1,\"133\":1,\"138\":1}}],[\"analysiscontext\",{\"1\":{\"21\":3,\"22\":5}}],[\"annotationawareaspectjautoproxycreator\",{\"1\":{\"68\":1}}],[\"annotations\",{\"1\":{\"40\":1,\"46\":1,\"85\":3}}],[\"annotationtype\",{\"1\":{\"21\":2}}],[\"annotation\",{\"1\":{\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"46\":3,\"57\":2,\"68\":1,\"72\":2,\"74\":3,\"80\":1,\"81\":1,\"83\":1,\"85\":2,\"86\":4,\"87\":3,\"89\":1,\"90\":1,\"92\":4,\"99\":6,\"102\":1}}],[\"an\",{\"1\":{\"2\":1}}],[\"title\",{\"1\":{\"85\":1}}],[\"time=$\",{\"1\":{\"150\":1}}],[\"timeout=2147483\",{\"1\":{\"153\":2}}],[\"timeout\",{\"1\":{\"58\":6,\"73\":1,\"90\":1}}],[\"timeunit\",{\"1\":{\"58\":6}}],[\"time\",{\"1\":{\"46\":3,\"47\":1,\"55\":4,\"58\":5,\"150\":3}}],[\"txt中的npm\",{\"1\":{\"163\":1}}],[\"txt中的node\",{\"1\":{\"163\":1}}],[\"txdmbrtik2<d\",{\"1\":{\"149\":1}}],[\"tx\",{\"1\":{\"74\":4,\"80\":4}}],[\"tx=\",{\"1\":{\"74\":1,\"80\":1}}],[\"tx<\",{\"1\":{\"74\":1,\"77\":1}}],[\"tl<\",{\"1\":{\"48\":2}}],[\"tl\",{\"0\":{\"48\":1},\"1\":{\"48\":4}}],[\"then\",{\"1\":{\"150\":3}}],[\"this\",{\"1\":{\"47\":6,\"94\":2,\"95\":3,\"97\":2,\"115\":1}}],[\"threadlocal<integer>\",{\"1\":{\"47\":1}}],[\"threadlocal<>\",{\"1\":{\"39\":1,\"47\":1}}],[\"threadlocal<sqlsession>\",{\"1\":{\"39\":1}}],[\"thread\",{\"1\":{\"39\":5,\"47\":5,\"90\":1}}],[\"threatbook\",{\"1\":{\"13\":1}}],[\"throwing\",{\"1\":{\"68\":1}}],[\"throwable\",{\"1\":{\"68\":2}}],[\"throws\",{\"1\":{\"49\":2,\"50\":2,\"59\":5,\"67\":2,\"68\":1,\"98\":2}}],[\"throw\",{\"1\":{\"21\":4,\"58\":1,\"59\":3,\"120\":1}}],[\"text\",{\"1\":{\"138\":2,\"139\":2}}],[\"temporary\",{\"1\":{\"149\":3}}],[\"temp\",{\"1\":{\"50\":1,\"129\":22,\"136\":5,\"137\":5,\"138\":7,\"139\":6,\"149\":1}}],[\"templates\",{\"1\":{\"50\":1}}],[\"template\",{\"1\":{\"49\":3,\"57\":7}}],[\"test04\",{\"1\":{\"72\":5}}],[\"test03\",{\"1\":{\"72\":2}}],[\"test02\",{\"1\":{\"72\":2}}],[\"test01\",{\"1\":{\"72\":2}}],[\"testgenerateword\",{\"1\":{\"50\":1}}],[\"test=\",{\"1\":{\"40\":1}}],[\"test\",{\"1\":{\"25\":1,\"26\":1,\"50\":4,\"85\":3,\"145\":2}}],[\"teamname\",{\"1\":{\"72\":1}}],[\"team\",{\"1\":{\"1\":1}}],[\"t\",{\"1\":{\"21\":8,\"22\":5,\"43\":3,\"68\":1,\"95\":4}}],[\"tap\",{\"1\":{\"145\":1}}],[\"tar\",{\"1\":{\"145\":3,\"146\":1}}],[\"target>1\",{\"1\":{\"77\":1}}],[\"target>\",{\"1\":{\"72\":1,\"77\":1}}],[\"target\",{\"1\":{\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"66\":1,\"68\":1,\"89\":1,\"99\":2}}],[\"tablename\",{\"1\":{\"78\":1}}],[\"tablefield\",{\"1\":{\"46\":5}}],[\"table\",{\"1\":{\"14\":1,\"50\":1,\"133\":1}}],[\"tsinghua\",{\"1\":{\"10\":1}}],[\"tuna\",{\"1\":{\"10\":1}}],[\"type=\",{\"1\":{\"37\":2}}],[\"type\",{\"1\":{\"9\":1,\"17\":1,\"18\":1,\"42\":2,\"43\":1,\"67\":4,\"98\":2,\"99\":1}}],[\"transactional\",{\"1\":{\"74\":3}}],[\"transaction\",{\"1\":{\"74\":3,\"80\":1}}],[\"transactiondefinition\",{\"1\":{\"73\":1}}],[\"transactionmanager\",{\"1\":{\"42\":1,\"74\":2,\"80\":2}}],[\"treadlocal\",{\"1\":{\"39\":1}}],[\"tree\",{\"1\":{\"6\":1}}],[\"true表示必须赋值\",{\"1\":{\"72\":1}}],[\"true\",{\"1\":{\"21\":7,\"34\":1,\"50\":3,\"54\":1,\"58\":6,\"62\":2,\"68\":1,\"72\":1,\"80\":1,\"90\":1,\"91\":2,\"114\":1}}],[\"try\",{\"1\":{\"9\":1,\"29\":2,\"39\":1,\"58\":1,\"59\":4,\"90\":1}}],[\"tos\",{\"1\":{\"126\":2}}],[\"tostring\",{\"1\":{\"29\":2,\"87\":1,\"90\":1}}],[\"tokenutil\",{\"1\":{\"90\":1}}],[\"token\",{\"1\":{\"90\":5}}],[\"tomcat7\",{\"1\":{\"77\":1,\"83\":1}}],[\"tomcat启动就创建此对象\",{\"1\":{\"72\":1}}],[\"tomcat\",{\"1\":{\"72\":1,\"77\":2,\"83\":1}}],[\"tomcat插件\",{\"1\":{\"72\":1}}],[\"tomap\",{\"1\":{\"54\":1,\"55\":1}}],[\"tobytearray\",{\"1\":{\"49\":1,\"59\":2}}],[\"tojsonstring\",{\"1\":{\"21\":2,\"25\":2,\"26\":3}}],[\"to\",{\"1\":{\"14\":1}}],[\"top\",{\"1\":{\"5\":1}}],[\"tongyi\",{\"1\":{\"2\":1}}],[\"快速生成swagger注释\",{\"1\":{\"2\":1}}],[\"shutdown\",{\"1\":{\"153\":1}}],[\"sh\",{\"1\":{\"150\":2}}],[\"show\",{\"1\":{\"149\":2,\"157\":1}}],[\"shapetest\",{\"1\":{\"111\":1}}],[\"shapes\",{\"1\":{\"110\":2}}],[\"shapefactory\",{\"1\":{\"110\":1,\"111\":1}}],[\"shapeenum\",{\"1\":{\"108\":2,\"109\":6,\"110\":3,\"111\":1}}],[\"shape\",{\"1\":{\"108\":3,\"109\":9,\"110\":12}}],[\"shaskey\",{\"1\":{\"58\":1}}],[\"src=\",{\"1\":{\"126\":2}}],[\"srcdata\",{\"1\":{\"59\":3}}],[\"square\",{\"1\":{\"108\":1,\"109\":3,\"110\":1}}],[\"sqlsession获取mapper\",{\"0\":{\"39\":1}}],[\"sqlsession\",{\"1\":{\"34\":4,\"39\":16}}],[\"sqlsessionfactorybeanname\",{\"1\":{\"80\":1}}],[\"sqlsessionfactorybean\",{\"1\":{\"80\":1}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"39\":3}}],[\"sqlsessionfactorybuildersqlsessionfactory的创建\",{\"1\":{\"34\":1}}],[\"sqlsessionfactory\",{\"1\":{\"34\":2,\"39\":4,\"80\":3}}],[\"sql\",{\"1\":{\"33\":1,\"43\":3,\"73\":1,\"150\":3}}],[\"sat\",{\"1\":{\"103\":1}}],[\"sandbox\",{\"1\":{\"13\":1}}],[\"simple\",{\"1\":{\"145\":1}}],[\"singleton\",{\"1\":{\"62\":2}}],[\"signature\",{\"1\":{\"59\":12}}],[\"sign\",{\"1\":{\"59\":8}}],[\"size\",{\"1\":{\"21\":4,\"50\":3,\"55\":2,\"58\":10,\"120\":2}}],[\"so\",{\"1\":{\"145\":4,\"146\":2}}],[\"source\",{\"1\":{\"145\":1}}],[\"sourceencoding>\",{\"1\":{\"77\":1}}],[\"sourceencoding>utf\",{\"1\":{\"77\":1}}],[\"source>1\",{\"1\":{\"77\":1}}],[\"source>\",{\"1\":{\"72\":1,\"77\":1}}],[\"soft\",{\"1\":{\"55\":4}}],[\"software\",{\"1\":{\"33\":1}}],[\"sortquery<string>\",{\"1\":{\"55\":2,\"58\":1}}],[\"sortquerybuilder\",{\"1\":{\"55\":3}}],[\"sortquery\",{\"1\":{\"55\":5,\"58\":4}}],[\"sortparameters\",{\"1\":{\"55\":3}}],[\"sort\",{\"1\":{\"52\":3,\"54\":1,\"55\":17,\"58\":2}}],[\"sortscore\",{\"1\":{\"52\":6,\"55\":1}}],[\"sc\",{\"1\":{\"156\":1}}],[\"script>\",{\"1\":{\"126\":2}}],[\"scheduling\",{\"1\":{\"102\":1}}],[\"scheduled\",{\"1\":{\"101\":2,\"102\":2}}],[\"schemalocation=\",{\"1\":{\"68\":1,\"72\":3,\"74\":1,\"80\":1,\"81\":1,\"82\":1}}],[\"schema\",{\"1\":{\"68\":9,\"72\":15,\"74\":12,\"80\":9,\"81\":9,\"133\":2}}],[\"schemas<\",{\"1\":{\"48\":2}}],[\"scope>\",{\"1\":{\"68\":1,\"72\":1,\"77\":1}}],[\"scope\",{\"1\":{\"62\":1,\"91\":1}}],[\"score\",{\"1\":{\"52\":6,\"54\":5,\"55\":9}}],[\"scan\",{\"1\":{\"58\":1,\"68\":1,\"72\":2,\"80\":1,\"81\":1}}],[\"scanoptions\",{\"1\":{\"58\":6}}],[\"scientific\",{\"1\":{\"14\":1}}],[\"ssm\",{\"0\":{\"76\":1},\"1\":{\"77\":1}}],[\"sset\",{\"1\":{\"58\":1}}],[\"ss\",{\"1\":{\"46\":2}}],[\"swagger配置\",{\"1\":{\"86\":1,\"125\":1}}],[\"swagger2\",{\"1\":{\"85\":1}}],[\"swaggerconfig\",{\"0\":{\"85\":1},\"1\":{\"85\":1}}],[\"swagger\",{\"0\":{\"124\":1},\"1\":{\"46\":1,\"84\":1,\"85\":2,\"86\":3,\"92\":2,\"125\":3}}],[\"swaggertools\",{\"1\":{\"2\":1}}],[\"spi\",{\"1\":{\"85\":1}}],[\"spel\",{\"1\":{\"60\":1}}],[\"spec\",{\"1\":{\"59\":2}}],[\"special\",{\"1\":{\"32\":1}}],[\"springfox\",{\"1\":{\"85\":8}}],[\"springframework\",{\"1\":{\"47\":1,\"50\":1,\"55\":3,\"57\":6,\"58\":4,\"61\":1,\"68\":10,\"72\":19,\"74\":16,\"80\":10,\"81\":10,\"82\":2,\"83\":2,\"85\":2,\"86\":5,\"87\":4,\"90\":3,\"91\":7,\"92\":5,\"102\":2}}],[\"springframework<\",{\"1\":{\"36\":3,\"68\":2,\"72\":1,\"74\":2,\"77\":3}}],[\"spring<\",{\"1\":{\"77\":1}}],[\"springssm整合\",{\"0\":{\"75\":1}}],[\"springservlet\",{\"1\":{\"72\":1}}],[\"spring中的aop只能对方法进行拦截\",{\"1\":{\"73\":1}}],[\"spring中提供了对事务的管理\",{\"1\":{\"73\":1}}],[\"spring提供的对事务的管理\",{\"1\":{\"73\":1}}],[\"spring提供了对\",{\"1\":{\"64\":1}}],[\"spring的配置\",{\"1\":{\"72\":1}}],[\"spring的配置文件\",{\"1\":{\"72\":1}}],[\"springmvcapplication\",{\"1\":{\"82\":1}}],[\"springmvc的配置\",{\"1\":{\"72\":1}}],[\"springmvc的配置文件\",{\"1\":{\"72\":1,\"81\":1}}],[\"springmvc所需的依赖\",{\"1\":{\"72\":1}}],[\"springmvc中默认返回的是页面\",{\"1\":{\"70\":1}}],[\"springmvc框架提供的该核心控制器需要我们在web\",{\"1\":{\"69\":1}}],[\"springmvc\",{\"0\":{\"72\":1},\"1\":{\"69\":3,\"71\":1,\"72\":1}}],[\"spring配置文件的名称\",{\"1\":{\"61\":2}}],[\"spring\",{\"0\":{\"60\":1,\"69\":1,\"72\":1,\"73\":1,\"76\":1},\"1\":{\"36\":2,\"60\":17,\"61\":2,\"65\":1,\"66\":1,\"68\":7,\"69\":2,\"70\":1,\"72\":10,\"74\":6,\"77\":11,\"79\":1,\"80\":5,\"81\":3,\"82\":1,\"84\":1,\"85\":2}}],[\"springboot项目根下创建lombok\",{\"1\":{\"123\":1}}],[\"springboot定时任务\",{\"0\":{\"100\":1}}],[\"springboot实现自定义脱敏注解\",{\"0\":{\"96\":1}}],[\"springboot统一数据返回类\",{\"0\":{\"93\":1}}],[\"springboot配置swagger\",{\"0\":{\"84\":1}}],[\"springboot\",{\"0\":{\"88\":1},\"1\":{\"14\":1}}],[\"slf4j\",{\"1\":{\"29\":1,\"47\":3,\"87\":3,\"90\":3,\"91\":3,\"98\":3,\"102\":3}}],[\"sudo\",{\"1\":{\"143\":2,\"149\":1,\"150\":1}}],[\"sun\",{\"1\":{\"103\":1,\"104\":1}}],[\"sunset\",{\"1\":{\"39\":1,\"40\":3,\"41\":4,\"49\":1,\"50\":3,\"67\":3,\"74\":1,\"80\":3,\"81\":1}}],[\"suffixnomasklen\",{\"1\":{\"98\":2,\"99\":1}}],[\"suffix\",{\"1\":{\"72\":1,\"81\":1}}],[\"super\",{\"1\":{\"87\":1}}],[\"superbed\",{\"1\":{\"12\":1}}],[\"supported\",{\"1\":{\"73\":1}}],[\"supportsinternal\",{\"1\":{\"108\":1,\"109\":3,\"110\":1}}],[\"supportsparameter\",{\"1\":{\"91\":1}}],[\"supports\",{\"1\":{\"73\":1,\"74\":1}}],[\"support\",{\"1\":{\"60\":1,\"86\":1,\"91\":3,\"92\":1}}],[\"successlist\",{\"1\":{\"22\":3}}],[\"success\",{\"1\":{\"21\":3,\"83\":1}}],[\"storage\",{\"1\":{\"153\":1}}],[\"stopbubbling=true\",{\"1\":{\"123\":1}}],[\"step\",{\"1\":{\"103\":1}}],[\"stereotype\",{\"1\":{\"47\":1,\"58\":1,\"68\":1,\"74\":1,\"83\":1,\"90\":1,\"91\":1,\"102\":1}}],[\"struts2\",{\"1\":{\"60\":1}}],[\"stream\",{\"1\":{\"49\":3}}],[\"stringutils\",{\"1\":{\"98\":4}}],[\"stringutil\",{\"1\":{\"98\":2}}],[\"string类型\",{\"1\":{\"58\":2}}],[\"stringredisserializer\",{\"1\":{\"57\":2}}],[\"string\",{\"1\":{\"21\":4,\"25\":3,\"26\":3,\"29\":5,\"41\":1,\"50\":2,\"54\":6,\"55\":31,\"58\":77,\"59\":24,\"61\":1,\"68\":1,\"72\":5,\"83\":1,\"87\":1,\"90\":5,\"94\":2,\"95\":5,\"97\":4,\"98\":2,\"99\":2,\"111\":1,\"119\":1,\"149\":1}}],[\"string>>\",{\"1\":{\"21\":1,\"55\":3}}],[\"string>\",{\"1\":{\"21\":8,\"54\":2,\"55\":3,\"57\":2,\"58\":10}}],[\"standardcharsets\",{\"1\":{\"58\":2,\"59\":2}}],[\"status\",{\"1\":{\"149\":1}}],[\"statement的创建等复杂的过程\",{\"1\":{\"33\":1}}],[\"static\",{\"1\":{\"21\":7,\"29\":2,\"39\":5,\"41\":1,\"46\":1,\"47\":1,\"50\":3,\"55\":9,\"58\":56,\"59\":12,\"86\":2,\"90\":5,\"92\":1,\"95\":7,\"110\":1,\"111\":1,\"119\":1,\"120\":2,\"125\":2}}],[\"starter<\",{\"1\":{\"84\":1}}],[\"startup>\",{\"1\":{\"72\":1}}],[\"startup>1<\",{\"1\":{\"72\":1}}],[\"start\",{\"1\":{\"6\":1,\"36\":2,\"48\":1,\"58\":3,\"77\":2,\"134\":1,\"143\":2,\"149\":1,\"156\":1}}],[\"symlink\",{\"1\":{\"161\":1}}],[\"symbol\",{\"1\":{\"98\":1,\"99\":1}}],[\"symbols\",{\"1\":{\"14\":1}}],[\"symbl\",{\"1\":{\"14\":1}}],[\"systemctl\",{\"1\":{\"143\":1,\"149\":2}}],[\"system\",{\"1\":{\"41\":1,\"59\":6,\"68\":12,\"74\":1,\"109\":3,\"116\":1,\"117\":1,\"118\":1,\"119\":2}}],[\"syntax\",{\"1\":{\"9\":1}}],[\"sequence\",{\"1\":{\"134\":1}}],[\"seq\",{\"1\":{\"134\":5}}],[\"security\",{\"1\":{\"59\":3}}],[\"seconds\",{\"1\":{\"58\":3}}],[\"ser\",{\"1\":{\"98\":1}}],[\"serialize\",{\"1\":{\"98\":1}}],[\"serializers\",{\"1\":{\"98\":1}}],[\"serializerprovider\",{\"1\":{\"98\":3}}],[\"serializer\",{\"1\":{\"57\":2,\"99\":1}}],[\"serializable\",{\"1\":{\"46\":2,\"73\":1,\"95\":2}}],[\"serialversionuid\",{\"1\":{\"46\":1}}],[\"servlet>\",{\"1\":{\"72\":1,\"82\":1}}],[\"servlet\",{\"1\":{\"72\":7,\"77\":3,\"81\":1,\"82\":5,\"86\":3,\"90\":3,\"92\":3}}],[\"servlet<\",{\"1\":{\"72\":1,\"77\":1}}],[\"server\",{\"1\":{\"148\":1,\"149\":1}}],[\"servertimezone=gmt\",{\"1\":{\"38\":1,\"78\":1}}],[\"servelet\",{\"1\":{\"60\":1}}],[\"services下创建以shape的全路径为名的文件\",{\"1\":{\"110\":1}}],[\"serviceloader<shape>\",{\"1\":{\"110\":1}}],[\"serviceloader\",{\"1\":{\"110\":3}}],[\"service\",{\"1\":{\"13\":1,\"65\":2,\"67\":5,\"68\":5,\"72\":2,\"74\":4,\"80\":1,\"85\":2}}],[\"separator=\",{\"1\":{\"43\":1}}],[\"separator\",{\"1\":{\"43\":1}}],[\"select>\",{\"1\":{\"40\":1}}],[\"select\",{\"1\":{\"40\":1,\"43\":2,\"85\":1,\"128\":6,\"129\":13,\"133\":1,\"134\":3,\"136\":3,\"137\":3,\"138\":3,\"139\":3,\"149\":1}}],[\"session\",{\"1\":{\"39\":3,\"90\":3,\"91\":4}}],[\"set=utf8mb4\",{\"1\":{\"153\":1}}],[\"setval\",{\"1\":{\"134\":1}}],[\"setvalueserializer\",{\"1\":{\"57\":1}}],[\"setheight\",{\"1\":{\"119\":1}}],[\"sethashvalueserializer\",{\"1\":{\"57\":1}}],[\"sethashkeyserializer\",{\"1\":{\"57\":1}}],[\"setwidth\",{\"1\":{\"119\":1}}],[\"setlength\",{\"1\":{\"119\":1}}],[\"setnexthandler\",{\"1\":{\"115\":1,\"116\":1,\"117\":1,\"119\":2,\"120\":1}}],[\"setattribute\",{\"1\":{\"90\":1}}],[\"setaccessible\",{\"1\":{\"21\":5}}],[\"setting\",{\"1\":{\"79\":1}}],[\"setter\",{\"1\":{\"63\":1}}],[\"set注入\",{\"1\":{\"63\":1}}],[\"set集合中需要移除的元素值\",{\"1\":{\"58\":1}}],[\"set集合key\",{\"1\":{\"58\":3}}],[\"set<string>\",{\"1\":{\"58\":5}}],[\"set类型\",{\"1\":{\"58\":2}}],[\"setoperations\",{\"1\":{\"58\":13}}],[\"setoperations<string\",{\"1\":{\"58\":1}}],[\"setkeyserializer\",{\"1\":{\"57\":1}}],[\"setconnectionfactory\",{\"1\":{\"57\":1}}],[\"setimglist\",{\"1\":{\"50\":1}}],[\"setimg\",{\"1\":{\"50\":1}}],[\"setusername\",{\"1\":{\"50\":1}}],[\"setfieldvalbyname\",{\"1\":{\"47\":6}}],[\"set\",{\"0\":{\"128\":1},\"1\":{\"39\":1,\"43\":1,\"58\":5,\"63\":1,\"90\":1,\"128\":3,\"130\":1,\"149\":3,\"153\":2,\"157\":2,\"161\":2}}],[\"set生成\",{\"1\":{\"36\":1,\"77\":1}}],[\"setentity\",{\"1\":{\"29\":1}}],[\"search\",{\"1\":{\"11\":1}}],[\"s\",{\"1\":{\"13\":1,\"145\":2,\"150\":2}}],[\"sm\",{\"1\":{\"12\":2}}],[\"sjtu\",{\"1\":{\"8\":1}}],[\"sjtug\",{\"1\":{\"8\":1}}],[\"snipaste\",{\"1\":{\"1\":2}}],[\"mkdir\",{\"1\":{\"150\":1}}],[\"minvalue\",{\"1\":{\"134\":1}}],[\"min\",{\"1\":{\"126\":2}}],[\"mirror\",{\"1\":{\"160\":2,\"163\":4}}],[\"mirror>\",{\"1\":{\"32\":2}}],[\"mirrorof>\",{\"1\":{\"32\":2}}],[\"mirrors\",{\"1\":{\"8\":1,\"10\":2,\"11\":1,\"160\":2}}],[\"mchange\",{\"1\":{\"74\":1}}],[\"mchange<\",{\"1\":{\"74\":1}}],[\"mvc=\",{\"1\":{\"72\":1,\"81\":1}}],[\"mvc\",{\"0\":{\"69\":1,\"70\":1},\"1\":{\"69\":3,\"71\":3,\"72\":6,\"81\":4}}],[\"mvnrepository\",{\"1\":{\"11\":1}}],[\"mvn\",{\"1\":{\"11\":1,\"32\":1}}],[\"md5withrsa\",{\"1\":{\"59\":2}}],[\"mon\",{\"1\":{\"104\":1}}],[\"modifiers\",{\"1\":{\"67\":2}}],[\"model\",{\"1\":{\"91\":1}}],[\"modelandviewcontainer\",{\"1\":{\"91\":4}}],[\"modelandview\",{\"1\":{\"70\":1,\"71\":2}}],[\"modelandview也可以是其他\",{\"1\":{\"69\":1}}],[\"mode\",{\"1\":{\"59\":2}}],[\"move\",{\"1\":{\"58\":2}}],[\"moonlight\",{\"1\":{\"21\":4,\"22\":1,\"54\":2,\"55\":2,\"86\":3,\"87\":4,\"98\":3,\"99\":2}}],[\"message\",{\"1\":{\"87\":2,\"95\":7}}],[\"methodparameter\",{\"1\":{\"91\":10}}],[\"methodargumentnotvalidexception\",{\"1\":{\"87\":3}}],[\"method\",{\"1\":{\"62\":2,\"70\":3,\"86\":1,\"91\":2,\"92\":1,\"109\":3,\"111\":1}}],[\"meta\",{\"1\":{\"86\":2,\"125\":2}}],[\"metaobject\",{\"1\":{\"47\":11}}],[\"metaobjecthandler\",{\"1\":{\"47\":2}}],[\"metadata\",{\"1\":{\"21\":1,\"22\":1}}],[\"members\",{\"1\":{\"58\":2}}],[\"mm\",{\"1\":{\"46\":4}}],[\"m\",{\"1\":{\"33\":1,\"126\":2,\"150\":6}}],[\"msg\",{\"1\":{\"94\":4,\"95\":5}}],[\"ms\",{\"1\":{\"12\":2}}],[\"mariadb\",{\"1\":{\"149\":2}}],[\"markdown\",{\"1\":{\"9\":1}}],[\"markdown官网地址\",{\"1\":{\"9\":1}}],[\"make\",{\"1\":{\"145\":2}}],[\"mavan\",{\"1\":{\"83\":1}}],[\"maven<\",{\"1\":{\"72\":1,\"77\":1}}],[\"maven编译\",{\"1\":{\"72\":1}}],[\"maven镜像源配置\",{\"0\":{\"32\":1}}],[\"maven引入依赖\",{\"1\":{\"23\":1}}],[\"maven中央仓库\",{\"1\":{\"11\":1}}],[\"maven\",{\"0\":{\"11\":1,\"31\":1},\"1\":{\"11\":1,\"32\":5,\"72\":2,\"77\":3}}],[\"manager=\",{\"1\":{\"74\":1,\"80\":1}}],[\"mandatory\",{\"1\":{\"73\":1,\"74\":1}}],[\"match\",{\"1\":{\"58\":1}}],[\"matchedkeys\",{\"1\":{\"58\":3}}],[\"matchingkeys\",{\"1\":{\"55\":3}}],[\"maxvalue\",{\"1\":{\"134\":1}}],[\"max\",{\"1\":{\"55\":3,\"59\":8,\"134\":1}}],[\"maxscore\",{\"1\":{\"54\":2}}],[\"main\",{\"1\":{\"41\":2,\"111\":1,\"119\":1}}],[\"map1\",{\"1\":{\"50\":3}}],[\"mapping>\",{\"1\":{\"72\":4,\"82\":2}}],[\"mapping=\",{\"1\":{\"72\":3,\"81\":1}}],[\"mapping\",{\"1\":{\"33\":1,\"71\":2,\"72\":1}}],[\"mapperxml标签\",{\"0\":{\"43\":1}}],[\"mapperscannerconfigurer\",{\"1\":{\"80\":2}}],[\"mappers\",{\"1\":{\"42\":3}}],[\"mappers>\",{\"1\":{\"37\":1}}],[\"mapper>\",{\"1\":{\"40\":1}}],[\"mapper\",{\"1\":{\"2\":1,\"37\":2,\"40\":5,\"41\":2,\"42\":1,\"43\":1,\"80\":3}}],[\"maps\",{\"1\":{\"33\":1}}],[\"map<string\",{\"1\":{\"21\":3,\"49\":1,\"50\":3,\"54\":1,\"55\":3,\"58\":4}}],[\"map<boolean\",{\"1\":{\"21\":3}}],[\"map<integer\",{\"1\":{\"21\":6,\"22\":1}}],[\"map\",{\"1\":{\"21\":14,\"22\":1,\"49\":1,\"50\":5,\"54\":1,\"55\":4,\"58\":4}}],[\"master\",{\"1\":{\"6\":1}}],[\"my\",{\"1\":{\"149\":1}}],[\"myinterceptor\",{\"1\":{\"71\":1}}],[\"myinterceptor2\",{\"1\":{\"71\":3}}],[\"myfinally\",{\"1\":{\"68\":1}}],[\"myaspect\",{\"1\":{\"68\":1}}],[\"mybaits\",{\"0\":{\"34\":1}}],[\"mybatismetaobjecthandler\",{\"1\":{\"47\":1,\"90\":1}}],[\"mybatisplus\",{\"1\":{\"46\":2,\"47\":1}}],[\"mybatis字段自动注入\",{\"0\":{\"45\":1}}],[\"mybatis会自己推断\",{\"1\":{\"43\":1}}],[\"mybatisutil\",{\"1\":{\"39\":1,\"41\":2}}],[\"mybatis<\",{\"1\":{\"36\":1,\"77\":2}}],[\"mybatis通过xml或注解的方式将要执行的各种的statement配置起来\",{\"1\":{\"33\":1}}],[\"mybatis\",{\"0\":{\"33\":1,\"35\":1,\"76\":1},\"1\":{\"33\":2,\"36\":2,\"37\":5,\"39\":2,\"40\":3,\"60\":1,\"77\":7,\"79\":2,\"80\":3}}],[\"mybatisx\",{\"1\":{\"2\":1}}],[\"mysql根目录下创建my\",{\"1\":{\"153\":1}}],[\"mysql备份使用的shell脚本\",{\"1\":{\"150\":1}}],[\"mysql8\",{\"1\":{\"149\":1}}],[\"mysql密码\",{\"1\":{\"149\":1,\"157\":1}}],[\"mysqldump\",{\"1\":{\"150\":1}}],[\"mysqld\",{\"1\":{\"149\":4,\"153\":1,\"155\":1,\"156\":1}}],[\"mysql\",{\"0\":{\"127\":1},\"1\":{\"9\":2,\"38\":2,\"73\":1,\"74\":1,\"77\":1,\"78\":2,\"129\":1,\"148\":4,\"149\":2,\"150\":9,\"152\":2,\"153\":6,\"156\":2}}],[\"mysql官网社区下载地址\",{\"1\":{\"9\":1}}],[\"mycomputermanager\",{\"1\":{\"1\":2}}],[\"multiget\",{\"1\":{\"58\":1}}],[\"multisetifabsent\",{\"1\":{\"58\":1}}],[\"multiset\",{\"1\":{\"58\":1}}],[\"multi\",{\"1\":{\"1\":1}}],[\"ok\",{\"1\":{\"94\":2,\"95\":5}}],[\"on\",{\"1\":{\"72\":2,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"163\":1}}],[\"obj\",{\"1\":{\"58\":2}}],[\"object>\",{\"1\":{\"49\":1,\"50\":1}}],[\"object\",{\"1\":{\"33\":1,\"58\":6,\"68\":6,\"71\":3,\"90\":1,\"91\":1}}],[\"objects\",{\"1\":{\"33\":1,\"87\":2,\"98\":2,\"110\":2}}],[\"openapi2\",{\"1\":{\"84\":1}}],[\"openssl\",{\"1\":{\"145\":4}}],[\"opensession\",{\"1\":{\"34\":2,\"39\":3}}],[\"opensource\",{\"1\":{\"6\":1}}],[\"opsforset\",{\"1\":{\"58\":2}}],[\"opsforlist\",{\"1\":{\"58\":4}}],[\"opsforvalue\",{\"1\":{\"58\":1}}],[\"opsforhash\",{\"1\":{\"58\":2}}],[\"off\",{\"1\":{\"163\":1}}],[\"offset\",{\"1\":{\"59\":14}}],[\"officetools\",{\"1\":{\"1\":2}}],[\"ofurl\",{\"1\":{\"50\":1}}],[\"ofstream\",{\"1\":{\"50\":4}}],[\"ooxml<\",{\"1\":{\"48\":1}}],[\"output\",{\"1\":{\"145\":1}}],[\"outputstream\",{\"1\":{\"49\":3}}],[\"out\",{\"1\":{\"41\":1,\"59\":14,\"68\":12,\"74\":1,\"109\":3,\"116\":1,\"117\":1,\"118\":1,\"119\":2}}],[\"o\",{\"1\":{\"33\":1}}],[\"oracle默认为read\",{\"1\":{\"73\":1}}],[\"order\",{\"1\":{\"55\":4}}],[\"orm\",{\"1\":{\"33\":1}}],[\"org\",{\"1\":{\"1\":2,\"6\":2,\"8\":1,\"9\":1,\"12\":2,\"14\":2,\"37\":2,\"39\":4,\"40\":6,\"41\":4,\"47\":2,\"50\":2,\"55\":3,\"57\":6,\"58\":4,\"59\":1,\"68\":14,\"72\":22,\"74\":17,\"80\":16,\"81\":12,\"82\":4,\"83\":2,\"85\":2,\"86\":5,\"87\":4,\"90\":3,\"91\":7,\"92\":5,\"102\":2,\"110\":4,\"114\":4,\"115\":2,\"116\":2,\"117\":1,\"118\":1,\"120\":2,\"129\":2,\"145\":1,\"163\":1}}],[\"override\",{\"1\":{\"22\":3,\"41\":1,\"47\":2,\"68\":1,\"74\":1,\"90\":1,\"91\":2,\"92\":1,\"98\":2,\"109\":6,\"116\":1,\"117\":1,\"118\":1}}],[\"overview\",{\"1\":{\"6\":1}}],[\"odysseusyuan\",{\"1\":{\"1\":1}}],[\"ls查看\",{\"1\":{\"161\":1}}],[\"lt\",{\"1\":{\"150\":1}}],[\"ln\",{\"1\":{\"145\":2}}],[\"lf6\",{\"1\":{\"126\":2}}],[\"lw\",{\"1\":{\"104\":1}}],[\"l\",{\"1\":{\"104\":1,\"150\":1}}],[\"lazy\",{\"1\":{\"62\":1}}],[\"lang\",{\"1\":{\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"68\":3,\"89\":1,\"99\":4}}],[\"lang=zh\",{\"1\":{\"14\":1}}],[\"language\",{\"1\":{\"1\":1,\"60\":1}}],[\"lanzouo\",{\"1\":{\"1\":3}}],[\"lremove\",{\"1\":{\"55\":1}}],[\"loc\",{\"1\":{\"72\":1}}],[\"locahost\",{\"1\":{\"72\":1}}],[\"location=\",{\"1\":{\"72\":3,\"80\":1,\"81\":1}}],[\"location\",{\"1\":{\"72\":1}}],[\"localhost\",{\"1\":{\"149\":3,\"157\":2}}],[\"localimgpath\",{\"1\":{\"50\":2}}],[\"localdatetime\",{\"1\":{\"46\":3,\"47\":3}}],[\"local\",{\"1\":{\"39\":5,\"47\":5,\"82\":1,\"90\":1,\"145\":2,\"150\":5}}],[\"load\",{\"1\":{\"72\":1,\"110\":1}}],[\"looprowtablerenderpolicy\",{\"1\":{\"50\":3}}],[\"long\",{\"1\":{\"46\":1,\"55\":1,\"58\":19,\"90\":1}}],[\"logs\",{\"1\":{\"153\":1}}],[\"log=\",{\"1\":{\"150\":1}}],[\"login\",{\"1\":{\"86\":1,\"92\":1,\"125\":1}}],[\"loginname\",{\"1\":{\"43\":2}}],[\"log4j\",{\"1\":{\"77\":1}}],[\"log\",{\"1\":{\"25\":4,\"26\":6,\"29\":2,\"87\":4,\"90\":2,\"91\":1,\"149\":4,\"150\":2,\"153\":1}}],[\"lombok错误\",{\"0\":{\"122\":1}}],[\"lombok\",{\"1\":{\"22\":1,\"36\":1,\"46\":2,\"47\":1,\"50\":2,\"54\":4,\"77\":4,\"83\":1,\"86\":1,\"87\":1,\"90\":1,\"91\":1,\"92\":1,\"95\":1,\"98\":3,\"102\":2,\"114\":2,\"123\":2}}],[\"leftpop\",{\"1\":{\"58\":4}}],[\"leftpushall\",{\"1\":{\"58\":2}}],[\"leftpush\",{\"1\":{\"58\":4}}],[\"length=1\",{\"1\":{\"149\":1,\"157\":1}}],[\"lengthqchandler\",{\"1\":{\"114\":1,\"116\":1,\"119\":6,\"120\":2}}],[\"length\",{\"1\":{\"21\":2,\"59\":4,\"68\":1,\"114\":1}}],[\"letterlike\",{\"1\":{\"14\":1}}],[\"like\",{\"1\":{\"149\":1,\"157\":1}}],[\"libs\",{\"1\":{\"148\":1,\"149\":1}}],[\"libssl\",{\"1\":{\"145\":2}}],[\"libtinfo\",{\"1\":{\"146\":2}}],[\"libcrypto\",{\"1\":{\"145\":2}}],[\"lib64\",{\"1\":{\"145\":4,\"146\":1}}],[\"listlength\",{\"1\":{\"58\":1}}],[\"listkey\",{\"1\":{\"58\":10}}],[\"list类型\",{\"1\":{\"58\":2}}],[\"listoperations\",{\"1\":{\"58\":13}}],[\"listoperations<string\",{\"1\":{\"58\":1}}],[\"list2\",{\"1\":{\"26\":2}}],[\"list1\",{\"1\":{\"26\":2}}],[\"list<qchandler>\",{\"1\":{\"120\":1}}],[\"list<handlermethodargumentresolver>\",{\"1\":{\"92\":1}}],[\"list<map\",{\"1\":{\"55\":1}}],[\"list<map<string\",{\"1\":{\"50\":2,\"55\":2}}],[\"list<userworddemo>\",{\"1\":{\"50\":3}}],[\"list<users>\",{\"1\":{\"43\":1}}],[\"list<user>\",{\"1\":{\"40\":1,\"41\":3}}],[\"list<basicnamevaluepair>\",{\"1\":{\"29\":1}}],[\"list<integer>\",{\"1\":{\"26\":2,\"43\":1}}],[\"list<t>\",{\"1\":{\"22\":2}}],[\"list<string>>\",{\"1\":{\"21\":2}}],[\"list<string>\",{\"1\":{\"21\":4,\"22\":1,\"50\":1,\"55\":3,\"58\":10,\"72\":1,\"86\":1,\"92\":1,\"125\":1}}],[\"listener>\",{\"1\":{\"72\":1,\"82\":1}}],[\"listener\",{\"1\":{\"22\":1,\"72\":1,\"82\":1}}],[\"list\",{\"1\":{\"21\":7,\"22\":1,\"26\":8,\"40\":1,\"41\":2,\"43\":4,\"50\":2,\"55\":4,\"58\":1,\"86\":1,\"92\":1,\"120\":1,\"162\":2,\"163\":3}}],[\"line\",{\"1\":{\"9\":1}}],[\"links\",{\"1\":{\"9\":1}}],[\"lingma\",{\"1\":{\"2\":1}}],[\"lunix资源下载站\",{\"0\":{\"8\":1}}],[\"lky\",{\"1\":{\"1\":2}}],[\"vm\",{\"1\":{\"149\":1}}],[\"vue\",{\"1\":{\"126\":3}}],[\"vue折线图等\",{\"1\":{\"9\":1}}],[\"v2\",{\"1\":{\"74\":1}}],[\"variables\",{\"1\":{\"149\":1,\"157\":1}}],[\"var\",{\"1\":{\"149\":2}}],[\"validate\",{\"1\":{\"149\":3,\"157\":3}}],[\"valid支持\",{\"1\":{\"72\":1}}],[\"value>true<\",{\"1\":{\"72\":2}}],[\"value>utf\",{\"1\":{\"72\":1}}],[\"value>\",{\"1\":{\"72\":5,\"80\":1,\"82\":2}}],[\"value>classpath\",{\"1\":{\"72\":2,\"82\":2}}],[\"valueoperations\",{\"1\":{\"58\":9}}],[\"valueoperations<string\",{\"1\":{\"58\":1}}],[\"valueof\",{\"1\":{\"54\":5,\"55\":6}}],[\"value序列化\",{\"1\":{\"57\":1}}],[\"values\",{\"1\":{\"43\":1,\"58\":10}}],[\"value=\",{\"1\":{\"37\":4,\"72\":2,\"74\":4,\"80\":7,\"81\":2}}],[\"value\",{\"1\":{\"21\":4,\"42\":1,\"46\":4,\"57\":1,\"58\":36,\"62\":2,\"64\":3,\"68\":6,\"72\":5,\"83\":1,\"98\":5}}],[\"vaule\",{\"1\":{\"64\":1}}],[\"velocity\",{\"1\":{\"60\":1}}],[\"verify\",{\"1\":{\"59\":3}}],[\"verificationdata\",{\"1\":{\"21\":2,\"22\":1}}],[\"verificationhead\",{\"1\":{\"21\":2,\"22\":1}}],[\"version\",{\"1\":{\"74\":2,\"77\":10,\"84\":1,\"85\":1,\"129\":1,\"162\":1,\"163\":3}}],[\"version=\",{\"1\":{\"37\":1,\"40\":1,\"68\":1,\"72\":4,\"74\":1,\"80\":1,\"81\":1,\"82\":2}}],[\"version>4\",{\"1\":{\"77\":1}}],[\"version>2\",{\"1\":{\"77\":1}}],[\"version>1\",{\"1\":{\"77\":5}}],[\"version>8\",{\"1\":{\"77\":1}}],[\"version>3\",{\"1\":{\"77\":2}}],[\"version>5\",{\"1\":{\"77\":2}}],[\"version>\",{\"1\":{\"23\":1,\"28\":1,\"36\":7,\"48\":3,\"68\":3,\"72\":6,\"74\":4,\"77\":24,\"84\":1}}],[\"v\",{\"1\":{\"21\":4}}],[\"void\",{\"1\":{\"21\":2,\"22\":3,\"25\":1,\"26\":1,\"39\":1,\"41\":1,\"43\":1,\"47\":2,\"50\":1,\"55\":2,\"58\":22,\"59\":1,\"68\":7,\"72\":5,\"74\":1,\"86\":2,\"92\":2,\"98\":1,\"102\":1,\"108\":1,\"109\":3,\"111\":1,\"115\":1,\"119\":1,\"125\":2}}],[\"voidtools\",{\"1\":{\"1\":1}}],[\"view\",{\"1\":{\"69\":4,\"72\":1,\"81\":1,\"91\":1}}],[\"viewresolver\",{\"1\":{\"69\":3}}],[\"virustotal\",{\"1\":{\"13\":2}}],[\"videolan\",{\"1\":{\"1\":1}}],[\"vscode\",{\"0\":{\"3\":1}}],[\"vlc\",{\"1\":{\"1\":2}}],[\"bin\",{\"1\":{\"150\":1}}],[\"bindexception\",{\"1\":{\"87\":1}}],[\"bind\",{\"1\":{\"50\":2,\"83\":1,\"87\":4,\"91\":1}}],[\"broker\",{\"1\":{\"143\":1}}],[\"break\",{\"1\":{\"55\":1,\"110\":1}}],[\"b\",{\"1\":{\"73\":1}}],[\"before\",{\"1\":{\"68\":2}}],[\"beanproperty\",{\"1\":{\"98\":2}}],[\"bean的配置文件\",{\"1\":{\"72\":1}}],[\"bean>\",{\"1\":{\"71\":2,\"72\":1,\"74\":2,\"80\":5,\"81\":1}}],[\"bean类的属性名与配置文件的被调用者\",{\"1\":{\"63\":1}}],[\"bean对于的一个标识\",{\"1\":{\"62\":1}}],[\"bean标签\",{\"1\":{\"62\":1}}],[\"beanfactory使用示例\",{\"1\":{\"61\":1}}],[\"beanfactory\",{\"1\":{\"60\":1,\"61\":8}}],[\"beans>\",{\"1\":{\"68\":1,\"72\":2,\"74\":1,\"80\":1,\"81\":1}}],[\"beans\",{\"1\":{\"60\":2,\"61\":1,\"68\":4,\"72\":8,\"74\":4,\"80\":4,\"81\":4}}],[\"beans<\",{\"1\":{\"36\":1}}],[\"bean\",{\"0\":{\"65\":1},\"1\":{\"57\":2,\"60\":1,\"61\":2,\"62\":4,\"63\":9,\"64\":3,\"72\":1,\"80\":1,\"85\":2}}],[\"blackfire\",{\"1\":{\"68\":5,\"71\":2}}],[\"block\",{\"1\":{\"59\":8}}],[\"boundvalueops\",{\"1\":{\"58\":1}}],[\"boot\",{\"1\":{\"84\":1}}],[\"bootschool\",{\"1\":{\"14\":1}}],[\"boolean\",{\"1\":{\"21\":2,\"58\":11,\"59\":2,\"68\":2,\"90\":1,\"91\":1,\"108\":2,\"109\":3,\"115\":4,\"116\":1,\"117\":1,\"118\":1}}],[\"bytype自动注入\",{\"1\":{\"64\":1}}],[\"bytype\",{\"1\":{\"63\":1}}],[\"bytecdntp\",{\"1\":{\"126\":2}}],[\"byte\",{\"1\":{\"49\":2,\"50\":1,\"58\":1,\"59\":9}}],[\"bytearrayoutputstream\",{\"1\":{\"49\":3,\"59\":5,\"87\":6}}],[\"bytedance\",{\"1\":{\"7\":1,\"126\":1}}],[\"byname自动注入\",{\"1\":{\"64\":1}}],[\"byname\",{\"1\":{\"63\":1}}],[\"by\",{\"1\":{\"52\":1,\"55\":5,\"149\":2,\"157\":2}}],[\"build>\",{\"1\":{\"72\":1,\"77\":1}}],[\"builders\",{\"1\":{\"85\":3}}],[\"builder\",{\"1\":{\"34\":1,\"50\":1}}],[\"build\",{\"1\":{\"29\":4,\"39\":1,\"50\":1,\"55\":2,\"58\":1,\"77\":2,\"85\":2}}],[\"bsid=6653883e527fdd2188c629d8fe998831\",{\"1\":{\"14\":1}}],[\"back\",{\"1\":{\"150\":7}}],[\"bamboo\",{\"1\":{\"110\":4,\"114\":4,\"115\":2,\"116\":2,\"117\":1,\"118\":1,\"120\":2}}],[\"batchsetifabsent\",{\"1\":{\"58\":1}}],[\"batchset\",{\"1\":{\"58\":1}}],[\"basedir=d\",{\"1\":{\"153\":1}}],[\"basepackage\",{\"1\":{\"80\":1}}],[\"base\",{\"1\":{\"68\":2,\"72\":2,\"80\":1,\"81\":1}}],[\"base64\",{\"1\":{\"59\":9}}],[\"baseentity\",{\"1\":{\"46\":1}}],[\"basic\",{\"1\":{\"9\":1}}],[\"baomidou\",{\"1\":{\"46\":2,\"47\":1}}],[\"banner图在线生成工具\",{\"1\":{\"14\":1}}],[\"bandisoft\",{\"1\":{\"1\":1}}],[\"bcuninstaller\",{\"1\":{\"1\":1}}],[\"bc\",{\"1\":{\"1\":1}}],[\"ivh\",{\"1\":{\"149\":1}}],[\"ico\",{\"1\":{\"86\":1}}],[\"iuserservice\",{\"1\":{\"67\":1}}],[\"iuserservice+\",{\"1\":{\"67\":1}}],[\"i18n\",{\"1\":{\"61\":1}}],[\"item=\",{\"1\":{\"43\":1}}],[\"item\",{\"1\":{\"43\":1,\"120\":5}}],[\"ip\",{\"1\":{\"38\":1,\"78\":1}}],[\"ibatis\",{\"1\":{\"33\":3,\"39\":4,\"40\":1,\"47\":1}}],[\"ibhuy1l5j01i\",{\"1\":{\"1\":1}}],[\"identified\",{\"1\":{\"149\":2,\"157\":2}}],[\"idea中需要创建\",{\"1\":{\"82\":1}}],[\"idea\",{\"1\":{\"42\":1,\"83\":1}}],[\"idea插件收集\",{\"0\":{\"2\":1}}],[\"id查询\",{\"1\":{\"41\":1}}],[\"id=1\",{\"1\":{\"72\":1}}],[\"id=\",{\"1\":{\"37\":1,\"40\":1,\"43\":1,\"71\":2,\"72\":1,\"74\":2,\"80\":4,\"81\":1}}],[\"id=2\",{\"1\":{\"25\":2}}],[\"id>\",{\"1\":{\"32\":2}}],[\"id\",{\"1\":{\"25\":4,\"37\":1,\"40\":7,\"41\":5,\"42\":1,\"43\":7,\"62\":1,\"63\":2,\"64\":1,\"72\":4,\"97\":1,\"114\":1,\"129\":28,\"134\":6,\"136\":7,\"137\":7,\"138\":7,\"139\":7}}],[\"i++\",{\"1\":{\"21\":1,\"50\":1,\"55\":1,\"59\":2}}],[\"i\",{\"1\":{\"21\":4,\"50\":3,\"55\":4,\"59\":4}}],[\"if>\",{\"1\":{\"40\":1}}],[\"if\",{\"1\":{\"21\":19,\"22\":1,\"29\":2,\"39\":2,\"47\":2,\"55\":5,\"58\":1,\"59\":2,\"68\":2,\"90\":1,\"91\":1,\"98\":6,\"110\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"120\":2,\"130\":1,\"150\":3}}],[\"implements\",{\"1\":{\"22\":1,\"41\":1,\"46\":1,\"47\":1,\"68\":1,\"74\":1,\"86\":1,\"90\":1,\"91\":1,\"92\":1,\"95\":1,\"98\":1,\"109\":3,\"125\":1}}],[\"import\",{\"1\":{\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":14,\"22\":8,\"39\":6,\"40\":3,\"41\":6,\"46\":8,\"47\":5,\"49\":6,\"50\":20,\"54\":7,\"55\":7,\"57\":6,\"58\":10,\"59\":7,\"68\":4,\"74\":4,\"83\":3,\"85\":12,\"86\":11,\"87\":12,\"89\":1,\"90\":7,\"91\":8,\"92\":8,\"95\":2,\"98\":15,\"99\":8,\"102\":4,\"110\":2,\"114\":5,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"120\":3}}],[\"imgs\",{\"1\":{\"72\":2}}],[\"img1\",{\"1\":{\"50\":2}}],[\"imglist\",{\"1\":{\"50\":6}}],[\"img\",{\"1\":{\"50\":1}}],[\"imgbb\",{\"1\":{\"12\":1}}],[\"imgbb图床\",{\"1\":{\"12\":1}}],[\"imgurllist\",{\"1\":{\"50\":1}}],[\"imgurl\",{\"1\":{\"12\":1,\"50\":1}}],[\"imgurl图床\",{\"1\":{\"12\":1}}],[\"iiice\",{\"1\":{\"14\":1}}],[\"innodb\",{\"1\":{\"153\":1}}],[\"inner\",{\"1\":{\"136\":1,\"137\":1,\"138\":1,\"139\":1}}],[\"ini文件\",{\"1\":{\"153\":1}}],[\"initverify\",{\"1\":{\"59\":1}}],[\"initsign\",{\"1\":{\"59\":1}}],[\"init\",{\"1\":{\"59\":2,\"62\":2,\"72\":4,\"82\":1,\"153\":2}}],[\"initialize\",{\"1\":{\"59\":1,\"155\":1}}],[\"in\",{\"0\":{\"128\":1},\"1\":{\"128\":4,\"145\":1,\"150\":1}}],[\"inf文件夹下的applicationcontext\",{\"1\":{\"72\":1}}],[\"inf\",{\"1\":{\"72\":2,\"82\":1,\"86\":2,\"110\":1,\"125\":2}}],[\"information\",{\"1\":{\"133\":1}}],[\"info\",{\"1\":{\"25\":4,\"26\":6,\"29\":2,\"87\":1,\"90\":1,\"91\":1}}],[\"installed\",{\"1\":{\"163\":1}}],[\"install\",{\"1\":{\"143\":1,\"145\":2,\"146\":1,\"156\":1,\"162\":1,\"163\":1}}],[\"instance\",{\"1\":{\"68\":1,\"72\":3,\"74\":1,\"80\":1,\"81\":1,\"82\":1}}],[\"inside\",{\"1\":{\"109\":3,\"111\":1}}],[\"insertfill\",{\"1\":{\"47\":1}}],[\"insert>\",{\"1\":{\"43\":1}}],[\"insert\",{\"1\":{\"43\":1,\"46\":4}}],[\"inputlen\",{\"1\":{\"59\":8}}],[\"inputstream\",{\"1\":{\"49\":2,\"50\":4}}],[\"includ\",{\"1\":{\"150\":4}}],[\"include\",{\"1\":{\"43\":2}}],[\"increment\",{\"1\":{\"58\":6,\"134\":1}}],[\"invokehead\",{\"1\":{\"22\":1}}],[\"invoke\",{\"1\":{\"22\":1}}],[\"into\",{\"1\":{\"43\":1}}],[\"int\",{\"1\":{\"21\":1,\"25\":1,\"50\":1,\"55\":3,\"59\":8,\"94\":2,\"95\":2,\"99\":2,\"120\":1}}],[\"interactive\",{\"1\":{\"153\":1}}],[\"internalresourceviewresolver\",{\"1\":{\"72\":2,\"81\":2}}],[\"internet\",{\"1\":{\"33\":1}}],[\"interceptorregistry\",{\"1\":{\"86\":2,\"92\":2,\"125\":1}}],[\"interceptor\",{\"1\":{\"71\":2,\"86\":2}}],[\"interceptor>\",{\"1\":{\"71\":4}}],[\"interceptors>\",{\"1\":{\"71\":2}}],[\"interfaces\",{\"1\":{\"21\":4,\"98\":1}}],[\"interface\",{\"1\":{\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"40\":1,\"41\":1,\"68\":1,\"89\":1,\"99\":1,\"108\":1}}],[\"integers\",{\"1\":{\"26\":2}}],[\"integer\",{\"1\":{\"21\":1,\"26\":1,\"40\":1,\"41\":2,\"43\":1,\"46\":3,\"54\":3,\"55\":2,\"72\":2,\"90\":1,\"114\":4}}],[\"integration\",{\"1\":{\"3\":1}}],[\"index\",{\"1\":{\"9\":1,\"12\":1,\"58\":5}}],[\"ioc\",{\"0\":{\"61\":1},\"1\":{\"60\":1,\"61\":2}}],[\"ioexception\",{\"1\":{\"29\":2,\"39\":2,\"49\":3,\"50\":3,\"98\":2}}],[\"io\",{\"1\":{\"3\":1,\"6\":1,\"9\":1,\"39\":3,\"46\":2,\"49\":3,\"50\":5,\"59\":1,\"85\":1,\"87\":2,\"95\":1,\"98\":1}}],[\"isnotblank\",{\"1\":{\"98\":2}}],[\"isblank\",{\"1\":{\"98\":1}}],[\"isolation=isolation\",{\"1\":{\"74\":1}}],[\"isolation\",{\"1\":{\"73\":1}}],[\"ismember\",{\"1\":{\"58\":3}}],[\"isannotationpresent\",{\"1\":{\"21\":11}}],[\"isempty\",{\"1\":{\"21\":5,\"22\":1,\"55\":1,\"120\":1}}],[\"is\",{\"1\":{\"2\":1,\"63\":1,\"120\":1,\"138\":2,\"149\":1}}],[\"i2lyu1l5c8oh>\",{\"1\":{\"1\":1}}],[\"ig1wp04xfhni\",{\"1\":{\"1\":1}}],[\"global\",{\"1\":{\"149\":2,\"157\":2}}],[\"globalexceptionhandler\",{\"1\":{\"87\":1}}],[\"gz\",{\"1\":{\"145\":2}}],[\"guava\",{\"1\":{\"60\":1}}],[\"guide\",{\"1\":{\"32\":1}}],[\"gui\",{\"1\":{\"9\":1,\"13\":1}}],[\"google\",{\"1\":{\"33\":1}}],[\"grep\",{\"1\":{\"149\":2}}],[\"greasyfork\",{\"1\":{\"14\":1}}],[\"groupname\",{\"1\":{\"85\":1}}],[\"groupid>\",{\"1\":{\"23\":1,\"28\":1,\"36\":7,\"48\":6,\"68\":3,\"72\":6,\"74\":4,\"77\":12,\"84\":1}}],[\"gen\",{\"1\":{\"98\":4}}],[\"generated\",{\"1\":{\"149\":1}}],[\"generatepublic\",{\"1\":{\"59\":2}}],[\"generateprivate\",{\"1\":{\"59\":2}}],[\"generatekeypair\",{\"1\":{\"59\":1}}],[\"generator\",{\"1\":{\"59\":3}}],[\"general\",{\"1\":{\"35\":1}}],[\"getqchandler\",{\"1\":{\"120\":1}}],[\"getheight\",{\"1\":{\"118\":1}}],[\"getheader\",{\"1\":{\"90\":1}}],[\"getheadmap\",{\"1\":{\"21\":3}}],[\"getwidth\",{\"1\":{\"117\":1}}],[\"getlength\",{\"1\":{\"116\":1}}],[\"getfielderror\",{\"1\":{\"87\":1}}],[\"getfieldnamemap\",{\"1\":{\"21\":1}}],[\"getfieldnames\",{\"1\":{\"21\":1,\"22\":1}}],[\"getbindingresult\",{\"1\":{\"87\":1}}],[\"getbytes\",{\"1\":{\"59\":8}}],[\"getmapping\",{\"1\":{\"70\":1,\"72\":2,\"83\":1}}],[\"getmapper\",{\"1\":{\"41\":1}}],[\"getmessage\",{\"1\":{\"68\":1,\"87\":5}}],[\"getattribute\",{\"1\":{\"91\":1}}],[\"getargs\",{\"1\":{\"68\":1}}],[\"getannotation\",{\"1\":{\"21\":3,\"98\":1}}],[\"getparameterannotation\",{\"1\":{\"91\":1}}],[\"getparametertype\",{\"1\":{\"91\":1}}],[\"getpublic\",{\"1\":{\"59\":1}}],[\"getpublickey\",{\"1\":{\"59\":3}}],[\"getprivate\",{\"1\":{\"59\":1}}],[\"getprivatekey\",{\"1\":{\"59\":3}}],[\"getinstance\",{\"1\":{\"59\":7}}],[\"getinputstream\",{\"1\":{\"50\":4}}],[\"gettype\",{\"1\":{\"98\":1}}],[\"gettime\",{\"1\":{\"58\":1}}],[\"getter\",{\"1\":{\"22\":2,\"95\":2}}],[\"getencoded\",{\"1\":{\"59\":4}}],[\"getentity\",{\"1\":{\"29\":2}}],[\"getexpire\",{\"1\":{\"58\":1}}],[\"getexamtime\",{\"1\":{\"55\":3}}],[\"getexamid\",{\"1\":{\"55\":6}}],[\"getdefaultqchandler\",{\"1\":{\"120\":1}}],[\"getdefaultmessage\",{\"1\":{\"87\":1}}],[\"getdemolist\",{\"1\":{\"50\":2}}],[\"getdeclaredfields\",{\"1\":{\"21\":3}}],[\"getuserid\",{\"1\":{\"55\":3,\"90\":1}}],[\"getuser\",{\"1\":{\"41\":3}}],[\"getshape\",{\"1\":{\"110\":1,\"111\":1}}],[\"getsignature\",{\"1\":{\"68\":2}}],[\"getscore\",{\"1\":{\"55\":5}}],[\"getsortscore\",{\"1\":{\"54\":2,\"55\":1}}],[\"getsqlsession\",{\"1\":{\"39\":1,\"41\":1}}],[\"getstring\",{\"1\":{\"21\":2}}],[\"getstringvalue\",{\"1\":{\"21\":2}}],[\"getrawclass\",{\"1\":{\"98\":1}}],[\"getresourceasreader\",{\"1\":{\"39\":1}}],[\"getrowindex\",{\"1\":{\"21\":1}}],[\"getclass\",{\"1\":{\"87\":2}}],[\"getclazz\",{\"1\":{\"21\":2,\"22\":1}}],[\"getconnection\",{\"1\":{\"58\":1}}],[\"getconnectionfactory\",{\"1\":{\"58\":1}}],[\"getcode\",{\"1\":{\"29\":2}}],[\"getname\",{\"1\":{\"21\":6,\"68\":1}}],[\"getvalue\",{\"1\":{\"21\":1}}],[\"getkeypair\",{\"1\":{\"59\":2}}],[\"getkey\",{\"1\":{\"21\":1}}],[\"get\",{\"1\":{\"21\":2,\"29\":3,\"39\":2,\"47\":4,\"52\":1,\"55\":6,\"58\":3,\"70\":1,\"90\":1,\"120\":3}}],[\"geekuninstaller\",{\"1\":{\"1\":1}}],[\"geek\",{\"1\":{\"1\":1}}],[\"gsimg\",{\"1\":{\"12\":1}}],[\"gitee文档\",{\"1\":{\"23\":1}}],[\"gitee\",{\"1\":{\"1\":2,\"23\":1}}],[\"github文档\",{\"1\":{\"23\":1}}],[\"github中的fastjson2文档\",{\"1\":{\"6\":1}}],[\"github\",{\"1\":{\"1\":6,\"6\":4,\"9\":1,\"23\":1,\"33\":1,\"48\":1,\"77\":2,\"80\":1,\"84\":1,\"85\":1,\"159\":1,\"163\":1}}],[\"dynlibs\",{\"1\":{\"146\":1}}],[\"dto\",{\"1\":{\"54\":1,\"55\":27}}],[\"dtd\",{\"1\":{\"37\":3,\"40\":3}}],[\"d\",{\"1\":{\"50\":1,\"55\":2,\"61\":1,\"97\":5,\"150\":7,\"153\":1,\"161\":1}}],[\"ddl\",{\"0\":{\"130\":1}}],[\"dd\",{\"1\":{\"46\":2}}],[\"druiddatasource\",{\"1\":{\"80\":1}}],[\"druid\",{\"1\":{\"77\":3,\"80\":1}}],[\"driven\",{\"1\":{\"72\":1,\"74\":1,\"80\":1,\"81\":1}}],[\"driven是一种简写形式\",{\"1\":{\"72\":1}}],[\"driverclassname\",{\"1\":{\"80\":1}}],[\"driverclass\",{\"1\":{\"74\":1}}],[\"driver=com\",{\"1\":{\"38\":1,\"78\":1}}],[\"driver\",{\"1\":{\"37\":2,\"38\":1,\"74\":1,\"78\":1,\"80\":1}}],[\"driver和url都不一样\",{\"1\":{\"37\":1}}],[\"draco1023<\",{\"1\":{\"48\":1}}],[\"drawio\",{\"1\":{\"3\":2}}],[\"draw\",{\"1\":{\"3\":1,\"108\":1,\"109\":6,\"111\":2}}],[\"db\",{\"1\":{\"37\":1,\"73\":1,\"78\":1,\"80\":1,\"150\":2}}],[\"dir\",{\"1\":{\"150\":2}}],[\"directory\",{\"1\":{\"150\":2}}],[\"director\",{\"1\":{\"34\":1}}],[\"dist\",{\"1\":{\"163\":1}}],[\"dispatcherservlet<\",{\"1\":{\"72\":1,\"82\":1}}],[\"dispatcherservlet\",{\"1\":{\"69\":4}}],[\"dism\",{\"1\":{\"1\":1}}],[\"dism++\",{\"1\":{\"1\":1}}],[\"di\",{\"1\":{\"63\":2}}],[\"di注入\",{\"0\":{\"63\":1}}],[\"difference\",{\"1\":{\"58\":2}}],[\"day\",{\"1\":{\"150\":1}}],[\"daysago=$\",{\"1\":{\"150\":1}}],[\"date\",{\"1\":{\"150\":4}}],[\"datetimeformat支持\",{\"1\":{\"72\":1}}],[\"datadir=d\",{\"1\":{\"153\":1}}],[\"databind\",{\"1\":{\"98\":6,\"99\":1}}],[\"databind<\",{\"1\":{\"72\":1,\"77\":1}}],[\"databytes\",{\"1\":{\"59\":4}}],[\"databases\",{\"1\":{\"149\":1}}],[\"databasename\",{\"1\":{\"38\":1,\"150\":1}}],[\"database\",{\"1\":{\"37\":4,\"38\":4,\"78\":4,\"80\":4,\"130\":1,\"153\":1}}],[\"datasourcetransactionmanager\",{\"1\":{\"74\":1,\"80\":1}}],[\"datasource>\",{\"1\":{\"37\":1}}],[\"datasource\",{\"1\":{\"34\":1,\"37\":1,\"42\":1,\"74\":4,\"80\":6}}],[\"data\",{\"1\":{\"21\":1,\"22\":1,\"25\":1,\"29\":3,\"33\":1,\"46\":2,\"49\":3,\"50\":9,\"54\":2,\"55\":3,\"57\":4,\"58\":3,\"59\":15,\"95\":10,\"114\":2,\"150\":3,\"153\":1}}],[\"dao\",{\"1\":{\"33\":1}}],[\"demomain\",{\"1\":{\"59\":1}}],[\"demolist\",{\"1\":{\"50\":3}}],[\"demolist设置数据\",{\"1\":{\"50\":1}}],[\"declete\",{\"1\":{\"156\":1}}],[\"declaring\",{\"1\":{\"67\":2}}],[\"decodebase64\",{\"1\":{\"59\":4}}],[\"decodedkey\",{\"1\":{\"59\":4}}],[\"decompiler\",{\"1\":{\"9\":1}}],[\"decryptdata\",{\"1\":{\"59\":2}}],[\"decrypteddata\",{\"1\":{\"59\":2}}],[\"decrypt\",{\"1\":{\"59\":7}}],[\"design\",{\"1\":{\"126\":1}}],[\"destroy\",{\"1\":{\"62\":1}}],[\"destkey\",{\"1\":{\"58\":5}}],[\"description\",{\"1\":{\"85\":1}}],[\"desc\",{\"1\":{\"55\":1}}],[\"desmos\",{\"1\":{\"14\":1}}],[\"deepoove<\",{\"1\":{\"48\":2}}],[\"deepoove\",{\"1\":{\"48\":1,\"49\":2,\"50\":5}}],[\"delete\",{\"1\":{\"58\":3,\"138\":2}}],[\"del\",{\"1\":{\"46\":1,\"55\":1,\"58\":1,\"150\":2}}],[\"default\",{\"1\":{\"42\":1,\"73\":2,\"74\":1,\"99\":5,\"153\":2}}],[\"default=\",{\"1\":{\"37\":1}}],[\"dependencies>\",{\"1\":{\"36\":1,\"72\":1,\"77\":1}}],[\"dependency>\",{\"1\":{\"23\":1,\"28\":1,\"36\":7,\"48\":3,\"68\":3,\"72\":4,\"74\":4,\"77\":11,\"84\":1}}],[\"devtools\",{\"1\":{\"153\":3,\"161\":1}}],[\"development\",{\"1\":{\"37\":2}}],[\"developer\",{\"1\":{\"11\":1,\"32\":1}}],[\"dev\",{\"1\":{\"9\":1,\"152\":1}}],[\"deb\",{\"1\":{\"8\":1}}],[\"dubbo\",{\"1\":{\"6\":1}}],[\"dubbo文档\",{\"1\":{\"6\":1}}],[\"done\",{\"1\":{\"150\":1}}],[\"dongzl\",{\"1\":{\"6\":2}}],[\"do\",{\"1\":{\"150\":1}}],[\"doother\",{\"1\":{\"73\":1}}],[\"dosome\",{\"1\":{\"73\":1}}],[\"do结尾的请求都会被前端控制器拦截处理\",{\"1\":{\"72\":1}}],[\"domain\",{\"1\":{\"68\":1,\"72\":1}}],[\"dofinal\",{\"1\":{\"59\":4}}],[\"double\",{\"1\":{\"54\":3,\"55\":5,\"58\":5}}],[\"doafterallanalysed\",{\"1\":{\"22\":1}}],[\"dog\",{\"1\":{\"12\":1}}],[\"dog图床\",{\"1\":{\"12\":1}}],[\"docket\",{\"1\":{\"85\":3}}],[\"documentationtype\",{\"1\":{\"85\":2}}],[\"documentation\",{\"1\":{\"85\":8}}],[\"documented\",{\"1\":{\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"89\":1}}],[\"docx\",{\"1\":{\"50\":2}}],[\"doctype\",{\"1\":{\"37\":1,\"40\":1}}],[\"docs\",{\"1\":{\"6\":3}}],[\"doc\",{\"1\":{\"6\":1,\"86\":2,\"92\":1,\"125\":2}}],[\"downloads\",{\"1\":{\"1\":1,\"9\":1,\"143\":1,\"152\":1}}],[\"download\",{\"1\":{\"1\":2}}],[\"蓝奏云\",{\"1\":{\"1\":3}}],[\"蜂蜜浏览器\",{\"1\":{\"1\":1}}],[\"h\",{\"1\":{\"150\":2}}],[\"h>\",{\"1\":{\"150\":4}}],[\"height\",{\"1\":{\"114\":1}}],[\"heightqchandler\",{\"1\":{\"114\":1,\"117\":1,\"118\":1,\"119\":5}}],[\"header\",{\"1\":{\"90\":2}}],[\"headerresolveinterceptor\",{\"1\":{\"86\":4,\"90\":1,\"92\":3}}],[\"head\",{\"1\":{\"70\":1}}],[\"headnumber\",{\"1\":{\"21\":3}}],[\"headmap\",{\"1\":{\"21\":8}}],[\"headcellmap\",{\"1\":{\"21\":8,\"22\":2}}],[\"headverification注解在类上存在时\",{\"1\":{\"20\":1}}],[\"headverification注解搭配使用\",{\"1\":{\"20\":1}}],[\"headverification\",{\"0\":{\"18\":1},\"1\":{\"18\":1,\"21\":2}}],[\"hibernate\",{\"1\":{\"60\":1}}],[\"highlightcode\",{\"1\":{\"14\":1}}],[\"hget\",{\"1\":{\"58\":1}}],[\"hmset\",{\"1\":{\"52\":6,\"55\":4,\"58\":2}}],[\"hh\",{\"1\":{\"46\":2}}],[\"hasparameterannotation\",{\"1\":{\"91\":1}}],[\"haspmap序列化\",{\"1\":{\"57\":1}}],[\"hasnext\",{\"1\":{\"58\":1}}],[\"haskey\",{\"1\":{\"55\":1,\"58\":3}}],[\"hashsize\",{\"1\":{\"58\":1}}],[\"hashmultiget\",{\"1\":{\"58\":1}}],[\"hashmap序列化\",{\"1\":{\"57\":1}}],[\"hashmap<string\",{\"1\":{\"54\":1}}],[\"hashmap<>\",{\"1\":{\"21\":3,\"50\":3}}],[\"hashmap\",{\"1\":{\"21\":1,\"50\":1,\"54\":1}}],[\"hashvalues\",{\"1\":{\"58\":1}}],[\"hashkey的value值\",{\"1\":{\"58\":1}}],[\"hashkeys\",{\"1\":{\"58\":8}}],[\"hashkey\",{\"1\":{\"58\":14}}],[\"hash表字段key所对应的值\",{\"1\":{\"58\":1}}],[\"hash表字段key\",{\"1\":{\"58\":5}}],[\"hash表key\",{\"1\":{\"58\":7}}],[\"hash表设置一个值\",{\"1\":{\"58\":1}}],[\"hash\",{\"1\":{\"58\":9}}],[\"hash类型\",{\"1\":{\"58\":2}}],[\"hashoperations\",{\"1\":{\"58\":12}}],[\"hashoperations<string\",{\"1\":{\"58\":1}}],[\"hashentries\",{\"1\":{\"55\":3,\"58\":1}}],[\"handleexception\",{\"1\":{\"87\":1}}],[\"handlerlist\",{\"1\":{\"120\":9}}],[\"handlermethodargumentresolver\",{\"1\":{\"86\":1,\"91\":2,\"92\":1}}],[\"handlermapping负责根据用户请求找到\",{\"1\":{\"69\":1}}],[\"handlermapping也是控制器\",{\"1\":{\"69\":1}}],[\"handlermapping\",{\"1\":{\"69\":1}}],[\"handlerinterceptor\",{\"1\":{\"71\":2,\"90\":2}}],[\"handleradapter\",{\"1\":{\"69\":1}}],[\"handler\",{\"1\":{\"69\":7,\"71\":3,\"90\":1,\"114\":3,\"115\":1,\"116\":1,\"120\":2}}],[\"handlers\",{\"1\":{\"47\":1}}],[\"handladapter\",{\"1\":{\"69\":1}}],[\"handbook\",{\"1\":{\"6\":2}}],[\"huaweicloud\",{\"1\":{\"10\":1,\"11\":1,\"32\":2}}],[\"host\",{\"1\":{\"85\":1,\"149\":2}}],[\"home\",{\"1\":{\"6\":1,\"10\":1,\"12\":1,\"13\":1,\"161\":3}}],[\"honeyview\",{\"1\":{\"1\":2}}],[\"hc\",{\"1\":{\"6\":1,\"59\":1}}],[\"httpurl\",{\"1\":{\"50\":2}}],[\"http请求时使用\",{\"1\":{\"30\":1}}],[\"httppost\",{\"1\":{\"29\":2}}],[\"httppost简单请求\",{\"1\":{\"29\":1}}],[\"httpclients\",{\"1\":{\"29\":2}}],[\"httpclientutil\",{\"1\":{\"29\":1}}],[\"httpclient\",{\"0\":{\"27\":1,\"29\":1}}],[\"httpclient文档\",{\"1\":{\"6\":1}}],[\"httpcomponents\",{\"1\":{\"6\":1,\"28\":1}}],[\"http\",{\"1\":{\"5\":2,\"8\":1,\"9\":1,\"29\":2,\"30\":1,\"40\":1,\"48\":1,\"59\":1,\"68\":10,\"72\":22,\"74\":13,\"80\":10,\"81\":10,\"82\":4,\"90\":2,\"95\":1}}],[\"httpservletresponse\",{\"1\":{\"90\":2}}],[\"httpservletrequest\",{\"1\":{\"90\":2}}],[\"https\",{\"1\":{\"1\":15,\"5\":4,\"6\":8,\"7\":1,\"8\":2,\"9\":4,\"10\":2,\"11\":3,\"12\":8,\"13\":3,\"14\":9,\"23\":2,\"32\":2,\"37\":1,\"85\":2,\"101\":1,\"104\":1,\"126\":3,\"143\":1,\"145\":1,\"152\":1,\"159\":1,\"160\":2,\"161\":2,\"163\":2}}],[\"html\",{\"1\":{\"1\":1,\"6\":1,\"9\":2,\"32\":1,\"81\":4,\"86\":3,\"92\":1,\"125\":3}}],[\"压缩软件\",{\"1\":{\"1\":1}}],[\"zxf\",{\"1\":{\"145\":1}}],[\"z\",{\"1\":{\"97\":2}}],[\"zip\",{\"1\":{\"1\":2}}],[\"zhang\",{\"1\":{\"72\":1}}],[\"zh\",{\"1\":{\"1\":3,\"6\":1,\"9\":2,\"14\":1,\"143\":1}}],[\"7代表星期六\",{\"1\":{\"103\":1}}],[\"70\",{\"1\":{\"52\":2}}],[\"7\",{\"1\":{\"1\":2,\"26\":7,\"150\":2}}],[\"centos\",{\"1\":{\"149\":1}}],[\"centos7安装mysql8\",{\"0\":{\"147\":1}}],[\"centos7安装emqx\",{\"0\":{\"143\":1}}],[\"cd\",{\"1\":{\"145\":1}}],[\"cdn\",{\"1\":{\"7\":1,\"126\":5}}],[\"c\",{\"1\":{\"129\":10,\"136\":2,\"137\":2,\"138\":3,\"139\":3}}],[\"cte\",{\"1\":{\"129\":12,\"136\":3,\"137\":3,\"138\":3,\"139\":3}}],[\"ctrl+鼠标左键\",{\"1\":{\"42\":1}}],[\"c3p0\",{\"1\":{\"74\":1}}],[\"css\",{\"1\":{\"72\":2,\"86\":1}}],[\"cast\",{\"1\":{\"138\":2,\"139\":2}}],[\"callsuper=call\",{\"1\":{\"123\":1}}],[\"card\",{\"1\":{\"97\":1}}],[\"carbon\",{\"1\":{\"90\":3}}],[\"cache\",{\"1\":{\"59\":10,\"134\":1}}],[\"catch\",{\"1\":{\"29\":2,\"39\":1,\"59\":4,\"90\":1}}],[\"currorg\",{\"1\":{\"91\":1}}],[\"curruser\",{\"1\":{\"91\":3}}],[\"currentuser\",{\"1\":{\"89\":1,\"91\":3}}],[\"current\",{\"1\":{\"6\":1,\"90\":3,\"91\":1}}],[\"cursor\",{\"1\":{\"58\":3}}],[\"cursor<byte\",{\"1\":{\"58\":1}}],[\"cj\",{\"1\":{\"38\":1,\"74\":1,\"78\":1}}],[\"circle\",{\"1\":{\"108\":1,\"109\":3,\"110\":1,\"111\":2}}],[\"cipher\",{\"1\":{\"59\":15}}],[\"ci\",{\"1\":{\"35\":1,\"130\":1,\"153\":2}}],[\"closesqlsession\",{\"1\":{\"39\":1}}],[\"close\",{\"1\":{\"34\":1,\"39\":1,\"49\":1,\"50\":1,\"59\":2}}],[\"closeablehttpclient\",{\"1\":{\"29\":2}}],[\"clazz\",{\"1\":{\"21\":12}}],[\"class文件中保留\",{\"1\":{\"99\":1}}],[\"class>\",{\"1\":{\"72\":3,\"82\":2}}],[\"class>org\",{\"1\":{\"72\":3,\"82\":2}}],[\"class=\",{\"1\":{\"68\":1,\"71\":2,\"72\":1,\"74\":2,\"80\":5,\"81\":1}}],[\"classpathxmlapplicationcontext使用示例\",{\"1\":{\"61\":1}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"61\":2}}],[\"classpathresource\",{\"1\":{\"50\":5}}],[\"classpath\",{\"1\":{\"42\":1,\"61\":1,\"80\":2,\"86\":3,\"125\":3}}],[\"classicrequestbuilder\",{\"1\":{\"29\":2}}],[\"classichttprequest\",{\"1\":{\"29\":2}}],[\"class<\",{\"1\":{\"21\":3}}],[\"class\",{\"1\":{\"21\":15,\"22\":1,\"25\":3,\"26\":3,\"29\":1,\"39\":1,\"41\":2,\"42\":1,\"46\":1,\"47\":1,\"49\":1,\"50\":2,\"54\":1,\"55\":1,\"57\":1,\"58\":1,\"59\":1,\"62\":1,\"63\":1,\"68\":2,\"74\":3,\"83\":1,\"85\":2,\"86\":1,\"87\":5,\"90\":3,\"91\":4,\"92\":1,\"95\":1,\"98\":3,\"99\":1,\"102\":1,\"109\":3,\"110\":2,\"111\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"120\":1,\"125\":1}}],[\"client5\",{\"1\":{\"59\":1}}],[\"client5<\",{\"1\":{\"28\":1}}],[\"client\",{\"1\":{\"6\":1,\"29\":4,\"30\":1,\"148\":1}}],[\"crypto\",{\"1\":{\"59\":1}}],[\"createcontextual\",{\"1\":{\"98\":1}}],[\"createrestapi\",{\"1\":{\"85\":1}}],[\"createword\",{\"1\":{\"49\":1,\"50\":1}}],[\"createtime\",{\"1\":{\"46\":1,\"47\":1}}],[\"create\",{\"1\":{\"46\":1,\"49\":1,\"50\":5,\"130\":1,\"134\":1}}],[\"createdefault\",{\"1\":{\"29\":2}}],[\"creator\",{\"1\":{\"46\":2,\"47\":2}}],[\"crontab\",{\"1\":{\"150\":2}}],[\"cron表达式解释\",{\"0\":{\"103\":1}}],[\"cron\",{\"1\":{\"14\":1,\"101\":3,\"102\":1,\"103\":1,\"104\":1}}],[\"crxsoso\",{\"1\":{\"5\":1}}],[\"crx搜搜\",{\"1\":{\"5\":1}}],[\"checknexthandler\",{\"1\":{\"115\":1,\"116\":1,\"117\":1,\"118\":1}}],[\"check\",{\"1\":{\"115\":2,\"116\":1,\"117\":1,\"118\":1,\"119\":2}}],[\"chain\",{\"1\":{\"50\":1,\"54\":1,\"114\":1}}],[\"character\",{\"1\":{\"130\":1,\"153\":1}}],[\"characterencodingfilter<\",{\"1\":{\"72\":1}}],[\"characterencoding=utf\",{\"1\":{\"38\":1,\"78\":1}}],[\"char\",{\"1\":{\"99\":1}}],[\"charset\",{\"1\":{\"58\":1,\"59\":1}}],[\"chart\",{\"1\":{\"9\":1}}],[\"chtml\",{\"1\":{\"14\":1}}],[\"chtml变量命名\",{\"1\":{\"14\":1}}],[\"chinese\",{\"1\":{\"14\":1}}],[\"chuyu\",{\"1\":{\"1\":1}}],[\"cc\",{\"1\":{\"5\":1,\"14\":1}}],[\"corn在线表达式网站\",{\"1\":{\"104\":1}}],[\"corn\",{\"0\":{\"104\":1}}],[\"coreybutler\",{\"1\":{\"159\":1}}],[\"core和\",{\"1\":{\"60\":1}}],[\"core\",{\"1\":{\"47\":1,\"50\":1,\"55\":2,\"57\":1,\"58\":2,\"60\":1,\"91\":1,\"98\":1}}],[\"core<\",{\"1\":{\"36\":1,\"72\":3,\"77\":1}}],[\"count\",{\"1\":{\"58\":3}}],[\"collation\",{\"1\":{\"153\":2}}],[\"collate\",{\"1\":{\"130\":1}}],[\"collection=\",{\"1\":{\"43\":1}}],[\"collection\",{\"1\":{\"43\":1}}],[\"columns\",{\"1\":{\"133\":1}}],[\"column\",{\"1\":{\"43\":1,\"133\":1}}],[\"console\",{\"1\":{\"155\":1}}],[\"constructor\",{\"1\":{\"62\":1}}],[\"concat\",{\"1\":{\"129\":2}}],[\"concurrent\",{\"1\":{\"58\":1}}],[\"contact\",{\"1\":{\"85\":6}}],[\"controller注解使用的前提配置\",{\"1\":{\"72\":1}}],[\"controller分发用户请求所必须的\",{\"1\":{\"72\":1}}],[\"controller\",{\"0\":{\"83\":1},\"1\":{\"65\":2,\"69\":2,\"70\":2,\"72\":2,\"81\":1,\"83\":2}}],[\"contextualserializer\",{\"1\":{\"98\":2}}],[\"contextloaderlistener<\",{\"1\":{\"72\":1,\"82\":1}}],[\"contextloaderlistener\",{\"1\":{\"72\":1}}],[\"contextconfiglocation\",{\"1\":{\"72\":2}}],[\"context=\",{\"1\":{\"68\":1,\"72\":2,\"74\":1,\"80\":1,\"81\":1}}],[\"context<\",{\"1\":{\"36\":1,\"68\":1}}],[\"context\",{\"1\":{\"21\":8,\"22\":5,\"57\":2,\"60\":5,\"68\":4,\"72\":10,\"74\":4,\"80\":4,\"81\":4,\"82\":2,\"85\":2,\"86\":1,\"90\":1,\"91\":2,\"92\":1}}],[\"config文件\",{\"1\":{\"123\":1}}],[\"configlocation\",{\"1\":{\"61\":1,\"80\":1}}],[\"configure\",{\"1\":{\"49\":2,\"50\":3}}],[\"configuration>\",{\"1\":{\"37\":1,\"72\":2,\"77\":1}}],[\"configuration\",{\"1\":{\"37\":1,\"42\":1,\"57\":2,\"85\":2,\"86\":3,\"90\":1,\"92\":3,\"125\":2}}],[\"config\",{\"1\":{\"37\":2,\"49\":4,\"50\":3,\"86\":3,\"92\":3,\"123\":1,\"145\":1,\"161\":3}}],[\"connect=\",{\"1\":{\"153\":2}}],[\"connector\",{\"1\":{\"36\":1,\"74\":1,\"77\":1}}],[\"connectionfactory\",{\"1\":{\"58\":4}}],[\"connection\",{\"1\":{\"34\":1,\"37\":2,\"55\":1,\"57\":1,\"58\":1,\"153\":1}}],[\"code枚举类\",{\"0\":{\"94\":1}}],[\"code\",{\"1\":{\"33\":1,\"87\":1,\"94\":5,\"95\":13}}],[\"coding\",{\"1\":{\"2\":1}}],[\"combopooleddatasource\",{\"1\":{\"74\":1}}],[\"community\",{\"1\":{\"148\":4}}],[\"committed\",{\"1\":{\"73\":2}}],[\"commonj\",{\"1\":{\"60\":1}}],[\"common\",{\"1\":{\"21\":4,\"22\":1,\"50\":1,\"54\":2,\"55\":2,\"98\":3,\"99\":2,\"148\":1}}],[\"compiler\",{\"1\":{\"72\":1,\"77\":4}}],[\"compile\",{\"1\":{\"49\":1}}],[\"component\",{\"1\":{\"47\":2,\"58\":2,\"65\":2,\"68\":3,\"72\":2,\"80\":1,\"81\":1,\"90\":2,\"91\":2,\"102\":2}}],[\"com\",{\"1\":{\"1\":13,\"5\":2,\"6\":4,\"7\":1,\"8\":1,\"9\":3,\"10\":1,\"11\":3,\"12\":2,\"13\":3,\"14\":3,\"21\":5,\"22\":3,\"23\":2,\"32\":4,\"46\":3,\"47\":1,\"48\":1,\"49\":2,\"50\":6,\"67\":3,\"68\":5,\"71\":2,\"72\":3,\"74\":3,\"80\":2,\"85\":3,\"90\":1,\"98\":8,\"99\":2,\"101\":1,\"104\":1,\"126\":3,\"143\":1,\"152\":1,\"159\":1,\"160\":2,\"161\":2,\"163\":1}}],[\"cxasm\",{\"1\":{\"1\":1}}],[\"cn\",{\"1\":{\"1\":1,\"5\":1,\"6\":3,\"8\":1,\"9\":1,\"10\":1,\"12\":1,\"14\":5,\"21\":4,\"22\":1,\"40\":3,\"41\":4,\"54\":2,\"55\":2,\"80\":3,\"81\":1,\"86\":3,\"87\":4,\"98\":3,\"99\":2}}],[\"wait\",{\"1\":{\"153\":1}}],[\"wget\",{\"1\":{\"143\":1,\"145\":1}}],[\"w+\",{\"1\":{\"97\":2}}],[\"w\",{\"1\":{\"97\":3}}],[\"with\",{\"1\":{\"129\":4,\"136\":1,\"137\":1,\"138\":1,\"139\":1}}],[\"withmethodannotation\",{\"1\":{\"85\":1}}],[\"width\",{\"1\":{\"114\":1}}],[\"widthqchandler\",{\"1\":{\"114\":1,\"116\":1,\"117\":1,\"119\":4}}],[\"windows\",{\"1\":{\"159\":1}}],[\"win安装mysql8\",{\"0\":{\"151\":1}}],[\"win快捷方式移除软件\",{\"1\":{\"1\":1}}],[\"winoffice部署软件\",{\"1\":{\"1\":1}}],[\"win系统优化软件\",{\"1\":{\"1\":1}}],[\"win截屏软件\",{\"1\":{\"1\":1}}],[\"win\",{\"1\":{\"1\":1}}],[\"win文件搜索软件\",{\"1\":{\"1\":1}}],[\"win卸载软件\",{\"1\":{\"1\":2}}],[\"w3\",{\"1\":{\"68\":1,\"72\":3,\"74\":1,\"80\":1,\"81\":1,\"82\":1}}],[\"w3cschool\",{\"1\":{\"6\":1}}],[\"w3c中的fastjson文档\",{\"1\":{\"6\":1}}],[\"wen\",{\"1\":{\"72\":1}}],[\"wenshao\",{\"1\":{\"23\":1}}],[\"web相关\",{\"1\":{\"91\":1}}],[\"webdatabinderfactory\",{\"1\":{\"91\":4}}],[\"webjars\",{\"1\":{\"86\":4,\"125\":2}}],[\"webconfig\",{\"1\":{\"86\":1,\"92\":1,\"125\":1}}],[\"webconfig配置swagger\",{\"0\":{\"86\":1}}],[\"webmvcconfigurer\",{\"1\":{\"86\":2,\"92\":2,\"125\":1}}],[\"webmvc<\",{\"1\":{\"72\":1,\"77\":1}}],[\"webapp\",{\"1\":{\"72\":1,\"82\":1}}],[\"web\",{\"0\":{\"82\":1},\"1\":{\"72\":10,\"81\":1,\"82\":7,\"83\":1,\"85\":1,\"86\":4,\"87\":4,\"90\":1,\"91\":5,\"92\":4}}],[\"weaving\",{\"1\":{\"66\":1}}],[\"where\",{\"1\":{\"128\":1,\"129\":8,\"133\":1,\"136\":1,\"137\":1,\"138\":2,\"139\":1,\"149\":1}}],[\"where>\",{\"1\":{\"40\":1}}],[\"while\",{\"1\":{\"58\":1,\"59\":2,\"120\":1}}],[\"writestring\",{\"1\":{\"98\":3}}],[\"write\",{\"1\":{\"50\":1,\"59\":2}}],[\"writeandclose\",{\"1\":{\"49\":1}}],[\"wordbytes\",{\"1\":{\"50\":2}}],[\"worddemotest\",{\"1\":{\"50\":1}}],[\"word\",{\"1\":{\"50\":2}}],[\"wordutil\",{\"1\":{\"49\":1,\"50\":2}}],[\"word粘贴使用\",{\"1\":{\"14\":1}}],[\"wwwc\",{\"1\":{\"1\":3}}],[\"www\",{\"1\":{\"1\":5,\"5\":2,\"6\":1,\"9\":1,\"12\":3,\"13\":1,\"14\":5,\"32\":1,\"68\":10,\"72\":18,\"74\":13,\"80\":10,\"81\":10,\"82\":1,\"143\":1,\"145\":1,\"161\":1}}],[\"软件\",{\"0\":{\"1\":1}}],[\"软件收集\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
