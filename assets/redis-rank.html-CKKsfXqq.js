import{_ as t,r as p,o as e,c as o,a as c,b as n,d as l,w as i,e as s}from"./app-BQzoQ3UK.js";const u={},k=s(`<h1 id="redis设计实时排行榜" tabindex="-1"><a class="header-anchor" href="#redis设计实时排行榜"><span>redis设计实时排行榜</span></a></h1><h2 id="使用redis先试思路可行性" tabindex="-1"><a class="header-anchor" href="#使用redis先试思路可行性"><span>使用redis先试思路可行性</span></a></h2><p>思路:</p><ol><li>由于redis的sort排序仅支持一个字段进行升序或降序,那么可以考虑将一个字段变更为升序排序且由于我们这边是以考试为思路来设计所以可以考虑使用考试的最高分减去当前人的考试分数获取一个新的升序分数.</li><li>同分数时我们需要按照考试是时长进行升序,由此我们可以思考将两个分数组装为一个double类型的分数来进行排序,由此我们可以进行尝试是否可行</li></ol><p>准备测试数据</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># 我们使用hash来将各个数据进行存储
hmset exam_1_user:2001 examId 1 userId 2001 score 80 examTime 81 sortScore 20.81
hmset exam_1_user:2002 examId 1 userId 2002 score 82 examTime 83 sortScore 18.83
hmset exam_1_user:2003 examId 1 userId 2003 score 81 examTime 90 sortScore 19.90
hmset exam_1_user:2004 examId 1 userId 2004 score 90 examTime 80 sortScore 10.80
hmset exam_1_user:2005 examId 1 userId 2005 score 90 examTime 70 sortScore 10.70
hmset exam_1_user:2006 examId 1 userId 2006 score 90 examTime 90 sortScore 10.90

# 将其唯一值设置为外部列表进行存储且使用这个来进行存储
rpush exam_1_user_sort 2001 2002 2003 2004 2005 2006
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用sort将其进行排序后输出key</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sort exam_1_user_sort by exam_1_user:*-&gt;sortScore asc  get #

# 输出结果为:  2005 2004 2006 2002 2003 2001
# 和我们预期结果一致.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用java来实现排行榜" tabindex="-1"><a class="header-anchor" href="#使用java来实现排行榜"><span>使用java来实现排行榜</span></a></h2>`,9),r=s(`<h3 id="接收数据实体类" tabindex="-1"><a class="header-anchor" href="#接收数据实体类"><span>接收数据实体类</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>moonlight<span class="token punctuation">.</span>common<span class="token punctuation">.</span>dto</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>moonlight<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ExamRankUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span></span><span class="token class-name">Accessors</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisRankDto</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> examId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> score<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> examTime<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> maxScore<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSortScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxScore <span class="token operator">-</span> score<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> examTime <span class="token operator">/</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">toMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;examId&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>examId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;score&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;examTime&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>examTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ExamRankUtil</span><span class="token punctuation">.</span><span class="token constant">SORT_SCORE</span><span class="token punctuation">,</span> <span class="token function">getSortScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="排行榜工具类" tabindex="-1"><a class="header-anchor" href="#排行榜工具类"><span>排行榜工具类</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>moonlight<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>moonlight<span class="token punctuation">.</span>common<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">RedisRankDto</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">SortParameters</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">SortQuery</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">SortQueryBuilder</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 考试排行榜工具类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExamRankUtil</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 过期时长 默认为一年,测试时请不要使用该参数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">EXPIRE</span> <span class="token operator">=</span> <span class="token number">31536000</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 排行榜最大人数 -- 默认限制为50
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_RANK_NUMBER</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 排行榜所存key,该字符串需要进行拼接
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 1. 需要使用 String.format(RANK_KEY, examId); 拼接为本场考试使用的key
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 2. 需要再后面拼接本场考试是谁的数据也就是 String.format(RANK_KEY, examId) + userId; 来区分是谁的数据
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">RANK_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;exam_%d_user:&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 排序所用的key 同样需要使用 String.format(RANK_SOFT_KEY, examId); 来拼接为本场的数据
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">RANK_SORT_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;exam_%d_user_sort&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SORT_SCORE</span> <span class="token operator">=</span> <span class="token string">&quot;sortScore&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">RANK_SOFT_BY</span> <span class="token operator">=</span> <span class="token constant">RANK_KEY</span> <span class="token operator">+</span> <span class="token string">&quot;*-&gt;&quot;</span> <span class="token operator">+</span> <span class="token constant">SORT_SCORE</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * 根据考试ID获取对应的排行版数据
     *
     * <span class="token keyword">@param</span> <span class="token parameter">examId</span> 考试ID
     * <span class="token keyword">@return</span> List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Map</span> <span class="token attr-name">&lt;</span> <span class="token attr-name">String,</span> <span class="token attr-name">String</span><span class="token punctuation">&gt;</span></span>&gt;
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">findRankByExamId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> examId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> rankKey <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">RANK_KEY</span><span class="token punctuation">,</span> examId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SortQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sortQuery <span class="token operator">=</span> <span class="token class-name">SortQueryBuilder</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">RANK_SORT_KEY</span><span class="token punctuation">,</span> examId<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">RANK_SOFT_BY</span><span class="token punctuation">,</span> examId<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">SortParameters<span class="token punctuation">.</span>Order</span><span class="token punctuation">.</span><span class="token constant">ASC</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sort <span class="token operator">=</span> <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">MAX_RANK_NUMBER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sort<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">hashEntries</span><span class="token punctuation">(</span>rankKey <span class="token operator">+</span> sort<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;rank&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 给排行榜添加一个人员内部自动判断是否可以存在于排行榜中
     *
     * <span class="token keyword">@param</span> <span class="token parameter">dto</span> 排行榜数据
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addRank</span><span class="token punctuation">(</span><span class="token class-name">RedisRankDto</span> dto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置变量</span>
        <span class="token class-name">String</span> <span class="token constant">SCORE</span> <span class="token operator">=</span> <span class="token string">&quot;score&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> <span class="token constant">EXAM_TIME</span> <span class="token operator">=</span> <span class="token string">&quot;examTime&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 组装key</span>
        <span class="token class-name">String</span> rankKey <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">RANK_KEY</span><span class="token punctuation">,</span> dto<span class="token punctuation">.</span><span class="token function">getExamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用模糊查询获取当前场考试所有用户的key</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> matchingKeys <span class="token operator">=</span> <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">findMatchingKeys</span><span class="token punctuation">(</span>rankKey <span class="token operator">+</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果当前为空那么直接将本次数据添加进去即可</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>matchingKeys<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">rankPutData</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 组装key</span>
        <span class="token class-name">String</span> examUserRedisKey <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">RANK_KEY</span><span class="token punctuation">,</span> dto<span class="token punctuation">.</span><span class="token function">getExamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> dto<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果exam_user在redis的hash表数据存在</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>examUserRedisKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取hash表中所有数据</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisExamUser <span class="token operator">=</span> <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">hashEntries</span><span class="token punctuation">(</span>examUserRedisKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 只有当前分数大于redis中存储的分数或分数一直且时长更短时才更新数据</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>redisExamUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">SCORE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                    <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>redisExamUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">SCORE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                            <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>redisExamUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">EXAM_TIME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> dto<span class="token punctuation">.</span><span class="token function">getExamTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">hmSet</span><span class="token punctuation">(</span>examUserRedisKey<span class="token punctuation">,</span> <span class="token constant">SCORE</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">hmSet</span><span class="token punctuation">(</span>examUserRedisKey<span class="token punctuation">,</span> <span class="token constant">EXAM_TIME</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getExamTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">hmSet</span><span class="token punctuation">(</span>examUserRedisKey<span class="token punctuation">,</span> <span class="token constant">SORT_SCORE</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getSortScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果当前redis不存在相同key且未超过排行榜最大人数时直接放入redis即可</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>matchingKeys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MAX_RANK_NUMBER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">rankPutData</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 排序key</span>
        <span class="token class-name">String</span> rankSortKey <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">RANK_SORT_KEY</span><span class="token punctuation">,</span> dto<span class="token punctuation">.</span><span class="token function">getExamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 排序条件组装</span>
        <span class="token class-name">SortQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sortQuery <span class="token operator">=</span> <span class="token class-name">SortQueryBuilder</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>rankSortKey<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">RANK_SOFT_BY</span><span class="token punctuation">,</span> dto<span class="token punctuation">.</span><span class="token function">getExamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">SortParameters<span class="token punctuation">.</span>Order</span><span class="token punctuation">.</span><span class="token constant">DESC</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取排序后所有的key</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sort <span class="token operator">=</span> <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> userId <span class="token operator">:</span> sort<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> examUserRedisTempKey <span class="token operator">=</span> rankKey <span class="token operator">+</span> userId<span class="token punctuation">;</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisExamUser <span class="token operator">=</span> <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">hashEntries</span><span class="token punctuation">(</span>examUserRedisTempKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">double</span> redisScore <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>redisExamUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">SCORE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> examTime <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>redisExamUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">EXAM_TIME</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果当前分数大于redis中存储的分数或分数一致且时长更短时移除当前redis中的数据且将当前数据存入redis中</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> redisScore <span class="token operator">||</span> <span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> redisScore <span class="token operator">&amp;&amp;</span> examTime <span class="token operator">&gt;</span> dto<span class="token punctuation">.</span><span class="token function">getExamTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>examUserRedisTempKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">lRemove</span><span class="token punctuation">(</span>rankSortKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">rankPutData</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 给Redis中push一条排行榜数据
     *
     * <span class="token keyword">@param</span> <span class="token parameter">dto</span> redis中需要push的数据
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rankPutData</span><span class="token punctuation">(</span><span class="token class-name">RedisRankDto</span> dto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 组装key</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">RANK_KEY</span><span class="token punctuation">,</span> dto<span class="token punctuation">.</span><span class="token function">getExamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> dto<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置一张hash表数据</span>
        <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">hmSet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dto<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 给定一个过期时间</span>
        <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">EXPIRE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 给排序的列表添加当前的为一值</span>
        <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">RANK_SORT_KEY</span><span class="token punctuation">,</span> dto<span class="token punctuation">.</span><span class="token function">getExamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">EXPIRE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function d(m,v){const a=p("RouteLink");return e(),o("div",null,[k,c("p",null,[n("redis工具类不会写的可以去看"),l(a,{to:"/dev/java/redisUtils.html"},{default:i(()=>[n("redisUtil工具类")]),_:1})]),r])}const g=t(u,[["render",d],["__file","redis-rank.html.vue"]]),f=JSON.parse('{"path":"/dev/java/redis-rank.html","title":"redis设计实时排行榜","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"使用redis先试思路可行性","slug":"使用redis先试思路可行性","link":"#使用redis先试思路可行性","children":[]},{"level":2,"title":"使用java来实现排行榜","slug":"使用java来实现排行榜","link":"#使用java来实现排行榜","children":[{"level":3,"title":"接收数据实体类","slug":"接收数据实体类","link":"#接收数据实体类","children":[]},{"level":3,"title":"排行榜工具类","slug":"排行榜工具类","link":"#排行榜工具类","children":[]}]}],"git":{"updatedTime":1717731361000,"contributors":[{"name":"黑色的小火苗","email":"jiashuaijie@yeah.net","commits":1}]},"filePathRelative":"dev/java/redis-rank.md","excerpt":"\\n<h2>使用redis先试思路可行性</h2>\\n<p>思路:</p>\\n<ol>\\n<li>由于redis的sort排序仅支持一个字段进行升序或降序,那么可以考虑将一个字段变更为升序排序且由于我们这边是以考试为思路来设计所以可以考虑使用考试的最高分减去当前人的考试分数获取一个新的升序分数.</li>\\n<li>同分数时我们需要按照考试是时长进行升序,由此我们可以思考将两个分数组装为一个double类型的分数来进行排序,由此我们可以进行尝试是否可行</li>\\n</ol>\\n<p>准备测试数据</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code># 我们使用hash来将各个数据进行存储\\nhmset exam_1_user:2001 examId 1 userId 2001 score 80 examTime 81 sortScore 20.81\\nhmset exam_1_user:2002 examId 1 userId 2002 score 82 examTime 83 sortScore 18.83\\nhmset exam_1_user:2003 examId 1 userId 2003 score 81 examTime 90 sortScore 19.90\\nhmset exam_1_user:2004 examId 1 userId 2004 score 90 examTime 80 sortScore 10.80\\nhmset exam_1_user:2005 examId 1 userId 2005 score 90 examTime 70 sortScore 10.70\\nhmset exam_1_user:2006 examId 1 userId 2006 score 90 examTime 90 sortScore 10.90\\n\\n# 将其唯一值设置为外部列表进行存储且使用这个来进行存储\\nrpush exam_1_user_sort 2001 2002 2003 2004 2005 2006\\n</code></pre></div>"}');export{g as comp,f as data};
