import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as s,a as e}from"./app-QGmvmOnY.js";const n={},l=e(`<h1 id="微服务容错" tabindex="-1"><a class="header-anchor" href="#微服务容错"><span>微服务容错</span></a></h1><p>简介</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>在⾼并发访问下,⽐如天猫双11,流量持续不断的涌⼊,服务之间的相互调⽤频率突然增加,引发</span></span>
<span class="line"><span>系统负载过⾼,这时系统所依赖的服务的稳定性对系统的影响⾮常⼤,⽽且还有很多不确定因素引起雪</span></span>
<span class="line"><span>崩,如⽹络连接中断,服务宕机等。⼀般微服务容错组件提供了限流、隔离、降级、熔断等⼿段,可以</span></span>
<span class="line"><span>有效保护我们的微服务系统。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="隔离" tabindex="-1"><a class="header-anchor" href="#隔离"><span>隔离</span></a></h2><h3 id="线程池隔离" tabindex="-1"><a class="header-anchor" href="#线程池隔离"><span>线程池隔离</span></a></h3><p>线程池隔离就是通过Java的线程池进⾏隔离,B服务调⽤C服务给予固定的线程数量⽐如12个线程,如果此时C服务宕机了就算⼤量的请求过来,调⽤C服务的接⼝只会占⽤12个线程不会占⽤其他⼯作线程资源,因此B服务就不会出现级联故障。 <img src="https://i.jpg.dog/08310ea84d73a9cf48a498ca21175a29.png" alt="线程池隔离" loading="lazy"></p><h3 id="信号量隔离" tabindex="-1"><a class="header-anchor" href="#信号量隔离"><span>信号量隔离</span></a></h3><p>隔离信号量隔离是使⽤Semaphore来实现的,当拿不到信号量的时候直接拒接因此不会出现超时占⽤其他⼯作线程的情况</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">emaphore semaphore </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Semaphore</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//获取信号量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">semaphore</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">acquire</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//do something here</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//释放信号量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">semaphore</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">release</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线程池隔离和信号量隔离的区别" tabindex="-1"><a class="header-anchor" href="#线程池隔离和信号量隔离的区别"><span>线程池隔离和信号量隔离的区别</span></a></h3><p>线程池隔离针对不同的资源分别创建不同的线程池,不同服务调⽤都发⽣在不同的线程池中,在线程池排队、超时等阻塞情况时可以快速失败。</p><p>线程池隔离的好处是隔离度⽐较⾼,可以针对某个资源的线程池去进⾏处理⽽不影响其它资源,但是代价就是线程上下⽂切换的 overhead ⽐较⼤,特别是对低延时的调⽤有⽐较⼤的影响。</p><p>⽽信号量隔离⾮常轻量级,仅限制对某个资源调⽤的并发数,⽽不是显式地去创建线程池,所以 overhead ⽐较⼩,但是效果不错也⽀持超时失败。 <img src="https://i.jpg.dog/cf54c8a55b4579844c6caff32285ca32.png" alt="线程池与信号量隔离的区别" loading="lazy"></p><h2 id="熔断" tabindex="-1"><a class="header-anchor" href="#熔断"><span>熔断</span></a></h2><p>当下游的服务因为某种原因突然变得不可⽤或响应过慢,上游服务为了保证⾃⼰整体服务的可⽤性,不再继续调⽤⽬标服务直接返回,快速释放资源。 如果⽬标服务情况好转则恢复调⽤。</p><p>熔断器模型</p><figure><img src="https://i.jpg.dog/87a77f860444dea22987da2335c6c1bf.png" alt="熔断器模型" tabindex="0" loading="lazy"><figcaption>熔断器模型</figcaption></figure><p>熔断器模型的状态机有3个状态</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Closed</span></span>
<span class="line"><span>   关闭状态(断路器关闭),所有请求都正常访问。</span></span>
<span class="line"><span>Open</span></span>
<span class="line"><span>   打开状态(断路器打开),所有请求都会被降级。熔断器会对请求情况计数,当⼀定时间内失败请求百分⽐达到阈值,则触发熔断,断路器会完全打开。</span></span>
<span class="line"><span>Half Open</span></span>
<span class="line"><span>    半开状态,不是永久的,断路器打开后会进⼊休眠时间。</span></span>
<span class="line"><span>    随后断路器会⾃动进⼊半开状态。</span></span>
<span class="line"><span>    此时会释放部分请求通过,若这些请求都是健康的,则会关闭断路器,否则继续保持打开,再次进⾏休眠计时</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="降级" tabindex="-1"><a class="header-anchor" href="#降级"><span>降级</span></a></h2><p>降级是指当⾃身服务压⼒增⼤时,系统将某些不重要的业务或接⼝的功能降低,可以只提供部分功能,也可以完全停⽌所有不重要的功能。</p><p>⽐如下线⾮核⼼服务以保证核⼼服务的稳定、降低实时性、降低数据⼀致性,降级的思想是丢⻋保帅。</p><h2 id="限流" tabindex="-1"><a class="header-anchor" href="#限流"><span>限流</span></a></h2><p>简介</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>就是限制最⼤流量。</span></span>
<span class="line"><span>系统能提供的最⼤并发有限,同时来的请求⼜太多,就需要限流,⽐如商城秒杀业务,瞬时⼤量请求涌⼊,服务器服务不过来,就只好排队限流了,就跟去景点排队买票和去银⾏办理业务排队等号道理相同。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="漏桶算法" tabindex="-1"><a class="header-anchor" href="#漏桶算法"><span>漏桶算法</span></a></h3><p>漏桶算法的思路,⼀个固定容量的漏桶,按照常量固定速率流出⽔滴。</p><p>如果桶是空的,则不需流出⽔滴。可以以任意速率流⼊⽔滴到漏桶。如果流⼊⽔滴超出了桶的容量,则流⼊的⽔滴溢出了(被丢弃),⽽漏桶容量是不变的。</p><p>漏桶限流原理如图所示 <img src="https://i.jpg.dog/98b6709ac7186a6e7591af394f4a7007.png" alt="漏桶算法" loading="lazy"></p><h3 id="令牌桶算法" tabindex="-1"><a class="header-anchor" href="#令牌桶算法"><span>令牌桶算法</span></a></h3><p>假设限制2r/s,则按照500毫秒的固定速率往桶中添加令牌。</p><p>桶中最多存放b个令牌,当桶满时,新添加的令牌被丢弃或拒绝。</p><p>当⼀个n个字节⼤⼩的数据包到达,将从桶中删除n个令牌,接着数据包被发送到⽹络上。</p><p>如果桶中的令牌不⾜n个,则不会删除令牌,且该数据包将被限流(要么丢弃,要么缓冲区等待) <img src="https://i.jpg.dog/c7d2ddd9adcc0cb1d95b0f40ad0cd28d.png" alt="令牌桶算法" loading="lazy"></p><h3 id="固定时间窗口算法" tabindex="-1"><a class="header-anchor" href="#固定时间窗口算法"><span>固定时间窗⼝算法</span></a></h3><p>在固定的时间窗⼝内,可以允许固定数量的请求进⼊。</p><p>超过数量就拒绝或者排队,等下⼀个时间段进⼊。</p><p>这种实现计数器限流⽅式由于是在⼀个时间间隔内进⾏限制,如果⽤户在上个时间间隔结束前请求(但没有超过限制),同时在当前时间间隔刚开始请求(同样没超过限制),在各⾃的时间间隔内,这些请求都是正常的,但是将间隔临界的⼀段时间内的请求就会超过系统限制,可能导致系统被压垮</p><p>固定时间窗⼝算法原理,如图4-6所示 <img src="https://i.jpg.dog/699ac159adcf6a1bd5bf9d9133f116dc.png" alt="固定时间窗口算法" loading="lazy"></p><p>由于计数器算法存在时间临界点缺陷,因此在时间临界点左右的极短时间段内容易遭到攻击。</p><p>⽐如设定每分钟最多可以请求100次某个接⼝,如12:00:00-12:00:59时间段内没有数据请求,⽽12:00:59-12:01:00时间段内突然并发100次请求,⽽紧接着跨⼊下⼀个计数周期,计数器清零,在12:01:00-12:01:01内⼜有100次请求。</p><p>那么也就是说在时间临界点左右可能同时有2倍的阀值进⾏请求,从⽽造成后台处理请求过载的情况,导致系统运营能⼒不⾜,甚⾄导致系统崩溃。</p><h3 id="滑动时间窗口算法" tabindex="-1"><a class="header-anchor" href="#滑动时间窗口算法"><span>滑动时间窗⼝算法</span></a></h3><p>滑动窗⼝算法是把固定时间⽚进⾏划分,并且随着时间移动,移动⽅式为开始时间点变为时间列表中的第⼆时间点,结束时间点增加⼀个时间点,不断重复,通过这种⽅式可以巧妙的避开计数器的临界点的问题。</p><p>滑动窗⼝算法可以有效的规避计数器算法中时间临界点的问题,但是仍然存在时间⽚段的概念。</p><p>同时滑动窗⼝算法计数运算也相对固定时间窗⼝算法⽐较耗时</p><p>滑动时间窗⼝算法,如图4-7所示 <img src="https://i.jpg.dog/0c3f56472760bcab05217fa9fba424db.png" alt="滑动时间窗口算法" loading="lazy"></p>`,47),t=[l];function p(d,h){return s(),i("div",null,t)}const g=a(n,[["render",p],["__file","微服务容错.html.vue"]]),o=JSON.parse('{"path":"/dev/java/springCloud/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99.html","title":"微服务容错","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-07-22T00:00:00.000Z","category":["后端开发","spring系列"],"tag":["java"],"description":"微服务容错 简介 隔离 线程池隔离 线程池隔离就是通过Java的线程池进⾏隔离,B服务调⽤C服务给予固定的线程数量⽐如12个线程,如果此时C服务宕机了就算⼤量的请求过来,调⽤C服务的接⼝只会占⽤12个线程不会占⽤其他⼯作线程资源,因此B服务就不会出现级联故障。 线程池隔离 信号量隔离 隔离信号量隔离是使⽤Semaphore来实现的,当拿不到信号量的时候...","head":[["meta",{"property":"og:url","content":"https://jia-shuaijie.github.io/dev/java/springCloud/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99.html"}],["meta",{"property":"og:site_name","content":"黑色的小火苗"}],["meta",{"property":"og:title","content":"微服务容错"}],["meta",{"property":"og:description","content":"微服务容错 简介 隔离 线程池隔离 线程池隔离就是通过Java的线程池进⾏隔离,B服务调⽤C服务给予固定的线程数量⽐如12个线程,如果此时C服务宕机了就算⼤量的请求过来,调⽤C服务的接⼝只会占⽤12个线程不会占⽤其他⼯作线程资源,因此B服务就不会出现级联故障。 线程池隔离 信号量隔离 隔离信号量隔离是使⽤Semaphore来实现的,当拿不到信号量的时候..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i.jpg.dog/08310ea84d73a9cf48a498ca21175a29.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T13:09:27.000Z"}],["meta",{"property":"article:author","content":"黑色的小火苗"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-07-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T13:09:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微服务容错\\",\\"image\\":[\\"https://i.jpg.dog/08310ea84d73a9cf48a498ca21175a29.png\\",\\"https://i.jpg.dog/cf54c8a55b4579844c6caff32285ca32.png\\",\\"https://i.jpg.dog/87a77f860444dea22987da2335c6c1bf.png\\",\\"https://i.jpg.dog/98b6709ac7186a6e7591af394f4a7007.png\\",\\"https://i.jpg.dog/c7d2ddd9adcc0cb1d95b0f40ad0cd28d.png\\",\\"https://i.jpg.dog/699ac159adcf6a1bd5bf9d9133f116dc.png\\",\\"https://i.jpg.dog/0c3f56472760bcab05217fa9fba424db.png\\"],\\"datePublished\\":\\"2024-07-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T13:09:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑色的小火苗\\",\\"url\\":\\"https://jia-shuaijie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"隔离","slug":"隔离","link":"#隔离","children":[{"level":3,"title":"线程池隔离","slug":"线程池隔离","link":"#线程池隔离","children":[]},{"level":3,"title":"信号量隔离","slug":"信号量隔离","link":"#信号量隔离","children":[]},{"level":3,"title":"线程池隔离和信号量隔离的区别","slug":"线程池隔离和信号量隔离的区别","link":"#线程池隔离和信号量隔离的区别","children":[]}]},{"level":2,"title":"熔断","slug":"熔断","link":"#熔断","children":[]},{"level":2,"title":"降级","slug":"降级","link":"#降级","children":[]},{"level":2,"title":"限流","slug":"限流","link":"#限流","children":[{"level":3,"title":"漏桶算法","slug":"漏桶算法","link":"#漏桶算法","children":[]},{"level":3,"title":"令牌桶算法","slug":"令牌桶算法","link":"#令牌桶算法","children":[]},{"level":3,"title":"固定时间窗⼝算法","slug":"固定时间窗口算法","link":"#固定时间窗口算法","children":[]},{"level":3,"title":"滑动时间窗⼝算法","slug":"滑动时间窗口算法","link":"#滑动时间窗口算法","children":[]}]}],"git":{"createdTime":1721653767000,"updatedTime":1721653767000,"contributors":[{"name":"黑色的小火苗","email":"jiashuaijie@yeah.net","commits":1}]},"readingTime":{"minutes":5.72,"words":1717},"filePathRelative":"dev/java/springCloud/微服务容错.md","localizedDate":"2024年7月22日","excerpt":"\\n<p>简介</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>在⾼并发访问下,⽐如天猫双11,流量持续不断的涌⼊,服务之间的相互调⽤频率突然增加,引发</span></span>\\n<span class=\\"line\\"><span>系统负载过⾼,这时系统所依赖的服务的稳定性对系统的影响⾮常⼤,⽽且还有很多不确定因素引起雪</span></span>\\n<span class=\\"line\\"><span>崩,如⽹络连接中断,服务宕机等。⼀般微服务容错组件提供了限流、隔离、降级、熔断等⼿段,可以</span></span>\\n<span class=\\"line\\"><span>有效保护我们的微服务系统。</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{g as comp,o as data};
