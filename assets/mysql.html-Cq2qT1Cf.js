import{_ as n,o as s,c as a,e}from"./app-BQzoQ3UK.js";const p={},t=e(`<h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>MySql</span></a></h1><h2 id="find-in-set" tabindex="-1"><a class="header-anchor" href="#find-in-set"><span>find_in_set</span></a></h2><p>find_in_set 使用方式与 in 相似只不过参数变为了使用 <code>,</code>分割的字符串,且写法也有一些区别.</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">/* 示例
  当在select时会如果搜索值在strlist中存在那么会返回查询的值,如下例就是会返回1
*/</span>
<span class="token keyword">select</span> find_in_set<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;1,2,3,4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 示例
  当在where作为条件时则是会返回满足条件的数据
  当查询的数据为2时则是查询name中包含2的数据就会返回
 */</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token string">&#39;1,2,3,4&#39;</span> <span class="token keyword">as</span> name<span class="token punctuation">)</span>
<span class="token keyword">union</span>
<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token string">&#39;1,2,3&#39;</span> <span class="token keyword">as</span> name<span class="token punctuation">)</span>
<span class="token keyword">union</span>
<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token string">&#39;1,2&#39;</span> <span class="token keyword">as</span> name<span class="token punctuation">)</span>
<span class="token keyword">union</span>
<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token string">&#39;1&#39;</span> <span class="token keyword">as</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> users <span class="token keyword">where</span> find_in_set<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="递归查询" tabindex="-1"><a class="header-anchor" href="#递归查询"><span>递归查询</span></a></h2><ol><li><p>父级递归查询子级</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> RECURSIVE cte <span class="token keyword">as</span> <span class="token punctuation">(</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>parent_id <span class="token keyword">from</span> <span class="token string">&#39;要查询的表&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token string">&#39;父级id&#39;</span>
<span class="token keyword">union</span> <span class="token keyword">ALL</span>
<span class="token keyword">select</span> <span class="token keyword">temp</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token keyword">temp</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">temp</span><span class="token punctuation">.</span>parent_id <span class="token keyword">from</span> <span class="token string">&#39;要查询的表&#39;</span> <span class="token keyword">temp</span><span class="token punctuation">,</span>cte c <span class="token keyword">where</span> <span class="token keyword">temp</span><span class="token punctuation">.</span>parent_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id
<span class="token punctuation">)</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> cte
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>子id递归查询父级</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> RECURSIVE cte <span class="token keyword">as</span> <span class="token punctuation">(</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>parent_id <span class="token keyword">from</span> org <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token string">&#39;子集id&#39;</span>
<span class="token keyword">union</span> <span class="token keyword">ALL</span>
<span class="token keyword">select</span> <span class="token keyword">temp</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token keyword">temp</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">temp</span><span class="token punctuation">.</span>parent_id <span class="token keyword">from</span> org <span class="token keyword">temp</span><span class="token punctuation">,</span>cte c <span class="token keyword">where</span> <span class="token keyword">temp</span><span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>parent_id
<span class="token punctuation">)</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> cte
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>输入父级获取子父级的组织拼接</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">/*
    输出示例:
    测试顶级部门
    测试顶级部门-&gt;测试部门1
    测试顶级部门-&gt;测试部门1 -&gt; 测试部门2
    测试顶级部门-&gt;测试部门1 -&gt; 测试部门2 -&gt; 测试部门3

*/</span>
<span class="token keyword">WITH</span> RECURSIVE cte <span class="token keyword">as</span> <span class="token punctuation">(</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>parent_id<span class="token punctuation">,</span>name <span class="token keyword">as</span> path <span class="token keyword">from</span> <span class="token string">&#39;要查询的表&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token string">&#39;父级id&#39;</span>
<span class="token keyword">union</span> <span class="token keyword">ALL</span>
<span class="token keyword">select</span> <span class="token keyword">temp</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token keyword">temp</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">temp</span><span class="token punctuation">.</span>parent_id<span class="token punctuation">,</span> concat<span class="token punctuation">(</span>c<span class="token punctuation">.</span>path <span class="token punctuation">,</span><span class="token string">&#39;-&gt;&#39;</span><span class="token punctuation">,</span><span class="token keyword">temp</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token keyword">as</span> path <span class="token keyword">from</span> <span class="token string">&#39;要查询的表&#39;</span> <span class="token keyword">temp</span><span class="token punctuation">,</span>cte c <span class="token keyword">where</span> <span class="token keyword">temp</span><span class="token punctuation">.</span>parent_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id
<span class="token punctuation">)</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> cte
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>输入子集获取从父级到当前子集的组织拼接</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">/*
    输出示例:
    测试顶级部门
    测试顶级部门-&gt;测试部门1
    测试顶级部门-&gt;测试部门1 -&gt; 测试部门2
    测试顶级部门-&gt;测试部门1 -&gt; 测试部门2 -&gt; 测试部门3

*/</span>
<span class="token keyword">WITH</span> RECURSIVE cte <span class="token keyword">as</span> <span class="token punctuation">(</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>parent_id<span class="token punctuation">,</span>name <span class="token keyword">as</span> path <span class="token keyword">from</span> <span class="token string">&#39;要查询的表&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span>  <span class="token string">&#39;子集ID&#39;</span>
<span class="token keyword">union</span> <span class="token keyword">ALL</span>
<span class="token keyword">select</span> <span class="token keyword">temp</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token keyword">temp</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">temp</span><span class="token punctuation">.</span>parent_id<span class="token punctuation">,</span> concat<span class="token punctuation">(</span><span class="token keyword">temp</span><span class="token punctuation">.</span>name <span class="token punctuation">,</span><span class="token string">&#39;-&gt;&#39;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>path <span class="token punctuation">)</span><span class="token keyword">as</span> path <span class="token keyword">from</span> <span class="token string">&#39;要查询的表&#39;</span> <span class="token keyword">temp</span><span class="token punctuation">,</span>cte c <span class="token keyword">where</span> <span class="token keyword">temp</span><span class="token punctuation">.</span> id <span class="token operator">=</span> c<span class="token punctuation">.</span>parent_id 
<span class="token punctuation">)</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> cte
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>ps: 前四个写法需要注意 MySql 版本为 8.0 以上,可以使用 <code>select version();</code> 来查看版本号</p></blockquote><h2 id="ddl" tabindex="-1"><a class="header-anchor" href="#ddl"><span>ddl</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 创建数据库,数据库不存在时创建</span>
<span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token identifier"><span class="token punctuation">\`</span>database_name<span class="token punctuation">\`</span></span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[t];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","mysql.html.vue"]]),r=JSON.parse(`{"path":"/dev/sql/mysql.html","title":"MySql","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"find_in_set","slug":"find-in-set","link":"#find-in-set","children":[]},{"level":2,"title":"递归查询","slug":"递归查询","link":"#递归查询","children":[]},{"level":2,"title":"ddl","slug":"ddl","link":"#ddl","children":[]}],"git":{"updatedTime":1717731361000,"contributors":[{"name":"黑色的小火苗","email":"jiashuaijie@yeah.net","commits":1}]},"filePathRelative":"dev/sql/mysql.md","excerpt":"\\n<h2>find_in_set</h2>\\n<p>find_in_set 使用方式与 in 相似只不过参数变为了使用 <code>,</code>分割的字符串,且写法也有一些区别.</p>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token comment\\">/* 示例\\n  当在select时会如果搜索值在strlist中存在那么会返回查询的值,如下例就是会返回1\\n*/</span>\\n<span class=\\"token keyword\\">select</span> find_in_set<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'1,2,3,4'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">/* 示例\\n  当在where作为条件时则是会返回满足条件的数据\\n  当查询的数据为2时则是查询name中包含2的数据就会返回\\n */</span>\\n<span class=\\"token keyword\\">select</span> <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">from</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">select</span> <span class=\\"token string\\">'1,2,3,4'</span> <span class=\\"token keyword\\">as</span> name<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">union</span>\\n<span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">select</span> <span class=\\"token string\\">'1,2,3'</span> <span class=\\"token keyword\\">as</span> name<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">union</span>\\n<span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">select</span> <span class=\\"token string\\">'1,2'</span> <span class=\\"token keyword\\">as</span> name<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">union</span>\\n<span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">select</span> <span class=\\"token string\\">'1'</span> <span class=\\"token keyword\\">as</span> name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> users <span class=\\"token keyword\\">where</span> find_in_set<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span>name<span class=\\"token punctuation\\">)</span>\\n\\n</code></pre></div>"}`);export{k as comp,r as data};
