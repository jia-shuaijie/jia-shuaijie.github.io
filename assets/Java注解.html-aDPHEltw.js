import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as n}from"./app-QGmvmOnY.js";const e={},t=n(`<h1 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h1><p>可以把注释注释到jvm的机制.</p><p>在JDK1.5引入的机制,注解可用范围: java语言中类 方法 变量 参数 包 等的标注</p><p>主要用于:</p><ul><li>编译格式检查</li><li>反射中解析</li><li>生成帮助文档</li><li>跟踪代码依赖</li><li>等</li></ul><h2 id="内置注解" tabindex="-1"><a class="header-anchor" href="#内置注解"><span>内置注解</span></a></h2><p>@Override: 重写 [ 编译格式检查,用在 ] -- 定义在java.lang.Override</p><p>@Deprecated: 废弃 -- 定义在 java.lang.Deprecated</p><p>@SafeVarargs: java7开始支持,忽略任何使用参数位泛型变量的方法或构造函数调用时产生的警告</p><p>@Functionallnterface 函数式接口: java8开始支持, 标识一个匿名函数或函数式接口</p><p>@Repeatable: 标识某注解可以在同一个声明上使用多次,java8开始支持 标识某注解可以在同一个声明上使用多次</p><h2 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解"><span>元注解</span></a></h2><p>@Retention - 标识这个注解怎么保存,是只在代码中,还是编入class文件中,或者是在运行时可以通过反射访问。</p><p>@Documented - 标记这些注解是否包含在用户文档中 javadoc。</p><p>@Target - 标记这个注解应该是哪种 Java 成员。</p><p>@Inherited - 标记这个注解是自动继承的</p><ol><li>子类会继承父类使用的注解中被@Inherited修饰的注解</li><li>接口继承关系中,子接口不会继承父接口中的任何注解,不管父接口中使用的注解有没有被@Inherited修饰</li><li>类实现接口时不会继承任何接口中定义的注解</li></ol><h2 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解"><span>自定义注解</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.lang.annotation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> blackFire</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 自定义注解示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    @Documented                          [ 注解是否包含在文档中 ]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    @Target参数                          [ 用途类型 ]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        ElementType.TYPE                表示自定义注解可以使用在类上</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        ElementType.METHOD              表示自定义注解可以使用在方法上</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    @Retention参数                       [ 保存策略 ]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        RetentionPolicy.RUNTIME         注解会被编译器记录在类文件中,并且在运行时由 VM 保留,因此可以反射性地读取它们。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    @Inherited                          [ 可以继承 ]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Inherited</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Documented</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">RetentionPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">RUNTIME</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">({</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ElementType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ElementType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">METHOD</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> MyInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 只有value可以不用指定属性名传参</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 给默认值后,就不必非要传参</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),l=[t];function h(p,r){return a(),s("div",null,l)}const c=i(e,[["render",h],["__file","Java注解.html.vue"]]),o=JSON.parse('{"path":"/dev/java/base/Java%E6%B3%A8%E8%A7%A3.html","title":"注解","lang":"zh-CN","frontmatter":{"icon":"book","date":"2024-07-22T00:00:00.000Z","category":["后端开发","java"],"tag":["java"],"order":3,"description":"注解 可以把注释注释到jvm的机制. 在JDK1.5引入的机制,注解可用范围: java语言中类 方法 变量 参数 包 等的标注 主要用于: 编译格式检查 反射中解析 生成帮助文档 跟踪代码依赖 等 内置注解 @Override: 重写 [ 编译格式检查,用在 ] -- 定义在java.lang.Override @Deprecated: 废弃 -- ...","head":[["meta",{"property":"og:url","content":"https://jia-shuaijie.github.io/dev/java/base/Java%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"黑色的小火苗"}],["meta",{"property":"og:title","content":"注解"}],["meta",{"property":"og:description","content":"注解 可以把注释注释到jvm的机制. 在JDK1.5引入的机制,注解可用范围: java语言中类 方法 变量 参数 包 等的标注 主要用于: 编译格式检查 反射中解析 生成帮助文档 跟踪代码依赖 等 内置注解 @Override: 重写 [ 编译格式检查,用在 ] -- 定义在java.lang.Override @Deprecated: 废弃 -- ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T13:09:27.000Z"}],["meta",{"property":"article:author","content":"黑色的小火苗"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-07-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T13:09:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T13:09:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑色的小火苗\\",\\"url\\":\\"https://jia-shuaijie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"内置注解","slug":"内置注解","link":"#内置注解","children":[]},{"level":2,"title":"元注解","slug":"元注解","link":"#元注解","children":[]},{"level":2,"title":"自定义注解","slug":"自定义注解","link":"#自定义注解","children":[]}],"git":{"createdTime":1721653767000,"updatedTime":1721653767000,"contributors":[{"name":"黑色的小火苗","email":"jiashuaijie@yeah.net","commits":1}]},"readingTime":{"minutes":1.84,"words":552},"filePathRelative":"dev/java/base/Java注解.md","localizedDate":"2024年7月22日","excerpt":"\\n<p>可以把注释注释到jvm的机制.</p>\\n<p>在JDK1.5引入的机制,注解可用范围: java语言中类 方法 变量 参数 包 等的标注</p>\\n<p>主要用于:</p>\\n<ul>\\n<li>编译格式检查</li>\\n<li>反射中解析</li>\\n<li>生成帮助文档</li>\\n<li>跟踪代码依赖</li>\\n<li>等</li>\\n</ul>\\n<h2>内置注解</h2>\\n<p>@Override: 重写 [ 编译格式检查,用在 ] -- 定义在java.lang.Override</p>\\n<p>@Deprecated: 废弃 -- 定义在 java.lang.Deprecated</p>\\n","autoDesc":true}');export{c as comp,o as data};
