import{_ as n,o as s,c as a,e as p}from"./app-BQzoQ3UK.js";const t={},e=p(`<h1 id="rsa加密" tabindex="-1"><a class="header-anchor" href="#rsa加密"><span>rsa加密</span></a></h1><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hc<span class="token punctuation">.</span>client5<span class="token punctuation">.</span>http<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">Cipher</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">PKCS8EncodedKeySpec</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">X509EncodedKeySpec</span></span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * RsaException 是我自己写的一个异常用于抛出并全局捕获,使用时可以自己定义.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RsaUtil</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * RSA最大加密明文大小
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_ENCRYPT_BLOCK</span> <span class="token operator">=</span> <span class="token number">117</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * RSA最大解密密文大小
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_DECRYPT_BLOCK</span> <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">KeyFactory</span> keyFactory<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取密钥对
     *
     * <span class="token keyword">@return</span> 密钥对
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">KeyPair</span> <span class="token function">getKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">KeyPairGenerator</span> generator <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        generator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> generator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取私钥
     *
     * <span class="token keyword">@param</span> <span class="token parameter">privateKey</span> 私钥字符串
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PrivateKey</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> privateKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decodedKey <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PKCS8EncodedKeySpec</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>decodedKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取公钥
     *
     * <span class="token keyword">@param</span> <span class="token parameter">publicKey</span> 公钥字符串
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PublicKey</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> publicKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decodedKey <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">X509EncodedKeySpec</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>decodedKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * RSA加密
     *
     * <span class="token keyword">@param</span> <span class="token parameter">data</span>      待加密数据
     * <span class="token keyword">@param</span> <span class="token parameter">publicKey</span> 公钥
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> publicKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> inputLen <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token class-name">ByteArrayOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache<span class="token punctuation">;</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 对数据分段加密</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>inputLen <span class="token operator">-</span> offset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>inputLen <span class="token operator">-</span> offset <span class="token operator">&gt;</span> <span class="token constant">MAX_ENCRYPT_BLOCK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cache <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> <span class="token constant">MAX_ENCRYPT_BLOCK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    cache <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> inputLen <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                offset <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token constant">MAX_ENCRYPT_BLOCK</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encryptedData <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取加密内容使用base64进行编码,并以UTF-8为标准转化成字符串</span>
            <span class="token comment">// 加密后的字符串</span>
            <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span>encryptedData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RsaException</span><span class="token punctuation">(</span><span class="token string">&quot;RSA 加密失败!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * RSA解密
     *
     * <span class="token keyword">@param</span> <span class="token parameter">data</span>       待解密数据
     * <span class="token keyword">@param</span> <span class="token parameter">privateKey</span> 私钥
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dataBytes <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> inputLen <span class="token operator">=</span> dataBytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token class-name">ByteArrayOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache<span class="token punctuation">;</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 对数据分段解密</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>inputLen <span class="token operator">-</span> offset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>inputLen <span class="token operator">-</span> offset <span class="token operator">&gt;</span> <span class="token constant">MAX_DECRYPT_BLOCK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cache <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>dataBytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> <span class="token constant">MAX_DECRYPT_BLOCK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    cache <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>dataBytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> inputLen <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                offset <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token constant">MAX_DECRYPT_BLOCK</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decryptedData <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 解密后的内容</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decryptedData<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RsaException</span><span class="token punctuation">(</span><span class="token string">&quot;RSA 解密失败!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 签名
     *
     * <span class="token keyword">@param</span> <span class="token parameter">data</span>       待签名数据
     * <span class="token keyword">@param</span> <span class="token parameter">privateKey</span> 私钥
     * <span class="token keyword">@return</span> 签名
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes <span class="token operator">=</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PKCS8EncodedKeySpec</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">KeyFactory</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PrivateKey</span> key <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> <span class="token class-name">Signature</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;MD5withRSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        signature<span class="token punctuation">.</span><span class="token function">initSign</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64</span><span class="token punctuation">(</span>signature<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 验签
     *
     * <span class="token keyword">@param</span> <span class="token parameter">srcData</span>   原始字符串
     * <span class="token keyword">@param</span> <span class="token parameter">publicKey</span> 公钥
     * <span class="token keyword">@param</span> <span class="token parameter">sign</span>      签名
     * <span class="token keyword">@return</span> 是否验签通过
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token class-name">String</span> srcData<span class="token punctuation">,</span> <span class="token class-name">String</span> publicKey<span class="token punctuation">,</span> <span class="token class-name">String</span> sign<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes <span class="token operator">=</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">X509EncodedKeySpec</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PublicKey</span> key <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> <span class="token class-name">Signature</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;MD5withRSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        signature<span class="token punctuation">.</span><span class="token function">initVerify</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>srcData<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> signature<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>sign<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demoMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 生成密钥对</span>
            <span class="token class-name">KeyPair</span> keyPair <span class="token operator">=</span> <span class="token function">getKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> privateKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> publicKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;私钥:&quot;</span> <span class="token operator">+</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;公钥:&quot;</span> <span class="token operator">+</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// RSA加密</span>
            <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">&quot;待加密的文字内容&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> encryptData <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;加密后内容:&quot;</span> <span class="token operator">+</span> encryptData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// RSA解密</span>
            <span class="token class-name">String</span> decryptData <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>encryptData<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;解密后内容:&quot;</span> <span class="token operator">+</span> decryptData<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// RSA签名</span>
            <span class="token class-name">String</span> sign <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// RSA验签</span>
            <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">verify</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> sign<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;验签结果:&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;加解密异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>ps: 生成一对密钥后就可以直接使用了,不要使用两次不同公钥对私钥进行解密.</p></blockquote>`,3),c=[e];function o(l,u){return s(),a("div",null,c)}const k=n(t,[["render",o],["__file","rsa-encryption.html.vue"]]),r=JSON.parse('{"path":"/dev/java/rsa-encryption.html","title":"rsa加密","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1717731361000,"contributors":[{"name":"黑色的小火苗","email":"jiashuaijie@yeah.net","commits":1}]},"filePathRelative":"dev/java/rsa-encryption.md","excerpt":"\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>apache<span class=\\"token punctuation\\">.</span>hc<span class=\\"token punctuation\\">.</span>client5<span class=\\"token punctuation\\">.</span>http<span class=\\"token punctuation\\">.</span>utils<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Base64</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">javax<span class=\\"token punctuation\\">.</span>crypto<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Cipher</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">ByteArrayOutputStream</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>nio<span class=\\"token punctuation\\">.</span>charset<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">StandardCharsets</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>security<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>security<span class=\\"token punctuation\\">.</span>spec<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">PKCS8EncodedKeySpec</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>security<span class=\\"token punctuation\\">.</span>spec<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">X509EncodedKeySpec</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token doc-comment comment\\">/**\\n * RsaException 是我自己写的一个异常用于抛出并全局捕获,使用时可以自己定义.\\n */</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">RsaUtil</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * RSA最大加密明文大小\\n     */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">int</span> <span class=\\"token constant\\">MAX_ENCRYPT_BLOCK</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">117</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * RSA最大解密密文大小\\n     */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">int</span> <span class=\\"token constant\\">MAX_DECRYPT_BLOCK</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">128</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">KeyFactory</span> keyFactory<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            keyFactory <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">KeyFactory</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"RSA\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">NoSuchAlgorithmException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RuntimeException</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 获取密钥对\\n     *\\n     * <span class=\\"token keyword\\">@return</span> 密钥对\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">KeyPair</span> <span class=\\"token function\\">getKeyPair</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">KeyPairGenerator</span> generator <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">KeyPairGenerator</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"RSA\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        generator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">initialize</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1024</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> generator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generateKeyPair</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 获取私钥\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">privateKey</span> 私钥字符串\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">PrivateKey</span> <span class=\\"token function\\">getPrivateKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> privateKey<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> decodedKey <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Base64</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">decodeBase64</span><span class=\\"token punctuation\\">(</span>privateKey<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">PKCS8EncodedKeySpec</span> keySpec <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">PKCS8EncodedKeySpec</span><span class=\\"token punctuation\\">(</span>decodedKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> keyFactory<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generatePrivate</span><span class=\\"token punctuation\\">(</span>keySpec<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 获取公钥\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">publicKey</span> 公钥字符串\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">PublicKey</span> <span class=\\"token function\\">getPublicKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> publicKey<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> decodedKey <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Base64</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">decodeBase64</span><span class=\\"token punctuation\\">(</span>publicKey<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">X509EncodedKeySpec</span> keySpec <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">X509EncodedKeySpec</span><span class=\\"token punctuation\\">(</span>decodedKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> keyFactory<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generatePublic</span><span class=\\"token punctuation\\">(</span>keySpec<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * RSA加密\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">data</span>      待加密数据\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">publicKey</span> 公钥\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">encrypt</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> data<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> publicKey<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">Cipher</span> cipher <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Cipher</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"RSA\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            cipher<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Cipher</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">ENCRYPT_MODE</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">getPublicKey</span><span class=\\"token punctuation\\">(</span>publicKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">int</span> inputLen <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">ByteArrayOutputStream</span> out <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ByteArrayOutputStream</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">int</span> offset <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> cache<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 对数据分段加密</span>\\n            <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>inputLen <span class=\\"token operator\\">-</span> offset <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>inputLen <span class=\\"token operator\\">-</span> offset <span class=\\"token operator\\">&gt;</span> <span class=\\"token constant\\">MAX_ENCRYPT_BLOCK</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    cache <span class=\\"token operator\\">=</span> cipher<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">doFinal</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> offset<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">MAX_ENCRYPT_BLOCK</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                    cache <span class=\\"token operator\\">=</span> cipher<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">doFinal</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> offset<span class=\\"token punctuation\\">,</span> inputLen <span class=\\"token operator\\">-</span> offset<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span>cache<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> cache<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n                offset <span class=\\"token operator\\">=</span> i <span class=\\"token operator\\">*</span> <span class=\\"token constant\\">MAX_ENCRYPT_BLOCK</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> encryptedData <span class=\\"token operator\\">=</span> out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toByteArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 获取加密内容使用base64进行编码,并以UTF-8为标准转化成字符串</span>\\n            <span class=\\"token comment\\">// 加密后的字符串</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">Base64</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">encodeBase64String</span><span class=\\"token punctuation\\">(</span>encryptedData<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RsaException</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"RSA 加密失败!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * RSA解密\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">data</span>       待解密数据\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">privateKey</span> 私钥\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">decrypt</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> data<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> privateKey<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">Cipher</span> cipher <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Cipher</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"RSA\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            cipher<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Cipher</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">DECRYPT_MODE</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">getPrivateKey</span><span class=\\"token punctuation\\">(</span>privateKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> dataBytes <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Base64</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">decodeBase64</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">int</span> inputLen <span class=\\"token operator\\">=</span> dataBytes<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">ByteArrayOutputStream</span> out <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ByteArrayOutputStream</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">int</span> offset <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> cache<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 对数据分段解密</span>\\n            <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>inputLen <span class=\\"token operator\\">-</span> offset <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>inputLen <span class=\\"token operator\\">-</span> offset <span class=\\"token operator\\">&gt;</span> <span class=\\"token constant\\">MAX_DECRYPT_BLOCK</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    cache <span class=\\"token operator\\">=</span> cipher<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">doFinal</span><span class=\\"token punctuation\\">(</span>dataBytes<span class=\\"token punctuation\\">,</span> offset<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">MAX_DECRYPT_BLOCK</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                    cache <span class=\\"token operator\\">=</span> cipher<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">doFinal</span><span class=\\"token punctuation\\">(</span>dataBytes<span class=\\"token punctuation\\">,</span> offset<span class=\\"token punctuation\\">,</span> inputLen <span class=\\"token operator\\">-</span> offset<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span>cache<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> cache<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n                offset <span class=\\"token operator\\">=</span> i <span class=\\"token operator\\">*</span> <span class=\\"token constant\\">MAX_DECRYPT_BLOCK</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> decryptedData <span class=\\"token operator\\">=</span> out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toByteArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 解密后的内容</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span>decryptedData<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">StandardCharsets</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">UTF_8</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RsaException</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"RSA 解密失败!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 签名\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">data</span>       待签名数据\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">privateKey</span> 私钥\\n     * <span class=\\"token keyword\\">@return</span> 签名\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">sign</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> data<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> privateKey<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> keyBytes <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getPrivateKey</span><span class=\\"token punctuation\\">(</span>privateKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getEncoded</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">PKCS8EncodedKeySpec</span> keySpec <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">PKCS8EncodedKeySpec</span><span class=\\"token punctuation\\">(</span>keyBytes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">KeyFactory</span> keyFactory <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">KeyFactory</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"RSA\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">PrivateKey</span> key <span class=\\"token operator\\">=</span> keyFactory<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generatePrivate</span><span class=\\"token punctuation\\">(</span>keySpec<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Signature</span> signature <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Signature</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"MD5withRSA\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        signature<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">initSign</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        signature<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">update</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Base64</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">encodeBase64</span><span class=\\"token punctuation\\">(</span>signature<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sign</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 验签\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">srcData</span>   原始字符串\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">publicKey</span> 公钥\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">sign</span>      签名\\n     * <span class=\\"token keyword\\">@return</span> 是否验签通过\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">verify</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> srcData<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> publicKey<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> sign<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> keyBytes <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getPublicKey</span><span class=\\"token punctuation\\">(</span>publicKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getEncoded</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">X509EncodedKeySpec</span> keySpec <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">X509EncodedKeySpec</span><span class=\\"token punctuation\\">(</span>keyBytes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">PublicKey</span> key <span class=\\"token operator\\">=</span> keyFactory<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generatePublic</span><span class=\\"token punctuation\\">(</span>keySpec<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Signature</span> signature <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Signature</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"MD5withRSA\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        signature<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">initVerify</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        signature<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">update</span><span class=\\"token punctuation\\">(</span>srcData<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> signature<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">verify</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Base64</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">decodeBase64</span><span class=\\"token punctuation\\">(</span>sign<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">demoMain</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 生成密钥对</span>\\n            <span class=\\"token class-name\\">KeyPair</span> keyPair <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getKeyPair</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">String</span> privateKey <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Base64</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">encodeBase64</span><span class=\\"token punctuation\\">(</span>keyPair<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getPrivate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getEncoded</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">String</span> publicKey <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Base64</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">encodeBase64</span><span class=\\"token punctuation\\">(</span>keyPair<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getPublic</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getEncoded</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"私钥:\\"</span> <span class=\\"token operator\\">+</span> privateKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"公钥:\\"</span> <span class=\\"token operator\\">+</span> publicKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// RSA加密</span>\\n            <span class=\\"token class-name\\">String</span> data <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"待加密的文字内容\\"</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">String</span> encryptData <span class=\\"token operator\\">=</span> <span class=\\"token function\\">encrypt</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">,</span> publicKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"加密后内容:\\"</span> <span class=\\"token operator\\">+</span> encryptData<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// RSA解密</span>\\n            <span class=\\"token class-name\\">String</span> decryptData <span class=\\"token operator\\">=</span> <span class=\\"token function\\">decrypt</span><span class=\\"token punctuation\\">(</span>encryptData<span class=\\"token punctuation\\">,</span> privateKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"解密后内容:\\"</span> <span class=\\"token operator\\">+</span> decryptData<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token comment\\">// RSA签名</span>\\n            <span class=\\"token class-name\\">String</span> sign <span class=\\"token operator\\">=</span> <span class=\\"token function\\">sign</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">,</span> privateKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// RSA验签</span>\\n            <span class=\\"token keyword\\">boolean</span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">verify</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">,</span> publicKey<span class=\\"token punctuation\\">,</span> sign<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"验签结果:\\"</span> <span class=\\"token operator\\">+</span> result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"加解密异常\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{k as comp,r as data};
