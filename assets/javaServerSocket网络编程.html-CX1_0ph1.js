import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as h,c as k,b as i,d as s,e as l,w as t,a,o as d}from"./app-BXIyiqdS.js";const p={},r=a('<h1 id="网络编程" tabindex="-1"><a class="header-anchor" href="#网络编程"><span>网络编程</span></a></h1><h2 id="网络编程-程序的分类" tabindex="-1"><a class="header-anchor" href="#网络编程-程序的分类"><span>网络编程 程序的分类</span></a></h2><blockquote><p>B/S 程序 : 浏览器与服务器程序</p><p>C/S 程序 : 客户端与服务器程序</p></blockquote><h2 id="tcp协议-osi网络模型" tabindex="-1"><a class="header-anchor" href="#tcp协议-osi网络模型"><span>TCP协议 - OSI网络模型</span></a></h2><blockquote><p>指的是 从一台计算机的软件中,将数据发送刀另一台计算机的软件中的过程</p><p>七层网络模型: 应用层/ 表现层/ 会话层/ 传输层/ 网络层/ 数据链路层/ 物理层</p></blockquote><h2 id="三次握手-和-四次挥手" tabindex="-1"><a class="header-anchor" href="#三次握手-和-四次挥手"><span>三次握手 和 四次挥手</span></a></h2><blockquote><p>tcp协议客户端与服务器链接时,存在三次握手操作,确保消息能准确无误的发送.</p><p>断开连接时,存在四次挥手操作</p></blockquote><h2 id="套接字-serversocket" tabindex="-1"><a class="header-anchor" href="#套接字-serversocket"><span>套接字[ ServerSocket ]</span></a></h2><h3 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器"><span>构造器</span></a></h3><table><thead><tr><th>变量</th><th>构造器</th><th>描述</th></tr></thead><tbody><tr><td></td><td><code>Socket()</code></td><td>创建一个未连接的套接字,系统默认类型为SocketImpl。</td></tr><tr><td></td><td><code>Socket(String host, int port)</code></td><td>创建流套接字并将其连接到指定主机上的指定端口号。</td></tr><tr><td></td><td><code>Socket(String host, int port, boolean stream)</code></td><td>已过时。 使用DatagramSocket代替UDP传输。</td></tr><tr><td></td><td><code>Socket(String host, int port, InetAddress localAddr, int localPort)</code></td><td>创建套接字并将其连接到指定远程端口上的指定远程主机。</td></tr><tr><td></td><td><code>Socket(InetAddress address, int port)</code></td><td>创建流套接字并将其连接到指定IP地址处的指定端口号。</td></tr><tr><td></td><td><code>Socket(InetAddress host, int port, boolean stream)</code></td><td>已过时。 使用DatagramSocket代替UDP传输。</td></tr><tr><td></td><td><code>Socket(InetAddress address, int port, InetAddress localAddr, int localPort)</code></td><td>创建套接字并将其连接到指定远程端口上的指定远程地址。</td></tr><tr><td></td><td><code>Socket(Proxy proxy)</code></td><td>创建一个未连接的套接字,指定应该使用的代理类型(如果有),而不管其他任何设置。</td></tr><tr><td><code>protected </code></td><td><code>Socket(SocketImpl impl)</code></td><td>使用用户指定的SocketImpl创建未连接的Socket。</td></tr></tbody></table><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3>',11),o=i("thead",null,[i("tr",null,[i("th",null,"变量和类型"),i("th",null,"方法"),i("th",null,"描述")])],-1),c=i("tr",null,[i("td",null,[i("code",null,"void")]),i("td",null,[i("code",null,"bind(SocketAddress bindpoint)")]),i("td",null,"将套接字绑定到本地地址。")],-1),u=i("tr",null,[i("td",null,[i("code",null,"void")]),i("td",null,[i("code",null,"close()")]),i("td",null,"关闭此套接字。")],-1),y=i("tr",null,[i("td",null,[i("code",null,"void")]),i("td",null,[i("code",null,"connect(SocketAddress endpoint)")]),i("td",null,"将此套接字连接到服务器。")],-1),g=i("tr",null,[i("td",null,[i("code",null,"void")]),i("td",null,[i("code",null,"connect(SocketAddress endpoint, int timeout)")]),i("td",null,"使用指定的超时值将此套接字连接到服务器。")],-1),B=i("td",null,[i("code",null,"SocketChannel")],-1),E=i("td",null,[i("code",null,"getChannel()")],-1),v=i("code",null,"SocketChannel",-1),A=i("tr",null,[i("td",null,[i("code",null,"InetAddress")]),i("td",null,[i("code",null,"getInetAddress()")]),i("td",null,"返回套接字连接的地址。")],-1),F=i("tr",null,[i("td",null,[i("code",null,"InputStream")]),i("td",null,[i("code",null,"getInputStream()")]),i("td",null,"返回此套接字的输入流。")],-1),D=i("td",null,[i("code",null,"boolean")],-1),C=i("td",null,[i("code",null,"getKeepAlive()")],-1),m=i("code",null,"SO_KEEPALIVE",-1),_=i("tr",null,[i("td",null,[i("code",null,"InetAddress")]),i("td",null,[i("code",null,"getLocalAddress()")]),i("td",null,"获取套接字绑定的本地地址。")],-1),b=i("tr",null,[i("td",null,[i("code",null,"int")]),i("td",null,[i("code",null,"getLocalPort()")]),i("td",null,"返回此套接字绑定的本地端口号。")],-1),f=i("tr",null,[i("td",null,[i("code",null,"SocketAddress")]),i("td",null,[i("code",null,"getLocalSocketAddress()")]),i("td",null,"返回此套接字绑定的端点的地址。")],-1),S=i("td",null,[i("code",null,"boolean")],-1),O=i("td",null,[i("code",null,"getOOBInline()")],-1),I=i("code",null,"SO_OOBINLINE",-1),j=i("tr",null,[i("td",null,[i("code",null," T")]),i("td",null,[i("code",null,"getOption(SocketOption name)")]),i("td",null,"返回套接字选项的值。")],-1),T=i("tr",null,[i("td",null,[i("code",null,"OutputStream")]),i("td",null,[i("code",null,"getOutputStream()")]),i("td",null,"返回此套接字的输出流。")],-1),P=i("tr",null,[i("td",null,[i("code",null,"int")]),i("td",null,[i("code",null,"getPort()")]),i("td",null,"返回此套接字连接的远程端口号。")],-1),x=i("td",null,[i("code",null,"int")],-1),N=i("td",null,[i("code",null,"getReceiveBufferSize()")],-1),q=i("code",null,"Socket",-1),R=i("code",null,"SO_RCVBUF",-1),L=i("code",null,"Socket",-1),U=i("tr",null,[i("td",null,[i("code",null,"SocketAddress")]),i("td",null,[i("code",null,"getRemoteSocketAddress()")]),i("td",null,[s("返回此套接字连接到的端点的地址,如果未连接则返回 "),i("code",null,"null"),s(" 。")])],-1),w=i("td",null,[i("code",null,"boolean")],-1),V=i("td",null,[i("code",null,"getReuseAddress()")],-1),z=i("code",null,"SO_REUSEADDR",-1),K=i("td",null,[i("code",null,"int")],-1),Z=i("td",null,[i("code",null,"getSendBufferSize()")],-1),M=i("code",null,"Socket",-1),G=i("code",null,"SO_SNDBUF",-1),Y=i("code",null,"Socket",-1),J=i("td",null,[i("code",null,"int")],-1),H=i("td",null,[i("code",null,"getSoLinger()")],-1),Q=i("code",null,"SO_LINGER",-1),W=i("td",null,[i("code",null,"int")],-1),X=i("td",null,[i("code",null,"getSoTimeout()")],-1),$=i("code",null,"SO_TIMEOUT",-1),ii=i("td",null,[i("code",null,"boolean")],-1),si=i("td",null,[i("code",null,"getTcpNoDelay()")],-1),ni=i("code",null,"TCP_NODELAY",-1),li=i("tr",null,[i("td",null,[i("code",null,"int")]),i("td",null,[i("code",null,"getTrafficClass()")]),i("td",null,"获取从此Socket发送的数据包的IP头中的流量类或服务类型")],-1),ti=i("tr",null,[i("td",null,[i("code",null,"boolean")]),i("td",null,[i("code",null,"isBound()")]),i("td",null,"返回套接字的绑定状态。")],-1),ai=i("tr",null,[i("td",null,[i("code",null,"boolean")]),i("td",null,[i("code",null,"isClosed()")]),i("td",null,"返回套接字的关闭状态。")],-1),ei=i("tr",null,[i("td",null,[i("code",null,"boolean")]),i("td",null,[i("code",null,"isConnected()")]),i("td",null,"返回套接字的连接状态。")],-1),hi=i("tr",null,[i("td",null,[i("code",null,"boolean")]),i("td",null,[i("code",null,"isInputShutdown()")]),i("td",null,"返回套接字连接的读半部分是否已关闭。")],-1),ki=i("tr",null,[i("td",null,[i("code",null,"boolean")]),i("td",null,[i("code",null,"isOutputShutdown()")]),i("td",null,"返回套接字连接的写半部分是否已关闭。")],-1),di=i("tr",null,[i("td",null,[i("code",null,"void")]),i("td",null,[i("code",null,"sendUrgentData(int data)")]),i("td",null,"在套接字上发送一个字节的紧急数据。")],-1),pi=i("td",null,[i("code",null,"void")],-1),ri=i("td",null,[i("code",null,"setKeepAlive(boolean on)")],-1),oi=i("code",null,"SO_KEEPALIVE",-1),ci=i("td",null,[i("code",null,"void")],-1),ui=i("td",null,[i("code",null,"setOOBInline(boolean on)")],-1),yi=i("code",null,"SO_OOBINLINE",-1),gi=i("tr",null,[i("td",null,[i("code",null," Socket")]),i("td",null,[i("code",null,"setOption(SocketOption name, T value)")]),i("td",null,"设置套接字选项的值。")],-1),Bi=i("tr",null,[i("td",null,[i("code",null,"void")]),i("td",null,[i("code",null,"setPerformancePreferences(int connectionTime, int latency, int bandwidth)")]),i("td",null,"设置此套接字的性能首选项。")],-1),Ei=i("td",null,[i("code",null,"void")],-1),vi=i("td",null,[i("code",null,"setReceiveBufferSize(int size)")],-1),Ai=i("code",null,"SO_RCVBUF",-1),Fi=i("code",null,"Socket",-1),Di=i("td",null,[i("code",null,"void")],-1),Ci=i("td",null,[i("code",null,"setReuseAddress(boolean on)")],-1),mi=i("code",null,"SO_REUSEADDR",-1),_i=i("td",null,[i("code",null,"void")],-1),bi=i("td",null,[i("code",null,"setSendBufferSize(int size)")],-1),fi=i("code",null,"SO_SNDBUF",-1),Si=i("code",null,"Socket",-1),Oi=i("tr",null,[i("td",null,[i("code",null,"static void")]),i("td",null,[i("code",null,"setSocketImplFactory(SocketImplFactory fac)")]),i("td",null,"设置应用程序的客户端套接字实现工厂。")],-1),Ii=i("td",null,[i("code",null,"void")],-1),ji=i("td",null,[i("code",null,"setSoLinger(boolean on, int linger)")],-1),Ti=i("code",null,"SO_LINGER",-1),Pi=i("td",null,[i("code",null,"void")],-1),xi=i("td",null,[i("code",null,"setSoTimeout(int timeout)")],-1),Ni=i("code",null,"SO_TIMEOUT",-1),qi=i("td",null,[i("code",null,"void")],-1),Ri=i("td",null,[i("code",null,"setTcpNoDelay(boolean on)")],-1),Li=i("code",null,"TCP_NODELAY",-1),Ui=i("tr",null,[i("td",null,[i("code",null,"void")]),i("td",null,[i("code",null,"setTrafficClass(int tc)")]),i("td",null,"为从此Socket发送的数据包的IP标头设置流量类或服务类型八位字节。")],-1),wi=i("tr",null,[i("td",null,[i("code",null,"void")]),i("td",null,[i("code",null,"shutdownInput()")]),i("td",null,"将此套接字的输入流放在“流结束”。")],-1),Vi=i("tr",null,[i("td",null,[i("code",null,"void")]),i("td",null,[i("code",null,"shutdownOutput()")]),i("td",null,"禁用此套接字的输出流。")],-1),zi=i("tr",null,[i("td",null,[i("code",null,"Set>")]),i("td",null,[i("code",null,"supportedOptions()")]),i("td",null,"返回此套接字支持的一组套接字选项。")],-1),Ki=i("tr",null,[i("td",null,[i("code",null,"String")]),i("td",null,[i("code",null,"toString()")]),i("td",null,[s("将此套接字转换为 "),i("code",null,"String"),s(" 。")])],-1),Zi=a(`<h2 id="多线程的客户端与服务器之间的交互" tabindex="-1"><a class="header-anchor" href="#多线程的客户端与服务器之间的交互"><span>多线程的客户端与服务器之间的交互</span></a></h2><h3 id="服务器端" tabindex="-1"><a class="header-anchor" href="#服务器端"><span>服务器端</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.io.IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.io.OutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.io.PrintStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.net.ServerSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.net.Socket</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.util.concurrent.ExecutorService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.util.concurrent.Executors</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> black fire</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> SocketService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * 线程池</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ExecutorService</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> executor</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * 端口号</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> port</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * 套接字总服务</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ServerSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * 推出</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> quit </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * 当创建对象时需要出入 端口号</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> port</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> 端口号</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> SocketService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> port</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">port</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> port;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 创建线程池 [10]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Executors</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">newFixedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * 退出方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> quit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">quit</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> black fire</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * 以多线程形式运行服务中的 socket</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> SocketTask</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 套接字中的 socket</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> socket</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> SocketTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Socket</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> socket</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> socket;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getInetAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getPort</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;请求链接&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) );</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">                // 从套接字中获取输出流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                OutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> outputStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> socket</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">                // 将 outputStream 输出流转换为 PrintStream 打印流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                PrintStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ps</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> PrintStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(outputStream);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                ps</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;欢迎链接服务器&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;线程为您服务&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * 多线程启动方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            // 创建一个 套接字对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            server </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ServerSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(port);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">quit){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">                // 监听 ServerSocket 并接受它</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                Socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">                // 向线程池中添加一个线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                executor</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> SocketTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(accept));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">            quit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * 启动多线程</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> SocketService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">55655</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端"><span>客户端</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.io.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.net.Socket</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> black fire</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> SocketClient</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> client</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> host</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> port</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 向指定服务器端口, 进行链接获取 套接字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        Socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> socket</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            socket </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Socket</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(host,port);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            // 从套接字中获取输入流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            InputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> inputStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> socket</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            // 将 inputStream 输入流 转换为  BufferedReader 读取流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            BufferedReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> br</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BufferedReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> InputStreamReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(inputStream));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> br</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">readLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;客户端接收到了:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(s));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 链接 localhost 上 55655 端口的服务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> SocketClient</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">client</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">55655</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function Mi(Gi,Yi){const n=h("RouteLink");return d(),k("div",null,[r,i("table",null,[o,i("tbody",null,[c,u,y,g,i("tr",null,[B,E,i("td",null,[s("返回与此套接字关联的唯一"),l(n,{to:"/dev/java/nio/channels/SocketChannel.html"},{default:t(()=>[v]),_:1}),s("对象(如果有)。")])]),A,F,i("tr",null,[D,C,i("td",null,[s("测试是否启用了 "),l(n,{to:"/dev/java/base/SocketOptions.html#SO_KEEPALIVE"},{default:t(()=>[m]),_:1}),s(" 。")])]),_,b,f,i("tr",null,[S,O,i("td",null,[s("测试是否启用了 "),l(n,{to:"/dev/java/base/SocketOptions.html#SO_OOBINLINE"},{default:t(()=>[I]),_:1}),s(" 。")])]),j,T,P,i("tr",null,[x,N,i("td",null,[s("获取此 "),q,s("的 "),l(n,{to:"/dev/java/base/SocketOptions.html#SO_RCVBUF"},{default:t(()=>[R]),_:1}),s("选项的值,该值是平台在此 "),L,s("上用于输入的缓冲区大小。")])]),U,i("tr",null,[w,V,i("td",null,[s("测试是否启用了 "),l(n,{to:"/dev/java/base/SocketOptions.html#SO_REUSEADDR"},{default:t(()=>[z]),_:1}),s(" 。")])]),i("tr",null,[K,Z,i("td",null,[s("获取此 "),M,s("的 "),l(n,{to:"/dev/java/base/SocketOptions.html#SO_SNDBUF"},{default:t(()=>[G]),_:1}),s("选项的值,即此平台在此 "),Y,s("上用于输出的缓冲区大小。")])]),i("tr",null,[J,H,i("td",null,[s("返回 "),l(n,{to:"/dev/java/base/SocketOptions.html#SO_LINGER"},{default:t(()=>[Q,s("的")]),_:1}),s("设置。")])]),i("tr",null,[W,X,i("td",null,[s("返回"),l(n,{to:"/dev/java/base/SocketOptions.html#SO_TIMEOUT"},{default:t(()=>[$,s("的")]),_:1}),s("设置。 0返回意味着该选项被禁用(即无穷大的超时)。")])]),i("tr",null,[ii,si,i("td",null,[s("测试是否启用了 "),l(n,{to:"/dev/java/base/SocketOptions.html#TCP_NODELAY"},{default:t(()=>[ni]),_:1}),s(" 。")])]),li,ti,ai,ei,hi,ki,di,i("tr",null,[pi,ri,i("td",null,[s("启用/禁用 "),l(n,{to:"/dev/java/base/SocketOptions.html#SO_KEEPALIVE"},{default:t(()=>[oi]),_:1}),s(" 。")])]),i("tr",null,[ci,ui,i("td",null,[s("启用/禁用 "),l(n,{to:"/dev/java/base/SocketOptions.html#SO_OOBINLINE"},{default:t(()=>[yi]),_:1}),s(" (接收TCP紧急数据)默认情况下,此选项被禁用,并且套接字上收到的TCP紧急数据将被静默丢弃。")])]),gi,Bi,i("tr",null,[Ei,vi,i("td",null,[s("设置 "),l(n,{to:"/dev/java/base/SocketOptions.html#SO_RCVBUF"},{default:t(()=>[Ai]),_:1}),s("选项,此规定值 "),Fi,s(" 。")])]),i("tr",null,[Di,Ci,i("td",null,[s("启用/禁用 "),l(n,{to:"/dev/java/base/SocketOptions.html#SO_REUSEADDR"},{default:t(()=>[mi]),_:1}),s("套接字选项。")])]),i("tr",null,[_i,bi,i("td",null,[s("设置 "),l(n,{to:"/dev/java/base/SocketOptions.html#SO_SNDBUF"},{default:t(()=>[fi]),_:1}),s("选项,此规定值 "),Si,s(" 。")])]),Oi,i("tr",null,[Ii,ji,i("td",null,[s("使用指定的延迟时间(以秒为单位)启用/禁用 "),l(n,{to:"/dev/java/base/SocketOptions.html#SO_LINGER"},{default:t(()=>[Ti]),_:1}),s(" 。")])]),i("tr",null,[Pi,xi,i("td",null,[s("使用指定的超时启用/禁用 "),l(n,{to:"/dev/java/base/SocketOptions.html#SO_TIMEOUT"},{default:t(()=>[Ni]),_:1}),s(" ,以毫秒为单位。")])]),i("tr",null,[qi,Ri,i("td",null,[s("启用/禁用 "),l(n,{to:"/dev/java/base/SocketOptions.html#TCP_NODELAY"},{default:t(()=>[Li]),_:1}),s(" (禁用/启用Nagle的算法)。")])]),Ui,wi,Vi,zi,Ki])]),Zi])}const Qi=e(p,[["render",Mi],["__file","javaServerSocket网络编程.html.vue"]]),Wi=JSON.parse('{"path":"/dev/java/base/javaServerSocket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.html","title":"网络编程","lang":"zh-CN","frontmatter":{"icon":"book","date":"2024-07-22T00:00:00.000Z","category":["后端开发","java"],"tag":["java"],"description":"网络编程 网络编程 程序的分类 B/S 程序 : 浏览器与服务器程序 C/S 程序 : 客户端与服务器程序 TCP协议 - OSI网络模型 指的是 从一台计算机的软件中,将数据发送刀另一台计算机的软件中的过程 七层网络模型: 应用层/ 表现层/ 会话层/ 传输层/ 网络层/ 数据链路层/ 物理层 三次握手 和 四次挥手 tcp协议客户端与服务器链接时,...","head":[["meta",{"property":"og:url","content":"https://jia-shuaijie.github.io/dev/java/base/javaServerSocket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"黑色的小火苗"}],["meta",{"property":"og:title","content":"网络编程"}],["meta",{"property":"og:description","content":"网络编程 网络编程 程序的分类 B/S 程序 : 浏览器与服务器程序 C/S 程序 : 客户端与服务器程序 TCP协议 - OSI网络模型 指的是 从一台计算机的软件中,将数据发送刀另一台计算机的软件中的过程 七层网络模型: 应用层/ 表现层/ 会话层/ 传输层/ 网络层/ 数据链路层/ 物理层 三次握手 和 四次挥手 tcp协议客户端与服务器链接时,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T13:09:27.000Z"}],["meta",{"property":"article:author","content":"黑色的小火苗"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-07-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T13:09:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络编程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T13:09:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑色的小火苗\\",\\"url\\":\\"https://jia-shuaijie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"网络编程 程序的分类","slug":"网络编程-程序的分类","link":"#网络编程-程序的分类","children":[]},{"level":2,"title":"TCP协议 - OSI网络模型","slug":"tcp协议-osi网络模型","link":"#tcp协议-osi网络模型","children":[]},{"level":2,"title":"三次握手 和 四次挥手","slug":"三次握手-和-四次挥手","link":"#三次握手-和-四次挥手","children":[]},{"level":2,"title":"套接字[ ServerSocket ]","slug":"套接字-serversocket","link":"#套接字-serversocket","children":[{"level":3,"title":"构造器","slug":"构造器","link":"#构造器","children":[]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[]}]},{"level":2,"title":"多线程的客户端与服务器之间的交互","slug":"多线程的客户端与服务器之间的交互","link":"#多线程的客户端与服务器之间的交互","children":[{"level":3,"title":"服务器端","slug":"服务器端","link":"#服务器端","children":[]},{"level":3,"title":"客户端","slug":"客户端","link":"#客户端","children":[]}]}],"git":{"createdTime":1721653767000,"updatedTime":1721653767000,"contributors":[{"name":"黑色的小火苗","email":"jiashuaijie@yeah.net","commits":1}]},"readingTime":{"minutes":5.71,"words":1714},"filePathRelative":"dev/java/base/javaServerSocket网络编程.md","localizedDate":"2024年7月22日","excerpt":"\\n<h2>网络编程 程序的分类</h2>\\n<blockquote>\\n<p>B/S 程序 : 浏览器与服务器程序</p>\\n<p>C/S 程序 : 客户端与服务器程序</p>\\n</blockquote>\\n<h2>TCP协议 - OSI网络模型</h2>\\n<blockquote>\\n<p>指的是 从一台计算机的软件中,将数据发送刀另一台计算机的软件中的过程</p>\\n<p>七层网络模型:  应用层/ 表现层/ 会话层/ 传输层/ 网络层/ 数据链路层/ 物理层</p>\\n</blockquote>\\n<h2>三次握手 和 四次挥手</h2>\\n<blockquote>\\n<p>tcp协议客户端与服务器链接时,存在三次握手操作,确保消息能准确无误的发送.</p>\\n<p>断开连接时,存在四次挥手操作</p>\\n</blockquote>","autoDesc":true}');export{Qi as comp,Wi as data};
