import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as a,a as i}from"./app-BXIyiqdS.js";const e={},l=i(`<h1 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式"><span>设计模式</span></a></h1><p>简介</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>设计模式(Design Pattern) 简称 DP</span></span>
<span class="line"><span></span></span>
<span class="line"><span>概念</span></span>
<span class="line"><span>    软件设计模式(Design pattern),又称设计模式,是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。 (-- 来自百度百科)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>设计模式有六大原则</span></span>
<span class="line"><span>    开闭原则 (Open Closed Principle 简写为 OCP)</span></span>
<span class="line"><span>    单一职责原则(Single responsibility principle 简写为 SRP)</span></span>
<span class="line"><span>    里氏替换原则(Liskov Substitution Principle 简写为 LSP)</span></span>
<span class="line"><span>    依赖倒置原则(Dependence Inversion Principle 简写为 DIP)</span></span>
<span class="line"><span>    接口隔离原则(Interface Segregation Principle 简写为 ISP)</span></span>
<span class="line"><span>    迪米特法则(Law of Demeter 简写为 LoD)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="开闭原则-ocp" tabindex="-1"><a class="header-anchor" href="#开闭原则-ocp"><span>开闭原则(OCP)</span></a></h2><p>定义</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>开闭原则由勃兰特·梅耶(Bertrand Meyer) 提出,他在 1988 年的著作《面向对象软件构造》(Object Oriented</span></span>
<span class="line"><span>Software Construction)中提出：软件实体应当对扩展开放,对修改关闭.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>简单点说就是是：一个软件实体应该通过扩展来实现变化,而不是通过修改已有的代码来实现变化.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>一个软件产品在它的生命周期内一般都会发生变化,开闭原则视为软件实体的未来事件而制定的对现行开发设计进行约束的一个原则。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开闭原则的作用</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>开闭原则是面向对象程序设计的终极目标,它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>对软件测试的影响</span></span>
<span class="line"><span>    软件遵守开闭原则的话,软件测试时只需要对扩展的代码进行测试就可以了,因为原有的测试代码仍然能够正常运行</span></span>
<span class="line"><span></span></span>
<span class="line"><span>可以提高代码的可复用性</span></span>
<span class="line"><span>    粒度越小,被复用的可能性就越大;</span></span>
<span class="line"><span>    在面向对象的程序设计中,根据原子和抽象编程可以提高代码的可复用性。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>可以提高软件的可维护性</span></span>
<span class="line"><span>    遵守开闭原则的软件,其稳定性高和延续性强,从而易于扩展和维护。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="单一职责原则-srp" tabindex="-1"><a class="header-anchor" href="#单一职责原则-srp"><span>单一职责原则(SRP)</span></a></h2><p>定义</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>单一职责原则(Single Responsibility Principle,SRP)又称单一功能原则,由罗伯特·C.马丁(Robert C.Martin)于《敏捷软件开发：原则、模式和实践》一书中提出的。这里的职责是指类变化的原因,单一职责原则规定一个类应该有且仅有一个引起它变化的原因,否则类应该被拆分(There should never be more than one reason for a class to change)。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>该原则提出对象不应该承担太多职责,如果一个对象承担了太多的职责,至少存在以下两个缺点：</span></span>
<span class="line"><span>1. 一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力；</span></span>
<span class="line"><span>2. 当客户端需要该对象的某一个职责时,不得不将其他不需要的职责全都包含进来,从而造成冗余代码或代码的浪费。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单一职责的优点</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点。</span></span>
<span class="line"><span>降低类的复杂度。一个类只负责一项职责,其逻辑肯定要比负责多项职责简单得多。</span></span>
<span class="line"><span>提高类的可读性。复杂性降低,自然其可读性会提高。</span></span>
<span class="line"><span>提高系统的可维护性。可读性提高,那自然更容易维护了。</span></span>
<span class="line"><span>变更引起的风险降低。变更是必然的,如果单一职责原则遵守得好,当修改一个功能时,可以显著降低对其他功能的影响。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>PS: 单一职责同样也适用于方法。一个方法应该尽可能做好一件事情。如果一个方法处理的事情太多,其颗粒度会变得很粗,不利于重用。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="里氏替换原则-lsp" tabindex="-1"><a class="header-anchor" href="#里氏替换原则-lsp"><span>里氏替换原则(LSP)</span></a></h2><p>定义</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>该原则有两个定义</span></span>
<span class="line"><span>第一种</span></span>
<span class="line"><span>    If for each object o1 of type S there is an object o2 of type T such that for all programs Pdefined in terms of T, the behavior of P is unchanged when o1 is substituted for o2 then S is a subtypeof T.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    如果每一个类型S的对象o1,都有一个类型T的对象o2,在以T定义的所有程序P中将所有的对象o2都替换为o1,而程序P的行为没有发生变化,那么S是T的子类</span></span>
<span class="line"><span>第二种</span></span>
<span class="line"><span>    Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    所有引用基类的地方必须能透明地使用其子类对象。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>里氏替换原则是继承复用的基石,它为良好的继承定义了一个规范,定义中包含了4层含义:</p><ol><li><p>子类必须完全实现父类的方法 我们以前做过的项目中,经常定义一个接口或者抽象类,然后编码实现,调用类则直接传入接口或者抽象类,其实这就是已经在使用历史替换原则了</p><p>PS：在类中调用其他类时务必要使用父类或接口,如果不能使用父类或者接口,说明类的设计违背了里氏替换原则。</p></li><li><p>子类中可以增加自己特有的方法 类都有自己的属性和方法,子类当然也不例外。除了从父类继承过来的,可以有自己独有的内容。</p><p>为什么要单独列出来,是因为里氏替换原则是不可以反过来用的。</p><p>也就是子类出现的地方,父类未必可以胜任</p></li><li><p>当子类覆盖或实现父类的方法时,方法的输入参数(方法的形参)要比父类方法的输入参数更宽松。</p></li><li><p>当子类的方法实现父类的抽象方法时,方法的后置条件(即方法的返回值)要比父类更严格。</p></li></ol><p>作用</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>主要作用如下</span></span>
<span class="line"><span>1. 里氏替换原则是实现开闭原则的重要方式之一。</span></span>
<span class="line"><span>2. 它克服了继承中重写父类造成的可复用性变差的缺点。</span></span>
<span class="line"><span>3. 它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误,降低了代码出错的可能性。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>里氏替换原则通俗来讲就是 子类可以扩展父类的功能,但不能改变父类原有的功能。也就是说：子类继承父类时,除添加新的方法完成新增功能外,尽量不要重写父类的方法。</p><pre><code>如果通过重写父类的方法来完成新的功能,这样写起来虽然简单,但是整个继承体系的可复用性会比较差,特别是运用多态比较频繁时,程序运行出错的概率会非常大。

如果程序违背了里氏替换原则,则继承类的对象在基类出现的地方会出现运行错误。

这时其修正方法是取消原来的继承关系,重新设计它们之间的关系。
</code></pre><h2 id="依赖倒置原则-dip" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则-dip"><span>依赖倒置原则(DIP)</span></a></h2><p>定义</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>依赖倒置原则的原始定义为</span></span>
<span class="line"><span>    High level modules shouldnot depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details. Details should depend upon abstractions。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    高级别模块不应该取决于低级别模块。</span></span>
<span class="line"><span>    替代依赖于抽象.Abstractions不应依赖于细节。 </span></span>
<span class="line"><span>    细节应该取决于抽象。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心思想：要面向接口编程,不要面向实现编程。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>依赖倒置原则是实现开闭原则的重要途径之一,它降低了客户与实现模块之间的耦合。</span></span>
<span class="line"><span>由于在软件设计中,细节具有多变性,而抽象层则相对稳定,因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>这里的抽象指的是接口或者抽象类,而细节是指具体的实现类。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>使用接口或者抽象类的目的是制定好规范和契约,而不去涉及任何具体的操作,把展现细节的任务交给它们的实现类去完成。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖倒置原则的作用</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>依赖倒置原则可以降低类间的耦合性。</span></span>
<span class="line"><span>依赖倒置原则可以提高系统的稳定性。</span></span>
<span class="line"><span>依赖倒置原则可以减少并行开发引起的风险。</span></span>
<span class="line"><span>依赖倒置原则可以提高代码的可读性和可维护性。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖倒置原则的实现方法</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性,所以我们在实际编程中只要遵循以下4点,就能在项目中满足这个规则。</span></span>
<span class="line"><span>1. 每个类尽量提供接口或抽象类,或者两者都具备。</span></span>
<span class="line"><span>2. 变量的声明类型尽量是接口或者是抽象类。</span></span>
<span class="line"><span>3. 任何类都不应该从具体类派生。</span></span>
<span class="line"><span>4. 尽量不要覆写基类的方法</span></span>
<span class="line"><span>5. 使用继承时结合里氏替换原则</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="接口隔离原则-isp" tabindex="-1"><a class="header-anchor" href="#接口隔离原则-isp"><span>接口隔离原则(ISP)</span></a></h2><p>定义</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>接口隔离原则要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口,让接口中只包含客户感兴趣的方法。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2002 年罗伯特·C.马丁给“接口隔离原则”的定义是：客户端不应该被迫依赖于它不使用的方法(Clients should not be forced to depend on methods they do not use)。该原则还有另外一个定义：一个类对另一个类的依赖应该建立在最小的接口上(The dependency of one class to another one should depend on the smallest possible interface)。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>以上两个定义的含义是</span></span>
<span class="line"><span>    要为各个类建立它们需要的专用接口,而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性,体现了封装的思想,但两者是不同的:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    单一职责原则注重的是职责,而接口隔离原则注重的是对接口依赖的隔离。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    单一职责原则主要是约束类,它针对的是程序中的实现和细节；</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    接口隔离原则主要约束接口,主要针对抽象和程序整体框架的构建。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>把一个臃肿的接口变为两个独立的接口所依赖的原则就是接口隔离原则</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口隔离的优点</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>接口隔离原则是为了约束接口、降低类对接口的依赖性,遵循接口隔离原则有以下 5 个优点。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1. 将臃肿庞大的接口分解为多个粒度小的接口,可以预防外来变更的扩散,提高系统的灵活性和可维护性。</span></span>
<span class="line"><span>2. 接口隔离提高了系统的内聚性,减少了对外交互,降低了系统的耦合性。</span></span>
<span class="line"><span>3. 如果接口的粒度大小定义合理,能够保证系统的稳定性；但是,如果定义过小,则会造成接口数量过多,使</span></span>
<span class="line"><span>设计复杂化；如果定义太大,灵活性降低,无法提供定制服务,给整体项目带来无法预料的风险。</span></span>
<span class="line"><span>4. 使用多个专门的接口还能够体现对象的层次,因为可以通过接口的继承,实现对总接口的定义。</span></span>
<span class="line"><span>5. 能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法,当实现这个接口的时候,被迫设计冗余的代码。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口隔离原则的实现方法</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>在具体应用接口隔离原则时,应该根据以下几个规则来衡量。</span></span>
<span class="line"><span>接口尽量小,但是要有限度. 一个接口只服务于一个子模块或业务逻辑。</span></span>
<span class="line"><span>为依赖接口的类定制服务.只提供调用者需要的方法,屏蔽不需要的方法。</span></span>
<span class="line"><span>了解环境,拒绝盲从。每个项目或产品都有选定的环境因素,环境不同,接口拆分的标准就不同深入了解业务逻辑。</span></span>
<span class="line"><span>提高内聚,减少对外交互。使接口用最少的方法去完成最多的事情。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="迪米特法则-lod" tabindex="-1"><a class="header-anchor" href="#迪米特法则-lod"><span>迪米特法则(LoD)</span></a></h2><p>定义</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>迪米特法则(Law of Demeter,LoD)又叫作最少知识原则(Least Knowledge Principle,LKP),产生于 1987 年美国东北大学(Northeastern University)的一个名为迪米特(Demeter)的研究项目,由伊恩·荷兰(Ian Holland)提出,它要求一个对象应该对其他对象有最少的了解。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>通俗的说,一个类应该对自己需要耦合或调用的类知道的最少,被耦合或调用的类的内部是如何复杂都与我无关,我就知道你提供的public方法就好。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>迪米特法则还是在讲如何减少耦合的问题,类之间的耦合越弱,越有利于复用,一个处在弱耦合的类被修改,不会对有关系的类造成波及。也就是说,信息的隐藏促进了软件的复用。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>迪米特法则还有一个定义是</span></span>
<span class="line"><span>    只与你的直接朋友交谈,不跟“陌生人”说话(Talk only to your immediate friends and not to strangers).</span></span>
<span class="line"><span>    其含义是：如果两个软件实体无须直接通信,那么就不应当发生直接的相互调用,可以通过第三方转发该调用。其目的是降低类之间的耦合度,提高模块的相对独立性</span></span>
<span class="line"><span></span></span>
<span class="line"><span>每个对象都必然会和其他对象有耦合关系,两个对象之间的耦合就 成为朋友关系,这种关系有很多比如组合、聚合、依赖等等。包括以下几类：</span></span>
<span class="line"><span>1. 当前对象本身(this)</span></span>
<span class="line"><span>2. 当前对象的方法参数(以参数形式传入到当前对象方法中的对象)</span></span>
<span class="line"><span>3. 当前对象的成员对象</span></span>
<span class="line"><span>4. 如果当前对象的成员对象是一个集合,那么集合中的元素也都是朋友</span></span>
<span class="line"><span>5. 当前对象所创建的对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>降低了类之间的耦合度,提高了模块的相对独立性。</span></span>
<span class="line"><span>由于亲合度降低,从而提高了类的可复用率和系统的扩展性。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>但是,过度使用迪米特法则会使系统产生大量的中介类,从而增加系统的复杂性,使模块之间的通信效率降低。所以,在釆用迪米特法则时需要反复权衡,确保高内聚和低耦合的同时,保证系统的结构清晰。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现方法</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>从迪米特法则的定义和特点可知,它强调以下两点：</span></span>
<span class="line"><span>1. 从依赖者的角度来说,只依赖应该依赖的对象。</span></span>
<span class="line"><span>2. 从被依赖者的角度说,只暴露应该暴露的方法。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>所以在运用迪米特法则时要注意以下 6 点:</span></span>
<span class="line"><span>1. 在类的划分上,应该创建弱耦合的类。类与类之间的耦合越弱,就越有利于实现可复用的目标。</span></span>
<span class="line"><span>2. 在类的结构设计上,尽量降低类成员的访问权限。</span></span>
<span class="line"><span>3. 在类的设计上,优先考虑将一个类设置成不变类。</span></span>
<span class="line"><span>4. 在对其他类的引用上,将引用其他对象的次数降到最低。</span></span>
<span class="line"><span>5. 不暴露类的属性成员,而应该提供相应的访问器(set 和 get 方法)。</span></span>
<span class="line"><span>6. 谨慎使用序列化(Serializable)功能。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,45),p=[l];function d(r,c){return a(),n("div",null,p)}const h=s(e,[["render",d],["__file","设计模式和六大原则.html.vue"]]),b=JSON.parse('{"path":"/dev/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99.html","title":"设计模式","lang":"zh-CN","frontmatter":{"icon":"book","date":"2024-07-22T00:00:00.000Z","category":["后端开发","设计模式"],"tag":["设计模式","java"],"description":"设计模式 简介 开闭原则(OCP) 定义 开闭原则的作用 单一职责原则(SRP) 定义 单一职责的优点 里氏替换原则(LSP) 定义 里氏替换原则是继承复用的基石,它为良好的继承定义了一个规范,定义中包含了4层含义: 子类必须完全实现父类的方法 我们以前做过的项目中,经常定义一个接口或者抽象类,然后编码实现,调用类则直接传入接口或者抽象类,其实这就是已...","head":[["meta",{"property":"og:url","content":"https://jia-shuaijie.github.io/dev/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99.html"}],["meta",{"property":"og:site_name","content":"黑色的小火苗"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"设计模式 简介 开闭原则(OCP) 定义 开闭原则的作用 单一职责原则(SRP) 定义 单一职责的优点 里氏替换原则(LSP) 定义 里氏替换原则是继承复用的基石,它为良好的继承定义了一个规范,定义中包含了4层含义: 子类必须完全实现父类的方法 我们以前做过的项目中,经常定义一个接口或者抽象类,然后编码实现,调用类则直接传入接口或者抽象类,其实这就是已..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T13:09:27.000Z"}],["meta",{"property":"article:author","content":"黑色的小火苗"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-07-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T13:09:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T13:09:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑色的小火苗\\",\\"url\\":\\"https://jia-shuaijie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"开闭原则(OCP)","slug":"开闭原则-ocp","link":"#开闭原则-ocp","children":[]},{"level":2,"title":"单一职责原则(SRP)","slug":"单一职责原则-srp","link":"#单一职责原则-srp","children":[]},{"level":2,"title":"里氏替换原则(LSP)","slug":"里氏替换原则-lsp","link":"#里氏替换原则-lsp","children":[]},{"level":2,"title":"依赖倒置原则(DIP)","slug":"依赖倒置原则-dip","link":"#依赖倒置原则-dip","children":[]},{"level":2,"title":"接口隔离原则(ISP)","slug":"接口隔离原则-isp","link":"#接口隔离原则-isp","children":[]},{"level":2,"title":"迪米特法则(LoD)","slug":"迪米特法则-lod","link":"#迪米特法则-lod","children":[]}],"git":{"createdTime":1721653767000,"updatedTime":1721653767000,"contributors":[{"name":"黑色的小火苗","email":"jiashuaijie@yeah.net","commits":1}]},"readingTime":{"minutes":13.43,"words":4028},"filePathRelative":"dev/java/设计模式/设计模式和六大原则.md","localizedDate":"2024年7月22日","excerpt":"\\n<p>简介</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>设计模式(Design Pattern) 简称 DP</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>概念</span></span>\\n<span class=\\"line\\"><span>    软件设计模式(Design pattern),又称设计模式,是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。 (-- 来自百度百科)</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>设计模式有六大原则</span></span>\\n<span class=\\"line\\"><span>    开闭原则 (Open Closed Principle 简写为 OCP)</span></span>\\n<span class=\\"line\\"><span>    单一职责原则(Single responsibility principle 简写为 SRP)</span></span>\\n<span class=\\"line\\"><span>    里氏替换原则(Liskov Substitution Principle 简写为 LSP)</span></span>\\n<span class=\\"line\\"><span>    依赖倒置原则(Dependence Inversion Principle 简写为 DIP)</span></span>\\n<span class=\\"line\\"><span>    接口隔离原则(Interface Segregation Principle 简写为 ISP)</span></span>\\n<span class=\\"line\\"><span>    迪米特法则(Law of Demeter 简写为 LoD)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{h as comp,b as data};
