import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as i,a}from"./app-QGmvmOnY.js";const l={},d=a(`<h1 id="android系列之ui" tabindex="-1"><a class="header-anchor" href="#android系列之ui"><span>Android系列之UI</span></a></h1><blockquote><p>学习于: <a href="http://8.136.122.222/book/primary/" target="_blank" rel="noopener noreferrer">http://8.136.122.222/book/primary/</a></p></blockquote><p>android的UI可以分为两类,一类叫做ViewGroup容器,一类叫做View视图.</p><ul><li>View视图: TextView,Button,InageView都是常见的视图.</li><li>ViewGroup视图: 内部可以承载/放置/添加View视图.</li></ul><p>基础布局容易</p><ul><li>LinearLayout线性布局: 横着或竖着按顺序排列.</li><li>RelativceLayout相对布局: 起始坐标时屏幕左上角,以同级或上级为参考系定位位置.</li><li>FrameLayout帧布局: 像千层饼一样,一层压着一层.</li><li>ConstrainLayout约束布局: Google于2016年新发布的一种布局方式,它不在android的基础api包里,需额外引入.</li><li><s>AbsoluteLayout</s>绝对布局: 以屏幕左上角为参考系,定位自己的位置,android2.2后废弃.</li><li><s>GridLayout</s>网格布局: 可以指定行数列数,子控件自动根据行列数进行分配位置,于android 4.0后新增进api中</li><li><s>TableLayout</s>表格布局: 类似于网格布局,以一个TableRow标签定义为一行或一列.</li></ul><h2 id="linearlayout线性布局" tabindex="-1"><a class="header-anchor" href="#linearlayout线性布局"><span>LinearLayout线性布局</span></a></h2><p>线性布局就是<strong>从左到右</strong>或<strong>从上到下</strong>按顺序排列的一种布局.</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">可选值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">orientaion</td><td style="text-align:left;">vertical: 垂直排列 horizontal: 水平排列</td><td style="text-align:left;">也就是这个线性布局到底是水平还是垂直方向逐个排列</td></tr><tr><td style="text-align:left;">layout_width layout_height</td><td style="text-align:left;">1. match_parent: 填充父容器的剩余空间 2. wrap_content: 根据子视图宽高自适应自己的宽高 3. 自定义大小 单位为<code>dp</code></td><td style="text-align:left;">layout_width和layout_height 是android中控件的必要属性,规定了控件的宽度和高度,这两个的属性的值可以是自定的值,也可以根据内容自适应,还可以填充整个剩余空间.</td></tr><tr><td style="text-align:left;">background</td><td style="text-align:left;">#ff0000 红色</td><td style="text-align:left;">填充背景色</td></tr><tr><td style="text-align:left;">gravity</td><td style="text-align:left;">1.center：所有子视图相对于父容器居中显示 2.horizontal_center:所有子容器的横向方向上相对父容器居中显示 3.vertical_center:所有子视图的纵向方向上相对父容器居中显示</td><td style="text-align:left;">决定子控件相对该父容器的位置</td></tr><tr><td style="text-align:left;">layout_gravity</td><td style="text-align:left;">1.center：该容器相对于它的父容器居中显示 2.horizontal_center:该容器横向方向上相对它的父容器居中显示 3.vertical_center:该容器纵向方向上相对它的父容器居中显示</td><td style="text-align:left;">决定该容器相对它的父容器的位置</td></tr><tr><td style="text-align:left;">weight</td><td style="text-align:left;"></td><td style="text-align:left;">按比例分配父容器剩余的宽度或高度</td></tr></tbody></table><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;?</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;1.0&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">LinearLayout</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> xmlns:android</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://schemas.android.com/apk/res/android&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">    android:layout_width</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;match_parent&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">    android:layout_height</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;match_parent&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">    android:gravity</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;center&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            //子视图相对父视图居中显示</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">    android:orientation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;horizontal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;   //所有子视图横向摆放</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">     .........  省略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">LinearLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相对布局relativelayout" tabindex="-1"><a class="header-anchor" href="#相对布局relativelayout"><span>相对布局RelativeLayout</span></a></h2><p>相对布局在摆放子视图位置时，按照指定的参考系来摆放子视图的位置，默认以屏幕左上角(0,0)位置作为参考系摆放位置</p><h3 id="相对于父元素-7个常用属性" tabindex="-1"><a class="header-anchor" href="#相对于父元素-7个常用属性"><span>相对于父元素 7个常用属性</span></a></h3><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:center;">可选值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">layout_alignParentTop</td><td style="text-align:center;">true/false</td><td style="text-align:left;">是否让控件相对于父容器顶部对齐</td></tr><tr><td style="text-align:left;">layout_alignParentBottom</td><td style="text-align:center;">true/false</td><td style="text-align:left;">是否让控件相对于父容器底部对齐</td></tr><tr><td style="text-align:left;">layout_alignParentLeft</td><td style="text-align:center;">true/false</td><td style="text-align:left;">是否让控件相对于父容器左边对齐</td></tr><tr><td style="text-align:left;">layout_alignParentRight</td><td style="text-align:center;">true/false</td><td style="text-align:left;">是否让控件相对于父容器右边对齐</td></tr><tr><td style="text-align:left;">layout_centerHorizontal</td><td style="text-align:center;">true/false</td><td style="text-align:left;">相对父容器水平居中显示</td></tr><tr><td style="text-align:left;">layout_centerVertical</td><td style="text-align:center;">true/false</td><td style="text-align:left;">相对父容器垂直居中显示</td></tr><tr><td style="text-align:left;">centerInParent</td><td style="text-align:center;">true/false</td><td style="text-align:left;">相对父容器居中显示</td></tr></tbody></table><h3 id="相对于兄弟元素-4个常用属性" tabindex="-1"><a class="header-anchor" href="#相对于兄弟元素-4个常用属性"><span>相对于兄弟元素 4个常用属性</span></a></h3><table><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>layout_above</td><td>@+id/</td><td>指定在那个控件的上侧</td></tr><tr><td>layout_below</td><td>@+id/</td><td>指定在那个控件的上侧</td></tr><tr><td>android:layout_toLeftOf</td><td>@+id/</td><td>指定在那个控件的左侧</td></tr><tr><td>android:layout_toRightOf</td><td>@+id/</td><td>指定在那个控件的右侧</td></tr></tbody></table><h3 id="相对于兄弟元素的对齐方式" tabindex="-1"><a class="header-anchor" href="#相对于兄弟元素的对齐方式"><span>相对于兄弟元素的对齐方式</span></a></h3><table><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>layout_alignLeft</td><td>@+id/</td><td>该控件的左边沿与指定控件的左边对齐</td></tr><tr><td>layout_aliginRight</td><td>@+id/</td><td>该控件的右边沿与指定控件的右边对齐</td></tr><tr><td>layout_alignTop</td><td>@+id/</td><td>该控件的上边沿与指定控件的上边沿对齐</td></tr><tr><td>layout_alignBottom</td><td>@+id/</td><td>该控件的下边沿与指定控件的下边沿对齐</td></tr></tbody></table><h2 id="帧布局framelayout" tabindex="-1"><a class="header-anchor" href="#帧布局framelayout"><span>帧布局FrameLayout</span></a></h2><p>组件的默认位置都是左上角，组件之间可以重叠。</p><p>像千层饼一样，一层压着一层 可以设置上下左右的对齐、水平垂直居中、设置方式与线性布局相似</p><table><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>layout_gravity</td><td>center/center_vertical/center_horizontal</td><td>组件相对父容器的位置</td></tr><tr><td>layout_marginLeft</td><td>具体的数值100dp</td><td>左侧外间距</td></tr><tr><td>layout_marginTop</td><td>具体的数值100dp</td><td>上侧外间距</td></tr><tr><td>layout_marginRight</td><td>具体的数值100dp</td><td>右侧外间距</td></tr><tr><td>layout_marginBottom</td><td>具体的数值100dp</td><td>下侧外间距</td></tr></tbody></table>`,22),n=[d];function s(r,o){return i(),e("div",null,n)}const y=t(l,[["render",s],["__file","android-ui.html.vue"]]),g=JSON.parse('{"path":"/dev/android/android-ui.html","title":"Android系列之UI","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-07-23T00:00:00.000Z","category":["android"],"order":2,"description":"Android系列之UI 学习于: http://8.136.122.222/book/primary/ android的UI可以分为两类,一类叫做ViewGroup容器,一类叫做View视图. View视图: TextView,Button,InageView都是常见的视图. ViewGroup视图: 内部可以承载/放置/添加View视图. 基础布局...","head":[["meta",{"property":"og:url","content":"https://jia-shuaijie.github.io/dev/android/android-ui.html"}],["meta",{"property":"og:site_name","content":"黑色的小火苗"}],["meta",{"property":"og:title","content":"Android系列之UI"}],["meta",{"property":"og:description","content":"Android系列之UI 学习于: http://8.136.122.222/book/primary/ android的UI可以分为两类,一类叫做ViewGroup容器,一类叫做View视图. View视图: TextView,Button,InageView都是常见的视图. ViewGroup视图: 内部可以承载/放置/添加View视图. 基础布局..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-25T07:32:12.000Z"}],["meta",{"property":"article:author","content":"黑色的小火苗"}],["meta",{"property":"article:published_time","content":"2024-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-25T07:32:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Android系列之UI\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-25T07:32:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑色的小火苗\\",\\"url\\":\\"https://jia-shuaijie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"LinearLayout线性布局","slug":"linearlayout线性布局","link":"#linearlayout线性布局","children":[]},{"level":2,"title":"相对布局RelativeLayout","slug":"相对布局relativelayout","link":"#相对布局relativelayout","children":[{"level":3,"title":"相对于父元素 7个常用属性","slug":"相对于父元素-7个常用属性","link":"#相对于父元素-7个常用属性","children":[]},{"level":3,"title":"相对于兄弟元素 4个常用属性","slug":"相对于兄弟元素-4个常用属性","link":"#相对于兄弟元素-4个常用属性","children":[]},{"level":3,"title":"相对于兄弟元素的对齐方式","slug":"相对于兄弟元素的对齐方式","link":"#相对于兄弟元素的对齐方式","children":[]}]},{"level":2,"title":"帧布局FrameLayout","slug":"帧布局framelayout","link":"#帧布局framelayout","children":[]}],"git":{"createdTime":1721892732000,"updatedTime":1721892732000,"contributors":[{"name":"黑色的小火苗","email":"jiashuaijie@yeah.net","commits":1}]},"readingTime":{"minutes":3.86,"words":1158},"filePathRelative":"dev/android/android-ui.md","localizedDate":"2024年7月23日","excerpt":"\\n<blockquote>\\n<p>学习于: <a href=\\"http://8.136.122.222/book/primary/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">http://8.136.122.222/book/primary/</a></p>\\n</blockquote>\\n<p>android的UI可以分为两类,一类叫做ViewGroup容器,一类叫做View视图.</p>\\n<ul>\\n<li>View视图: TextView,Button,InageView都是常见的视图.</li>\\n<li>ViewGroup视图: 内部可以承载/放置/添加View视图.</li>\\n</ul>","autoDesc":true}');export{y as comp,g as data};
